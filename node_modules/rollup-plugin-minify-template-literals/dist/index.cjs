"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/index.ts
var lib_exports = {};
__export(lib_exports, {
  RollupPluginMinifyHTMLLiterals: () => RollupPluginMinifyHTMLLiterals2,
  default: () => lib_default,
  minifyHTMLLiterals: () => minifyHTMLLiterals2,
  minifyTemplateLiterals: () => minifyTemplateLiterals
});
module.exports = __toCommonJS(lib_exports);
var minify = __toESM(require("minify-literals"), 1);
var import_pluginutils = require("@rollup/pluginutils");
var minifyTemplateLiterals = function RollupPluginMinifyHTMLLiterals(options = {}) {
  options.minifyHTMLLiterals = options.minifyHTMLLiterals || minify.minifyHTMLLiterals;
  options.filter = options.filter || (0, import_pluginutils.createFilter)(options.include, options.exclude);
  const minifyOptions = options.options || {};
  return {
    name: "minify-literals",
    async transform(code, id) {
      if (!options.filter?.(id))
        return;
      try {
        const res = await options.minifyHTMLLiterals(code, {
          ...minifyOptions,
          fileName: id
        });
        if (res === null || res?.code === code)
          return {};
        return {
          code: res.code,
          map: res.map
        };
      } catch (error) {
        if (!(error instanceof Error))
          return;
        (options.failOnError ? this.error : this.warn)(error.message);
      }
      return {};
    }
  };
};
var lib_default = minifyTemplateLiterals;
var RollupPluginMinifyHTMLLiterals2 = minifyTemplateLiterals;
var minifyHTMLLiterals2 = minifyTemplateLiterals;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  RollupPluginMinifyHTMLLiterals,
  minifyHTMLLiterals,
  minifyTemplateLiterals
});
//# sourceMappingURL=index.cjs.map
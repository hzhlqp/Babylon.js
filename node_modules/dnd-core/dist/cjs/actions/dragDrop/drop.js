"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDrop = void 0;
const invariant_1 = require("@react-dnd/invariant");
const types_1 = require("./types");
const js_utils_1 = require("../../utils/js_utils");
function createDrop(manager) {
    return function drop(options = {}) {
        const monitor = manager.getMonitor();
        const registry = manager.getRegistry();
        verifyInvariants(monitor);
        const targetIds = getDroppableTargets(monitor);
        // Multiple actions are dispatched here, which is why this doesn't return an action
        targetIds.forEach((targetId, index) => {
            const dropResult = determineDropResult(targetId, index, registry, monitor);
            const action = {
                type: types_1.DROP,
                payload: {
                    dropResult: {
                        ...options,
                        ...dropResult,
                    },
                },
            };
            manager.dispatch(action);
        });
    };
}
exports.createDrop = createDrop;
function verifyInvariants(monitor) {
    (0, invariant_1.invariant)(monitor.isDragging(), 'Cannot call drop while not dragging.');
    (0, invariant_1.invariant)(!monitor.didDrop(), 'Cannot call drop twice during one drag operation.');
}
function determineDropResult(targetId, index, registry, monitor) {
    const target = registry.getTarget(targetId);
    let dropResult = target ? target.drop(monitor, targetId) : undefined;
    verifyDropResultType(dropResult);
    if (typeof dropResult === 'undefined') {
        dropResult = index === 0 ? {} : monitor.getDropResult();
    }
    return dropResult;
}
function verifyDropResultType(dropResult) {
    (0, invariant_1.invariant)(typeof dropResult === 'undefined' || (0, js_utils_1.isObject)(dropResult), 'Drop result must either be an object or undefined.');
}
function getDroppableTargets(monitor) {
    const targetIds = monitor
        .getTargetIds()
        .filter(monitor.canDropOnTarget, monitor);
    targetIds.reverse();
    return targetIds;
}

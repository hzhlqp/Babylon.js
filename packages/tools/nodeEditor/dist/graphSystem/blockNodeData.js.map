{"version":3,"file":"blockNodeData.js","sourceRoot":"","sources":["../../src/graphSystem/blockNodeData.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeMaterialBlockTargets } from \"core/Materials/Node/Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialBlock } from \"core/Materials/Node/nodeMaterialBlock\";\r\nimport type { INodeContainer } from \"shared-ui-components/nodeGraphSystem/interfaces/nodeContainer\";\r\nimport type { INodeData } from \"shared-ui-components/nodeGraphSystem/interfaces/nodeData\";\r\nimport type { IPortData } from \"shared-ui-components/nodeGraphSystem/interfaces/portData\";\r\nimport { ConnectionPointPortData } from \"./connectionPointPortData\";\r\nimport triangle from \"../imgs/triangle.svg\";\r\nimport square from \"../imgs/square.svg\";\r\nimport styles from \"./blockNodeData.modules.scss\";\r\nimport type { NodeMaterialTeleportOutBlock } from \"core/Materials/Node/Blocks/Teleport/teleportOutBlock\";\r\nimport type { NodeMaterialTeleportInBlock } from \"core/Materials/Node/Blocks/Teleport/teleportInBlock\";\r\n\r\nexport class BlockNodeData implements INodeData {\r\n    private _inputs: IPortData[] = [];\r\n    private _outputs: IPortData[] = [];\r\n\r\n    public get uniqueId(): number {\r\n        return this.data.uniqueId;\r\n    }\r\n\r\n    public get name() {\r\n        return this.data.name;\r\n    }\r\n\r\n    public getClassName() {\r\n        return this.data.getClassName();\r\n    }\r\n\r\n    public get isInput() {\r\n        return this.data.isInput;\r\n    }\r\n\r\n    public get inputs() {\r\n        return this._inputs;\r\n    }\r\n\r\n    public get outputs() {\r\n        return this._outputs;\r\n    }\r\n\r\n    public get comments() {\r\n        return this.data.comments;\r\n    }\r\n\r\n    public set comments(value: string) {\r\n        this.data.comments = value;\r\n    }\r\n\r\n    public get executionTime() {\r\n        return -1;\r\n    }\r\n\r\n    public getPortByName(name: string) {\r\n        for (const input of this.inputs) {\r\n            if (input.internalName === name) {\r\n                return input;\r\n            }\r\n        }\r\n        for (const output of this.outputs) {\r\n            if (output.internalName === name) {\r\n                return output;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public dispose() {\r\n        this.data.dispose();\r\n    }\r\n\r\n    public prepareHeaderIcon(iconDiv: HTMLDivElement, img: HTMLImageElement) {\r\n        if (this.data.getClassName() === \"ElbowBlock\") {\r\n            iconDiv.classList.add(styles.hidden);\r\n            return;\r\n        }\r\n\r\n        if (this.data.target === NodeMaterialBlockTargets.Fragment) {\r\n            iconDiv.title = \"In the fragment shader\";\r\n            img.src = square;\r\n\r\n            return;\r\n        }\r\n\r\n        if (this.data.target === NodeMaterialBlockTargets.Vertex) {\r\n            iconDiv.title = \"In the vertex shader\";\r\n            img.src = triangle;\r\n\r\n            return;\r\n        }\r\n\r\n        iconDiv.classList.add(styles.hidden);\r\n    }\r\n\r\n    public get invisibleEndpoints(): NodeMaterialTeleportOutBlock[] | null {\r\n        if (this.data.isTeleportIn) {\r\n            const teleportIn = this.data as NodeMaterialTeleportInBlock;\r\n            return teleportIn.endpoints;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public constructor(\r\n        public data: NodeMaterialBlock,\r\n        nodeContainer: INodeContainer\r\n    ) {\r\n        if (data.inputs) {\r\n            this.data.inputs.forEach((input) => {\r\n                this._inputs.push(new ConnectionPointPortData(input, nodeContainer));\r\n            });\r\n        }\r\n\r\n        if (data.outputs && !this.data.isTeleportIn) {\r\n            this.data.outputs.forEach((output) => {\r\n                this._outputs.push(new ConnectionPointPortData(output, nodeContainer));\r\n            });\r\n        }\r\n    }\r\n}\r\n"]}
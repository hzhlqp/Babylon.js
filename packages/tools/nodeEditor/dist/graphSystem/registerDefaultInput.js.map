{"version":3,"file":"registerDefaultInput.js","sourceRoot":"","sources":["../../src/graphSystem/registerDefaultInput.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,6CAA6C,CAAC;AACzE,OAAO,EAAE,qCAAqC,EAAE,MAAM,iEAAiE,CAAC;AAMxH,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAEhD,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,YAA0B,EAAE,EAAE;IAC/D,YAAY,CAAC,sBAAsB,GAAG,CAAC,QAAa,EAAE,QAAmB,EAAE,aAA6B,EAAE,EAAE;QACxG,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAmC,CAAC;QAC3D,MAAM,gBAAgB,GAAG,KAAK,CAAC,sBAAsB,EAAE,CAAC;QACxD,IAAI,SAAS,GAAG,QAAQ,CAAC;QACzB,IAAI,YAAY,CAAC;QAEjB,IAAI,CAAC,gBAAgB,EAAE;YACnB,IAAI,KAAK,CAAC,IAAI,KAAK,qCAAqC,CAAC,UAAU,EAAE;gBACjE,OAAO,IAAI,CAAC;aACf;YACD,YAAY,GAAG,IAAI,UAAU,CAAC,qCAAqC,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;SAC3G;aAAM;YACH,CAAC,YAAY,EAAE,SAAS,CAAC,GAAG,gBAAgB,CAAC;SAChD;QAED,MAAM,YAAY,GAAI,QAAwB,CAAC,YAAY,CAAC;QAC5D,YAAY,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC/C,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;YACvB,YAAY,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;SAC5C;QAED,OAAO;YACH,IAAI,EAAE,IAAI,aAAa,CAAC,YAAY,EAAE,aAAa,CAAC;YACpD,IAAI,EAAE,SAAS;SAClB,CAAC;IACN,CAAC,CAAC;AACN,CAAC,CAAC","sourcesContent":["import { InputBlock } from \"core/Materials/Node/Blocks/Input/inputBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"core/Materials/Node/Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialConnectionPoint } from \"core/Materials/Node/nodeMaterialBlockConnectionPoint\";\r\nimport type { GlobalState } from \"../globalState\";\r\nimport type { INodeContainer } from \"shared-ui-components/nodeGraphSystem/interfaces/nodeContainer\";\r\nimport type { IPortData } from \"shared-ui-components/nodeGraphSystem/interfaces/portData\";\r\nimport type { StateManager } from \"shared-ui-components/nodeGraphSystem/stateManager\";\r\nimport { BlockNodeData } from \"./blockNodeData\";\r\n\r\nexport const RegisterDefaultInput = (stateManager: StateManager) => {\r\n    stateManager.createDefaultInputData = (rootData: any, portData: IPortData, nodeContainer: INodeContainer) => {\r\n        const point = portData.data as NodeMaterialConnectionPoint;\r\n        const customInputBlock = point.createCustomInputBlock();\r\n        let pointName = \"output\";\r\n        let emittedBlock;\r\n\r\n        if (!customInputBlock) {\r\n            if (point.type === NodeMaterialBlockConnectionPointTypes.AutoDetect) {\r\n                return null;\r\n            }\r\n            emittedBlock = new InputBlock(NodeMaterialBlockConnectionPointTypes[point.type], undefined, point.type);\r\n        } else {\r\n            [emittedBlock, pointName] = customInputBlock;\r\n        }\r\n\r\n        const nodeMaterial = (rootData as GlobalState).nodeMaterial;\r\n        nodeMaterial.attachedBlocks.push(emittedBlock);\r\n        if (!emittedBlock.isInput) {\r\n            emittedBlock.autoConfigure(nodeMaterial);\r\n        }\r\n\r\n        return {\r\n            data: new BlockNodeData(emittedBlock, nodeContainer),\r\n            name: pointName,\r\n        };\r\n    };\r\n};\r\n"]}
{"version":3,"file":"inputDisplayManager.js","sourceRoot":"","sources":["../../../src/graphSystem/display/inputDisplayManager.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { InputBlock } from \"core/Materials/Node/Blocks/Input/inputBlock\";\r\nimport { NodeMaterialSystemValues } from \"core/Materials/Node/Enums/nodeMaterialSystemValues\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"core/Materials/Node/Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport { AnimatedInputBlockTypes } from \"core/Materials/Node/Blocks/Input/animatedInputBlockTypes\";\r\nimport type { Vector2, Vector3, Vector4 } from \"core/Maths/math.vector\";\r\nimport type { Color3 } from \"core/Maths/math.color\";\r\nimport { BlockTools } from \"../../blockTools\";\r\nimport type { IDisplayManager } from \"shared-ui-components/nodeGraphSystem/interfaces/displayManager\";\r\nimport type { INodeData } from \"shared-ui-components/nodeGraphSystem/interfaces/nodeData\";\r\nimport styles from \"./inputDisplayManager.modules.scss\";\r\n\r\nconst inputNameToAttributeValue: { [name: string]: string } = {\r\n    position2d: \"position\",\r\n    particle_uv: \"uv\",\r\n    particle_color: \"color\",\r\n    particle_texturemask: \"textureMask\",\r\n    particle_positionw: \"positionW\",\r\n};\r\n\r\nconst inputNameToAttributeName: { [name: string]: string } = {\r\n    position2d: \"screen\",\r\n    particle_uv: \"particle\",\r\n    particle_color: \"particle\",\r\n    particle_texturemask: \"particle\",\r\n    particle_positionw: \"particle\",\r\n};\r\n\r\nexport class InputDisplayManager implements IDisplayManager {\r\n    public getHeaderClass(nodeData: INodeData) {\r\n        const inputBlock = nodeData.data as InputBlock;\r\n\r\n        if (inputBlock.isConstant) {\r\n            return styles[\"constant\"];\r\n        }\r\n\r\n        if (inputBlock.visibleInInspector) {\r\n            return styles[\"inspector\"];\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    public shouldDisplayPortLabels(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getHeaderText(nodeData: INodeData): string {\r\n        const inputBlock = nodeData.data as InputBlock;\r\n        let name = `${inputBlock.name} (${InputDisplayManager.GetBaseType(inputBlock.output.type)})`;\r\n\r\n        if (inputBlock.isAttribute) {\r\n            name = InputDisplayManager.GetBaseType(inputBlock.output.type);\r\n        }\r\n\r\n        return name;\r\n    }\r\n\r\n    public static GetBaseType(type: NodeMaterialBlockConnectionPointTypes): string {\r\n        return NodeMaterialBlockConnectionPointTypes[type];\r\n    }\r\n\r\n    public getBackgroundColor(nodeData: INodeData): string {\r\n        let color = \"\";\r\n        const inputBlock = nodeData.data as InputBlock;\r\n\r\n        switch (inputBlock.type) {\r\n            case NodeMaterialBlockConnectionPointTypes.Color3:\r\n            case NodeMaterialBlockConnectionPointTypes.Color4: {\r\n                if (inputBlock.value) {\r\n                    color = (inputBlock.value as Color3).toHexString();\r\n                    break;\r\n                }\r\n            }\r\n            // eslint-disable-next-line no-fallthrough\r\n            default:\r\n                color = BlockTools.GetColorFromConnectionNodeType(inputBlock.type);\r\n                break;\r\n        }\r\n\r\n        return color;\r\n    }\r\n\r\n    public updatePreviewContent(nodeData: INodeData, contentArea: HTMLDivElement): void {\r\n        let value = \"\";\r\n        const inputBlock = nodeData.data as InputBlock;\r\n\r\n        if (inputBlock.isAttribute) {\r\n            const attrVal = inputNameToAttributeValue[inputBlock.name] ?? inputBlock.name;\r\n            const attrName = inputNameToAttributeName[inputBlock.name] ?? \"mesh\";\r\n            value = attrName + \".\" + attrVal;\r\n        } else if (inputBlock.isSystemValue) {\r\n            switch (inputBlock.systemValue) {\r\n                case NodeMaterialSystemValues.World:\r\n                    value = \"World\";\r\n                    break;\r\n                case NodeMaterialSystemValues.WorldView:\r\n                    value = \"World x View\";\r\n                    break;\r\n                case NodeMaterialSystemValues.WorldViewProjection:\r\n                    value = \"World x View x Projection\";\r\n                    break;\r\n                case NodeMaterialSystemValues.View:\r\n                    value = \"View\";\r\n                    break;\r\n                case NodeMaterialSystemValues.ViewProjection:\r\n                    value = \"View x Projection\";\r\n                    break;\r\n                case NodeMaterialSystemValues.Projection:\r\n                    value = \"Projection\";\r\n                    break;\r\n                case NodeMaterialSystemValues.CameraPosition:\r\n                    value = \"Camera position\";\r\n                    break;\r\n                case NodeMaterialSystemValues.FogColor:\r\n                    value = \"Fog color\";\r\n                    break;\r\n                case NodeMaterialSystemValues.DeltaTime:\r\n                    value = \"Delta time\";\r\n                    break;\r\n                case NodeMaterialSystemValues.CameraParameters:\r\n                    value = \"Camera parameters\";\r\n                    break;\r\n                case NodeMaterialSystemValues.MaterialAlpha:\r\n                    value = \"Material alpha\";\r\n                    break;\r\n            }\r\n        } else {\r\n            switch (inputBlock.type) {\r\n                case NodeMaterialBlockConnectionPointTypes.Float:\r\n                    if (inputBlock.animationType !== AnimatedInputBlockTypes.None) {\r\n                        value = AnimatedInputBlockTypes[inputBlock.animationType];\r\n                    } else {\r\n                        value = inputBlock.value.toFixed(4);\r\n                    }\r\n                    break;\r\n                case NodeMaterialBlockConnectionPointTypes.Vector2: {\r\n                    const vec2Value = inputBlock.value as Vector2;\r\n                    value = `(${vec2Value.x.toFixed(2)}, ${vec2Value.y.toFixed(2)})`;\r\n                    break;\r\n                }\r\n                case NodeMaterialBlockConnectionPointTypes.Vector3: {\r\n                    const vec3Value = inputBlock.value as Vector3;\r\n                    value = `(${vec3Value.x.toFixed(2)}, ${vec3Value.y.toFixed(2)}, ${vec3Value.z.toFixed(2)})`;\r\n                    break;\r\n                }\r\n                case NodeMaterialBlockConnectionPointTypes.Vector4: {\r\n                    if (inputBlock.animationType !== AnimatedInputBlockTypes.None) {\r\n                        value = AnimatedInputBlockTypes[inputBlock.animationType];\r\n                    } else {\r\n                        const vec4Value = inputBlock.value as Vector4;\r\n                        value = `(${vec4Value.x.toFixed(2)}, ${vec4Value.y.toFixed(2)}, ${vec4Value.z.toFixed(2)}, ${vec4Value.w.toFixed(2)})`;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        contentArea.innerHTML = value;\r\n        contentArea.classList.add(styles[\"input-block\"]);\r\n    }\r\n}\r\n"]}
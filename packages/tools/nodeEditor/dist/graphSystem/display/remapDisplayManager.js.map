{"version":3,"file":"remapDisplayManager.js","sourceRoot":"","sources":["../../../src/graphSystem/display/remapDisplayManager.ts"],"names":[],"mappings":"AAMA,OAAO,MAAM,MAAM,oCAAoC,CAAC;AAExD,MAAM,OAAO,mBAAmB;IACrB,cAAc;QACjB,OAAO,EAAE,CAAC;IACd,CAAC;IAEM,uBAAuB;QAC1B,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,aAAa,CAAC,QAAmB;QACpC,OAAQ,QAAQ,CAAC,IAA0B,CAAC,IAAI,CAAC;IACrD,CAAC;IAEM,kBAAkB;QACrB,OAAO,SAAS,CAAC;IACrB,CAAC;IAEO,kBAAkB,CAAC,eAA4C;QACnE,MAAM,cAAc,GAAG,eAAe,CAAC,cAAe,CAAC,UAAU,CAAC;QAElE,IAAI,cAAc,CAAC,OAAO,EAAE;YACxB,MAAM,UAAU,GAAG,cAA4B,CAAC;YAEhD,IAAI,UAAU,CAAC,SAAS,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE;gBACnD,OAAO,UAAU,CAAC,KAAK,CAAC;aAC3B;SACJ;QAED,OAAO,GAAG,CAAC;IACf,CAAC;IAEM,oBAAoB,CAAC,QAAmB,EAAE,WAA2B;QACxE,MAAM,UAAU,GAAG,QAAQ,CAAC,IAAkB,CAAC;QAE/C,MAAM,YAAY,GAAG,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;QACjI,MAAM,YAAY,GAAG,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;QACjI,MAAM,YAAY,GAAG,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;QACjI,MAAM,YAAY,GAAG,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;QAEjI,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC;QACjD,WAAW,CAAC,SAAS,GAAG,IAAI,YAAY,KAAK,YAAY,SAAS,YAAY,KAAK,YAAY,GAAG,CAAC;IACvG,CAAC;CACJ","sourcesContent":["import type { NodeMaterialBlock } from \"core/Materials/Node/nodeMaterialBlock\";\r\nimport type { InputBlock } from \"core/Materials/Node/Blocks/Input/inputBlock\";\r\nimport type { RemapBlock } from \"core/Materials/Node/Blocks/remapBlock\";\r\nimport type { NodeMaterialConnectionPoint } from \"core/Materials/Node/nodeMaterialBlockConnectionPoint\";\r\nimport type { IDisplayManager } from \"shared-ui-components/nodeGraphSystem/interfaces/displayManager\";\r\nimport type { INodeData } from \"shared-ui-components/nodeGraphSystem/interfaces/nodeData\";\r\nimport styles from \"./remapDisplayManager.modules.scss\";\r\n\r\nexport class RemapDisplayManager implements IDisplayManager {\r\n    public getHeaderClass() {\r\n        return \"\";\r\n    }\r\n\r\n    public shouldDisplayPortLabels(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public getHeaderText(nodeData: INodeData): string {\r\n        return (nodeData.data as NodeMaterialBlock).name;\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"#4086BB\";\r\n    }\r\n\r\n    private _extractInputValue(connectionPoint: NodeMaterialConnectionPoint) {\r\n        const connectedBlock = connectionPoint.connectedPoint!.ownerBlock;\r\n\r\n        if (connectedBlock.isInput) {\r\n            const inputBlock = connectedBlock as InputBlock;\r\n\r\n            if (inputBlock.isUniform && !inputBlock.isSystemValue) {\r\n                return inputBlock.value;\r\n            }\r\n        }\r\n\r\n        return \"?\";\r\n    }\r\n\r\n    public updatePreviewContent(nodeData: INodeData, contentArea: HTMLDivElement): void {\r\n        const remapBlock = nodeData.data as RemapBlock;\r\n\r\n        const sourceRangeX = remapBlock.sourceMin.isConnected ? this._extractInputValue(remapBlock.sourceMin) : remapBlock.sourceRange.x;\r\n        const sourceRangeY = remapBlock.sourceMax.isConnected ? this._extractInputValue(remapBlock.sourceMax) : remapBlock.sourceRange.y;\r\n        const targetRangeX = remapBlock.targetMin.isConnected ? this._extractInputValue(remapBlock.targetMin) : remapBlock.targetRange.x;\r\n        const targetRangeY = remapBlock.targetMax.isConnected ? this._extractInputValue(remapBlock.targetMax) : remapBlock.targetRange.y;\r\n\r\n        contentArea.classList.add(styles[\"remap-block\"]);\r\n        contentArea.innerHTML = `[${sourceRangeX}, ${sourceRangeY}] -> [${targetRangeX}, ${targetRangeY}]`;\r\n    }\r\n}\r\n"]}
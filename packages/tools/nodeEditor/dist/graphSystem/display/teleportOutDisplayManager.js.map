{"version":3,"file":"teleportOutDisplayManager.js","sourceRoot":"","sources":["../../../src/graphSystem/display/teleportOutDisplayManager.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAC;AAO9C,MAAM,OAAO,yBAAyB;IAAtC;QACY,mBAAc,GAAG,KAAK,CAAC;IAqDnC,CAAC;IApDU,cAAc;QACjB,OAAO,EAAE,CAAC;IACd,CAAC;IAEM,uBAAuB;QAC1B,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,aAAa,CAAC,QAAmB;QACpC,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;IAC9B,CAAC;IAEM,kBAAkB,CAAC,QAAmB;QACzC,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAoC,CAAC;QAC5D,OAAO,oCAAoC,UAAU,CAAC,8BAA8B,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;IAC/G,CAAC;IAEM,oBAAoB,CAAC,QAAmB,EAAE,WAA2B,IAAS,CAAC;IAE/E,kBAAkB,CAAC,QAAmB,EAAE,YAAiC,EAAE,OAAqB;QACnG,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAoC,CAAC;QAC5D,IAAI,YAAY,KAAK,QAAQ,EAAE;YAC3B,IAAI,IAAI,CAAC,cAAc,EAAE;gBACrB,IAAI,eAAwB,CAAC;gBAE7B,IAAI,YAAY,IAAI,YAAY,CAAC,IAAI,CAAC,YAAY,EAAE,KAAK,8BAA8B,EAAE;oBACrF,MAAM,aAAa,GAAG,YAAY,CAAC,IAAoC,CAAC;oBAExE,eAAe,GAAG,aAAa,CAAC,UAAU,KAAK,KAAK,CAAC,UAAU,CAAC;iBACnE;qBAAM;oBACH,eAAe,GAAG,IAAI,CAAC;iBAC1B;gBAED,IAAI,eAAe,EAAE;oBACjB,OAAO,CAAC,yBAAyB,CAAC,eAAe,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,UAAU,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;iBAChG;gBACD,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;aAC/B;YACD,OAAO;SACV;QACD,IAAI,KAAK,CAAC,UAAU,EAAE;YAClB,OAAO,CAAC,yBAAyB,CAAC,eAAe,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,UAAU,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;YAC5F,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;SAC9B;IACL,CAAC;IAEM,SAAS,CAAC,QAAmB,EAAE,OAAqB;QACvD,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAoC,CAAC;QAC5D,IAAI,KAAK,CAAC,UAAU,EAAE;YAClB,OAAO,CAAC,yBAAyB,CAAC,eAAe,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,UAAU,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;SAChG;IACL,CAAC;CACJ","sourcesContent":["import { BlockTools } from \"../../blockTools\";\r\nimport type { IDisplayManager } from \"shared-ui-components/nodeGraphSystem/interfaces/displayManager\";\r\nimport type { INodeData } from \"shared-ui-components/nodeGraphSystem/interfaces/nodeData\";\r\nimport type { NodeMaterialTeleportOutBlock } from \"core/Materials/Node/Blocks/Teleport/teleportOutBlock\";\r\nimport type { StateManager } from \"shared-ui-components/nodeGraphSystem/stateManager\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\nexport class TeleportOutDisplayManager implements IDisplayManager {\r\n    private _hasHighlights = false;\r\n    public getHeaderClass() {\r\n        return \"\";\r\n    }\r\n\r\n    public shouldDisplayPortLabels(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public getHeaderText(nodeData: INodeData): string {\r\n        return nodeData.data.name;\r\n    }\r\n\r\n    public getBackgroundColor(nodeData: INodeData): string {\r\n        const block = nodeData.data as NodeMaterialTeleportOutBlock;\r\n        return `linear-gradient(to right, white, ${BlockTools.GetColorFromConnectionNodeType(block.output.type)})`;\r\n    }\r\n\r\n    public updatePreviewContent(nodeData: INodeData, contentArea: HTMLDivElement): void {}\r\n\r\n    public onSelectionChanged(nodeData: INodeData, selectedData: Nullable<INodeData>, manager: StateManager): void {\r\n        const block = nodeData.data as NodeMaterialTeleportOutBlock;\r\n        if (selectedData !== nodeData) {\r\n            if (this._hasHighlights) {\r\n                let removeHighlight: boolean;\r\n\r\n                if (selectedData && selectedData.data.getClassName() === \"NodeMaterialTeleportOutBlock\") {\r\n                    const otherTeleport = selectedData.data as NodeMaterialTeleportOutBlock;\r\n\r\n                    removeHighlight = otherTeleport.entryPoint !== block.entryPoint;\r\n                } else {\r\n                    removeHighlight = true;\r\n                }\r\n\r\n                if (removeHighlight) {\r\n                    manager.onHighlightNodeObservable.notifyObservers({ data: block.entryPoint, active: false });\r\n                }\r\n                this._hasHighlights = false;\r\n            }\r\n            return;\r\n        }\r\n        if (block.entryPoint) {\r\n            manager.onHighlightNodeObservable.notifyObservers({ data: block.entryPoint, active: true });\r\n            this._hasHighlights = true;\r\n        }\r\n    }\r\n\r\n    public onDispose(nodeData: INodeData, manager: StateManager) {\r\n        const block = nodeData.data as NodeMaterialTeleportOutBlock;\r\n        if (block.entryPoint) {\r\n            manager.onHighlightNodeObservable.notifyObservers({ data: block.entryPoint, active: false });\r\n        }\r\n    }\r\n}\r\n"]}
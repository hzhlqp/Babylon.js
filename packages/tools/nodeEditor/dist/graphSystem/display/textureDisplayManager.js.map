{"version":3,"file":"textureDisplayManager.js","sourceRoot":"","sources":["../../../src/graphSystem/display/textureDisplayManager.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAE,MAAM,8CAA8C,CAAC;AAC5E,OAAO,EAAE,eAAe,EAAE,MAAM,gDAAgD,CAAC;AACjF,OAAO,EAAE,sBAAsB,EAAE,MAAM,wDAAwD,CAAC;AAChG,OAAO,EAAE,oBAAoB,EAAE,MAAM,6CAA6C,CAAC;AACnF,OAAO,EAAE,kBAAkB,EAAE,MAAM,oDAAoD,CAAC;AACxF,OAAO,EAAE,oBAAoB,EAAE,MAAM,0DAA0D,CAAC;AAChG,OAAO,EAAE,eAAe,EAAE,MAAM,gDAAgD,CAAC;AACjF,OAAO,EAAE,cAAc,EAAE,MAAM,2CAA2C,CAAC;AAG3E,OAAO,WAAW,MAAM,sCAAsC,CAAC;AAC/D,OAAO,YAAY,MAAM,uBAAuB,CAAC;AAEjD,MAAM,OAAO,qBAAqB;IAIvB,cAAc;QACjB,OAAO,EAAE,CAAC;IACd,CAAC;IAEM,uBAAuB;QAC1B,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,aAAa,CAAC,QAAmB;QACpC,OAAQ,QAAQ,CAAC,IAA0B,CAAC,IAAI,CAAC;IACrD,CAAC;IAEM,kBAAkB,CAAC,QAAmB;QACzC,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAyB,CAAC;QACjD,OAAO,KAAK,CAAC,YAAY,EAAE,KAAK,iBAAiB,IAAI,KAAK,CAAC,YAAY,EAAE,KAAK,iBAAiB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC;IAC5H,CAAC;IAEM,oBAAoB,CAAC,QAAmB,EAAE,WAA2B;QACxE,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAyB,CAAC;QACjD,MAAM,YAAY,GAAG,KAAsG,CAAC;QAE5H,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACtB,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC,CAAC;YACzD,IAAI,KAAK,YAAY,YAAY,EAAE;gBAC/B,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,uBAAuB,CAAC,CAAC,CAAC;aACnE;YACD,IAAI,KAAK,YAAY,sBAAsB,IAAI,KAAK,YAAY,eAAe,EAAE;gBAC7E,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC,CAAC;aAC9D;YACD,IAAI,KAAK,YAAY,kBAAkB,IAAI,KAAK,YAAY,oBAAoB,EAAE;gBAC9E,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,uBAAuB,CAAC,CAAC,CAAC;aACnE;YACD,IAAI,KAAK,YAAY,cAAc,EAAE;gBACjC,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,yBAAyB,CAAC,CAAC,CAAC;aACrE;YACD,IAAI,KAAK,YAAY,eAAe,EAAE;gBAClC,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,0BAA0B,CAAC,CAAC,CAAC;aACtE;YAED,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,aAAc,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACzE,IAAI,CAAC,aAAa,GAAG,WAAW,CAAC,aAAc,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YACrE,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAC5C,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;SACxD;QAED,IAAI,YAAY,CAAC,OAAO,EAAE;YACtB,oBAAoB,CAAC,aAAa,CAC9B,IAAI,CAAC,cAAc,EACnB,YAAY,CAAC,OAAO,EACpB,GAAG,EACH;gBACI,IAAI,EAAE,CAAC;gBACP,UAAU,EAAE,IAAI;gBAChB,YAAY,EAAE,IAAI;gBAClB,WAAW,EAAE,IAAI;gBACjB,YAAY,EAAE,IAAI;aACrB,EACD,GAAG,EAAE;gBACD,IAAI,CAAC,aAAa,CAAC,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;gBACpE,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAC5D,CAAC,CACJ,CAAC;SACL;aAAM;YACH,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;SACxD;IACL,CAAC;CACJ","sourcesContent":["import type { NodeMaterialBlock } from \"core/Materials/Node/nodeMaterialBlock\";\r\nimport { TextureBlock } from \"core/Materials/Node/Blocks/Dual/textureBlock\";\r\nimport { RefractionBlock } from \"core/Materials/Node/Blocks/PBR/refractionBlock\";\r\nimport { ReflectionTextureBlock } from \"core/Materials/Node/Blocks/Dual/reflectionTextureBlock\";\r\nimport { TextureLineComponent } from \"../../sharedComponents/textureLineComponent\";\r\nimport { CurrentScreenBlock } from \"core/Materials/Node/Blocks/Dual/currentScreenBlock\";\r\nimport { ParticleTextureBlock } from \"core/Materials/Node/Blocks/Particle/particleTextureBlock\";\r\nimport { ReflectionBlock } from \"core/Materials/Node/Blocks/PBR/reflectionBlock\";\r\nimport { TriPlanarBlock } from \"core/Materials/Node/Blocks/triPlanarBlock\";\r\nimport type { IDisplayManager } from \"shared-ui-components/nodeGraphSystem/interfaces/displayManager\";\r\nimport type { INodeData } from \"shared-ui-components/nodeGraphSystem/interfaces/nodeData\";\r\nimport localStyles from \"./textureDisplayManager.modules.scss\";\r\nimport commonStyles from \"./common.modules.scss\";\r\n\r\nexport class TextureDisplayManager implements IDisplayManager {\r\n    private _previewCanvas: HTMLCanvasElement;\r\n    private _previewImage: HTMLImageElement;\r\n\r\n    public getHeaderClass() {\r\n        return \"\";\r\n    }\r\n\r\n    public shouldDisplayPortLabels(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public getHeaderText(nodeData: INodeData): string {\r\n        return (nodeData.data as NodeMaterialBlock).name;\r\n    }\r\n\r\n    public getBackgroundColor(nodeData: INodeData): string {\r\n        const block = nodeData.data as NodeMaterialBlock;\r\n        return block.getClassName() === \"RefractionBlock\" || block.getClassName() === \"ReflectionBlock\" ? \"#6174FA\" : \"#323232\";\r\n    }\r\n\r\n    public updatePreviewContent(nodeData: INodeData, contentArea: HTMLDivElement): void {\r\n        const block = nodeData.data as NodeMaterialBlock;\r\n        const textureBlock = block as TextureBlock | ReflectionTextureBlock | RefractionBlock | CurrentScreenBlock | TriPlanarBlock;\r\n\r\n        if (!this._previewCanvas) {\r\n            contentArea.classList.add(commonStyles[\"texture-block\"]);\r\n            if (block instanceof TextureBlock) {\r\n                contentArea.classList.add(localStyles[\"regular-texture-block\"]);\r\n            }\r\n            if (block instanceof ReflectionTextureBlock || block instanceof ReflectionBlock) {\r\n                contentArea.classList.add(localStyles[\"reflection-block\"]);\r\n            }\r\n            if (block instanceof CurrentScreenBlock || block instanceof ParticleTextureBlock) {\r\n                contentArea.classList.add(localStyles[\"reduced-texture-block\"]);\r\n            }\r\n            if (block instanceof TriPlanarBlock) {\r\n                contentArea.classList.add(localStyles[\"triplanar-texture-block\"]);\r\n            }\r\n            if (block instanceof RefractionBlock) {\r\n                contentArea.classList.add(localStyles[\"refraction-texture-block\"]);\r\n            }\r\n\r\n            this._previewCanvas = contentArea.ownerDocument!.createElement(\"canvas\");\r\n            this._previewImage = contentArea.ownerDocument!.createElement(\"img\");\r\n            contentArea.appendChild(this._previewImage);\r\n            this._previewImage.classList.add(commonStyles.empty);\r\n        }\r\n\r\n        if (textureBlock.texture) {\r\n            TextureLineComponent.UpdatePreview(\r\n                this._previewCanvas,\r\n                textureBlock.texture,\r\n                140,\r\n                {\r\n                    face: 0,\r\n                    displayRed: true,\r\n                    displayAlpha: true,\r\n                    displayBlue: true,\r\n                    displayGreen: true,\r\n                },\r\n                () => {\r\n                    this._previewImage.src = this._previewCanvas.toDataURL(\"image/png\");\r\n                    this._previewImage.classList.remove(commonStyles.empty);\r\n                }\r\n            );\r\n        } else {\r\n            this._previewImage.classList.add(commonStyles.empty);\r\n        }\r\n    }\r\n}\r\n"]}
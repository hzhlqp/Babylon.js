{"version":3,"file":"texturePropertyTabComponent.js","sourceRoot":"","sources":["../../../src/graphSystem/properties/texturePropertyTabComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { FileButtonLine } from \"shared-ui-components/lines/fileButtonLineComponent\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { LineContainerComponent } from \"shared-ui-components/lines/lineContainerComponent\";\r\nimport { CheckBoxLineComponent } from \"../../sharedComponents/checkBoxLineComponent\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { CubeTexture } from \"core/Materials/Textures/cubeTexture\";\r\nimport { ReflectionTextureBlock } from \"core/Materials/Node/Blocks/Dual/reflectionTextureBlock\";\r\nimport { ReflectionBlock } from \"core/Materials/Node/Blocks/PBR/reflectionBlock\";\r\nimport { RefractionBlock } from \"core/Materials/Node/Blocks/PBR/refractionBlock\";\r\nimport type { TextureBlock } from \"core/Materials/Node/Blocks/Dual/textureBlock\";\r\nimport { CurrentScreenBlock } from \"core/Materials/Node/Blocks/Dual/currentScreenBlock\";\r\nimport { ParticleTextureBlock } from \"core/Materials/Node/Blocks/Particle/particleTextureBlock\";\r\nimport { GeneralPropertyTabComponent, GenericPropertyTabComponent } from \"./genericNodePropertyComponent\";\r\nimport { NodeMaterialModes } from \"core/Materials/Node/Enums/nodeMaterialModes\";\r\nimport type { NodeMaterialBlock } from \"core/Materials/Node/nodeMaterialBlock\";\r\nimport type { GlobalState } from \"../../globalState\";\r\nimport { TextInputLineComponent } from \"shared-ui-components/lines/textInputLineComponent\";\r\nimport type { IPropertyComponentProps } from \"shared-ui-components/nodeGraphSystem/interfaces/propertyComponentProps\";\r\nimport { ButtonLineComponent } from \"shared-ui-components/lines/buttonLineComponent\";\r\nimport { OptionsLine } from \"shared-ui-components/lines/optionsLineComponent\";\r\nimport { FloatLineComponent } from \"shared-ui-components/lines/floatLineComponent\";\r\nimport { SliderLineComponent } from \"shared-ui-components/lines/sliderLineComponent\";\r\nimport type { TriPlanarBlock } from \"core/Materials/Node/Blocks/triPlanarBlock\";\r\n\r\ntype ReflectionTexture = ReflectionTextureBlock | ReflectionBlock | RefractionBlock;\r\n\r\ntype AnyTexture = TextureBlock | ReflectionTexture | CurrentScreenBlock | ParticleTextureBlock | TriPlanarBlock;\r\n\r\nexport class TexturePropertyTabComponent extends React.Component<IPropertyComponentProps, { isEmbedded: boolean; loadAsCubeTexture: boolean; textureIsPrefiltered: boolean }> {\r\n    get textureBlock(): AnyTexture {\r\n        return this.props.nodeData.data as AnyTexture;\r\n    }\r\n\r\n    constructor(props: IPropertyComponentProps) {\r\n        super(props);\r\n\r\n        const texture = this.textureBlock.texture as BaseTexture;\r\n\r\n        this.state = { isEmbedded: !texture || texture.name.substring(0, 4) === \"data\", loadAsCubeTexture: texture && texture.isCube, textureIsPrefiltered: true };\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    override UNSAFE_componentWillUpdate(nextProps: IPropertyComponentProps, nextState: { isEmbedded: boolean; loadAsCubeTexture: boolean }) {\r\n        if (nextProps.nodeData.data !== this.props.nodeData.data) {\r\n            const texture = (nextProps.nodeData.data as AnyTexture).texture as BaseTexture;\r\n\r\n            nextState.isEmbedded = !texture || texture.name.substring(0, 4) === \"data\";\r\n            nextState.loadAsCubeTexture = texture && texture.isCube;\r\n        }\r\n    }\r\n\r\n    private _generateRandomForCache() {\r\n        return \"xxxxxxxxxxxxxxxxxxxx\".replace(/[x]/g, () => {\r\n            const r = (Math.random() * 10) | 0;\r\n            return r.toString();\r\n        });\r\n    }\r\n\r\n    updateAfterTextureLoad() {\r\n        this.props.stateManager.onUpdateRequiredObservable.notifyObservers(this.props.nodeData.data as NodeMaterialBlock);\r\n        this.props.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n        this.forceUpdate();\r\n    }\r\n\r\n    removeTexture() {\r\n        let texture = this.textureBlock.texture as BaseTexture;\r\n\r\n        if (texture) {\r\n            texture.dispose();\r\n            (texture as any) = null;\r\n            this.textureBlock.texture = null;\r\n        }\r\n\r\n        this.updateAfterTextureLoad();\r\n    }\r\n\r\n    _prepareTexture() {\r\n        let texture = this.textureBlock.texture as BaseTexture;\r\n\r\n        if (texture && texture.isCube !== this.state.loadAsCubeTexture) {\r\n            texture.dispose();\r\n            (texture as any) = null;\r\n        }\r\n\r\n        if (!texture) {\r\n            const globalState = this.props.stateManager.data as GlobalState;\r\n            if (!this.state.loadAsCubeTexture) {\r\n                this.textureBlock.texture = new Texture(\r\n                    null,\r\n                    globalState.nodeMaterial.getScene(),\r\n                    false,\r\n                    this.textureBlock instanceof ReflectionTextureBlock ||\r\n                        this.textureBlock instanceof ReflectionBlock ||\r\n                        this.textureBlock instanceof RefractionBlock ||\r\n                        globalState.mode === NodeMaterialModes.PostProcess\r\n                );\r\n                texture = this.textureBlock.texture;\r\n                texture.coordinatesMode = Texture.EQUIRECTANGULAR_MODE;\r\n            } else {\r\n                this.textureBlock.texture = new CubeTexture(\"\", globalState.nodeMaterial.getScene());\r\n                texture = this.textureBlock.texture;\r\n                texture.coordinatesMode = Texture.CUBIC_MODE;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Replaces the texture of the node\r\n     * @param file the file of the texture to use\r\n     */\r\n    replaceTexture(file: File) {\r\n        this._prepareTexture();\r\n\r\n        const texture = this.textureBlock.texture as BaseTexture;\r\n        Tools.ReadFile(\r\n            file,\r\n            (data) => {\r\n                const blob = new Blob([data], { type: \"octet/stream\" });\r\n\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(blob);\r\n                reader.onloadend = () => {\r\n                    const base64data = reader.result as string;\r\n\r\n                    let extension: string | undefined = undefined;\r\n                    if (file.name.toLowerCase().indexOf(\".dds\") > 0) {\r\n                        extension = \".dds\";\r\n                    } else if (file.name.toLowerCase().indexOf(\".env\") > 0) {\r\n                        extension = \".env\";\r\n                    }\r\n                    if (texture.isCube) {\r\n                        (texture as CubeTexture).updateURL(base64data, extension, () => this.updateAfterTextureLoad(), this.state.textureIsPrefiltered);\r\n                    } else {\r\n                        (texture as Texture).updateURL(base64data, extension, () => this.updateAfterTextureLoad());\r\n                    }\r\n                };\r\n            },\r\n            undefined,\r\n            true\r\n        );\r\n    }\r\n\r\n    replaceTextureWithUrl(url: string) {\r\n        this._prepareTexture();\r\n\r\n        const texture = this.textureBlock.texture as BaseTexture;\r\n        // We need to update the texture name with the url so later on the render\r\n        // doesn't overwrite the url texture with the name of the texture.\r\n        texture.name = url;\r\n        if (texture.isCube || this.textureBlock instanceof ReflectionTextureBlock || this.textureBlock instanceof ReflectionBlock || this.textureBlock instanceof RefractionBlock) {\r\n            let extension: string | undefined = undefined;\r\n            if (url.toLowerCase().indexOf(\".dds\") > 0) {\r\n                extension = \".dds\";\r\n            } else if (url.toLowerCase().indexOf(\".env\") > 0) {\r\n                extension = \".env\";\r\n            }\r\n\r\n            (texture as CubeTexture).updateURL(url, extension, () => this.updateAfterTextureLoad(), this.state.textureIsPrefiltered);\r\n        } else {\r\n            (texture as Texture).updateURL(url, null, () => this.updateAfterTextureLoad());\r\n        }\r\n    }\r\n\r\n    override render() {\r\n        let url = \"\";\r\n        const block = this.props.nodeData.data as NodeMaterialBlock;\r\n\r\n        const texture = (this.textureBlock as TextureBlock).hasImageSource ? null : (this.textureBlock.texture as BaseTexture);\r\n        if (texture && texture.name && texture.name.substring(0, 4) !== \"data\") {\r\n            url = texture.name;\r\n        }\r\n\r\n        url = url.replace(/\\?nocache=\\d+/, \"\");\r\n\r\n        const isInReflectionMode =\r\n            this.textureBlock instanceof ReflectionTextureBlock || this.textureBlock instanceof ReflectionBlock || this.textureBlock instanceof RefractionBlock;\r\n        const isFrozenTexture = this.textureBlock instanceof CurrentScreenBlock || this.textureBlock instanceof ParticleTextureBlock;\r\n        const showIsInGammaSpace = this.textureBlock instanceof ReflectionBlock;\r\n\r\n        const reflectionModeOptions: { label: string; value: number }[] = [\r\n            {\r\n                label: \"Cubic\",\r\n                value: Texture.CUBIC_MODE,\r\n            },\r\n            {\r\n                label: \"Equirectangular\",\r\n                value: Texture.EQUIRECTANGULAR_MODE,\r\n            },\r\n            {\r\n                label: \"Explicit\",\r\n                value: Texture.EXPLICIT_MODE,\r\n            },\r\n            {\r\n                label: \"Fixed equirectangular\",\r\n                value: Texture.FIXED_EQUIRECTANGULAR_MODE,\r\n            },\r\n            {\r\n                label: \"Fixed mirrored equirectangular\",\r\n                value: Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE,\r\n            },\r\n            {\r\n                label: \"Planar\",\r\n                value: Texture.PLANAR_MODE,\r\n            },\r\n            {\r\n                label: \"Projection\",\r\n                value: Texture.PROJECTION_MODE,\r\n            },\r\n            {\r\n                label: \"Skybox\",\r\n                value: Texture.SKYBOX_MODE,\r\n            },\r\n            {\r\n                label: \"Spherical\",\r\n                value: Texture.SPHERICAL_MODE,\r\n            },\r\n        ];\r\n\r\n        const samplingMode = [\r\n            { label: \"Nearest\", value: Texture.NEAREST_NEAREST }, // 1\r\n            { label: \"Linear\", value: Texture.LINEAR_LINEAR }, // 2\r\n\r\n            { label: \"Linear & linear mip\", value: Texture.LINEAR_LINEAR_MIPLINEAR }, // 3\r\n            { label: \"Linear & nearest mip\", value: Texture.LINEAR_LINEAR_MIPNEAREST }, // 11\r\n\r\n            { label: \"Nearest & linear mip\", value: Texture.NEAREST_NEAREST_MIPLINEAR }, // 8\r\n            { label: \"Nearest & nearest mip\", value: Texture.NEAREST_NEAREST_MIPNEAREST }, // 4\r\n\r\n            { label: \"Nearest/Linear\", value: Texture.NEAREST_LINEAR }, // 7\r\n            { label: \"Nearest/Linear & linear mip\", value: Texture.NEAREST_LINEAR_MIPLINEAR }, // 6\r\n            { label: \"Nearest/Linear & nearest mip\", value: Texture.NEAREST_LINEAR_MIPNEAREST }, // 5\r\n\r\n            { label: \"Linear/Nearest\", value: Texture.LINEAR_NEAREST }, // 12\r\n            { label: \"Linear/Nearest & linear mip\", value: Texture.LINEAR_NEAREST_MIPLINEAR }, // 10\r\n            { label: \"Linear/Nearest & nearest mip\", value: Texture.LINEAR_NEAREST_MIPNEAREST }, // 9\r\n        ];\r\n\r\n        return (\r\n            <div>\r\n                <GeneralPropertyTabComponent stateManager={this.props.stateManager} nodeData={this.props.nodeData} />\r\n                <LineContainerComponent title=\"PROPERTIES\">\r\n                    <CheckBoxLineComponent\r\n                        label=\"Auto select UV\"\r\n                        propertyName=\"autoSelectUV\"\r\n                        target={block}\r\n                        onValueChanged={() => {\r\n                            this.props.stateManager.onUpdateRequiredObservable.notifyObservers(block);\r\n                        }}\r\n                    />\r\n                    {!isInReflectionMode && (\r\n                        <CheckBoxLineComponent\r\n                            label=\"Convert to gamma space\"\r\n                            propertyName=\"convertToGammaSpace\"\r\n                            target={block}\r\n                            onValueChanged={() => {\r\n                                this.props.stateManager.onUpdateRequiredObservable.notifyObservers(block);\r\n                            }}\r\n                        />\r\n                    )}\r\n                    {!isInReflectionMode && (\r\n                        <CheckBoxLineComponent\r\n                            label=\"Convert to linear space\"\r\n                            propertyName=\"convertToLinearSpace\"\r\n                            target={block}\r\n                            onValueChanged={() => {\r\n                                this.props.stateManager.onUpdateRequiredObservable.notifyObservers(block);\r\n                            }}\r\n                        />\r\n                    )}\r\n                    {texture && showIsInGammaSpace && (\r\n                        <CheckBoxLineComponent\r\n                            label=\"Is in gamma space\"\r\n                            propertyName=\"gammaSpace\"\r\n                            target={texture}\r\n                            onValueChanged={() => {\r\n                                this.props.stateManager.onUpdateRequiredObservable.notifyObservers(block);\r\n                            }}\r\n                        />\r\n                    )}\r\n                    {\r\n                        <CheckBoxLineComponent\r\n                            label=\"Disable multiplying by level\"\r\n                            propertyName=\"disableLevelMultiplication\"\r\n                            target={block}\r\n                            onValueChanged={() => {\r\n                                this.props.stateManager.onUpdateRequiredObservable.notifyObservers(block);\r\n                                this.props.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n                            }}\r\n                        />\r\n                    }\r\n                    {texture && texture.updateSamplingMode && (\r\n                        <OptionsLine\r\n                            label=\"Sampling\"\r\n                            options={samplingMode}\r\n                            target={texture}\r\n                            noDirectUpdate={true}\r\n                            propertyName=\"samplingMode\"\r\n                            onSelect={(value) => {\r\n                                texture!.updateSamplingMode(value as number);\r\n                                this.props.stateManager.onUpdateRequiredObservable.notifyObservers(block);\r\n                            }}\r\n                        />\r\n                    )}\r\n                    {texture && isInReflectionMode && (\r\n                        <OptionsLine\r\n                            label=\"Reflection mode\"\r\n                            options={reflectionModeOptions}\r\n                            target={texture}\r\n                            propertyName=\"coordinatesMode\"\r\n                            onSelect={(value: any) => {\r\n                                texture!.coordinatesMode = value;\r\n                                this.forceUpdate();\r\n                                this.props.stateManager.onUpdateRequiredObservable.notifyObservers(block);\r\n                            }}\r\n                        />\r\n                    )}\r\n                    {texture && !isInReflectionMode && !isFrozenTexture && (\r\n                        <CheckBoxLineComponent\r\n                            label=\"Clamp U\"\r\n                            isSelected={() => texture!.wrapU === Texture.CLAMP_ADDRESSMODE}\r\n                            onSelect={(value) => {\r\n                                texture!.wrapU = value ? Texture.CLAMP_ADDRESSMODE : Texture.WRAP_ADDRESSMODE;\r\n                                this.props.stateManager.onUpdateRequiredObservable.notifyObservers(block);\r\n                                this.props.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n                            }}\r\n                        />\r\n                    )}\r\n                    {texture && !isInReflectionMode && !isFrozenTexture && (\r\n                        <CheckBoxLineComponent\r\n                            label=\"Clamp V\"\r\n                            isSelected={() => texture!.wrapV === Texture.CLAMP_ADDRESSMODE}\r\n                            onSelect={(value) => {\r\n                                texture!.wrapV = value ? Texture.CLAMP_ADDRESSMODE : Texture.WRAP_ADDRESSMODE;\r\n                                this.props.stateManager.onUpdateRequiredObservable.notifyObservers(block);\r\n                                this.props.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n                            }}\r\n                        />\r\n                    )}\r\n                    {texture && !isInReflectionMode && !isFrozenTexture && (\r\n                        <FloatLineComponent\r\n                            lockObject={this.props.stateManager.lockObject}\r\n                            label=\"Offset U\"\r\n                            target={texture}\r\n                            propertyName=\"uOffset\"\r\n                            onChange={() => {\r\n                                this.props.stateManager.onUpdateRequiredObservable.notifyObservers(block);\r\n                            }}\r\n                        />\r\n                    )}\r\n                    {texture && !isInReflectionMode && !isFrozenTexture && (\r\n                        <FloatLineComponent\r\n                            lockObject={this.props.stateManager.lockObject}\r\n                            label=\"Offset V\"\r\n                            target={texture}\r\n                            propertyName=\"vOffset\"\r\n                            onChange={() => {\r\n                                this.props.stateManager.onUpdateRequiredObservable.notifyObservers(block);\r\n                            }}\r\n                        />\r\n                    )}\r\n                    {texture && !isInReflectionMode && !isFrozenTexture && (\r\n                        <FloatLineComponent\r\n                            lockObject={this.props.stateManager.lockObject}\r\n                            label=\"Scale U\"\r\n                            target={texture}\r\n                            propertyName=\"uScale\"\r\n                            onChange={() => {\r\n                                this.props.stateManager.onUpdateRequiredObservable.notifyObservers(block);\r\n                            }}\r\n                        />\r\n                    )}\r\n                    {texture && !isInReflectionMode && !isFrozenTexture && (\r\n                        <FloatLineComponent\r\n                            lockObject={this.props.stateManager.lockObject}\r\n                            label=\"Scale V\"\r\n                            target={texture}\r\n                            propertyName=\"vScale\"\r\n                            onChange={() => {\r\n                                this.props.stateManager.onUpdateRequiredObservable.notifyObservers(block);\r\n                            }}\r\n                        />\r\n                    )}\r\n                    {texture && !isInReflectionMode && !isFrozenTexture && (\r\n                        <SliderLineComponent\r\n                            lockObject={this.props.stateManager.lockObject}\r\n                            label=\"Rotation U\"\r\n                            target={texture}\r\n                            propertyName=\"uAng\"\r\n                            minimum={0}\r\n                            maximum={Math.PI * 2}\r\n                            useEuler={true}\r\n                            step={0.1}\r\n                            onChange={() => {\r\n                                this.props.stateManager.onUpdateRequiredObservable.notifyObservers(block);\r\n                            }}\r\n                        />\r\n                    )}\r\n                    {texture && !isInReflectionMode && !isFrozenTexture && (\r\n                        <SliderLineComponent\r\n                            lockObject={this.props.stateManager.lockObject}\r\n                            label=\"Rotation V\"\r\n                            target={texture}\r\n                            propertyName=\"vAng\"\r\n                            minimum={0}\r\n                            maximum={Math.PI * 2}\r\n                            useEuler={true}\r\n                            step={0.1}\r\n                            onChange={() => {\r\n                                this.props.stateManager.onUpdateRequiredObservable.notifyObservers(block);\r\n                            }}\r\n                        />\r\n                    )}\r\n                    {texture && !isInReflectionMode && !isFrozenTexture && (\r\n                        <SliderLineComponent\r\n                            lockObject={this.props.stateManager.lockObject}\r\n                            label=\"Rotation W\"\r\n                            target={texture}\r\n                            propertyName=\"wAng\"\r\n                            minimum={0}\r\n                            maximum={Math.PI * 2}\r\n                            useEuler={true}\r\n                            step={0.1}\r\n                            onChange={() => {\r\n                                this.props.stateManager.onUpdateRequiredObservable.notifyObservers(block);\r\n                            }}\r\n                        />\r\n                    )}\r\n                </LineContainerComponent>\r\n                {!(this.textureBlock as TextureBlock).hasImageSource && (\r\n                    <LineContainerComponent title=\"SOURCE\">\r\n                        <CheckBoxLineComponent\r\n                            label=\"Embed static texture\"\r\n                            isSelected={() => this.state.isEmbedded}\r\n                            onSelect={(value) => {\r\n                                this.setState({ isEmbedded: value });\r\n                                this.textureBlock.texture = null;\r\n                                this.updateAfterTextureLoad();\r\n                            }}\r\n                        />\r\n                        {isInReflectionMode && (\r\n                            <CheckBoxLineComponent\r\n                                label=\"Load as cube texture\"\r\n                                isSelected={() => this.state.loadAsCubeTexture}\r\n                                onSelect={(value) => this.setState({ loadAsCubeTexture: value })}\r\n                            />\r\n                        )}\r\n                        {isInReflectionMode && this.state.loadAsCubeTexture && (\r\n                            <CheckBoxLineComponent\r\n                                label=\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Texture is prefiltered\"\r\n                                isSelected={() => this.state.textureIsPrefiltered}\r\n                                onSelect={(value) => this.setState({ textureIsPrefiltered: value })}\r\n                            />\r\n                        )}\r\n                        {this.state.isEmbedded && <FileButtonLine label=\"Upload\" onClick={(file) => this.replaceTexture(file)} accept=\".jpg, .png, .tga, .dds, .env, .exr\" />}\r\n                        {!this.state.isEmbedded && (\r\n                            <TextInputLineComponent\r\n                                lockObject={this.props.stateManager.lockObject}\r\n                                label=\"Link\"\r\n                                value={url}\r\n                                onChange={(newUrl) => this.replaceTextureWithUrl(newUrl)}\r\n                            />\r\n                        )}\r\n                        {!this.state.isEmbedded && url && (\r\n                            <ButtonLineComponent label=\"Refresh\" onClick={() => this.replaceTextureWithUrl(url + \"?nocache=\" + this._generateRandomForCache())} />\r\n                        )}\r\n                        {texture && <ButtonLineComponent label=\"Remove\" onClick={() => this.removeTexture()} />}\r\n                    </LineContainerComponent>\r\n                )}\r\n                <GenericPropertyTabComponent stateManager={this.props.stateManager} nodeData={this.props.nodeData} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
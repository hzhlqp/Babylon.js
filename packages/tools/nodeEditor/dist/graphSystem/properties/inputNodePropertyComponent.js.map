{"version":3,"file":"inputNodePropertyComponent.js","sourceRoot":"","sources":["../../../src/graphSystem/properties/inputNodePropertyComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport type { GlobalState } from \"../../globalState\";\r\nimport { FloatPropertyTabComponent } from \"../../components/propertyTab/properties/floatPropertyTabComponent\";\r\nimport { Vector2PropertyTabComponent } from \"../../components/propertyTab/properties/vector2PropertyTabComponent\";\r\nimport { Color3PropertyTabComponent } from \"../../components/propertyTab/properties/color3PropertyTabComponent\";\r\nimport { Vector3PropertyTabComponent } from \"../../components/propertyTab/properties/vector3PropertyTabComponent\";\r\nimport { Vector4PropertyTabComponent } from \"../../components/propertyTab/properties/vector4PropertyTabComponent\";\r\nimport { MatrixPropertyTabComponent } from \"../../components/propertyTab/properties/matrixPropertyTabComponent\";\r\nimport { LineContainerComponent } from \"shared-ui-components/lines/lineContainerComponent\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"core/Materials/Node/Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport { NodeMaterialSystemValues } from \"core/Materials/Node/Enums/nodeMaterialSystemValues\";\r\nimport { AnimatedInputBlockTypes } from \"core/Materials/Node/Blocks/Input/animatedInputBlockTypes\";\r\nimport type { InputBlock } from \"core/Materials/Node/Blocks/Input/inputBlock\";\r\nimport { GeneralPropertyTabComponent } from \"./genericNodePropertyComponent\";\r\nimport { CheckBoxLineComponent } from \"../../sharedComponents/checkBoxLineComponent\";\r\nimport { Color4PropertyTabComponent } from \"../../components/propertyTab/properties/color4PropertyTabComponent\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { TextInputLineComponent } from \"shared-ui-components/lines/textInputLineComponent\";\r\nimport type { IPropertyComponentProps } from \"shared-ui-components/nodeGraphSystem/interfaces/propertyComponentProps\";\r\nimport { OptionsLine } from \"shared-ui-components/lines/optionsLineComponent\";\r\nimport { FloatLineComponent } from \"shared-ui-components/lines/floatLineComponent\";\r\nimport { SliderLineComponent } from \"shared-ui-components/lines/sliderLineComponent\";\r\n\r\nexport class InputPropertyTabComponent extends React.Component<IPropertyComponentProps> {\r\n    private _onValueChangedObserver: Nullable<Observer<InputBlock>>;\r\n\r\n    constructor(props: IPropertyComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    override componentDidMount() {\r\n        const inputBlock = this.props.nodeData.data as InputBlock;\r\n        this._onValueChangedObserver = inputBlock.onValueChangedObservable.add(() => {\r\n            this.forceUpdate();\r\n            this.props.stateManager.onUpdateRequiredObservable.notifyObservers(inputBlock);\r\n        });\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        const inputBlock = this.props.nodeData.data as InputBlock;\r\n        if (this._onValueChangedObserver) {\r\n            inputBlock.onValueChangedObservable.remove(this._onValueChangedObserver);\r\n            this._onValueChangedObserver = null;\r\n        }\r\n    }\r\n\r\n    renderValue(globalState: GlobalState) {\r\n        const inputBlock = this.props.nodeData.data as InputBlock;\r\n        switch (inputBlock.type) {\r\n            case NodeMaterialBlockConnectionPointTypes.Float: {\r\n                const cantDisplaySlider = isNaN(inputBlock.min) || isNaN(inputBlock.max) || inputBlock.min === inputBlock.max;\r\n                return (\r\n                    <>\r\n                        <CheckBoxLineComponent label=\"Is boolean\" target={inputBlock} propertyName=\"isBoolean\" />\r\n                        {inputBlock.isBoolean && (\r\n                            <CheckBoxLineComponent\r\n                                label=\"Value\"\r\n                                isSelected={() => {\r\n                                    return inputBlock.value === 1;\r\n                                }}\r\n                                onSelect={(value) => {\r\n                                    inputBlock.value = value ? 1 : 0;\r\n                                    if (inputBlock.isConstant) {\r\n                                        this.props.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n                                    }\r\n                                    this.props.stateManager.onUpdateRequiredObservable.notifyObservers(inputBlock);\r\n                                }}\r\n                            />\r\n                        )}\r\n                        {!inputBlock.isBoolean && (\r\n                            <FloatLineComponent\r\n                                lockObject={this.props.stateManager.lockObject}\r\n                                label=\"Min\"\r\n                                target={inputBlock}\r\n                                propertyName=\"min\"\r\n                                onChange={() => {\r\n                                    if (inputBlock.value < inputBlock.min) {\r\n                                        inputBlock.value = inputBlock.min;\r\n                                        if (inputBlock.isConstant) {\r\n                                            this.props.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n                                        }\r\n                                    }\r\n                                    this.forceUpdate();\r\n                                }}\r\n                            ></FloatLineComponent>\r\n                        )}\r\n                        {!inputBlock.isBoolean && (\r\n                            <FloatLineComponent\r\n                                lockObject={this.props.stateManager.lockObject}\r\n                                label=\"Max\"\r\n                                target={inputBlock}\r\n                                propertyName=\"max\"\r\n                                onChange={() => {\r\n                                    if (inputBlock.value > inputBlock.max) {\r\n                                        inputBlock.value = inputBlock.max;\r\n                                        if (inputBlock.isConstant) {\r\n                                            this.props.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n                                        }\r\n                                    }\r\n                                    this.forceUpdate();\r\n                                }}\r\n                            ></FloatLineComponent>\r\n                        )}\r\n                        {!inputBlock.isBoolean && cantDisplaySlider && <FloatPropertyTabComponent globalState={globalState} inputBlock={inputBlock} />}\r\n                        {!inputBlock.isBoolean && !cantDisplaySlider && (\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.stateManager.lockObject}\r\n                                label=\"Value\"\r\n                                target={inputBlock}\r\n                                propertyName=\"value\"\r\n                                step={Math.abs(inputBlock.max - inputBlock.min) / 100.0}\r\n                                minimum={Math.min(inputBlock.min, inputBlock.max)}\r\n                                maximum={inputBlock.max}\r\n                                onChange={() => {\r\n                                    if (inputBlock.isConstant) {\r\n                                        this.props.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n                                    }\r\n                                    this.props.stateManager.onUpdateRequiredObservable.notifyObservers(inputBlock);\r\n                                }}\r\n                            />\r\n                        )}\r\n                    </>\r\n                );\r\n            }\r\n            case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                return <Vector2PropertyTabComponent lockObject={globalState.lockObject} globalState={globalState} inputBlock={inputBlock} />;\r\n            case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                return (\r\n                    <>\r\n                        <Color3PropertyTabComponent lockObject={globalState.lockObject} globalState={globalState} inputBlock={inputBlock} />\r\n                        <CheckBoxLineComponent\r\n                            label=\"Convert to gamma space\"\r\n                            propertyName=\"convertToGammaSpace\"\r\n                            target={inputBlock}\r\n                            onValueChanged={() => {\r\n                                this.props.stateManager.onUpdateRequiredObservable.notifyObservers(inputBlock);\r\n                            }}\r\n                        />\r\n                        <CheckBoxLineComponent\r\n                            label=\"Convert to linear space\"\r\n                            propertyName=\"convertToLinearSpace\"\r\n                            target={inputBlock}\r\n                            onValueChanged={() => {\r\n                                this.props.stateManager.onUpdateRequiredObservable.notifyObservers(inputBlock);\r\n                            }}\r\n                        />\r\n                    </>\r\n                );\r\n            case NodeMaterialBlockConnectionPointTypes.Color4:\r\n                return (\r\n                    <>\r\n                        <Color4PropertyTabComponent lockObject={globalState.lockObject} globalState={globalState} inputBlock={inputBlock} />\r\n                        <CheckBoxLineComponent\r\n                            label=\"Convert to gamma space\"\r\n                            propertyName=\"convertToGammaSpace\"\r\n                            target={inputBlock}\r\n                            onValueChanged={() => {\r\n                                this.props.stateManager.onUpdateRequiredObservable.notifyObservers(inputBlock);\r\n                            }}\r\n                        />\r\n                        <CheckBoxLineComponent\r\n                            label=\"Convert to linear space\"\r\n                            propertyName=\"convertToLinearSpace\"\r\n                            target={inputBlock}\r\n                            onValueChanged={() => {\r\n                                this.props.stateManager.onUpdateRequiredObservable.notifyObservers(inputBlock);\r\n                            }}\r\n                        />\r\n                    </>\r\n                );\r\n            case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                return <Vector3PropertyTabComponent lockObject={globalState.lockObject} globalState={globalState} inputBlock={inputBlock} />;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n                return <Vector4PropertyTabComponent lockObject={globalState.lockObject} globalState={globalState} inputBlock={inputBlock} />;\r\n            case NodeMaterialBlockConnectionPointTypes.Matrix:\r\n                return <MatrixPropertyTabComponent lockObject={globalState.lockObject} globalState={globalState} inputBlock={inputBlock} />;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    setDefaultValue() {\r\n        const inputBlock = this.props.nodeData.data as InputBlock;\r\n        inputBlock.setDefaultValue();\r\n    }\r\n\r\n    override render() {\r\n        const inputBlock = this.props.nodeData.data as InputBlock;\r\n\r\n        let systemValuesOptions: { label: string; value: NodeMaterialSystemValues }[] = [];\r\n        let attributeOptions: { label: string; value: string }[] = [];\r\n        let animationOptions: { label: string; value: AnimatedInputBlockTypes }[] = [];\r\n\r\n        switch (inputBlock.type) {\r\n            case NodeMaterialBlockConnectionPointTypes.Float:\r\n                animationOptions = [\r\n                    { label: \"None\", value: AnimatedInputBlockTypes.None },\r\n                    { label: \"Time\", value: AnimatedInputBlockTypes.Time },\r\n                    { label: \"RealTime\", value: AnimatedInputBlockTypes.RealTime },\r\n                ];\r\n                systemValuesOptions = [\r\n                    { label: \"Delta time\", value: NodeMaterialSystemValues.DeltaTime },\r\n                    { label: \"Material alpha\", value: NodeMaterialSystemValues.MaterialAlpha },\r\n                ];\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Matrix:\r\n                systemValuesOptions = [\r\n                    { label: \"World\", value: NodeMaterialSystemValues.World },\r\n                    { label: \"World x View\", value: NodeMaterialSystemValues.WorldView },\r\n                    { label: \"World x View x Projection\", value: NodeMaterialSystemValues.WorldViewProjection },\r\n                    { label: \"View\", value: NodeMaterialSystemValues.View },\r\n                    { label: \"View x Projection\", value: NodeMaterialSystemValues.ViewProjection },\r\n                    { label: \"Projection\", value: NodeMaterialSystemValues.Projection },\r\n                ];\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                systemValuesOptions = [{ label: \"Fog color\", value: NodeMaterialSystemValues.FogColor }];\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Color4:\r\n                attributeOptions = [\r\n                    { label: \"color\", value: \"color\" },\r\n                    { label: \"Instance Color\", value: \"instanceColor\" },\r\n                ];\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                attributeOptions = [\r\n                    { label: \"uv\", value: \"uv\" },\r\n                    { label: \"uv2\", value: \"uv2\" },\r\n                    { label: \"uv3\", value: \"uv3\" },\r\n                    { label: \"uv4\", value: \"uv4\" },\r\n                    { label: \"uv5\", value: \"uv5\" },\r\n                    { label: \"uv6\", value: \"uv6\" },\r\n                ];\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                systemValuesOptions = [{ label: \"Camera position\", value: NodeMaterialSystemValues.CameraPosition }];\r\n                attributeOptions = [\r\n                    { label: \"position\", value: \"position\" },\r\n                    { label: \"normal\", value: \"normal\" },\r\n                ];\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n                animationOptions = [\r\n                    { label: \"None\", value: AnimatedInputBlockTypes.None },\r\n                    { label: \"MouseInfo\", value: AnimatedInputBlockTypes.MouseInfo },\r\n                ];\r\n                attributeOptions = [\r\n                    { label: \"matricesIndices\", value: \"matricesIndices\" },\r\n                    { label: \"matricesWeights\", value: \"matricesWeights\" },\r\n                    { label: \"matricesIndicesExtra\", value: \"matricesIndicesExtra\" },\r\n                    { label: \"matricesWeightsExtra\", value: \"matricesWeightsExtra\" },\r\n                    { label: \"tangent\", value: \"tangent\" },\r\n                ];\r\n                systemValuesOptions = [{ label: \"Camera parameters\", value: NodeMaterialSystemValues.CameraParameters }];\r\n                break;\r\n        }\r\n\r\n        const modeOptions = [{ label: \"User-defined\", value: 0 }];\r\n\r\n        if (attributeOptions.length > 0) {\r\n            modeOptions.push({ label: \"Mesh attribute\", value: 1 });\r\n        }\r\n\r\n        if (systemValuesOptions.length > 0) {\r\n            modeOptions.push({ label: \"System value\", value: 2 });\r\n        }\r\n\r\n        const typeOptions = [\r\n            { label: \"None\", value: 0 },\r\n            { label: \"Visible in the inspector\", value: 1 },\r\n            { label: \"Constant\", value: 2 },\r\n        ];\r\n\r\n        return (\r\n            <div>\r\n                <GeneralPropertyTabComponent stateManager={this.props.stateManager} nodeData={this.props.nodeData} />\r\n                <LineContainerComponent title=\"PROPERTIES\">\r\n                    {inputBlock.isUniform && !inputBlock.isSystemValue && inputBlock.animationType === AnimatedInputBlockTypes.None && (\r\n                        <OptionsLine\r\n                            label=\"Type\"\r\n                            options={typeOptions}\r\n                            target={inputBlock}\r\n                            noDirectUpdate={true}\r\n                            extractValue={() => {\r\n                                if (inputBlock.visibleInInspector) {\r\n                                    return 1;\r\n                                }\r\n\r\n                                if (inputBlock.isConstant) {\r\n                                    return 2;\r\n                                }\r\n\r\n                                return 0;\r\n                            }}\r\n                            onSelect={(value: any) => {\r\n                                switch (value) {\r\n                                    case 0:\r\n                                        inputBlock.visibleInInspector = false;\r\n                                        inputBlock.isConstant = false;\r\n                                        break;\r\n                                    case 1:\r\n                                        inputBlock.visibleInInspector = true;\r\n                                        inputBlock.isConstant = false;\r\n                                        break;\r\n                                    case 2:\r\n                                        inputBlock.visibleInInspector = false;\r\n                                        inputBlock.isConstant = true;\r\n                                        break;\r\n                                }\r\n                                this.forceUpdate();\r\n                                this.props.stateManager.onUpdateRequiredObservable.notifyObservers(inputBlock);\r\n                                this.props.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n                            }}\r\n                            propertyName={\"\"}\r\n                        />\r\n                    )}\r\n                    {inputBlock.visibleInInspector && (\r\n                        <TextInputLineComponent\r\n                            label=\"Group\"\r\n                            propertyName=\"groupInInspector\"\r\n                            target={inputBlock}\r\n                            lockObject={this.props.stateManager.lockObject}\r\n                            onChange={() => {\r\n                                this.forceUpdate();\r\n                                this.props.stateManager.onUpdateRequiredObservable.notifyObservers(inputBlock);\r\n                                this.props.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n                            }}\r\n                            throttlePropertyChangedNotification={true}\r\n                        />\r\n                    )}\r\n                    <OptionsLine\r\n                        label=\"Mode\"\r\n                        options={modeOptions}\r\n                        target={inputBlock}\r\n                        noDirectUpdate={true}\r\n                        extractValue={() => {\r\n                            if (inputBlock.isAttribute) {\r\n                                return 1;\r\n                            }\r\n\r\n                            if (inputBlock.isSystemValue) {\r\n                                return 2;\r\n                            }\r\n\r\n                            return 0;\r\n                        }}\r\n                        onSelect={(value: any) => {\r\n                            switch (value) {\r\n                                case 0:\r\n                                    inputBlock.isUniform = true;\r\n                                    inputBlock.setAsSystemValue(null);\r\n                                    this.setDefaultValue();\r\n                                    break;\r\n                                case 1:\r\n                                    inputBlock.setAsAttribute(attributeOptions[0].value);\r\n                                    break;\r\n                                case 2:\r\n                                    inputBlock.setAsSystemValue(systemValuesOptions[0].value);\r\n                                    break;\r\n                            }\r\n                            this.forceUpdate();\r\n                            this.props.stateManager.onUpdateRequiredObservable.notifyObservers(inputBlock);\r\n                            this.props.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n                        }}\r\n                        propertyName={\"\"}\r\n                    />\r\n                    {inputBlock.isAttribute && (\r\n                        <OptionsLine\r\n                            label=\"Attribute\"\r\n                            valuesAreStrings={true}\r\n                            options={attributeOptions}\r\n                            target={inputBlock}\r\n                            propertyName=\"name\"\r\n                            onSelect={(value: any) => {\r\n                                inputBlock.setAsAttribute(value);\r\n                                this.forceUpdate();\r\n\r\n                                this.props.stateManager.onUpdateRequiredObservable.notifyObservers(inputBlock);\r\n                                this.props.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n                            }}\r\n                        />\r\n                    )}\r\n                    {inputBlock.isUniform && animationOptions.length > 0 && (\r\n                        <OptionsLine\r\n                            label=\"Animation type\"\r\n                            options={animationOptions}\r\n                            target={inputBlock}\r\n                            propertyName=\"animationType\"\r\n                            onSelect={() => {\r\n                                this.forceUpdate();\r\n\r\n                                this.props.stateManager.onUpdateRequiredObservable.notifyObservers(inputBlock);\r\n                                this.props.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n                            }}\r\n                        />\r\n                    )}\r\n                    {inputBlock.isUniform &&\r\n                        !inputBlock.isSystemValue &&\r\n                        inputBlock.animationType === AnimatedInputBlockTypes.None &&\r\n                        this.renderValue(this.props.stateManager.data as GlobalState)}\r\n                    {inputBlock.isUniform && inputBlock.isSystemValue && (\r\n                        <OptionsLine\r\n                            label=\"System value\"\r\n                            options={systemValuesOptions}\r\n                            target={inputBlock}\r\n                            propertyName=\"systemValue\"\r\n                            onSelect={(value: any) => {\r\n                                inputBlock.setAsSystemValue(value);\r\n                                this.forceUpdate();\r\n\r\n                                this.props.stateManager.onUpdateRequiredObservable.notifyObservers(inputBlock);\r\n                                this.props.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n                            }}\r\n                        />\r\n                    )}\r\n                    {inputBlock.isUniform && !inputBlock.isSystemValue && inputBlock.animationType === AnimatedInputBlockTypes.None && (\r\n                        <CheckBoxLineComponent label=\"Visible on frame\" target={inputBlock} propertyName={\"visibleOnFrame\"}></CheckBoxLineComponent>\r\n                    )}\r\n                </LineContainerComponent>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
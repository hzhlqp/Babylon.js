{"version":3,"file":"previewManager.js","sourceRoot":"","sources":["../../../src/components/preview/previewManager.ts"],"names":[],"mappings":"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","sourcesContent":["import type { GlobalState } from \"../../globalState\";\r\nimport { NodeMaterial } from \"core/Materials/Node/nodeMaterial\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { WebGPUEngine } from \"core/Engines/webgpuEngine\";\r\nimport { Scene } from \"core/scene\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { HemisphericLight } from \"core/Lights/hemisphericLight\";\r\nimport { ArcRotateCamera } from \"core/Cameras/arcRotateCamera\";\r\nimport { PreviewType } from \"./previewType\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { FramingBehavior } from \"core/Behaviors/Cameras/framingBehavior\";\r\nimport { DirectionalLight } from \"core/Lights/directionalLight\";\r\nimport { LogEntry } from \"../log/logComponent\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport { Color3, Color4 } from \"core/Maths/math.color\";\r\nimport type { PostProcess } from \"core/PostProcesses/postProcess\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { CurrentScreenBlock } from \"core/Materials/Node/Blocks/Dual/currentScreenBlock\";\r\nimport { NodeMaterialModes } from \"core/Materials/Node/Enums/nodeMaterialModes\";\r\nimport { ParticleSystem } from \"core/Particles/particleSystem\";\r\nimport type { IParticleSystem } from \"core/Particles/IParticleSystem\";\r\nimport { ParticleHelper } from \"core/Particles/particleHelper\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { ParticleTextureBlock } from \"core/Materials/Node/Blocks/Particle/particleTextureBlock\";\r\nimport { ReadFile } from \"core/Misc/fileTools\";\r\nimport type { ProceduralTexture } from \"core/Materials/Textures/Procedurals/proceduralTexture\";\r\nimport type { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport { CubeTexture } from \"core/Materials/Textures/cubeTexture\";\r\nimport { Layer } from \"core/Layers/layer\";\r\nimport { DataStorage } from \"core/Misc/dataStorage\";\r\nimport type { NodeMaterialBlock } from \"core/Materials/Node/nodeMaterialBlock\";\r\nimport { CreateTorus } from \"core/Meshes/Builders/torusBuilder\";\r\nimport type { TextureBlock } from \"core/Materials/Node/Blocks/Dual/textureBlock\";\r\nimport { FilesInput } from \"core/Misc/filesInput\";\r\nimport \"core/Helpers/sceneHelpers\";\r\nimport \"core/Rendering/depthRendererSceneComponent\";\r\nimport { ShaderLanguage } from \"core/Materials/shaderLanguage\";\r\nimport { Engine } from \"core/Engines/engine\";\r\nimport { Animation } from \"core/Animations/animation\";\r\nconst dontSerializeTextureContent = true;\r\n\r\n/**\r\n *\r\n */\r\nexport class PreviewManager {\r\n    private _nodeMaterial: NodeMaterial;\r\n    private _onBuildObserver: Nullable<Observer<NodeMaterial>>;\r\n\r\n    private _onPreviewCommandActivatedObserver: Nullable<Observer<boolean>>;\r\n    private _onAnimationCommandActivatedObserver: Nullable<Observer<void>>;\r\n    private _onUpdateRequiredObserver: Nullable<Observer<Nullable<NodeMaterialBlock>>>;\r\n    private _onPreviewBackgroundChangedObserver: Nullable<Observer<void>>;\r\n    private _onBackFaceCullingChangedObserver: Nullable<Observer<void>>;\r\n    private _onDepthPrePassChangedObserver: Nullable<Observer<void>>;\r\n    private _onLightUpdatedObserver: Nullable<Observer<void>>;\r\n    private _onBackgroundHDRUpdatedObserver: Nullable<Observer<void>>;\r\n    private _engine: Engine | WebGPUEngine;\r\n    private _scene: Scene;\r\n    private _meshes: AbstractMesh[];\r\n    private _camera: ArcRotateCamera;\r\n    private _material: NodeMaterial | StandardMaterial;\r\n    private _globalState: GlobalState;\r\n    private _currentType: number;\r\n    private _lightParent: TransformNode;\r\n    private _postprocess: Nullable<PostProcess>;\r\n    private _proceduralTexture: Nullable<ProceduralTexture>;\r\n    private _particleSystem: Nullable<IParticleSystem>;\r\n    private _layer: Nullable<Layer>;\r\n    private _hdrSkyBox: Mesh;\r\n    private _hdrTexture: CubeTexture;\r\n\r\n    private _serializeMaterial(): any {\r\n        const nodeMaterial = this._nodeMaterial;\r\n\r\n        let fullSerialization = false;\r\n\r\n        if (dontSerializeTextureContent) {\r\n            const textureBlocks = nodeMaterial.getAllTextureBlocks();\r\n            for (const block of textureBlocks) {\r\n                const texture = block.texture;\r\n                if (!texture || (block as TextureBlock).hasImageSource) {\r\n                    continue;\r\n                }\r\n                let found = false;\r\n                for (const localTexture of this._engine.getLoadedTexturesCache()) {\r\n                    if (localTexture.uniqueId === texture._texture?.uniqueId) {\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!found) {\r\n                    fullSerialization = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const bufferSerializationState = Texture.SerializeBuffers;\r\n\r\n        if (dontSerializeTextureContent) {\r\n            Texture.SerializeBuffers = fullSerialization;\r\n            Texture._SerializeInternalTextureUniqueId = true;\r\n        }\r\n\r\n        const serializationObject = nodeMaterial.serialize();\r\n\r\n        Texture.SerializeBuffers = bufferSerializationState;\r\n        Texture._SerializeInternalTextureUniqueId = false;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Create a new Preview Manager\r\n     * @param targetCanvas defines the canvas to render to\r\n     * @param globalState defines the global state\r\n     */\r\n    public constructor(targetCanvas: HTMLCanvasElement, globalState: GlobalState) {\r\n        this._nodeMaterial = globalState.nodeMaterial;\r\n        this._globalState = globalState;\r\n\r\n        this._onBuildObserver = this._nodeMaterial.onBuildObservable.add(() => {\r\n            this._updatePreview();\r\n        });\r\n\r\n        this._onPreviewCommandActivatedObserver = globalState.stateManager.onPreviewCommandActivated.add((forceRefresh: boolean) => {\r\n            if (forceRefresh) {\r\n                this._currentType = -1;\r\n                this._scene.disableDepthRenderer();\r\n            }\r\n            this._refreshPreviewMesh();\r\n        });\r\n\r\n        this._onLightUpdatedObserver = globalState.onLightUpdated.add(() => {\r\n            this._prepareLights();\r\n        });\r\n        this._onBackgroundHDRUpdatedObserver = globalState.onBackgroundHDRUpdated.add(() => {\r\n            this._prepareBackgroundHDR();\r\n        });\r\n\r\n        this._onUpdateRequiredObserver = globalState.stateManager.onUpdateRequiredObservable.add(() => {\r\n            this._updatePreview();\r\n        });\r\n\r\n        this._onPreviewBackgroundChangedObserver = globalState.onPreviewBackgroundChanged.add(() => {\r\n            this._scene.clearColor = this._globalState.backgroundColor;\r\n        });\r\n\r\n        this._onAnimationCommandActivatedObserver = globalState.onAnimationCommandActivated.add(() => {\r\n            this._handleAnimations();\r\n        });\r\n\r\n        this._onBackFaceCullingChangedObserver = globalState.onBackFaceCullingChanged.add(() => {\r\n            this._material.backFaceCulling = this._globalState.backFaceCulling;\r\n        });\r\n\r\n        this._onDepthPrePassChangedObserver = globalState.onDepthPrePassChanged.add(() => {\r\n            this._material.needDepthPrePass = this._globalState.depthPrePass;\r\n        });\r\n\r\n        this._initAsync(targetCanvas);\r\n    }\r\n\r\n    public async _initAsync(targetCanvas: HTMLCanvasElement) {\r\n        if (this._nodeMaterial.shaderLanguage === ShaderLanguage.WGSL) {\r\n            this._engine = new WebGPUEngine(targetCanvas);\r\n            await (this._engine as WebGPUEngine).initAsync();\r\n        } else {\r\n            this._engine = new Engine(targetCanvas);\r\n        }\r\n        this._scene = new Scene(this._engine);\r\n        this._scene.clearColor = this._globalState.backgroundColor;\r\n        this._scene.ambientColor = new Color3(1, 1, 1);\r\n        this._camera = new ArcRotateCamera(\"Camera\", 0, 0.8, 4, Vector3.Zero(), this._scene);\r\n\r\n        this._camera.lowerRadiusLimit = 3;\r\n        this._camera.upperRadiusLimit = 10;\r\n        this._camera.wheelPrecision = 20;\r\n        this._camera.minZ = 0.1;\r\n        this._camera.attachControl(false);\r\n\r\n        this._lightParent = new TransformNode(\"LightParent\", this._scene);\r\n\r\n        this._globalState.filesInput = new FilesInput(\r\n            this._engine,\r\n            this._scene,\r\n            (_, scene) => {\r\n                this._meshes.push(...scene.meshes);\r\n                this._prepareScene();\r\n            },\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            () => {\r\n                this._reset();\r\n            },\r\n            true\r\n        );\r\n        const canvas = this._engine.getRenderingCanvas();\r\n        if (canvas) {\r\n            const onDrag = (evt: DragEvent) => {\r\n                evt.stopPropagation();\r\n                evt.preventDefault();\r\n            };\r\n            canvas.addEventListener(\"dragenter\", onDrag, false);\r\n            canvas.addEventListener(\"dragover\", onDrag, false);\r\n\r\n            const onDrop = (evt: DragEvent) => {\r\n                evt.stopPropagation();\r\n                evt.preventDefault();\r\n                this._globalState.onDropEventReceivedObservable.notifyObservers(evt);\r\n            };\r\n            canvas.addEventListener(\"drop\", onDrop, false);\r\n        }\r\n        this._refreshPreviewMesh();\r\n        this._engine.runRenderLoop(() => {\r\n            this._engine.resize();\r\n            this._scene.render();\r\n        });\r\n\r\n        let lastOffsetX: number | undefined = undefined;\r\n        const lightRotationSpeed = 0.01;\r\n\r\n        this._scene.onPointerObservable.add((evt) => {\r\n            if (this._globalState.controlCamera) {\r\n                return;\r\n            }\r\n\r\n            if (evt.type === PointerEventTypes.POINTERUP) {\r\n                lastOffsetX = undefined;\r\n                return;\r\n            }\r\n\r\n            if (evt.event.buttons !== 1) {\r\n                return;\r\n            }\r\n\r\n            if (lastOffsetX === undefined) {\r\n                lastOffsetX = evt.event.offsetX;\r\n            }\r\n\r\n            const rotateLighting = (lastOffsetX - evt.event.offsetX) * lightRotationSpeed;\r\n            this._lightParent.rotation.y += rotateLighting;\r\n            lastOffsetX = evt.event.offsetX;\r\n        });\r\n    }\r\n\r\n    private _reset() {\r\n        this._globalState.envType = PreviewType.Room;\r\n        this._globalState.previewType = PreviewType.Box;\r\n        this._globalState.listOfCustomPreviewFiles = [];\r\n        this._scene.meshes.forEach((m) => m.dispose());\r\n        this._globalState.onRefreshPreviewMeshControlComponentRequiredObservable.notifyObservers();\r\n        this._refreshPreviewMesh(true);\r\n    }\r\n\r\n    private _handleAnimations() {\r\n        this._scene.stopAllAnimations();\r\n\r\n        if (this._globalState.rotatePreview) {\r\n            for (const root of this._scene.rootNodes) {\r\n                const transformNode = root as TransformNode;\r\n\r\n                if (transformNode.getClassName() === \"TransformNode\" || transformNode.getClassName() === \"Mesh\" || transformNode.getClassName() === \"GroundMesh\") {\r\n                    if (transformNode.rotationQuaternion) {\r\n                        transformNode.rotation = transformNode.rotationQuaternion.toEulerAngles();\r\n                        transformNode.rotationQuaternion = null;\r\n                    }\r\n                    Animation.CreateAndStartAnimation(\"turnTable\", root, \"rotation.y\", 60, 1200, transformNode.rotation.y, transformNode.rotation.y + 2 * Math.PI, 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _prepareLights() {\r\n        // Remove current lights\r\n        const currentLights = this._scene.lights.slice(0);\r\n\r\n        for (const light of currentLights) {\r\n            light.dispose();\r\n        }\r\n\r\n        // Create new lights based on settings\r\n        if (this._globalState.hemisphericLight) {\r\n            new HemisphericLight(\"Hemispheric light\", new Vector3(0, 1, 0), this._scene);\r\n        }\r\n\r\n        if (this._globalState.directionalLight0) {\r\n            const dir0 = new DirectionalLight(\"Directional light #0\", new Vector3(0.841626576496605, -0.2193391004130599, -0.49351298337996535), this._scene);\r\n            dir0.intensity = 0.9;\r\n            dir0.diffuse = new Color3(0.9294117647058824, 0.9725490196078431, 0.996078431372549);\r\n            dir0.specular = new Color3(0.9294117647058824, 0.9725490196078431, 0.996078431372549);\r\n            dir0.parent = this._lightParent;\r\n        }\r\n\r\n        if (this._globalState.directionalLight1) {\r\n            const dir1 = new DirectionalLight(\"Directional light #1\", new Vector3(-0.9519937437504213, -0.24389315636999764, -0.1849974057546125), this._scene);\r\n            dir1.intensity = 1.2;\r\n            dir1.specular = new Color3(0.9803921568627451, 0.9529411764705882, 0.7725490196078432);\r\n            dir1.diffuse = new Color3(0.9803921568627451, 0.9529411764705882, 0.7725490196078432);\r\n            dir1.parent = this._lightParent;\r\n        }\r\n    }\r\n\r\n    private _prepareBackgroundHDR() {\r\n        this._scene.environmentTexture = null;\r\n        if (this._hdrSkyBox) {\r\n            this._scene.removeMesh(this._hdrSkyBox);\r\n        }\r\n\r\n        if (this._globalState.backgroundHDR) {\r\n            this._scene.environmentTexture = this._hdrTexture;\r\n            this._hdrSkyBox = this._scene.createDefaultSkybox(this._hdrTexture) as Mesh;\r\n        }\r\n\r\n        this._updatePreview();\r\n    }\r\n    private _prepareScene() {\r\n        this._camera.useFramingBehavior = this._globalState.mode === NodeMaterialModes.Material;\r\n        switch (this._globalState.mode) {\r\n            case NodeMaterialModes.Material: {\r\n                this._prepareLights();\r\n                if (!this._globalState.envFile) {\r\n                    this._globalState.backgroundHDR = false;\r\n                }\r\n                this._prepareBackgroundHDR();\r\n\r\n                const framingBehavior = this._camera.getBehaviorByName(\"Framing\") as FramingBehavior;\r\n\r\n                setTimeout(() => {\r\n                    // Let the behavior activate first\r\n                    framingBehavior.framingTime = 0;\r\n                    framingBehavior.elevationReturnTime = -1;\r\n\r\n                    if (this._scene.meshes.length) {\r\n                        const worldExtends = this._scene.getWorldExtends();\r\n                        this._camera.lowerRadiusLimit = null;\r\n                        this._camera.upperRadiusLimit = null;\r\n                        framingBehavior.zoomOnBoundingInfo(worldExtends.min, worldExtends.max);\r\n                    }\r\n\r\n                    this._camera.pinchPrecision = 200 / this._camera.radius;\r\n                    this._camera.upperRadiusLimit = 5 * this._camera.radius;\r\n                });\r\n\r\n                this._camera.wheelDeltaPercentage = 0.01;\r\n                this._camera.pinchDeltaPercentage = 0.01;\r\n\r\n                // Animations\r\n                this._handleAnimations();\r\n                break;\r\n            }\r\n            case NodeMaterialModes.PostProcess:\r\n            case NodeMaterialModes.ProceduralTexture: {\r\n                this._camera.radius = 4;\r\n                this._camera.upperRadiusLimit = 10;\r\n                break;\r\n            }\r\n            case NodeMaterialModes.Particle: {\r\n                this._camera.radius = this._globalState.previewType === PreviewType.Explosion ? 50 : this._globalState.previewType === PreviewType.DefaultParticleSystem ? 6 : 20;\r\n                this._camera.upperRadiusLimit = 5000;\r\n                this._globalState.particleSystemBlendMode = this._particleSystem?.blendMode ?? ParticleSystem.BLENDMODE_STANDARD;\r\n                break;\r\n            }\r\n            case NodeMaterialModes.GaussianSplatting: {\r\n                this._camera.radius = 6;\r\n                this._camera.upperRadiusLimit = 5000;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Material\r\n        this._updatePreview();\r\n    }\r\n\r\n    /**\r\n     * Default Environment URL\r\n     */\r\n    public static DefaultEnvironmentURL = \"https://assets.babylonjs.com/environments/environmentSpecular.env\";\r\n\r\n    private _refreshPreviewMesh(force?: boolean) {\r\n        if (this._globalState.mode === NodeMaterialModes.Material) {\r\n            switch (this._globalState.envType) {\r\n                case PreviewType.Room:\r\n                    this._hdrTexture = new CubeTexture(PreviewManager.DefaultEnvironmentURL, this._scene);\r\n                    if (this._hdrTexture) {\r\n                        this._prepareBackgroundHDR();\r\n                    }\r\n                    break;\r\n                case PreviewType.Custom: {\r\n                    const blob = new Blob([this._globalState.envFile], { type: \"octet/stream\" });\r\n                    const reader = new FileReader();\r\n                    reader.onload = (evt) => {\r\n                        const dataurl = evt.target!.result as string;\r\n                        this._hdrTexture = new CubeTexture(dataurl, this._scene, undefined, false, undefined, undefined, undefined, undefined, undefined, \".env\");\r\n                        this._prepareBackgroundHDR();\r\n                    };\r\n                    reader.readAsDataURL(blob);\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n            this._scene.environmentTexture = null;\r\n        }\r\n        if (this._currentType !== this._globalState.previewType || this._currentType === PreviewType.Custom || force) {\r\n            this._currentType = this._globalState.previewType;\r\n            if (this._meshes && this._meshes.length) {\r\n                for (const mesh of this._meshes) {\r\n                    mesh.dispose();\r\n                }\r\n            }\r\n            this._meshes = [];\r\n\r\n            if (this._layer) {\r\n                this._layer.dispose();\r\n                this._layer = null;\r\n            }\r\n\r\n            const lights = this._scene.lights.slice(0);\r\n            for (const light of lights) {\r\n                light.dispose();\r\n            }\r\n\r\n            this._engine.releaseEffects();\r\n\r\n            if (this._particleSystem) {\r\n                this._particleSystem.onBeforeDrawParticlesObservable.clear();\r\n                this._particleSystem.onDisposeObservable.clear();\r\n                this._particleSystem.stop();\r\n                this._particleSystem.dispose();\r\n                this._particleSystem = null;\r\n            }\r\n\r\n            SceneLoader.ShowLoadingScreen = false;\r\n\r\n            this._globalState.onIsLoadingChanged.notifyObservers(true);\r\n\r\n            const bakeTransformation = (mesh: Mesh) => {\r\n                mesh.bakeCurrentTransformIntoVertices();\r\n                mesh.refreshBoundingInfo();\r\n                mesh.parent = null;\r\n            };\r\n\r\n            if (this._globalState.mode === NodeMaterialModes.Material) {\r\n                switch (this._globalState.previewType) {\r\n                    case PreviewType.Box:\r\n                        SceneLoader.AppendAsync(\"https://assets.babylonjs.com/meshes/\", \"roundedCube.glb\", this._scene).then(() => {\r\n                            bakeTransformation(this._scene.getMeshByName(\"__root__\")!.getChildMeshes(true)[0] as Mesh);\r\n                            this._meshes.push(...this._scene.meshes);\r\n                            this._prepareScene();\r\n                        });\r\n                        return;\r\n                    case PreviewType.Sphere:\r\n                        SceneLoader.AppendAsync(\"https://assets.babylonjs.com/meshes/\", \"previewSphere.glb\", this._scene).then(() => {\r\n                            bakeTransformation(this._scene.getMeshByName(\"__root__\")!.getChildMeshes(true)[0] as Mesh);\r\n                            this._meshes.push(...this._scene.meshes);\r\n                            this._prepareScene();\r\n                        });\r\n                        break;\r\n                    case PreviewType.Torus:\r\n                        this._meshes.push(\r\n                            CreateTorus(\r\n                                \"dummy-torus\",\r\n                                {\r\n                                    diameter: 2,\r\n                                    thickness: 0.5,\r\n                                    tessellation: 32,\r\n                                },\r\n                                this._scene\r\n                            )\r\n                        );\r\n                        break;\r\n                    case PreviewType.Cylinder:\r\n                        SceneLoader.AppendAsync(\"https://assets.babylonjs.com/meshes/\", \"roundedCylinder.glb\", this._scene).then(() => {\r\n                            this._meshes.push(...this._scene.meshes);\r\n                            this._prepareScene();\r\n                        });\r\n                        return;\r\n                    case PreviewType.Plane: {\r\n                        SceneLoader.AppendAsync(\"https://assets.babylonjs.com/meshes/\", \"highPolyPlane.glb\", this._scene).then(() => {\r\n                            bakeTransformation(this._scene.getMeshByName(\"__root__\")!.getChildMeshes(true)[0] as Mesh);\r\n                            this._meshes.push(...this._scene.meshes);\r\n                            this._prepareScene();\r\n                        });\r\n                        break;\r\n                    }\r\n                    case PreviewType.ShaderBall:\r\n                        SceneLoader.AppendAsync(\"https://assets.babylonjs.com/meshes/\", \"shaderBall.glb\", this._scene).then(() => {\r\n                            this._meshes.push(...this._scene.meshes);\r\n                            this._prepareScene();\r\n                        });\r\n                        return;\r\n                    case PreviewType.Custom:\r\n                        this._globalState.filesInput.loadFiles({ target: { files: this._globalState.listOfCustomPreviewFiles } });\r\n                        return;\r\n                }\r\n            } else if (this._globalState.mode === NodeMaterialModes.ProceduralTexture) {\r\n                this._layer = new Layer(\"proceduralLayer\", null, this._scene, false);\r\n            } else if (this._globalState.mode === NodeMaterialModes.Particle) {\r\n                switch (this._globalState.previewType) {\r\n                    case PreviewType.DefaultParticleSystem:\r\n                        this._particleSystem = ParticleHelper.CreateDefault(new Vector3(0, 0, 0), 500, this._scene);\r\n                        this._particleSystem.blendMode = DataStorage.ReadNumber(\"DefaultParticleSystemBlendMode\", ParticleSystem.BLENDMODE_ONEONE);\r\n                        this._particleSystem.start();\r\n                        break;\r\n                    case PreviewType.Bubbles:\r\n                        this._particleSystem = new ParticleSystem(\"particles\", 4000, this._scene);\r\n                        this._particleSystem.particleTexture = new Texture(\"https://assets.babylonjs.com/particles/textures/explosion/Flare.png\", this._scene);\r\n                        this._particleSystem.minSize = 0.1;\r\n                        this._particleSystem.maxSize = 1.0;\r\n                        this._particleSystem.minLifeTime = 0.5;\r\n                        this._particleSystem.maxLifeTime = 5.0;\r\n                        this._particleSystem.minEmitPower = 0.5;\r\n                        this._particleSystem.maxEmitPower = 3.0;\r\n                        this._particleSystem.createBoxEmitter(new Vector3(-1, 1, -1), new Vector3(1, 1, 1), new Vector3(-0.1, -0.1, -0.1), new Vector3(0.1, 0.1, 0.1));\r\n                        this._particleSystem.emitRate = 100;\r\n                        this._particleSystem.blendMode = DataStorage.ReadNumber(\"DefaultParticleSystemBlendMode\", ParticleSystem.BLENDMODE_ONEONE);\r\n                        this._particleSystem.color1 = new Color4(1, 1, 0, 1);\r\n                        this._particleSystem.color2 = new Color4(1, 0.5, 0, 1);\r\n                        this._particleSystem.gravity = new Vector3(0, -1.0, 0);\r\n                        this._particleSystem.start();\r\n                        break;\r\n                    case PreviewType.Explosion:\r\n                        this._loadParticleSystem(this._globalState.previewType, 1);\r\n                        return;\r\n                    case PreviewType.Fire:\r\n                    case PreviewType.Rain:\r\n                    case PreviewType.Smoke:\r\n                        this._loadParticleSystem(this._globalState.previewType);\r\n                        return;\r\n                    case PreviewType.Custom:\r\n                        ReadFile(\r\n                            this._globalState.previewFile,\r\n                            (json) => {\r\n                                this._particleSystem = ParticleSystem.Parse(JSON.parse(json), this._scene, \"\");\r\n                                this._particleSystem.start();\r\n                                this._prepareScene();\r\n                            },\r\n                            undefined,\r\n                            false,\r\n                            (error) => {\r\n                                // eslint-disable-next-line no-console\r\n                                console.log(error);\r\n                            }\r\n                        );\r\n                        return;\r\n                }\r\n            } else if (this._globalState.mode === NodeMaterialModes.GaussianSplatting) {\r\n                switch (this._globalState.previewType) {\r\n                    case PreviewType.Parrot:\r\n                        SceneLoader.AppendAsync(\"https://assets.babylonjs.com/splats/\", \"gs_Sqwakers_trimed.splat\", this._scene).then(() => {\r\n                            this._meshes.push(...this._scene.meshes);\r\n                            this._prepareScene();\r\n                        });\r\n                        break;\r\n                    case PreviewType.BricksSkull:\r\n                        SceneLoader.AppendAsync(\"https://assets.babylonjs.com/splats/\", \"gs_Skull.splat\", this._scene).then(() => {\r\n                            this._meshes.push(...this._scene.meshes);\r\n                            this._prepareScene();\r\n                        });\r\n                        break;\r\n                    case PreviewType.Plants:\r\n                        SceneLoader.AppendAsync(\"https://assets.babylonjs.com/splats/\", \"gs_Plants.splat\", this._scene).then(() => {\r\n                            this._meshes.push(...this._scene.meshes);\r\n                            this._prepareScene();\r\n                        });\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _loadParticleSystem(particleNumber: number, systemIndex = 0, prepareScene = true) {\r\n        let name = \"\";\r\n\r\n        switch (particleNumber) {\r\n            case PreviewType.Explosion:\r\n                name = \"explosion\";\r\n                break;\r\n            case PreviewType.Fire:\r\n                name = \"fire\";\r\n                break;\r\n            case PreviewType.Rain:\r\n                name = \"rain\";\r\n                break;\r\n            case PreviewType.Smoke:\r\n                name = \"smoke\";\r\n                break;\r\n        }\r\n\r\n        ParticleHelper.CreateAsync(name, this._scene).then((set) => {\r\n            for (let i = 0; i < set.systems.length; ++i) {\r\n                if (i == systemIndex) {\r\n                    this._particleSystem = set.systems[i];\r\n                    this._particleSystem.disposeOnStop = true;\r\n                    this._particleSystem.onDisposeObservable.add(() => {\r\n                        this._loadParticleSystem(particleNumber, systemIndex, false);\r\n                    });\r\n                    this._particleSystem.start();\r\n                } else {\r\n                    set.systems[i].dispose();\r\n                }\r\n            }\r\n            if (prepareScene) {\r\n                this._prepareScene();\r\n            } else {\r\n                this._updatePreview();\r\n            }\r\n        });\r\n    }\r\n\r\n    private _forceCompilationAsync(material: NodeMaterial, mesh: AbstractMesh): Promise<void> {\r\n        return material.forceCompilationAsync(mesh);\r\n    }\r\n\r\n    private _updatePreview() {\r\n        try {\r\n            const serializationObject = this._serializeMaterial();\r\n\r\n            const store = NodeMaterial.IgnoreTexturesAtLoadTime;\r\n            NodeMaterial.IgnoreTexturesAtLoadTime = false;\r\n            const tempMaterial = NodeMaterial.Parse(serializationObject, this._scene, \"\", this._nodeMaterial.shaderLanguage);\r\n            NodeMaterial.IgnoreTexturesAtLoadTime = store;\r\n\r\n            tempMaterial.backFaceCulling = this._globalState.backFaceCulling;\r\n            tempMaterial.needDepthPrePass = this._globalState.depthPrePass;\r\n\r\n            if (this._postprocess) {\r\n                this._postprocess.dispose(this._camera);\r\n                this._postprocess = null;\r\n            }\r\n\r\n            if (this._proceduralTexture) {\r\n                this._proceduralTexture.dispose();\r\n                this._proceduralTexture = null;\r\n            }\r\n\r\n            switch (this._globalState.mode) {\r\n                case NodeMaterialModes.PostProcess: {\r\n                    this._globalState.onIsLoadingChanged.notifyObservers(false);\r\n\r\n                    this._postprocess = tempMaterial.createPostProcess(this._camera, 1.0, Constants.TEXTURE_NEAREST_SAMPLINGMODE, this._engine);\r\n\r\n                    const currentScreen = tempMaterial.getBlockByPredicate((block) => block instanceof CurrentScreenBlock);\r\n                    if (currentScreen && this._postprocess) {\r\n                        this._postprocess.externalTextureSamplerBinding = true;\r\n                        this._postprocess.onApplyObservable.add((effect) => {\r\n                            effect.setTexture(\"textureSampler\", (currentScreen as CurrentScreenBlock).texture);\r\n                        });\r\n                    }\r\n\r\n                    if (this._material) {\r\n                        this._material.dispose();\r\n                    }\r\n                    this._material = tempMaterial;\r\n                    break;\r\n                }\r\n                case NodeMaterialModes.ProceduralTexture: {\r\n                    this._globalState.onIsLoadingChanged.notifyObservers(false);\r\n\r\n                    this._proceduralTexture = tempMaterial.createProceduralTexture(512, this._scene);\r\n\r\n                    if (this._material) {\r\n                        this._material.dispose();\r\n                    }\r\n\r\n                    if (this._layer) {\r\n                        this._layer.texture = this._proceduralTexture;\r\n                    }\r\n\r\n                    break;\r\n                }\r\n\r\n                case NodeMaterialModes.Particle: {\r\n                    this._globalState.onIsLoadingChanged.notifyObservers(false);\r\n\r\n                    this._particleSystem!.onBeforeDrawParticlesObservable.clear();\r\n\r\n                    this._particleSystem!.onBeforeDrawParticlesObservable.add((effect) => {\r\n                        const textureBlock = tempMaterial.getBlockByPredicate((block) => block instanceof ParticleTextureBlock);\r\n                        if (textureBlock && (textureBlock as ParticleTextureBlock).texture && effect) {\r\n                            effect.setTexture(\"diffuseSampler\", (textureBlock as ParticleTextureBlock).texture);\r\n                        }\r\n                    });\r\n                    tempMaterial.createEffectForParticles(this._particleSystem!);\r\n\r\n                    this._particleSystem!.blendMode = this._globalState.particleSystemBlendMode;\r\n\r\n                    if (this._material) {\r\n                        this._material.dispose();\r\n                    }\r\n                    this._material = tempMaterial;\r\n                    break;\r\n                }\r\n\r\n                default: {\r\n                    if (this._meshes.length) {\r\n                        const tasks = this._meshes.map((m) => {\r\n                            m.hasVertexAlpha = false;\r\n                            return this._forceCompilationAsync(tempMaterial, m);\r\n                        });\r\n\r\n                        Promise.all(tasks)\r\n                            .then(() => {\r\n                                for (const mesh of this._meshes) {\r\n                                    mesh.material = tempMaterial;\r\n                                }\r\n\r\n                                if (this._material) {\r\n                                    this._material.dispose();\r\n                                }\r\n\r\n                                this._material = tempMaterial;\r\n                                this._globalState.onIsLoadingChanged.notifyObservers(false);\r\n                            })\r\n                            .catch((reason) => {\r\n                                this._globalState.onLogRequiredObservable.notifyObservers(new LogEntry(\"Shader compilation error:\\r\\n\" + reason, true));\r\n                                this._globalState.onIsLoadingChanged.notifyObservers(false);\r\n                            });\r\n                    } else {\r\n                        this._material = tempMaterial;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        } catch (err) {\r\n            // Ignore the error\r\n            this._globalState.onIsLoadingChanged.notifyObservers(false);\r\n        }\r\n    }\r\n\r\n    public dispose() {\r\n        this._nodeMaterial.onBuildObservable.remove(this._onBuildObserver);\r\n        this._globalState.stateManager.onPreviewCommandActivated.remove(this._onPreviewCommandActivatedObserver);\r\n        this._globalState.stateManager.onUpdateRequiredObservable.remove(this._onUpdateRequiredObserver);\r\n        this._globalState.onAnimationCommandActivated.remove(this._onAnimationCommandActivatedObserver);\r\n        this._globalState.onPreviewBackgroundChanged.remove(this._onPreviewBackgroundChangedObserver);\r\n        this._globalState.onBackFaceCullingChanged.remove(this._onBackFaceCullingChangedObserver);\r\n        this._globalState.onDepthPrePassChanged.remove(this._onDepthPrePassChangedObserver);\r\n        this._globalState.onLightUpdated.remove(this._onLightUpdatedObserver);\r\n        this._globalState.onBackgroundHDRUpdated.remove(this._onBackgroundHDRUpdatedObserver);\r\n\r\n        if (this._material) {\r\n            this._material.dispose(false, true);\r\n        }\r\n\r\n        this._camera.dispose();\r\n        for (const mesh of this._meshes) {\r\n            mesh.dispose();\r\n        }\r\n\r\n        this._scene.dispose();\r\n        this._engine.dispose();\r\n    }\r\n}\r\n"]}
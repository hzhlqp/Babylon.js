{"version":3,"file":"nodeListComponent.js","sourceRoot":"","sources":["../../../src/components/nodeList/nodeListComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport * as React from \"react\";\r\nimport type { GlobalState } from \"../../globalState\";\r\nimport { LineContainerComponent } from \"shared-ui-components/lines/lineContainerComponent\";\r\nimport { DraggableLineComponent } from \"shared-ui-components/lines/draggableLineComponent\";\r\nimport { NodeMaterialModes } from \"core/Materials/Node/Enums/nodeMaterialModes\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { DraggableLineWithButtonComponent } from \"shared-ui-components/lines/draggableLineWithButtonComponent\";\r\nimport { LineWithFileButtonComponent } from \"shared-ui-components/lines/lineWithFileButtonComponent\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport addButton from \"../../imgs/add.svg\";\r\nimport deleteButton from \"../../imgs/delete.svg\";\r\nimport { NodeLedger } from \"shared-ui-components/nodeGraphSystem/nodeLedger\";\r\n\r\nimport \"./nodeList.scss\";\r\n\r\ninterface INodeListComponentProps {\r\n    globalState: GlobalState;\r\n}\r\n\r\nexport class NodeListComponent extends React.Component<INodeListComponentProps, { filter: string }> {\r\n    private _onResetRequiredObserver: Nullable<Observer<boolean>>;\r\n\r\n    private static _Tooltips: { [key: string]: string } = {\r\n        BonesBlock: \"Provides a world matrix for each vertex, based on skeletal (bone/joint) animation\",\r\n        MorphTargetsBlock: \"Provides the final positions, normals, tangents, and uvs based on morph targets in a mesh\",\r\n        AddBlock: \"Adds the left and right inputs of the same type together\",\r\n        DistanceBlock: \"Provides a distance vector based on the left and right input vectors\",\r\n        DivideBlock: \"Divides the left input by the right input of the same type\",\r\n        LengthBlock: \"Outputs the length of an input vector\",\r\n        MaxBlock: \"Outputs the largest value between the left and right inputs of the same type\",\r\n        MinBlock: \"Outputs the smallest value between the left and right inputs of the same type\",\r\n        MultiplyBlock: \"Multiplies the left and right inputs of the same type together\",\r\n        NegateBlock: \"Multiplies the input by -1\",\r\n        OneMinusBlock: \"Subtracts each channel of the input value from 1 (1 - input)\",\r\n        RandomNumberBlock: \"Provides a random number based on an input seed\",\r\n        ReciprocalBlock: \"Quotient of 1 divided by the input\",\r\n        ScaleBlock: \"Multiplies the input channels by a float factor\",\r\n        SubtractBlock: \"Subtracts the right input from the left input of the same type\",\r\n        GradientBlock: \"Returns the color in the gradient represented by the target value of the input\",\r\n        PosterizeBlock: \"Reduces the number of values in each channel to the number in the corresponding channel of steps\",\r\n        ReplaceColorBlock: \"Outputs the replacement color if the distance between value and reference is less than distance, else outputs the value color\",\r\n        ColorMergerBlock: \"Combines float input channels into a color\",\r\n        ColorSplitterBlock: \"Separates color input channels into individual floats\",\r\n        VectorMergerBlock: \"Combines up to four input floats into a vector\",\r\n        VectorSplitterBlock: \"Separates vectors input channels into individual floats\",\r\n        Color3: \"A color made up of red, green, and blue channel values\",\r\n        Color4: \"A color made up of red, green, blue, and alpha channel values\",\r\n        MaterialAlphaBlock: \"A float representing the alpha value of the material\",\r\n        DeltaTimeBlock: \"A float representing the time that has passed since the last frame was rendered\",\r\n        Float: \"A floating point number representing a value with a fractional component\",\r\n        TextureBlock: \"A node for reading a linked or embedded texture file\",\r\n        PrePassTextureBlock: \"A node for reading textures from the prepass\",\r\n        MouseInfoBlock: \"return a Vector4 that contains x, y, leftButton, rightButton\",\r\n        TimeBlock: \"A float value that represents the time that has passed since the scene was loaded (it is incremented by 0.6 each second)\",\r\n        RealTimeBlock: \"A float value that represents the number of seconds that have elapsed since the engine was initialized\",\r\n        Vector2: \"a vector composed of X and Y channels\",\r\n        Vector3: \"a vector composed of X, Y, and Z channels\",\r\n        Vector4: \"a vector composed of X, Y, Z, and W channels\",\r\n        LerpBlock: \"Outputs a value that is a mix of the left and right inputs based on the target value\",\r\n        NLerpBlock: \"Outputs a value that is a mix of the left and right inputs based on the target's normalized value\",\r\n        SmoothStepBlock: \"Outputs a value based on a the input value's position on a curve between the two edge values\",\r\n        StepBlock: \"Outputs 1 for any input value above the edge input, outputs 0 for any input value below the edge input\",\r\n        Matrix: \"A 4x4 table of related values\",\r\n        ProjectionMatrixBlock: \"A matrix to remap points in 3D space to 2D plane relative to the screen\",\r\n        ViewMatrixBlock: \"A matrix to remap points in 3D space to 2D plane relative to the view of the scene camera\",\r\n        ViewProjectionMatrixBlock: \"A matrix to remap points in 3D space to 2D view space before remapping to 2D screen space\",\r\n        WorldMatrixBlock: \"A matrix to remap points in 3D local space to 3D world space\",\r\n        WorldViewProjectionMatrixBlock: \"A matrix to remap points in 3D local space to 3D world space, then to 2D camera space, and ending in 2D screen space\",\r\n        ColorBlock: \"Outputs the RGBA color of each vertex in the mesh\",\r\n        InstanceColorBlock: \"Outputs the RGBA color of each instance\",\r\n        InstancesBlock: \"Provides the world matrix for each instance to apply this material to all instances\",\r\n        MatrixIndicesBlock: \"A Vector4 representing the vertex to bone skinning assignments\",\r\n        MatrixWeightsBlock: \"A Vector4 representing the vertex to bone skinning weights\",\r\n        MatrixIndicesExtraBlock: \"A Vector4 representing the vertex to bone skinning assignments when the number of influences per bone is greater than 4\",\r\n        MatrixWeightsExtraBlock: \"A Vector4 representing the vertex to bone skinning weights when the number of influences per bone is greater than 4\",\r\n        NormalBlock: \"A Vector3 representing the normal of each vertex of the attached mesh\",\r\n        PositionBlock: \"A Vector3 representing the position of each vertex of the attached mesh\",\r\n        TangentBlock: \"A Vector3 representing the tangent of each vertex of the attached mesh\",\r\n        UVBlock: \"A Vector2 representing the UV coordinates of each vertex of the attached mesh\",\r\n        WorldNormal: \"A Vector4 representing the normal of each vertex of the attached mesh transformed into world space\",\r\n        WorldTangent: \"A Vector4 representing the tangent of each vertex of the attached mesh transformed into world space\",\r\n        PerturbNormalBlock: \"Creates high-frequency detail normal vectors based on a normal map, the world position, and world normal\",\r\n        TBNBlock: \"Creates a TBN matrix from normal, tangent, and bitangent vectors\",\r\n        NormalBlend: \"Outputs the result of blending two normal maps together using a per-channel screen\",\r\n        WorldPosition: \"A Vector4 representing the position of each vertex of the attached mesh transformed into world space\",\r\n        DiscardBlock: \"A final node that will not output a pixel below the cutoff value\",\r\n        FragmentOutputBlock: \"A mandatory final node for outputing the color of each pixel\",\r\n        PrePassOutputBlock: \"An optional final node for outputing geometry data on prepass textures\",\r\n        VertexOutputBlock: \"A mandatory final node for outputing the position of each vertex\",\r\n        ClampBlock: \"Outputs values above the maximum or below minimum as maximum or minimum values respectively\",\r\n        NormalizeBlock: \"Remaps the length of a vector or color to 1\",\r\n        RemapBlock: \"Remaps input value between sourceMin and sourceMax to a new range between targetMin and targetMax\",\r\n        CeilingBlock: \"Outputs fractional values as the next higher whole number\",\r\n        FloorBlock: \"Outputs fractional values as the next lower whole number\",\r\n        RoundBlock: \"Outputs fractional values rounded to the nearest whole number\",\r\n        ModBlock: \"Outputs the value of one parameter modulo another\",\r\n        CameraPositionBlock: \"Outputs a Vector3 position of the active scene camera\",\r\n        CameraParametersBlock: \"Outputs a Vector4 containing (-1 for webGL and 1 for webGPU, camera.minZ, camera.maxZ, 1 / camera.maxZ)\",\r\n        FogBlock: \"Applies fog to the scene with an increasing opacity based on distance from the camera\",\r\n        FogColorBlock: \"The system value for fog color pulled from the scene\",\r\n        ImageProcessingBlock: \"Provides access to all of the Babylon image processing properties\",\r\n        LightBlock: \"Outputs diffuse and specular contributions from one or more scene lights\",\r\n        LightInformationBlock: \"Provides the direction, color and intensity of a selected light based on its world position\",\r\n        ReflectionTextureBlock: \"Creates a reflection from the input texture\",\r\n        ViewDirectionBlock: \"Outputs the direction vector of where the camera is aimed\",\r\n        AbsBlock: \"Outputs the absolute value of the input value\",\r\n        ArcCosBlock: \"Outputs the inverse of the cosine value based on the input value\",\r\n        ArcSinBlock: \"Outputs the inverse of the sine value based on the input value\",\r\n        ArcTan2Block: \"Outputs the inverse of the tangent value based on the input value\",\r\n        ArcTanBlock: \"Outputs the inverse of the tangent value based on the input value\",\r\n        SetBlock: \"Outputs the alias based on the input value\",\r\n        CosBlock: \"Outputs the cosine value based on the input value\",\r\n        DegreesToRadiansBlock: \"Converts the input degrees value to radians\",\r\n        Exp2Block: \"Outputs the input value multiplied by itself 1 time. (Exponent of 2)\",\r\n        ExpBlock: \"Outputs the input value multiplied by itself 9 time. (Exponent of 10)\",\r\n        FractBlock: \"Outputs only the fractional value of a floating point number\",\r\n        LogBlock: \"The logarithmic value based on the input value\",\r\n        PowBlock: \"Outputs the input value multiplied by itself the number of times equal to the power input (Exponent of power)\",\r\n        RadiansToDegreesBlock: \"Converts the input radians value to degrees\",\r\n        SawToothWaveBlock: \"Outputs a sawtooth pattern value between -1 and 1 based on the input value\",\r\n        SignBlock: \"returns 1 if the input is positive, 0 if input is equal to 0, or -1 if the input is negative\",\r\n        SinBlock: \"Outputs the sine value based on the input value\",\r\n        SqrtBlock: \"Outputs the square root of the input value\",\r\n        SquareWaveBlock: \"Outputs a stepped pattern value between -1 and 1 based on the input value\",\r\n        TanBlock: \"Outputs the tangent value based on the input value\",\r\n        TriangleWaveBlock: \"Outputs a sawtooth pattern value between 0 and 1 based on the input value\",\r\n        CrossBlock: \"Outputs a vector that is perpendicular to two input vectors\",\r\n        DotBlock: \"Outputs the cos of the angle between two vectors\",\r\n        FresnelBlock: \"Outputs the grazing angle of the surface of the mesh, relative to a camera influenced by the bias and power inputs\",\r\n        TransformBlock: \"Transforms a input vector based on the input matrix\",\r\n        DerivativeBlock: \"FRAGMENT SHADER ONLY. Provides the rate of change for an input on a given axis (x,y).\",\r\n        DesaturateBlock: \"Convert a color input into a grayscale representation.\",\r\n        WorldViewMatrixBlock: \"A matrix to remap points in 3D local space to 3D world space, and ending in 2D camera space.\",\r\n        FrontFacingBlock: \"Returns 1 if a mesh triangle faces the normal direction and 0 if it does not.\",\r\n        SimplexPerlin3DBlock: \"Creates a type of gradient noise with few directional artifacts.\",\r\n        WorleyNoise3DBlock: \"Creates a random pattern resembling cells.\",\r\n        ReflectBlock: \"Outputs the direction of the input vector reflected across the surface normal.\",\r\n        RefractBlock: \"Outputs a direction simulating a deflection of the input vector.\",\r\n        Rotate2dBlock: \"Rotates UV coordinates around the W axis.\",\r\n        PBRMetallicRoughnessBlock: \"PBR metallic/roughness material\",\r\n        SheenBlock: \"PBR Sheen block\",\r\n        AnisotropyBlock: \"PBR Anisotropy block\",\r\n        ReflectionBlock: \"PBR Reflection block\",\r\n        ClearCoatBlock: \"PBR ClearCoat block\",\r\n        RefractionBlock: \"PBR Refraction block\",\r\n        SubSurfaceBlock: \"PBR SubSurface block\",\r\n        ScreenPositionBlock: \"A Vector2 representing the position of each vertex of the screen quad (derived from UV set from the quad used to render)\",\r\n        CurrentScreenBlock: \"The screen buffer used as input for the post process\",\r\n        ParticleUVBlock: \"The particle uv texture coordinate\",\r\n        ParticleTextureBlock: \"The particle texture\",\r\n        ParticleColorBlock: \"The particle color\",\r\n        ParticleTextureMaskBlock: \"The particle texture mask\",\r\n        ParticleRampGradientBlock: \"The particle ramp gradient block\",\r\n        ParticleBlendMultiplyBlock: \"The particle blend multiply block\",\r\n        ParticlePositionWorldBlock: \"The world position of the particle\",\r\n        GaussianSplattingBlock: \"The gaussian splatting block\",\r\n        GaussianBlock: \"The gaussian color computation block\",\r\n        SplatReaderBlock: \"The gaussian splat reader block\",\r\n        SplatIndexBlock: \"The splat index\",\r\n        FragCoordBlock: \"The gl_FragCoord predefined variable that contains the window relative coordinate (x, y, z, 1/w)\",\r\n        ScreenSizeBlock: \"The size (in pixels) of the screen window\",\r\n        SceneDepthBlock: \"The scene depth buffer\",\r\n        MatrixBuilderBlock: \"Converts 4 Vector4 into a matrix\",\r\n        EqualBlock: \"Return a value if two operands are equals\",\r\n        NotEqualBlock: \"Return a value if two operands are not equals\",\r\n        LessThanBlock: \"Return a value if an operand is smaller than a second operand\",\r\n        LessOrEqualBlock: \"Return a value if an operand is smaller or equal to a second operand\",\r\n        GreaterThanBlock: \"Return a value if an operand is greater than a second operand\",\r\n        GreaterOrEqualBlock: \"Return a value if an operand is greater or equal to a second operand\",\r\n        XorBlock: \"Return a value if (a xor b) > 0\",\r\n        OrBlock: \"Return a value if (a or b) > 0\",\r\n        AndBlock: \"Return a value if (a and b) > 0\",\r\n        ImageSourceBlock: \"Centralize texture access for TextureBlocks\",\r\n        CloudBlock: \"Generate Fractal Brownian Motion Clouds\",\r\n        VoronoiNoiseBlock: \"Generate Voronoi Noise\",\r\n        ScreenSpaceBlock: \"Convert a Vector3 or a Vector4 into screen space\",\r\n        TwirlBlock: \"Apply a twirl rotation\",\r\n        ElbowBlock: \"Passthrough block mostly used to organize your graph\",\r\n        TeleportInBlock: \"Passthrough block mostly used to organize your graph (but without visible lines). It works like a teleportation point for the graph.\",\r\n        TeleportOutBlock: \"Endpoint for a TeleportInBlock.\",\r\n        ClipPlanesBlock: \"A node that add clip planes support\",\r\n        HeightToNormalBlock: \"Convert a height map into a normal map\",\r\n        FragDepthBlock: \"A final node that sets the fragment depth\",\r\n        ShadowMapBlock: \"Compute a depth value suitable for shadow map generation\",\r\n        TriPlanarBlock: \"A node for reading a texture with triplanar mapping\",\r\n        BiPlanarBlock: \"A node for reading a texture with biplanar mapping\",\r\n        MatrixDeterminantBlock: \"Compute the determinant of a matrix\",\r\n        MatrixTransposeBlock: \"Compute the transpose of a matrix\",\r\n        MeshAttributeExistsBlock: \"Falls back to secondary input if specified attribute doesn't exists on the rendered mesh\",\r\n        CurveBlock: \"Apply a curve function\",\r\n        ColorConverterBlock: \"Converts between RGB and HSL color spaces\",\r\n        LoopBlock: \"Block used to repeat code\",\r\n        StorageReadBlock: \"Block used to read from a loop storage variable\",\r\n        StorageWriteBlock: \"Block used to write to a loop storage variable\",\r\n    };\r\n\r\n    private _customFrameList: { [key: string]: string };\r\n    private _customBlockList: { [key: string]: string };\r\n\r\n    constructor(props: INodeListComponentProps) {\r\n        super(props);\r\n\r\n        this.state = { filter: \"\" };\r\n\r\n        const frameJson = localStorage.getItem(\"Custom-Frame-List\");\r\n        if (frameJson) {\r\n            this._customFrameList = JSON.parse(frameJson);\r\n        }\r\n\r\n        const blockJson = localStorage.getItem(\"Custom-Block-List\");\r\n        if (blockJson) {\r\n            this._customBlockList = JSON.parse(blockJson);\r\n        }\r\n\r\n        this._onResetRequiredObserver = this.props.globalState.onResetRequiredObservable.add(() => {\r\n            this.forceUpdate();\r\n        });\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        this.props.globalState.onResetRequiredObservable.remove(this._onResetRequiredObserver);\r\n    }\r\n\r\n    filterContent(filter: string) {\r\n        this.setState({ filter: filter });\r\n    }\r\n\r\n    loadCustomFrame(file: File) {\r\n        Tools.ReadFile(\r\n            file,\r\n            async (data) => {\r\n                // get Frame Data from file\r\n                const decoder = new TextDecoder(\"utf-8\");\r\n                const frameData = JSON.parse(decoder.decode(data));\r\n                const frameName = frameData.editorData.frames[0].name + \"Custom\";\r\n                const frameToolTip = frameData.editorData.frames[0].comments || \"\";\r\n\r\n                try {\r\n                    localStorage.setItem(frameName, JSON.stringify(frameData));\r\n                } catch (error) {\r\n                    this.props.globalState.stateManager.onErrorMessageDialogRequiredObservable.notifyObservers(\"Error Saving Frame\");\r\n                    return;\r\n                }\r\n\r\n                const frameJson = localStorage.getItem(\"Custom-Frame-List\");\r\n                let frameList: { [key: string]: string } = {};\r\n                if (frameJson) {\r\n                    frameList = JSON.parse(frameJson);\r\n                }\r\n                frameList[frameName] = frameToolTip;\r\n                localStorage.setItem(\"Custom-Frame-List\", JSON.stringify(frameList));\r\n                this._customFrameList = frameList;\r\n                this.forceUpdate();\r\n            },\r\n            undefined,\r\n            true\r\n        );\r\n    }\r\n\r\n    removeItem(value: string): void {\r\n        const frameJson = localStorage.getItem(\"Custom-Frame-List\");\r\n        if (frameJson) {\r\n            const registeredIdx = NodeLedger.RegisteredNodeNames.indexOf(value);\r\n            if (registeredIdx !== -1) {\r\n                NodeLedger.RegisteredNodeNames.splice(registeredIdx, 1);\r\n            }\r\n            const frameList = JSON.parse(frameJson);\r\n            delete frameList[value];\r\n            localStorage.removeItem(value);\r\n            localStorage.setItem(\"Custom-Frame-List\", JSON.stringify(frameList));\r\n            this._customFrameList = frameList;\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    loadCustomBlock(file: File) {\r\n        Tools.ReadFile(\r\n            file,\r\n            async (data) => {\r\n                // get Block Data from file\r\n                const decoder = new TextDecoder(\"utf-8\");\r\n                const blockData = JSON.parse(decoder.decode(data));\r\n                const blockName = (blockData.name || \"\") + \"CustomBlock\";\r\n                const blockToolTip = blockData.comments || \"\";\r\n\r\n                try {\r\n                    localStorage.setItem(blockName, JSON.stringify(blockData));\r\n                } catch (error) {\r\n                    this.props.globalState.stateManager.onErrorMessageDialogRequiredObservable.notifyObservers(\"Error Saving Block\");\r\n                    return;\r\n                }\r\n\r\n                const blockJson = localStorage.getItem(\"Custom-Block-List\");\r\n                let blockList: { [key: string]: string } = {};\r\n                if (blockJson) {\r\n                    blockList = JSON.parse(blockJson);\r\n                }\r\n                blockList[blockName] = blockToolTip;\r\n                localStorage.setItem(\"Custom-Block-List\", JSON.stringify(blockList));\r\n                this._customBlockList = blockList;\r\n                this.forceUpdate();\r\n            },\r\n            undefined,\r\n            true\r\n        );\r\n    }\r\n\r\n    removeCustomBlock(value: string): void {\r\n        const blockJson = localStorage.getItem(\"Custom-Block-List\");\r\n        if (blockJson) {\r\n            const blockList = JSON.parse(blockJson);\r\n            delete blockList[value];\r\n            localStorage.removeItem(value);\r\n            localStorage.setItem(\"Custom-Block-List\", JSON.stringify(blockList));\r\n            this._customBlockList = blockList;\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    override render() {\r\n        const customFrameNames: string[] = [];\r\n        for (const frame in this._customFrameList) {\r\n            customFrameNames.push(frame);\r\n        }\r\n\r\n        const customBlockNames: string[] = [];\r\n        for (const block in this._customBlockList) {\r\n            customBlockNames.push(block);\r\n        }\r\n\r\n        // Block types used to create the menu from\r\n        const allBlocks: any = {\r\n            Custom_Frames: customFrameNames,\r\n            Custom_Blocks: customBlockNames,\r\n            Animation: [\"BonesBlock\", \"MorphTargetsBlock\"],\r\n            Color_Management: [\"ReplaceColorBlock\", \"PosterizeBlock\", \"GradientBlock\", \"DesaturateBlock\", \"ColorConverterBlock\"],\r\n            Conversion_Blocks: [\"ColorMergerBlock\", \"ColorSplitterBlock\", \"VectorMergerBlock\", \"VectorSplitterBlock\"],\r\n            Inputs: [\r\n                \"Float\",\r\n                \"Vector2\",\r\n                \"Vector3\",\r\n                \"Vector4\",\r\n                \"Color3\",\r\n                \"Color4\",\r\n                \"TextureBlock\",\r\n                \"ReflectionTextureBlock\",\r\n                \"MouseInfoBlock\",\r\n                \"TimeBlock\",\r\n                \"RealTimeBlock\",\r\n                \"DeltaTimeBlock\",\r\n                \"MaterialAlphaBlock\",\r\n                \"FragCoordBlock\",\r\n                \"ScreenSizeBlock\",\r\n                \"ImageSourceBlock\",\r\n                \"TriPlanarBlock\",\r\n                \"BiPlanarBlock\",\r\n            ],\r\n            Interpolation: [\"LerpBlock\", \"StepBlock\", \"SmoothStepBlock\", \"NLerpBlock\"],\r\n            Logical: [\"EqualBlock\", \"NotEqualBlock\", \"LessThanBlock\", \"LessOrEqualBlock\", \"GreaterThanBlock\", \"GreaterOrEqualBlock\", \"XorBlock\", \"OrBlock\", \"AndBlock\"],\r\n            Math__Standard: [\r\n                \"AddBlock\",\r\n                \"DivideBlock\",\r\n                \"MaxBlock\",\r\n                \"MinBlock\",\r\n                \"ModBlock\",\r\n                \"MultiplyBlock\",\r\n                \"NegateBlock\",\r\n                \"OneMinusBlock\",\r\n                \"ReciprocalBlock\",\r\n                \"ScaleBlock\",\r\n                \"SignBlock\",\r\n                \"SqrtBlock\",\r\n                \"SubtractBlock\",\r\n            ],\r\n            Math__Scientific: [\r\n                \"AbsBlock\",\r\n                \"ArcCosBlock\",\r\n                \"ArcSinBlock\",\r\n                \"ArcTanBlock\",\r\n                \"ArcTan2Block\",\r\n                \"CosBlock\",\r\n                \"CurveBlock\",\r\n                \"DegreesToRadiansBlock\",\r\n                \"ExpBlock\",\r\n                \"Exp2Block\",\r\n                \"FractBlock\",\r\n                \"LogBlock\",\r\n                \"PowBlock\",\r\n                \"RadiansToDegreesBlock\",\r\n                \"SawToothWaveBlock\",\r\n                \"SinBlock\",\r\n                \"SquareWaveBlock\",\r\n                \"TanBlock\",\r\n                \"TriangleWaveBlock\",\r\n                \"SetBlock\",\r\n            ],\r\n            Math__Vector: [\r\n                \"CrossBlock\",\r\n                \"DerivativeBlock\",\r\n                \"DistanceBlock\",\r\n                \"DotBlock\",\r\n                \"FresnelBlock\",\r\n                \"LengthBlock\",\r\n                \"ReflectBlock\",\r\n                \"RefractBlock\",\r\n                \"Rotate2dBlock\",\r\n                \"TransformBlock\",\r\n                \"ScreenSpaceBlock\",\r\n                \"TwirlBlock\",\r\n            ],\r\n            Matrices: [\r\n                \"Matrix\",\r\n                \"WorldMatrixBlock\",\r\n                \"WorldViewMatrixBlock\",\r\n                \"WorldViewProjectionMatrixBlock\",\r\n                \"ViewMatrixBlock\",\r\n                \"ViewProjectionMatrixBlock\",\r\n                \"ProjectionMatrixBlock\",\r\n                \"MatrixBuilderBlock\",\r\n                \"MatrixDeterminantBlock\",\r\n                \"MatrixTransposeBlock\",\r\n            ],\r\n            Misc: [\"ElbowBlock\", \"ShadowMapBlock\", \"TeleportInBlock\", \"TeleportOutBlock\"],\r\n            Mesh: [\r\n                \"InstancesBlock\",\r\n                \"PositionBlock\",\r\n                \"UVBlock\",\r\n                \"ColorBlock\",\r\n                \"InstanceColorBlock\",\r\n                \"NormalBlock\",\r\n                \"HeightToNormalBlock\",\r\n                \"TBNBlock\",\r\n                \"PerturbNormalBlock\",\r\n                \"NormalBlendBlock\",\r\n                \"TangentBlock\",\r\n                \"MatrixIndicesBlock\",\r\n                \"MatrixWeightsBlock\",\r\n                \"MatrixIndicesExtraBlock\",\r\n                \"MatrixWeightsExtraBlock\",\r\n                \"WorldPositionBlock\",\r\n                \"WorldNormalBlock\",\r\n                \"WorldTangentBlock\",\r\n                \"FrontFacingBlock\",\r\n                \"MeshAttributeExistsBlock\",\r\n            ],\r\n            Loop: [\"LoopBlock\", \"StorageReadBlock\", \"StorageWriteBlock\"],\r\n            Noises: [\"RandomNumberBlock\", \"SimplexPerlin3DBlock\", \"WorleyNoise3DBlock\", \"CloudBlock\", \"VoronoiNoiseBlock\"],\r\n            Output_Nodes: [\"VertexOutputBlock\", \"FragmentOutputBlock\", \"PrePassOutputBlock\", \"DiscardBlock\", \"ClipPlanesBlock\", \"FragDepthBlock\"],\r\n            Particle: [\r\n                \"ParticleBlendMultiplyBlock\",\r\n                \"ParticleColorBlock\",\r\n                \"ParticlePositionWorldBlock\",\r\n                \"ParticleRampGradientBlock\",\r\n                \"ParticleTextureBlock\",\r\n                \"ParticleTextureMaskBlock\",\r\n                \"ParticleUVBlock\",\r\n            ],\r\n            GaussianSplatting: [\"GaussianSplattingBlock\", \"SplatIndexBlock\", \"SplatReaderBlock\", \"GaussianBlock\"],\r\n            PBR: [\"PBRMetallicRoughnessBlock\", \"AnisotropyBlock\", \"ClearCoatBlock\", \"ReflectionBlock\", \"RefractionBlock\", \"SheenBlock\", \"SubSurfaceBlock\"],\r\n            PostProcess: [\"ScreenPositionBlock\", \"CurrentScreenBlock\", \"PrePassTextureBlock\"],\r\n            Procedural__Texture: [\"ScreenPositionBlock\"],\r\n            Range: [\"ClampBlock\", \"RemapBlock\", \"NormalizeBlock\"],\r\n            Round: [\"RoundBlock\", \"CeilingBlock\", \"FloorBlock\"],\r\n            Scene: [\r\n                \"FogBlock\",\r\n                \"CameraPositionBlock\",\r\n                \"CameraParametersBlock\",\r\n                \"FogColorBlock\",\r\n                \"ImageProcessingBlock\",\r\n                \"LightBlock\",\r\n                \"LightInformationBlock\",\r\n                \"ViewDirectionBlock\",\r\n                \"SceneDepthBlock\",\r\n            ],\r\n        };\r\n\r\n        switch (this.props.globalState.mode) {\r\n            case NodeMaterialModes.Material:\r\n                delete allBlocks[\"PostProcess\"];\r\n                delete allBlocks[\"Particle\"];\r\n                delete allBlocks[\"Procedural__Texture\"];\r\n                delete allBlocks[\"GaussianSplatting\"];\r\n                break;\r\n            case NodeMaterialModes.PostProcess:\r\n                delete allBlocks[\"Animation\"];\r\n                delete allBlocks[\"Mesh\"];\r\n                delete allBlocks[\"Particle\"];\r\n                delete allBlocks[\"Procedural__Texture\"];\r\n                delete allBlocks[\"PBR\"];\r\n                delete allBlocks[\"GaussianSplatting\"];\r\n                allBlocks.Output_Nodes.splice(allBlocks.Output_Nodes.indexOf(\"PrePassOutputBlock\"), 1);\r\n                break;\r\n            case NodeMaterialModes.ProceduralTexture:\r\n                delete allBlocks[\"Animation\"];\r\n                delete allBlocks[\"Mesh\"];\r\n                delete allBlocks[\"Particle\"];\r\n                delete allBlocks[\"PostProcess\"];\r\n                delete allBlocks[\"PBR\"];\r\n                delete allBlocks[\"GaussianSplatting\"];\r\n                allBlocks.Output_Nodes.splice(allBlocks.Output_Nodes.indexOf(\"PrePassOutputBlock\"), 1);\r\n                break;\r\n            case NodeMaterialModes.Particle:\r\n                delete allBlocks[\"Animation\"];\r\n                delete allBlocks[\"Mesh\"];\r\n                delete allBlocks[\"PostProcess\"];\r\n                delete allBlocks[\"Procedural__Texture\"];\r\n                delete allBlocks[\"PBR\"];\r\n                delete allBlocks[\"GaussianSplatting\"];\r\n                allBlocks.Output_Nodes.splice(allBlocks.Output_Nodes.indexOf(\"VertexOutputBlock\"), 1);\r\n                allBlocks.Scene.splice(allBlocks.Scene.indexOf(\"FogBlock\"), 1);\r\n                allBlocks.Scene.splice(allBlocks.Scene.indexOf(\"FogColorBlock\"), 1);\r\n                allBlocks.Output_Nodes.splice(allBlocks.Output_Nodes.indexOf(\"PrePassOutputBlock\"), 1);\r\n                break;\r\n            case NodeMaterialModes.GaussianSplatting:\r\n                delete allBlocks[\"Animation\"];\r\n                delete allBlocks[\"Mesh\"];\r\n                delete allBlocks[\"PostProcess\"];\r\n                delete allBlocks[\"Procedural__Texture\"];\r\n                delete allBlocks[\"PBR\"];\r\n                allBlocks.Output_Nodes.splice(allBlocks.Output_Nodes.indexOf(\"VertexOutputBlock\"), 1);\r\n                allBlocks.Scene.splice(allBlocks.Scene.indexOf(\"FogBlock\"), 1);\r\n                allBlocks.Scene.splice(allBlocks.Scene.indexOf(\"FogColorBlock\"), 1);\r\n                allBlocks.Output_Nodes.splice(allBlocks.Output_Nodes.indexOf(\"PrePassOutputBlock\"), 1);\r\n                break;\r\n        }\r\n\r\n        // Create node menu\r\n        const blockMenu = [];\r\n        for (const key in allBlocks) {\r\n            const blockList = (allBlocks as any)[key]\r\n                .filter((b: string) => !this.state.filter || b.toLowerCase().indexOf(this.state.filter.toLowerCase()) !== -1)\r\n                .sort((a: string, b: string) => a.localeCompare(b))\r\n                .map((block: any) => {\r\n                    if (key === \"Custom_Frames\") {\r\n                        return (\r\n                            <DraggableLineWithButtonComponent\r\n                                key={block}\r\n                                format={\"babylonjs-material-node\"}\r\n                                data={block}\r\n                                tooltip={this._customFrameList[block] || \"\"}\r\n                                iconImage={deleteButton}\r\n                                iconTitle=\"Delete\"\r\n                                onIconClick={(value) => this.removeItem(value)}\r\n                            />\r\n                        );\r\n                    } else if (key === \"Custom_Blocks\") {\r\n                        return (\r\n                            <DraggableLineWithButtonComponent\r\n                                key={block}\r\n                                format={\"babylonjs-material-node\"}\r\n                                data={block}\r\n                                tooltip={this._customBlockList[block] || \"\"}\r\n                                iconImage={deleteButton}\r\n                                iconTitle=\"Delete\"\r\n                                onIconClick={(value) => this.removeCustomBlock(value)}\r\n                                lenSuffixToRemove={11}\r\n                            />\r\n                        );\r\n                    }\r\n                    return <DraggableLineComponent key={block} format={\"babylonjs-material-node\"} data={block} tooltip={NodeListComponent._Tooltips[block] || \"\"} />;\r\n                });\r\n\r\n            if (key === \"Custom_Frames\") {\r\n                const line = (\r\n                    <LineWithFileButtonComponent\r\n                        key=\"add...\"\r\n                        title={\"Add Custom Frame\"}\r\n                        closed={false}\r\n                        multiple={true}\r\n                        label=\"Add...\"\r\n                        uploadName={\"custom-frame-upload\"}\r\n                        iconImage={addButton}\r\n                        accept=\".json\"\r\n                        onIconClick={(file) => {\r\n                            this.loadCustomFrame(file);\r\n                        }}\r\n                    />\r\n                );\r\n                blockList.push(line);\r\n            } else if (key === \"Custom_Blocks\") {\r\n                const line = (\r\n                    <LineWithFileButtonComponent\r\n                        key=\"add...\"\r\n                        title={\"Add Custom Block\"}\r\n                        closed={false}\r\n                        multiple={true}\r\n                        label=\"Add...\"\r\n                        uploadName={\"custom-block-upload\"}\r\n                        iconImage={addButton}\r\n                        accept=\".json\"\r\n                        onIconClick={(file) => {\r\n                            this.loadCustomBlock(file);\r\n                        }}\r\n                    />\r\n                );\r\n                blockList.push(line);\r\n            }\r\n            if (blockList.length) {\r\n                blockMenu.push(\r\n                    <LineContainerComponent key={key + \" blocks\"} title={key.replace(\"__\", \": \").replace(\"_\", \" \")} closed={false}>\r\n                        {blockList}\r\n                    </LineContainerComponent>\r\n                );\r\n            }\r\n\r\n            // Register blocks\r\n            const ledger = NodeLedger.RegisteredNodeNames;\r\n            for (const key in allBlocks) {\r\n                const blocks = allBlocks[key] as string[];\r\n                if (blocks.length) {\r\n                    for (const block of blocks) {\r\n                        if (!ledger.includes(block)) {\r\n                            ledger.push(block);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            NodeLedger.NameFormatter = (name) => {\r\n                let finalName = name;\r\n                // custom frame\r\n                if (name.endsWith(\"Custom\")) {\r\n                    const nameIndex = name.lastIndexOf(\"Custom\");\r\n                    finalName = name.substring(0, nameIndex);\r\n                    finalName += \" [custom]\";\r\n                } else {\r\n                    finalName = name.replace(\"Block\", \"\");\r\n                }\r\n                return finalName;\r\n            };\r\n        }\r\n\r\n        return (\r\n            <div id=\"nmeNodeList\">\r\n                <div className=\"panes\">\r\n                    <div className=\"pane\">\r\n                        <div className=\"filter\">\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Filter\"\r\n                                onFocus={() => (this.props.globalState.lockObject.lock = true)}\r\n                                onBlur={() => {\r\n                                    this.props.globalState.lockObject.lock = false;\r\n                                }}\r\n                                onChange={(evt) => this.filterContent(evt.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className=\"list-container\">{blockMenu}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
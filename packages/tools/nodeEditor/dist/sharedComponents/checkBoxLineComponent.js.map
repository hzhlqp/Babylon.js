{"version":3,"file":"checkBoxLineComponent.js","sourceRoot":"","sources":["../../src/sharedComponents/checkBoxLineComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport type { Observable } from \"core/Misc/observable\";\r\nimport type { PropertyChangedEvent } from \"shared-ui-components/propertyChangedEvent\";\r\n\r\nexport interface ICheckBoxLineComponentProps {\r\n    label: string;\r\n    target?: any;\r\n    propertyName?: string;\r\n    isSelected?: () => boolean;\r\n    onSelect?: (value: boolean) => void;\r\n    onValueChanged?: () => void;\r\n    onPropertyChangedObservable?: Observable<PropertyChangedEvent>;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport class CheckBoxLineComponent extends React.Component<ICheckBoxLineComponentProps, { isSelected: boolean; isDisabled?: boolean }> {\r\n    private static _UniqueIdSeed = 0;\r\n    private _uniqueId: number;\r\n    private _localChange = false;\r\n    constructor(props: ICheckBoxLineComponentProps) {\r\n        super(props);\r\n\r\n        this._uniqueId = CheckBoxLineComponent._UniqueIdSeed++;\r\n\r\n        if (this.props.isSelected) {\r\n            this.state = { isSelected: this.props.isSelected() };\r\n        } else {\r\n            this.state = { isSelected: this.props.target[this.props.propertyName!] == true };\r\n        }\r\n\r\n        if (this.props.disabled) {\r\n            this.state = { ...this.state, isDisabled: this.props.disabled };\r\n        }\r\n    }\r\n\r\n    override shouldComponentUpdate(nextProps: ICheckBoxLineComponentProps, nextState: { isSelected: boolean; isDisabled: boolean }) {\r\n        let currentState: boolean;\r\n\r\n        if (nextProps.isSelected) {\r\n            currentState = nextProps.isSelected!();\r\n        } else {\r\n            currentState = nextProps.target[nextProps.propertyName!] == true;\r\n        }\r\n\r\n        if (currentState !== nextState.isSelected || this._localChange) {\r\n            nextState.isSelected = currentState;\r\n            this._localChange = false;\r\n            return true;\r\n        }\r\n\r\n        if (nextProps.disabled !== !!nextState.isDisabled) {\r\n            return true;\r\n        }\r\n\r\n        return nextProps.label !== this.props.label || nextProps.target !== this.props.target;\r\n    }\r\n\r\n    onChange() {\r\n        this._localChange = true;\r\n        if (this.props.onSelect) {\r\n            this.props.onSelect(!this.state.isSelected);\r\n        } else {\r\n            if (this.props.onPropertyChangedObservable) {\r\n                this.props.onPropertyChangedObservable.notifyObservers({\r\n                    object: this.props.target,\r\n                    property: this.props.propertyName!,\r\n                    value: !this.state.isSelected,\r\n                    initialValue: this.state.isSelected,\r\n                });\r\n            }\r\n\r\n            this.props.target[this.props.propertyName!] = !this.state.isSelected;\r\n        }\r\n\r\n        if (this.props.onValueChanged) {\r\n            this.props.onValueChanged();\r\n        }\r\n\r\n        this.setState({ isSelected: !this.state.isSelected });\r\n    }\r\n\r\n    override render() {\r\n        return (\r\n            <div className=\"checkBoxLine\">\r\n                <div className=\"label\" title={this.props.label}>\r\n                    {this.props.label}\r\n                </div>\r\n                <div className=\"checkBox\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        id={\"checkbox\" + this._uniqueId}\r\n                        className=\"cbx hidden\"\r\n                        checked={this.state.isSelected}\r\n                        onChange={() => this.onChange()}\r\n                        disabled={!!this.props.disabled}\r\n                    />\r\n                    <label htmlFor={\"checkbox\" + this._uniqueId} className={`lbl${this.props.disabled ? \" disabled\" : \"\"}`}></label>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
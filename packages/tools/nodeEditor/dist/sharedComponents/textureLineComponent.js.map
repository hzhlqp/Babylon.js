{"version":3,"file":"textureLineComponent.js","sourceRoot":"","sources":["../../src/sharedComponents/textureLineComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\n\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { RenderTargetTexture } from \"core/Materials/Textures/renderTargetTexture\";\r\nimport type { PostProcess } from \"core/PostProcesses/postProcess\";\r\nimport { PassPostProcess, PassCubePostProcess } from \"core/PostProcesses/passPostProcess\";\r\n\r\ninterface ITextureLineComponentProps {\r\n    texture: BaseTexture;\r\n    width: number;\r\n    height: number;\r\n    globalState?: any;\r\n    hideChannelSelect?: boolean;\r\n}\r\n\r\nexport interface ITextureLineComponentState {\r\n    displayRed: boolean;\r\n    displayGreen: boolean;\r\n    displayBlue: boolean;\r\n    displayAlpha: boolean;\r\n    face: number;\r\n}\r\n\r\nexport class TextureLineComponent extends React.Component<ITextureLineComponentProps, ITextureLineComponentState> {\r\n    private _canvasRef: React.RefObject<HTMLCanvasElement>;\r\n\r\n    constructor(props: ITextureLineComponentProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            displayRed: true,\r\n            displayGreen: true,\r\n            displayBlue: true,\r\n            displayAlpha: true,\r\n            face: 0,\r\n        };\r\n\r\n        this._canvasRef = React.createRef();\r\n    }\r\n\r\n    override shouldComponentUpdate(): boolean {\r\n        return true;\r\n    }\r\n\r\n    override componentDidMount() {\r\n        this.updatePreview();\r\n    }\r\n\r\n    override componentDidUpdate() {\r\n        this.updatePreview();\r\n    }\r\n\r\n    public updatePreview() {\r\n        TextureLineComponent.UpdatePreview(this._canvasRef.current as HTMLCanvasElement, this.props.texture, this.props.width, this.state, undefined, this.props.globalState);\r\n    }\r\n\r\n    public static async UpdatePreview(\r\n        previewCanvas: HTMLCanvasElement,\r\n        texture: BaseTexture,\r\n        width: number,\r\n        options: ITextureLineComponentState,\r\n        onReady?: () => void,\r\n        globalState?: any\r\n    ) {\r\n        if (!texture.isReady() && texture._texture) {\r\n            texture._texture.onLoadedObservable.addOnce(() => {\r\n                TextureLineComponent.UpdatePreview(previewCanvas, texture, width, options, onReady, globalState);\r\n            });\r\n        }\r\n        const scene = texture.getScene()!;\r\n        const engine = scene.getEngine();\r\n        const size = texture.getSize();\r\n        const ratio = size.width / size.height;\r\n        const height = (width / ratio) | 1;\r\n\r\n        let passPostProcess: PostProcess;\r\n\r\n        if (!texture.isCube) {\r\n            passPostProcess = new PassPostProcess(\"pass\", 1, null, Texture.NEAREST_SAMPLINGMODE, engine, false, Constants.TEXTURETYPE_UNSIGNED_INT);\r\n        } else {\r\n            const passCubePostProcess = new PassCubePostProcess(\"pass\", 1, null, Texture.NEAREST_SAMPLINGMODE, engine, false, Constants.TEXTURETYPE_UNSIGNED_INT);\r\n            passCubePostProcess.face = options.face;\r\n\r\n            passPostProcess = passCubePostProcess;\r\n        }\r\n\r\n        passPostProcess.onEffectCreatedObservable.add((e) => {\r\n            e.executeWhenCompiled(async () => {\r\n                if (globalState) {\r\n                    globalState.blockMutationUpdates = true;\r\n                }\r\n\r\n                const rtt = new RenderTargetTexture(\"temp\", { width: width, height: height }, scene, false);\r\n\r\n                passPostProcess.externalTextureSamplerBinding = true;\r\n                passPostProcess.onApply = function (effect) {\r\n                    effect.setTexture(\"textureSampler\", texture);\r\n                };\r\n\r\n                const internalTexture = rtt.renderTarget;\r\n\r\n                if (internalTexture) {\r\n                    scene.postProcessManager.directRender([passPostProcess], internalTexture, true);\r\n\r\n                    // Read the contents of the framebuffer\r\n                    const numberOfChannelsByLine = width * 4;\r\n                    const halfHeight = height / 2;\r\n\r\n                    //Reading datas from WebGL\r\n                    const bufferView = await engine.readPixels(0, 0, width, height);\r\n                    const data = new Uint8Array(bufferView.buffer, 0, bufferView.byteLength);\r\n\r\n                    if (!texture.isCube) {\r\n                        if (!options.displayRed || !options.displayGreen || !options.displayBlue) {\r\n                            for (let i = 0; i < width * height * 4; i += 4) {\r\n                                if (!options.displayRed) {\r\n                                    data[i] = 0;\r\n                                }\r\n\r\n                                if (!options.displayGreen) {\r\n                                    data[i + 1] = 0;\r\n                                }\r\n\r\n                                if (!options.displayBlue) {\r\n                                    data[i + 2] = 0;\r\n                                }\r\n\r\n                                if (options.displayAlpha) {\r\n                                    const alpha = data[i + 2];\r\n                                    data[i] = alpha;\r\n                                    data[i + 1] = alpha;\r\n                                    data[i + 2] = alpha;\r\n                                    data[i + 2] = 0;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    //To flip image on Y axis.\r\n                    if ((texture as Texture).invertY || texture.isCube) {\r\n                        for (let i = 0; i < halfHeight; i++) {\r\n                            for (let j = 0; j < numberOfChannelsByLine; j++) {\r\n                                const currentCell = j + i * numberOfChannelsByLine;\r\n                                const targetLine = height - i - 1;\r\n                                const targetCell = j + targetLine * numberOfChannelsByLine;\r\n\r\n                                const temp = data[currentCell];\r\n                                data[currentCell] = data[targetCell];\r\n                                data[targetCell] = temp;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    previewCanvas.width = width;\r\n                    previewCanvas.height = height;\r\n                    const context = previewCanvas.getContext(\"2d\");\r\n\r\n                    if (context) {\r\n                        // Copy the pixels to the preview canvas\r\n                        const imageData = context.createImageData(width, height);\r\n                        const castData = imageData.data;\r\n                        castData.set(data);\r\n                        context.putImageData(imageData, 0, 0);\r\n\r\n                        if (onReady) {\r\n                            onReady();\r\n                        }\r\n                    }\r\n\r\n                    // Unbind\r\n                    engine.unBindFramebuffer(internalTexture);\r\n                }\r\n\r\n                rtt.dispose();\r\n                passPostProcess.dispose();\r\n\r\n                previewCanvas.style.height = height + \"px\";\r\n                if (globalState) {\r\n                    globalState.blockMutationUpdates = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    override render() {\r\n        const texture = this.props.texture;\r\n\r\n        return (\r\n            <div className=\"textureLine\">\r\n                {!this.props.hideChannelSelect && texture.isCube && (\r\n                    <div className=\"control3D\">\r\n                        <button className={this.state.face === 0 ? \"px command selected\" : \"px command\"} onClick={() => this.setState({ face: 0 })}>\r\n                            PX\r\n                        </button>\r\n                        <button className={this.state.face === 1 ? \"nx command selected\" : \"nx command\"} onClick={() => this.setState({ face: 1 })}>\r\n                            NX\r\n                        </button>\r\n                        <button className={this.state.face === 2 ? \"py command selected\" : \"py command\"} onClick={() => this.setState({ face: 2 })}>\r\n                            PY\r\n                        </button>\r\n                        <button className={this.state.face === 3 ? \"ny command selected\" : \"ny command\"} onClick={() => this.setState({ face: 3 })}>\r\n                            NY\r\n                        </button>\r\n                        <button className={this.state.face === 4 ? \"pz command selected\" : \"pz command\"} onClick={() => this.setState({ face: 4 })}>\r\n                            PZ\r\n                        </button>\r\n                        <button className={this.state.face === 5 ? \"nz command selected\" : \"nz command\"} onClick={() => this.setState({ face: 5 })}>\r\n                            NZ\r\n                        </button>\r\n                    </div>\r\n                )}\r\n                {!this.props.hideChannelSelect && !texture.isCube && (\r\n                    <div className=\"control\">\r\n                        <button\r\n                            className={this.state.displayRed && !this.state.displayGreen ? \"red command selected\" : \"red command\"}\r\n                            onClick={() => this.setState({ displayRed: true, displayGreen: false, displayBlue: false, displayAlpha: false })}\r\n                        >\r\n                            R\r\n                        </button>\r\n                        <button\r\n                            className={this.state.displayGreen && !this.state.displayBlue ? \"green command selected\" : \"green command\"}\r\n                            onClick={() => this.setState({ displayRed: false, displayGreen: true, displayBlue: false, displayAlpha: false })}\r\n                        >\r\n                            G\r\n                        </button>\r\n                        <button\r\n                            className={this.state.displayBlue && !this.state.displayAlpha ? \"blue command selected\" : \"blue command\"}\r\n                            onClick={() => this.setState({ displayRed: false, displayGreen: false, displayBlue: true, displayAlpha: false })}\r\n                        >\r\n                            B\r\n                        </button>\r\n                        <button\r\n                            className={this.state.displayAlpha && !this.state.displayRed ? \"alpha command selected\" : \"alpha command\"}\r\n                            onClick={() => this.setState({ displayRed: false, displayGreen: false, displayBlue: false, displayAlpha: true })}\r\n                        >\r\n                            A\r\n                        </button>\r\n                        <button\r\n                            className={this.state.displayRed && this.state.displayGreen ? \"all command selected\" : \"all command\"}\r\n                            onClick={() => this.setState({ displayRed: true, displayGreen: true, displayBlue: true, displayAlpha: true })}\r\n                        >\r\n                            ALL\r\n                        </button>\r\n                    </div>\r\n                )}\r\n                <canvas ref={this._canvasRef} className=\"preview\" />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
{"version":3,"file":"inputDisplayManager.js","sourceRoot":"","sources":["../../../src/graphSystem/display/inputDisplayManager.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAC;AAG9C,OAAO,MAAM,MAAM,oCAAoC,CAAC;AAExD,OAAO,EAAE,wCAAwC,EAAE,MAAM,iDAAiD,CAAC;AAE3G,MAAM,OAAO,mBAAmB;IACrB,cAAc,CAAC,SAAoB;QACtC,OAAO,EAAE,CAAC;IACd,CAAC;IAEM,aAAa,CAAC,QAAmB;QACpC,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;IAC9B,CAAC;IAEM,uBAAuB;QAC1B,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,MAAM,CAAC,WAAW,CAAC,IAA8C;QACpE,OAAO,wCAAwC,CAAC,IAAI,CAAC,CAAC;IAC1D,CAAC;IAEM,kBAAkB,CAAC,QAAmB;QACzC,IAAI,KAAK,GAAG,EAAE,CAAC;QACf,MAAM,UAAU,GAAG,QAAQ,CAAC,IAAiC,CAAC;QAE9D,QAAQ,UAAU,CAAC,IAAI,EAAE;YACrB;gBACI,KAAK,GAAG,UAAU,CAAC,8BAA8B,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBACnE,MAAM;SACb;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,oBAAoB,CAAC,QAAmB,EAAE,WAA2B;QACxE,IAAI,KAAK,GAAG,EAAE,CAAC;QACf,MAAM,UAAU,GAAG,QAAQ,CAAC,IAAiC,CAAC;QAE9D,QAAQ,UAAU,CAAC,IAAI,EAAE;YACrB,KAAK,wCAAwC,CAAC,OAAO,CAAC;YACtD,KAAK,wCAAwC,CAAC,6BAA6B;gBACvE,KAAK,GAAG,GAAG,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;gBAC7D,MAAM;SACb;QAED,WAAW,CAAC,SAAS,GAAG,KAAK,CAAC;QAC9B,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC;IACrD,CAAC;CACJ","sourcesContent":["import { BlockTools } from \"../../blockTools\";\r\nimport type { IDisplayManager } from \"shared-ui-components/nodeGraphSystem/interfaces/displayManager\";\r\nimport type { INodeData } from \"shared-ui-components/nodeGraphSystem/interfaces/nodeData\";\r\nimport styles from \"./inputDisplayManager.modules.scss\";\r\nimport type { NodeRenderGraphInputBlock } from \"core/FrameGraph/Node/Blocks/inputBlock\";\r\nimport { NodeRenderGraphBlockConnectionPointTypes } from \"core/FrameGraph/Node/Types/nodeRenderGraphTypes\";\r\n\r\nexport class InputDisplayManager implements IDisplayManager {\r\n    public getHeaderClass(_nodeData: INodeData) {\r\n        return \"\";\r\n    }\r\n\r\n    public getHeaderText(nodeData: INodeData): string {\r\n        return nodeData.data.name;\r\n    }\r\n\r\n    public shouldDisplayPortLabels(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public static GetBaseType(type: NodeRenderGraphBlockConnectionPointTypes): string {\r\n        return NodeRenderGraphBlockConnectionPointTypes[type];\r\n    }\r\n\r\n    public getBackgroundColor(nodeData: INodeData): string {\r\n        let color = \"\";\r\n        const inputBlock = nodeData.data as NodeRenderGraphInputBlock;\r\n\r\n        switch (inputBlock.type) {\r\n            default:\r\n                color = BlockTools.GetColorFromConnectionNodeType(inputBlock.type);\r\n                break;\r\n        }\r\n\r\n        return color;\r\n    }\r\n\r\n    public updatePreviewContent(nodeData: INodeData, contentArea: HTMLDivElement): void {\r\n        let value = \"\";\r\n        const inputBlock = nodeData.data as NodeRenderGraphInputBlock;\r\n\r\n        switch (inputBlock.type) {\r\n            case NodeRenderGraphBlockConnectionPointTypes.Texture:\r\n            case NodeRenderGraphBlockConnectionPointTypes.TextureDepthStencilAttachment:\r\n                value = `${inputBlock.isExternal ? \"external\" : \"internal\"}`;\r\n                break;\r\n        }\r\n\r\n        contentArea.innerHTML = value;\r\n        contentArea.classList.add(styles[\"input-block\"]);\r\n    }\r\n}\r\n"]}
{"version":3,"file":"genericNodePropertyComponent.js","sourceRoot":"","sources":["../../../src/graphSystem/properties/genericNodePropertyComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { LineContainerComponent } from \"../../sharedComponents/lineContainerComponent\";\r\nimport { CheckBoxLineComponent } from \"../../sharedComponents/checkBoxLineComponent\";\r\nimport type { IPropertyComponentProps } from \"shared-ui-components/nodeGraphSystem/interfaces/propertyComponentProps\";\r\nimport { TextInputLineComponent } from \"shared-ui-components/lines/textInputLineComponent\";\r\nimport { Vector2LineComponent } from \"shared-ui-components/lines/vector2LineComponent\";\r\nimport { OptionsLine } from \"shared-ui-components/lines/optionsLineComponent\";\r\nimport { TextLineComponent } from \"shared-ui-components/lines/textLineComponent\";\r\nimport { FloatLineComponent } from \"shared-ui-components/lines/floatLineComponent\";\r\nimport { SliderLineComponent } from \"shared-ui-components/lines/sliderLineComponent\";\r\nimport { Color4LineComponent } from \"shared-ui-components/lines/color4LineComponent\";\r\nimport type { NodeRenderGraphBlock } from \"core/FrameGraph/Node/nodeRenderGraphBlock\";\r\nimport type { IEditablePropertyListOption } from \"core/Decorators/nodeDecorator\";\r\nimport type { IPropertyDescriptionForEdition } from \"core/Decorators/nodeDecorator\";\r\nimport { PropertyTypeForEdition } from \"core/Decorators/nodeDecorator\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { ForceRebuild } from \"shared-ui-components/nodeGraphSystem/automaticProperties\";\r\n\r\nexport const samplingModeList = [\r\n    { label: \"Nearest/Nearest\", value: Constants.TEXTURE_NEAREST_SAMPLINGMODE }, // 1\r\n    { label: \"Linear/Nearest\", value: Constants.TEXTURE_LINEAR_NEAREST }, // 12\r\n    { label: \"Nearest/Linear\", value: Constants.TEXTURE_NEAREST_LINEAR }, // 7\r\n    { label: \"Linear/Linear\", value: Constants.TEXTURE_BILINEAR_SAMPLINGMODE }, // 2\r\n\r\n    { label: \"Nearest/Nearest & nearest mip\", value: Constants.TEXTURE_NEAREST_NEAREST_MIPNEAREST }, // 4\r\n    { label: \"Linear/Nearest & nearest mip\", value: Constants.TEXTURE_LINEAR_NEAREST_MIPNEAREST }, // 9\r\n    { label: \"Nearest/Linear & nearest mip\", value: Constants.TEXTURE_NEAREST_LINEAR_MIPNEAREST }, // 5\r\n    { label: \"Linear/Linear & nearest mip\", value: Constants.TEXTURE_LINEAR_LINEAR_MIPNEAREST }, // 11\r\n\r\n    { label: \"Nearest/Nearest & linear mip\", value: Constants.TEXTURE_NEAREST_NEAREST_MIPLINEAR }, // 8\r\n    { label: \"Linear/Nearest & linear mip\", value: Constants.TEXTURE_LINEAR_NEAREST_MIPLINEAR }, // 10\r\n    { label: \"Nearest/Linear & linear mip\", value: Constants.TEXTURE_NEAREST_LINEAR_MIPLINEAR }, // 6\r\n    { label: \"Linear/Linear & linear mip\", value: Constants.TEXTURE_TRILINEAR_SAMPLINGMODE }, // 3\r\n];\r\n\r\nexport const textureFormatList = [\r\n    { label: \"rgba\", value: Constants.TEXTUREFORMAT_RGBA },\r\n    { label: \"r\", value: Constants.TEXTUREFORMAT_RED },\r\n    { label: \"rg\", value: Constants.TEXTUREFORMAT_RG },\r\n    { label: \"bgra\", value: Constants.TEXTUREFORMAT_BGRA },\r\n    { label: \"rgba integer\", value: Constants.TEXTUREFORMAT_RGBA_INTEGER },\r\n    { label: \"r integer\", value: Constants.TEXTUREFORMAT_RED_INTEGER },\r\n    { label: \"rg Integer\", value: Constants.TEXTUREFORMAT_RG_INTEGER },\r\n];\r\n\r\nexport const textureTypeList = [\r\n    { label: \"Unsigned Byte\", value: Constants.TEXTURETYPE_UNSIGNED_BYTE },\r\n    { label: \"Signed Byte\", value: Constants.TEXTURETYPE_BYTE },\r\n    { label: \"Unsigned Short\", value: Constants.TEXTURETYPE_UNSIGNED_SHORT },\r\n    { label: \"Short\", value: Constants.TEXTURETYPE_SHORT },\r\n    { label: \"Unsigned Integer\", value: Constants.TEXTURETYPE_UNSIGNED_INTEGER },\r\n    { label: \"Integer\", value: Constants.TEXTURETYPE_INT },\r\n    { label: \"Float\", value: Constants.TEXTURETYPE_FLOAT },\r\n    { label: \"Half Float\", value: Constants.TEXTURETYPE_HALF_FLOAT },\r\n];\r\n\r\nexport const textureDepthStencilFormatList = [\r\n    { label: \"Depth 24/Stencil 8\", value: Constants.TEXTUREFORMAT_DEPTH24_STENCIL8 },\r\n    { label: \"Depth 24 Unorm/Stencil 8\", value: Constants.TEXTUREFORMAT_DEPTH24UNORM_STENCIL8 },\r\n    { label: \"Depth 32 float/Stencil 8\", value: Constants.TEXTUREFORMAT_DEPTH32FLOAT_STENCIL8 },\r\n    { label: \"Depth 16\", value: Constants.TEXTUREFORMAT_DEPTH16 },\r\n    { label: \"Depth 24\", value: Constants.TEXTUREFORMAT_DEPTH24 },\r\n    { label: \"Depth 32 float\", value: Constants.TEXTUREFORMAT_DEPTH32_FLOAT },\r\n];\r\n\r\nexport class GenericPropertyComponent extends React.Component<IPropertyComponentProps> {\r\n    constructor(props: IPropertyComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    override render() {\r\n        return (\r\n            <>\r\n                <GeneralPropertyTabComponent stateManager={this.props.stateManager} nodeData={this.props.nodeData} />\r\n                <GenericPropertyTabComponent stateManager={this.props.stateManager} nodeData={this.props.nodeData} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport class GeneralPropertyTabComponent extends React.Component<IPropertyComponentProps> {\r\n    constructor(props: IPropertyComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    override render() {\r\n        const block = this.props.nodeData.data as NodeRenderGraphBlock;\r\n\r\n        return (\r\n            <>\r\n                <LineContainerComponent title=\"GENERAL\">\r\n                    <TextInputLineComponent\r\n                        label=\"Name\"\r\n                        propertyName=\"name\"\r\n                        target={block}\r\n                        lockObject={this.props.stateManager.lockObject}\r\n                        onChange={() => this.props.stateManager.onUpdateRequiredObservable.notifyObservers(block)}\r\n                        throttlePropertyChangedNotification={true}\r\n                        validator={() => {\r\n                            return true;\r\n                        }}\r\n                    />\r\n                    <TextLineComponent label=\"Type\" value={block.getClassName()} />\r\n                    <TextInputLineComponent\r\n                        label=\"Comments\"\r\n                        propertyName=\"comments\"\r\n                        lockObject={this.props.stateManager.lockObject}\r\n                        target={block}\r\n                        onChange={() => this.props.stateManager.onUpdateRequiredObservable.notifyObservers(block)}\r\n                        throttlePropertyChangedNotification={true}\r\n                    />\r\n                    <CheckBoxLineComponent\r\n                        key={`checkBox-disabled`}\r\n                        label=\"Disabled\"\r\n                        target={block}\r\n                        propertyName=\"disabled\"\r\n                        onValueChanged={() => this.props.stateManager.onRebuildRequiredObservable.notifyObservers()}\r\n                    />\r\n                </LineContainerComponent>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport class GenericPropertyTabComponent extends React.Component<IPropertyComponentProps> {\r\n    constructor(props: IPropertyComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    override render() {\r\n        const block = this.props.nodeData.data as NodeRenderGraphBlock,\r\n            propStore: IPropertyDescriptionForEdition[] = (block as any)._propStore;\r\n\r\n        if (!propStore) {\r\n            return <></>;\r\n        }\r\n\r\n        const componentList: { [groupName: string]: JSX.Element[] } = {},\r\n            groups: string[] = [];\r\n\r\n        for (const { propertyName, displayName, type, groupName, options } of propStore) {\r\n            let components = componentList[groupName];\r\n\r\n            if (!components) {\r\n                components = [];\r\n                componentList[groupName] = components;\r\n                groups.push(groupName);\r\n            }\r\n\r\n            switch (type) {\r\n                case PropertyTypeForEdition.Boolean: {\r\n                    components.push(\r\n                        <CheckBoxLineComponent\r\n                            key={`checkBox-${propertyName}`}\r\n                            label={displayName}\r\n                            target={block}\r\n                            propertyName={propertyName}\r\n                            onValueChanged={() => ForceRebuild(block, this.props.stateManager, propertyName, options.notifiers)}\r\n                        />\r\n                    );\r\n                    break;\r\n                }\r\n                case PropertyTypeForEdition.Float: {\r\n                    const cantDisplaySlider = isNaN(options.min as number) || isNaN(options.max as number) || options.min === options.max;\r\n                    if (cantDisplaySlider) {\r\n                        components.push(\r\n                            <FloatLineComponent\r\n                                key={`float-${propertyName}`}\r\n                                lockObject={this.props.stateManager.lockObject}\r\n                                label={displayName}\r\n                                propertyName={propertyName}\r\n                                target={block}\r\n                                onChange={() => ForceRebuild(block, this.props.stateManager, propertyName, options.notifiers)}\r\n                            />\r\n                        );\r\n                    } else {\r\n                        components.push(\r\n                            <SliderLineComponent\r\n                                key={`slider-${propertyName}`}\r\n                                lockObject={this.props.stateManager.lockObject}\r\n                                label={displayName}\r\n                                target={block}\r\n                                propertyName={propertyName}\r\n                                step={Math.abs((options.max as number) - (options.min as number)) / 100.0}\r\n                                minimum={Math.min(options.min as number, options.max as number)}\r\n                                maximum={options.max as number}\r\n                                onChange={() => ForceRebuild(block, this.props.stateManager, propertyName, options.notifiers)}\r\n                            />\r\n                        );\r\n                    }\r\n                    break;\r\n                }\r\n                case PropertyTypeForEdition.Int: {\r\n                    const cantDisplaySlider = isNaN(options.min as number) || isNaN(options.max as number) || options.min === options.max;\r\n                    if (cantDisplaySlider) {\r\n                        components.push(\r\n                            <FloatLineComponent\r\n                                key={`int-${propertyName}`}\r\n                                lockObject={this.props.stateManager.lockObject}\r\n                                digits={0}\r\n                                step={\"1\"}\r\n                                isInteger={true}\r\n                                label={displayName}\r\n                                propertyName={propertyName}\r\n                                target={block}\r\n                                onChange={() => ForceRebuild(block, this.props.stateManager, propertyName, options.notifiers)}\r\n                            />\r\n                        );\r\n                    } else {\r\n                        components.push(\r\n                            <SliderLineComponent\r\n                                key={`slider-${propertyName}`}\r\n                                lockObject={this.props.stateManager.lockObject}\r\n                                label={displayName}\r\n                                target={block}\r\n                                propertyName={propertyName}\r\n                                step={1}\r\n                                minimum={Math.min(options.min as number, options.max as number)}\r\n                                maximum={options.max as number}\r\n                                onChange={() => ForceRebuild(block, this.props.stateManager, propertyName, options.notifiers)}\r\n                            />\r\n                        );\r\n                    }\r\n                    break;\r\n                }\r\n                case PropertyTypeForEdition.Vector2: {\r\n                    components.push(\r\n                        <Vector2LineComponent\r\n                            key={`vector2-${propertyName}`}\r\n                            lockObject={this.props.stateManager.lockObject}\r\n                            label={displayName}\r\n                            propertyName={propertyName}\r\n                            target={block}\r\n                            onChange={() => ForceRebuild(block, this.props.stateManager, propertyName, options.notifiers)}\r\n                        />\r\n                    );\r\n                    break;\r\n                }\r\n                case PropertyTypeForEdition.List: {\r\n                    components.push(\r\n                        <OptionsLine\r\n                            key={`options-${propertyName}`}\r\n                            label={displayName}\r\n                            options={options.options as IEditablePropertyListOption[]}\r\n                            target={block}\r\n                            propertyName={propertyName}\r\n                            onSelect={() => ForceRebuild(block, this.props.stateManager, propertyName, options.notifiers)}\r\n                        />\r\n                    );\r\n                    break;\r\n                }\r\n                case PropertyTypeForEdition.Color4: {\r\n                    components.push(\r\n                        <Color4LineComponent\r\n                            key={`color4-${propertyName}`}\r\n                            lockObject={this.props.stateManager.lockObject}\r\n                            label={displayName}\r\n                            propertyName={propertyName}\r\n                            target={block}\r\n                            onChange={() => ForceRebuild(block, this.props.stateManager, propertyName, options.notifiers)}\r\n                        />\r\n                    );\r\n                    break;\r\n                }\r\n                case PropertyTypeForEdition.SamplingMode: {\r\n                    components.push(\r\n                        <OptionsLine\r\n                            key={`samplingmode-${propertyName}`}\r\n                            className=\"samplingMode\"\r\n                            label={displayName}\r\n                            options={samplingModeList}\r\n                            target={block}\r\n                            propertyName={propertyName}\r\n                            onSelect={() => ForceRebuild(block, this.props.stateManager, propertyName, options.notifiers)}\r\n                        />\r\n                    );\r\n                    break;\r\n                }\r\n                case PropertyTypeForEdition.TextureFormat: {\r\n                    components.push(\r\n                        <OptionsLine\r\n                            key={`textureformat-${propertyName}`}\r\n                            label={displayName}\r\n                            options={textureFormatList}\r\n                            target={block}\r\n                            propertyName={propertyName}\r\n                            onSelect={() => ForceRebuild(block, this.props.stateManager, propertyName, options.notifiers)}\r\n                        />\r\n                    );\r\n                    break;\r\n                }\r\n                case PropertyTypeForEdition.TextureType: {\r\n                    components.push(\r\n                        <OptionsLine\r\n                            key={`texturetype-${propertyName}`}\r\n                            label={displayName}\r\n                            options={textureTypeList}\r\n                            target={block}\r\n                            propertyName={propertyName}\r\n                            onSelect={() => ForceRebuild(block, this.props.stateManager, propertyName, options.notifiers)}\r\n                        />\r\n                    );\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {groups.map((group) => (\r\n                    <LineContainerComponent key={`group-${group}`} title={group}>\r\n                        {componentList[group]}\r\n                    </LineContainerComponent>\r\n                ))}\r\n            </>\r\n        );\r\n    }\r\n}\r\n"]}
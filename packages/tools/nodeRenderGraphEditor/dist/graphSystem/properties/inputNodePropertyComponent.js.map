{"version":3,"file":"inputNodePropertyComponent.js","sourceRoot":"","sources":["../../../src/graphSystem/properties/inputNodePropertyComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport type { GlobalState } from \"../../globalState\";\r\nimport { LineContainerComponent } from \"../../sharedComponents/lineContainerComponent\";\r\nimport { CheckBoxLineComponent } from \"../../sharedComponents/checkBoxLineComponent\";\r\nimport { GeneralPropertyTabComponent, textureDepthStencilFormatList, textureFormatList, textureTypeList } from \"./genericNodePropertyComponent\";\r\nimport { FloatLineComponent } from \"shared-ui-components/lines/floatLineComponent\";\r\nimport { OptionsLine } from \"shared-ui-components/lines/optionsLineComponent\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { IPropertyComponentProps } from \"shared-ui-components/nodeGraphSystem/interfaces/propertyComponentProps\";\r\nimport type { NodeRenderGraphInputBlock } from \"core/FrameGraph/Node/Blocks/inputBlock\";\r\nimport { NodeRenderGraphBlockConnectionPointTypes } from \"core/FrameGraph/Node/Types/nodeRenderGraphTypes\";\r\nimport type { FrameGraphTextureCreationOptions } from \"core/FrameGraph/frameGraphTypes\";\r\n\r\nexport class InputPropertyTabComponent extends React.Component<IPropertyComponentProps> {\r\n    private _onValueChangedObserver: Nullable<Observer<NodeRenderGraphInputBlock>>;\r\n\r\n    constructor(props: IPropertyComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    override componentDidMount() {\r\n        const inputBlock = this.props.nodeData.data as NodeRenderGraphInputBlock;\r\n        this._onValueChangedObserver = inputBlock.onValueChangedObservable.add(() => {\r\n            this.forceUpdate();\r\n            this.props.stateManager.onUpdateRequiredObservable.notifyObservers(inputBlock);\r\n        });\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        const inputBlock = this.props.nodeData.data as NodeRenderGraphInputBlock;\r\n        if (this._onValueChangedObserver) {\r\n            inputBlock.onValueChangedObservable.remove(this._onValueChangedObserver);\r\n            this._onValueChangedObserver = null;\r\n        }\r\n    }\r\n\r\n    renderValue(_globalState: GlobalState) {\r\n        const inputBlock = this.props.nodeData.data as NodeRenderGraphInputBlock;\r\n        switch (inputBlock.type) {\r\n            case NodeRenderGraphBlockConnectionPointTypes.Texture: {\r\n                const isExternal = inputBlock.isExternal;\r\n                const creationOptions = inputBlock.creationOptions as FrameGraphTextureCreationOptions;\r\n                if (!isExternal && !inputBlock.creationOptions) {\r\n                    inputBlock.setDefaultValue();\r\n                }\r\n                return (\r\n                    <>\r\n                        <CheckBoxLineComponent\r\n                            label=\"Is external\"\r\n                            target={inputBlock}\r\n                            propertyName=\"isExternal\"\r\n                            onValueChanged={() => this.props.stateManager.onRebuildRequiredObservable.notifyObservers()}\r\n                        ></CheckBoxLineComponent>\r\n                        {!isExternal && (\r\n                            <>\r\n                                <CheckBoxLineComponent\r\n                                    label=\"Size is in percentage\"\r\n                                    target={creationOptions}\r\n                                    propertyName=\"sizeIsPercentage\"\r\n                                    onValueChanged={() => this.props.stateManager.onRebuildRequiredObservable.notifyObservers()}\r\n                                />\r\n                                <FloatLineComponent\r\n                                    lockObject={this.props.stateManager.lockObject}\r\n                                    digits={0}\r\n                                    step={\"1\"}\r\n                                    isInteger={true}\r\n                                    label=\"Width\"\r\n                                    propertyName=\"width\"\r\n                                    target={creationOptions.size}\r\n                                    onChange={() => this.props.stateManager.onRebuildRequiredObservable.notifyObservers()}\r\n                                />\r\n                                <FloatLineComponent\r\n                                    lockObject={this.props.stateManager.lockObject}\r\n                                    digits={0}\r\n                                    step={\"1\"}\r\n                                    isInteger={true}\r\n                                    label=\"Height\"\r\n                                    propertyName=\"height\"\r\n                                    target={creationOptions.size}\r\n                                    onChange={() => this.props.stateManager.onRebuildRequiredObservable.notifyObservers()}\r\n                                />\r\n                                <OptionsLine\r\n                                    label=\"Format\"\r\n                                    options={textureFormatList}\r\n                                    target={creationOptions}\r\n                                    propertyName=\"\"\r\n                                    onSelect={(value: number | string) => {\r\n                                        creationOptions.options.formats![0] = value as number;\r\n                                        this.props.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n                                    }}\r\n                                    extractValue={() => creationOptions.options.formats![0]}\r\n                                    noDirectUpdate={true}\r\n                                />\r\n                                <OptionsLine\r\n                                    label=\"Type\"\r\n                                    options={textureTypeList}\r\n                                    target={creationOptions}\r\n                                    propertyName=\"\"\r\n                                    onSelect={(value: number | string) => {\r\n                                        creationOptions.options.types![0] = value as number;\r\n                                        this.props.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n                                    }}\r\n                                    extractValue={() => creationOptions.options.types![0]}\r\n                                    noDirectUpdate={true}\r\n                                />\r\n                                <FloatLineComponent\r\n                                    lockObject={this.props.stateManager.lockObject}\r\n                                    digits={0}\r\n                                    step={\"1\"}\r\n                                    isInteger={true}\r\n                                    label=\"Samples\"\r\n                                    propertyName=\"samples\"\r\n                                    target={creationOptions.options}\r\n                                    min={1}\r\n                                    max={8}\r\n                                    onChange={() => this.props.stateManager.onRebuildRequiredObservable.notifyObservers()}\r\n                                />\r\n                                <CheckBoxLineComponent\r\n                                    label=\"Create mipmaps\"\r\n                                    target={creationOptions.options}\r\n                                    propertyName=\"createMipMaps\"\r\n                                    onValueChanged={() => this.props.stateManager.onRebuildRequiredObservable.notifyObservers()}\r\n                                />\r\n                                <CheckBoxLineComponent\r\n                                    label=\"Use sRGB buffer\"\r\n                                    target={creationOptions}\r\n                                    propertyName=\"\"\r\n                                    onSelect={(value: boolean) => {\r\n                                        creationOptions.options.useSRGBBuffers![0] = value as boolean;\r\n                                        this.props.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n                                    }}\r\n                                    extractValue={() => creationOptions.options.useSRGBBuffers![0]}\r\n                                />\r\n                            </>\r\n                        )}\r\n                    </>\r\n                );\r\n            }\r\n            case NodeRenderGraphBlockConnectionPointTypes.TextureDepthStencilAttachment: {\r\n                const creationOptions = inputBlock.creationOptions as FrameGraphTextureCreationOptions;\r\n                const isExternal = inputBlock.isExternal;\r\n                if (!isExternal && !inputBlock.creationOptions) {\r\n                    inputBlock.setDefaultValue();\r\n                }\r\n                return (\r\n                    <>\r\n                        <CheckBoxLineComponent\r\n                            label=\"Is external\"\r\n                            target={inputBlock}\r\n                            propertyName=\"isExternal\"\r\n                            onValueChanged={() => this.props.stateManager.onRebuildRequiredObservable.notifyObservers()}\r\n                        ></CheckBoxLineComponent>\r\n                        {!isExternal && (\r\n                            <>\r\n                                <CheckBoxLineComponent\r\n                                    label=\"Size is in percentage\"\r\n                                    target={creationOptions}\r\n                                    propertyName=\"sizeIsPercentage\"\r\n                                    onValueChanged={() => this.props.stateManager.onRebuildRequiredObservable.notifyObservers()}\r\n                                />\r\n                                <FloatLineComponent\r\n                                    lockObject={this.props.stateManager.lockObject}\r\n                                    digits={0}\r\n                                    step={\"1\"}\r\n                                    isInteger={true}\r\n                                    label=\"Width\"\r\n                                    propertyName=\"width\"\r\n                                    target={creationOptions.size}\r\n                                    onChange={() => this.props.stateManager.onRebuildRequiredObservable.notifyObservers()}\r\n                                />\r\n                                <FloatLineComponent\r\n                                    lockObject={this.props.stateManager.lockObject}\r\n                                    digits={0}\r\n                                    step={\"1\"}\r\n                                    isInteger={true}\r\n                                    label=\"Height\"\r\n                                    propertyName=\"height\"\r\n                                    target={creationOptions.size}\r\n                                    onChange={() => this.props.stateManager.onRebuildRequiredObservable.notifyObservers()}\r\n                                />\r\n                                <OptionsLine\r\n                                    label=\"Format\"\r\n                                    options={textureDepthStencilFormatList}\r\n                                    target={creationOptions.options}\r\n                                    propertyName=\"depthTextureFormat\"\r\n                                    onSelect={() => this.props.stateManager.onRebuildRequiredObservable.notifyObservers()}\r\n                                />\r\n                                <FloatLineComponent\r\n                                    lockObject={this.props.stateManager.lockObject}\r\n                                    digits={0}\r\n                                    step={\"1\"}\r\n                                    isInteger={true}\r\n                                    label=\"Samples\"\r\n                                    propertyName=\"samples\"\r\n                                    target={creationOptions.options}\r\n                                    min={1}\r\n                                    max={8}\r\n                                    onChange={() => this.props.stateManager.onRebuildRequiredObservable.notifyObservers()}\r\n                                />\r\n                            </>\r\n                        )}\r\n                    </>\r\n                );\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    setDefaultValue() {\r\n        const inputBlock = this.props.nodeData.data as NodeRenderGraphInputBlock;\r\n        inputBlock.setDefaultValue();\r\n    }\r\n\r\n    override render() {\r\n        const inputBlock = this.props.nodeData.data as NodeRenderGraphInputBlock;\r\n\r\n        return (\r\n            <div>\r\n                <GeneralPropertyTabComponent stateManager={this.props.stateManager} nodeData={this.props.nodeData} />\r\n                <LineContainerComponent title=\"PROPERTIES\">\r\n                    {this.renderValue(this.props.stateManager.data as GlobalState)}\r\n                    <CheckBoxLineComponent label=\"Visible on frame\" target={inputBlock} propertyName={\"visibleOnFrame\"}></CheckBoxLineComponent>\r\n                </LineContainerComponent>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
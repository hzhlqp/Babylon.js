{"version":3,"file":"blockNodeData.js","sourceRoot":"","sources":["../../src/graphSystem/blockNodeData.ts"],"names":[],"mappings":"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","sourcesContent":["import type { INodeContainer } from \"shared-ui-components/nodeGraphSystem/interfaces/nodeContainer\";\r\nimport type { INodeData } from \"shared-ui-components/nodeGraphSystem/interfaces/nodeData\";\r\nimport type { IPortData } from \"shared-ui-components/nodeGraphSystem/interfaces/portData\";\r\nimport { ConnectionPointPortData } from \"./connectionPointPortData\";\r\nimport styles from \"./blockNodeData.modules.scss\";\r\nimport type { NodeRenderGraphBlock } from \"core/FrameGraph/Node/nodeRenderGraphBlock\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { NodeRenderGraphTeleportInBlock } from \"core/FrameGraph/Node/Blocks/Teleport/teleportInBlock\";\r\nimport type { NodeRenderGraphTeleportOutBlock } from \"core/FrameGraph/Node/Blocks/Teleport/teleportOutBlock\";\r\n\r\nexport class BlockNodeData implements INodeData {\r\n    private _inputs: IPortData[] = [];\r\n    private _outputs: IPortData[] = [];\r\n    private _onBuildObserver: Nullable<Observer<NodeRenderGraphBlock>> = null;\r\n\r\n    /**\r\n     * Gets or sets a callback used to call node visual refresh\r\n     */\r\n    public refreshCallback?: () => void;\r\n\r\n    public get uniqueId(): number {\r\n        return this.data.uniqueId;\r\n    }\r\n\r\n    public get name() {\r\n        return this.data.name;\r\n    }\r\n\r\n    public getClassName() {\r\n        return this.data.getClassName();\r\n    }\r\n\r\n    public get isInput() {\r\n        return this.data.isInput;\r\n    }\r\n\r\n    public get inputs() {\r\n        return this._inputs;\r\n    }\r\n\r\n    public get outputs() {\r\n        return this._outputs;\r\n    }\r\n\r\n    public get comments() {\r\n        return this.data.comments;\r\n    }\r\n\r\n    public set comments(value: string) {\r\n        this.data.comments = value;\r\n    }\r\n\r\n    public get executionTime() {\r\n        return -1;\r\n    }\r\n\r\n    public getPortByName(name: string) {\r\n        for (const input of this.inputs) {\r\n            if (input.internalName === name) {\r\n                return input;\r\n            }\r\n        }\r\n        for (const output of this.outputs) {\r\n            if (output.internalName === name) {\r\n                return output;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public isConnectedToOutput() {\r\n        const block = this.data;\r\n\r\n        return block.isDebug || block.isAnAncestorOfType(\"NodeRenderGraphOutputBlock\");\r\n    }\r\n\r\n    public dispose() {\r\n        this.data.dispose();\r\n        this.data.onBuildObservable.remove(this._onBuildObserver);\r\n    }\r\n\r\n    public prepareHeaderIcon(iconDiv: HTMLDivElement, img: HTMLImageElement) {\r\n        if (this.data.getClassName() === \"NodeRenderGraphElbowBlock\") {\r\n            iconDiv.classList.add(styles.hidden);\r\n            return;\r\n        }\r\n\r\n        iconDiv.classList.add(styles.hidden);\r\n    }\r\n\r\n    public get invisibleEndpoints(): NodeRenderGraphTeleportOutBlock[] | null {\r\n        if (this.data.isTeleportIn) {\r\n            const teleportIn = this.data as NodeRenderGraphTeleportInBlock;\r\n            return teleportIn.endpoints;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public constructor(\r\n        public data: NodeRenderGraphBlock,\r\n        nodeContainer: INodeContainer\r\n    ) {\r\n        if (data.inputs) {\r\n            this.data.inputs.forEach((input) => {\r\n                this._inputs.push(new ConnectionPointPortData(input, nodeContainer));\r\n            });\r\n        }\r\n\r\n        if (data.outputs) {\r\n            this.data.outputs.forEach((output) => {\r\n                this._outputs.push(new ConnectionPointPortData(output, nodeContainer));\r\n            });\r\n        }\r\n\r\n        this._onBuildObserver = data.onBuildObservable.add(() => {\r\n            if (this.refreshCallback) {\r\n                this.refreshCallback();\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}
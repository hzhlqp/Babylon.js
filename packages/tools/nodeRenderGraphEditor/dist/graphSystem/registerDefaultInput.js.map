{"version":3,"file":"registerDefaultInput.js","sourceRoot":"","sources":["../../src/graphSystem/registerDefaultInput.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAEhD,OAAO,EAAE,wCAAwC,EAAE,MAAM,iDAAiD,CAAC;AAC3G,OAAO,EAAE,yBAAyB,EAAE,MAAM,wCAAwC,CAAC;AAEnF,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,YAA0B,EAAE,EAAE;IAC/D,YAAY,CAAC,sBAAsB,GAAG,CAAC,QAAa,EAAE,QAAmB,EAAE,aAA6B,EAAE,EAAE;QACxG,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAsC,CAAC;QAC9D,MAAM,SAAS,GAAG,QAAQ,CAAC;QAC3B,MAAM,WAAW,GAAG,QAAuB,CAAC;QAE5C,IAAI,KAAK,CAAC,IAAI,KAAK,wCAAwC,CAAC,UAAU,EAAE;YACpE,OAAO,IAAI,CAAC;SACf;QACD,MAAM,YAAY,GAAG,IAAI,yBAAyB,CAC9C,wCAAwC,CAAC,KAAK,CAAC,IAAI,CAAC,EACpD,WAAW,CAAC,eAAe,CAAC,UAAU,EACtC,WAAW,CAAC,KAAK,EACjB,KAAK,CAAC,IAAI,CACb,CAAC;QAEF,MAAM,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACpD,eAAe,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAClD,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;YACvB,YAAY,CAAC,aAAa,EAAE,CAAC;SAChC;QAED,OAAO;YACH,IAAI,EAAE,IAAI,aAAa,CAAC,YAAY,EAAE,aAAa,CAAC;YACpD,IAAI,EAAE,SAAS;SAClB,CAAC;IACN,CAAC,CAAC;AACN,CAAC,CAAC","sourcesContent":["import type { GlobalState } from \"../globalState\";\r\nimport type { INodeContainer } from \"shared-ui-components/nodeGraphSystem/interfaces/nodeContainer\";\r\nimport type { IPortData } from \"shared-ui-components/nodeGraphSystem/interfaces/portData\";\r\nimport type { StateManager } from \"shared-ui-components/nodeGraphSystem/stateManager\";\r\nimport { BlockNodeData } from \"./blockNodeData\";\r\nimport type { NodeRenderGraphConnectionPoint } from \"core/FrameGraph/Node/nodeRenderGraphBlockConnectionPoint\";\r\nimport { NodeRenderGraphBlockConnectionPointTypes } from \"core/FrameGraph/Node/Types/nodeRenderGraphTypes\";\r\nimport { NodeRenderGraphInputBlock } from \"core/FrameGraph/Node/Blocks/inputBlock\";\r\n\r\nexport const RegisterDefaultInput = (stateManager: StateManager) => {\r\n    stateManager.createDefaultInputData = (rootData: any, portData: IPortData, nodeContainer: INodeContainer) => {\r\n        const point = portData.data as NodeRenderGraphConnectionPoint;\r\n        const pointName = \"output\";\r\n        const globalState = rootData as GlobalState;\r\n\r\n        if (point.type === NodeRenderGraphBlockConnectionPointTypes.AutoDetect) {\r\n            return null;\r\n        }\r\n        const emittedBlock = new NodeRenderGraphInputBlock(\r\n            NodeRenderGraphBlockConnectionPointTypes[point.type],\r\n            globalState.nodeRenderGraph.frameGraph,\r\n            globalState.scene,\r\n            point.type\r\n        );\r\n\r\n        const nodeRenderGraph = globalState.nodeRenderGraph;\r\n        nodeRenderGraph.attachedBlocks.push(emittedBlock);\r\n        if (!emittedBlock.isInput) {\r\n            emittedBlock.autoConfigure();\r\n        }\r\n\r\n        return {\r\n            data: new BlockNodeData(emittedBlock, nodeContainer),\r\n            name: pointName,\r\n        };\r\n    };\r\n};\r\n"]}
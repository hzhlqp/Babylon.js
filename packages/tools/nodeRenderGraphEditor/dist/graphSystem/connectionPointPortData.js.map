{"version":3,"file":"connectionPointPortData.js","sourceRoot":"","sources":["../../src/graphSystem/connectionPointPortData.ts"],"names":[],"mappings":"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","sourcesContent":["import type { NodeRenderGraphBlock } from \"core/FrameGraph/Node/nodeRenderGraphBlock\";\r\nimport type { NodeRenderGraphConnectionPoint } from \"core/FrameGraph/Node/nodeRenderGraphBlockConnectionPoint\";\r\nimport { NodeRenderGraphConnectionPointDirection, NodeRenderGraphConnectionPointCompatibilityStates } from \"core/FrameGraph/Node/Types/nodeRenderGraphTypes\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { GlobalState } from \"node-render-graph-editor/globalState\";\r\nimport type { GraphCanvasComponent } from \"shared-ui-components/nodeGraphSystem/graphCanvas\";\r\nimport type { GraphNode } from \"shared-ui-components/nodeGraphSystem/graphNode\";\r\nimport type { INodeContainer } from \"shared-ui-components/nodeGraphSystem/interfaces/nodeContainer\";\r\nimport type { IPortData } from \"shared-ui-components/nodeGraphSystem/interfaces/portData\";\r\nimport { PortDataDirection } from \"shared-ui-components/nodeGraphSystem/interfaces/portData\";\r\nimport { TypeLedger } from \"shared-ui-components/nodeGraphSystem/typeLedger\";\r\n\r\nexport class ConnectionPointPortData implements IPortData {\r\n    private _connectedPort: Nullable<IPortData> = null;\r\n    private _nodeContainer: INodeContainer;\r\n\r\n    public data: NodeRenderGraphConnectionPoint;\r\n\r\n    public get name() {\r\n        const block = this.data.ownerBlock;\r\n        let portName = this.data.displayName || this.data.name;\r\n        if (this.data.ownerBlock.isInput) {\r\n            portName = block.name;\r\n        }\r\n\r\n        return portName;\r\n    }\r\n\r\n    public get internalName() {\r\n        return this.data.name;\r\n    }\r\n\r\n    public get isExposedOnFrame() {\r\n        return this.data.isExposedOnFrame;\r\n    }\r\n\r\n    public set isExposedOnFrame(value: boolean) {\r\n        this.data.isExposedOnFrame = value;\r\n    }\r\n\r\n    public get exposedPortPosition() {\r\n        return this.data.exposedPortPosition;\r\n    }\r\n\r\n    public set exposedPortPosition(value: number) {\r\n        this.data.exposedPortPosition = value;\r\n    }\r\n\r\n    public get isConnected() {\r\n        return this.data.isConnected;\r\n    }\r\n\r\n    public get connectedPort() {\r\n        if (!this.isConnected) {\r\n            return null;\r\n        }\r\n        if (!this._connectedPort && this.data.connectedPoint) {\r\n            const otherBlock = this.data.connectedPoint!.ownerBlock;\r\n            let otherNode = this._nodeContainer.nodes.find((n) => n.content.data === otherBlock);\r\n\r\n            if (!otherNode) {\r\n                otherNode = this._nodeContainer.appendNode(TypeLedger.NodeDataBuilder(otherBlock, this._nodeContainer));\r\n\r\n                const globalState = (this._nodeContainer as GraphCanvasComponent).stateManager.data as GlobalState;\r\n                if (globalState.nodeRenderGraph!.attachedBlocks.indexOf(otherBlock) === -1) {\r\n                    globalState.nodeRenderGraph!.attachedBlocks.push(otherBlock);\r\n                }\r\n            }\r\n\r\n            this._connectedPort = otherNode.getPortDataForPortDataContent(this.data.connectedPoint!);\r\n        }\r\n\r\n        return this._connectedPort;\r\n    }\r\n\r\n    public set connectedPort(value: Nullable<IPortData>) {\r\n        this._connectedPort = value;\r\n    }\r\n\r\n    public get direction() {\r\n        switch (this.data.direction) {\r\n            case NodeRenderGraphConnectionPointDirection.Input:\r\n                return PortDataDirection.Input;\r\n            default:\r\n                return PortDataDirection.Output;\r\n        }\r\n    }\r\n\r\n    public get ownerData(): NodeRenderGraphBlock {\r\n        return this.data.ownerBlock;\r\n    }\r\n\r\n    public get needDualDirectionValidation() {\r\n        return false;\r\n    }\r\n\r\n    public get hasEndpoints() {\r\n        return this.data.hasEndpoints;\r\n    }\r\n\r\n    public get endpoints() {\r\n        const endpoints: IPortData[] = [];\r\n\r\n        this.data.endpoints.forEach((endpoint) => {\r\n            const endpointOwnerBlock = endpoint.ownerBlock;\r\n            const endpointNode = this._nodeContainer.nodes.find((n) => n.content.data === endpointOwnerBlock);\r\n            endpoints.push(endpointNode!.getPortDataForPortDataContent(endpoint)!);\r\n        });\r\n\r\n        return endpoints;\r\n    }\r\n\r\n    public constructor(connectionPoint: NodeRenderGraphConnectionPoint, nodeContainer: INodeContainer) {\r\n        this.data = connectionPoint;\r\n        this._nodeContainer = nodeContainer;\r\n    }\r\n\r\n    public updateDisplayName(newName: string) {\r\n        this.data.displayName = newName;\r\n    }\r\n\r\n    public connectTo(port: IPortData) {\r\n        this.data.connectTo(port.data);\r\n        this._connectedPort = port;\r\n    }\r\n\r\n    public canConnectTo(port: IPortData): boolean {\r\n        return this.data.canConnectTo(port.data);\r\n    }\r\n\r\n    public disconnectFrom(port: IPortData) {\r\n        this.data.disconnectFrom(port.data);\r\n        port.connectedPort = null;\r\n    }\r\n\r\n    public checkCompatibilityState(port: IPortData) {\r\n        const state = this.data.checkCompatibilityState(port.data);\r\n\r\n        switch (state) {\r\n            case NodeRenderGraphConnectionPointCompatibilityStates.Compatible:\r\n                return 0;\r\n\r\n            default:\r\n                return state;\r\n        }\r\n    }\r\n\r\n    public getCompatibilityIssueMessage(issue: number, targetNode: GraphNode, targetPort: IPortData) {\r\n        switch (issue) {\r\n            case NodeRenderGraphConnectionPointCompatibilityStates.TypeIncompatible:\r\n                return \"Cannot connect two different connection types\";\r\n\r\n            case NodeRenderGraphConnectionPointCompatibilityStates.HierarchyIssue:\r\n                return \"Source block cannot be connected with one of its ancestors\";\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n}\r\n"]}
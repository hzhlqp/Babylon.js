{"version":3,"file":"previewMeshControlComponent.js","sourceRoot":"","sources":["../../../src/components/preview/previewMeshControlComponent.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AAGpD,OAAO,EAAE,WAAW,EAAE,MAAM,iDAAiD,CAAC;AAE9E,OAAO,SAAS,MAAM,mBAAmB,CAAC;AAC1C,OAAO,SAAS,MAAM,sBAAsB,CAAC;AAC7C,OAAO,SAAS,MAAM,sBAAsB,CAAC;AAO7C,MAAM,OAAO,2BAA4B,SAAQ,KAAK,CAAC,SAAuC;IAO1F,YAAY,KAAmC;QAC3C,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;QACxC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;QAEvC,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,yBAAyB,CAAC,GAAG,CAAC,GAAG,EAAE;YACtF,IAAI,CAAC,WAAW,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,6BAA6B,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;YAC3F,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qDAAqD,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,sDAAsD,CAAC,GAAG,CAAC,GAAG,EAAE;YAChJ,IAAI,CAAC,WAAW,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;IACP,CAAC;IAEQ,oBAAoB;QACzB,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,yBAAyB,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;QACvF,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,6BAA6B,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QACvF,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,sDAAsD,CAAC,MAAM,CAAC,IAAI,CAAC,qDAAqD,CAAC,CAAC;IACrJ,CAAC;IAED,cAAc,CAAC,MAAmB;QAC9B,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,KAAK,MAAM,EAAE;YAC/C,OAAO;SACV;QAED,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,GAAG,MAAM,CAAC;QAC5C,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,YAAY,CAAC,yBAAyB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QAErF,WAAW,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;QAE/C,IAAI,CAAC,WAAW,EAAE,CAAC;IACvB,CAAC;IAED,aAAa,CAAC,GAAQ;QAClB,MAAM,KAAK,GAAW,GAAG,CAAC,MAAM,EAAE,KAAK,IAAI,GAAG,CAAC,YAAY,EAAE,KAAK,CAAC;QACnE,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,EAAE;YACvB,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAEtB,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,GAAG,IAAI,CAAC;YAC1C,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC;YACxD,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,wBAAwB,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;YAC7D,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,YAAY,CAAC,yBAAyB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YACrF,IAAI,CAAC,WAAW,EAAE,CAAC;SACtB;QACD,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;YAC7B,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,KAAK,GAAG,EAAE,CAAC;SAC1C;IACL,CAAC;IAED,YAAY,CAAC,GAAQ;QACjB,MAAM,KAAK,GAAW,GAAG,CAAC,MAAM,EAAE,KAAK,IAAI,GAAG,CAAC,YAAY,EAAE,KAAK,CAAC;QACnE,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,EAAE;YACvB,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,GAAG,IAAI,CAAC;YACtC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,GAAG,WAAW,CAAC,MAAM,CAAC;YACpD,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,YAAY,CAAC,yBAAyB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YACrF,IAAI,CAAC,WAAW,EAAE,CAAC;SACtB;QACD,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE;YAC5B,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,GAAG,EAAE,CAAC;SACzC;IACL,CAAC;IAED,OAAO;QACH,IAAI,CAAC,KAAK,CAAC,0BAA0B,EAAE,CAAC;IAC5C,CAAC;IAED,KAAK;QACD,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC;IACrD,CAAC;IAEQ,MAAM;QACX,MAAM,eAAe,GAAG;YACpB,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,CAAC,GAAG,EAAE;YACzC,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,WAAW,CAAC,QAAQ,EAAE;YAClD,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,WAAW,CAAC,KAAK,EAAE;YAC5C,EAAE,KAAK,EAAE,aAAa,EAAE,KAAK,EAAE,WAAW,CAAC,UAAU,EAAE;YACvD,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,WAAW,CAAC,MAAM,EAAE;YAC9C,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;SACtD,CAAC;QAEF,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,wBAAwB,CAAC,MAAM,GAAG,CAAC,EAAE;YAC5D,eAAe,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE;gBACzB,KAAK,EAAE,QAAQ;gBACf,KAAK,EAAE,WAAW,CAAC,MAAM;aAC5B,CAAC,CAAC;SACN;QAED,MAAM,OAAO,GAAG,eAAe,CAAC;QAChC,MAAM,MAAM,GAAG,IAAI,CAAC;QAEpB,OAAO,CACH,eAAK,EAAE,EAAC,kBAAkB,aACtB,8BACI,KAAC,WAAW,IACR,KAAK,EAAC,EAAE,EACR,OAAO,EAAE,OAAO,EAChB,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,EAC9B,YAAY,EAAC,aAAa,EAC1B,cAAc,EAAE,IAAI,EACpB,QAAQ,EAAE,CAAC,KAAU,EAAE,EAAE;gCACrB,IAAI,KAAK,KAAK,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;oCAClC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;iCAC9B;qCAAM;oCACH,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC;iCACxC;4BACL,CAAC,GACH,EACF,eACI,KAAK,EAAE;gCACH,OAAO,EAAE,MAAM;6BAClB,EACD,KAAK,EAAC,4BAA4B,aAElC,gBAAO,GAAG,EAAE,IAAI,CAAC,cAAc,EAAE,QAAQ,QAAC,EAAE,EAAC,aAAa,EAAC,IAAI,EAAC,MAAM,EAAC,QAAQ,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,MAAM,GAAI,EACrI,gBAAO,GAAG,EAAE,IAAI,CAAC,aAAa,EAAE,EAAE,EAAC,YAAY,EAAC,MAAM,EAAC,MAAM,EAAC,IAAI,EAAC,MAAM,EAAC,QAAQ,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAU,IAC3H,EACN,cAAK,EAAE,EAAC,YAAY,EAAC,KAAK,EAAC,mBAAmB,EAAC,SAAS,EAAC,QAAQ,EAAC,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,KAAK,EAAE,YACjH,cAAK,GAAG,EAAE,SAAS,EAAE,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,kBAAkB,GAAG,GAClD,EACN,cAAK,KAAK,EAAC,cAAc,EAAC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,SAAS,EAAC,QAAQ,EAAC,EAAE,EAAC,cAAc,YACvF,cAAK,GAAG,EAAE,SAAS,EAAE,GAAG,EAAC,EAAE,GAAG,GAC5B,IACP,EACH,cAAK,KAAK,EAAC,4BAA4B,EAAC,EAAE,EAAC,oBAAoB,EAAC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,SAAS,EAAC,QAAQ,YAC7G,cAAK,GAAG,EAAE,SAAS,EAAE,GAAG,EAAC,EAAE,GAAG,GAC5B,IACJ,CACT,CAAC;IACN,CAAC;CACJ","sourcesContent":["import * as React from \"react\";\r\nimport type { GlobalState } from \"../../globalState\";\r\nimport { PreviewType } from \"./previewType\";\r\nimport { DataStorage } from \"core/Misc/dataStorage\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { OptionsLine } from \"shared-ui-components/lines/optionsLineComponent\";\r\n\r\nimport popUpIcon from \"./svgs/popOut.svg\";\r\nimport envPicker from \"./svgs/envPicker.svg\";\r\nimport frameIcon from \"./svgs/frameIcon.svg\";\r\n\r\ninterface IPreviewMeshControlComponent {\r\n    globalState: GlobalState;\r\n    togglePreviewAreaComponent: () => void;\r\n}\r\n\r\nexport class PreviewMeshControlComponent extends React.Component<IPreviewMeshControlComponent> {\r\n    private _filePickerRef: React.RefObject<HTMLInputElement>;\r\n    private _envPickerRef: React.RefObject<HTMLInputElement>;\r\n    private _onResetRequiredObserver: Nullable<Observer<boolean>>;\r\n    private _onDropEventObserver: Nullable<Observer<DragEvent>>;\r\n    private _onRefreshPreviewMeshControlComponentRequiredObserver: Nullable<Observer<void>>;\r\n\r\n    constructor(props: IPreviewMeshControlComponent) {\r\n        super(props);\r\n        this._filePickerRef = React.createRef();\r\n        this._envPickerRef = React.createRef();\r\n\r\n        this._onResetRequiredObserver = this.props.globalState.onResetRequiredObservable.add(() => {\r\n            this.forceUpdate();\r\n        });\r\n\r\n        this._onDropEventObserver = this.props.globalState.onDropEventReceivedObservable.add((event) => {\r\n            this.useCustomMesh(event);\r\n        });\r\n\r\n        this._onRefreshPreviewMeshControlComponentRequiredObserver = this.props.globalState.onRefreshPreviewMeshControlComponentRequiredObservable.add(() => {\r\n            this.forceUpdate();\r\n        });\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        this.props.globalState.onResetRequiredObservable.remove(this._onResetRequiredObserver);\r\n        this.props.globalState.onDropEventReceivedObservable.remove(this._onDropEventObserver);\r\n        this.props.globalState.onRefreshPreviewMeshControlComponentRequiredObservable.remove(this._onRefreshPreviewMeshControlComponentRequiredObserver);\r\n    }\r\n\r\n    changeMeshType(newOne: PreviewType) {\r\n        if (this.props.globalState.previewType === newOne) {\r\n            return;\r\n        }\r\n\r\n        this.props.globalState.previewType = newOne;\r\n        this.props.globalState.stateManager.onPreviewCommandActivated.notifyObservers(false);\r\n\r\n        DataStorage.WriteNumber(\"PreviewType\", newOne);\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    useCustomMesh(evt: any) {\r\n        const files: File[] = evt.target?.files || evt.dataTransfer?.files;\r\n        if (files && files.length) {\r\n            const file = files[0];\r\n\r\n            this.props.globalState.previewFile = file;\r\n            this.props.globalState.previewType = PreviewType.Custom;\r\n            this.props.globalState.listOfCustomPreviewFiles = [...files];\r\n            this.props.globalState.stateManager.onPreviewCommandActivated.notifyObservers(false);\r\n            this.forceUpdate();\r\n        }\r\n        if (this._filePickerRef.current) {\r\n            this._filePickerRef.current.value = \"\";\r\n        }\r\n    }\r\n\r\n    useCustomEnv(evt: any) {\r\n        const files: File[] = evt.target?.files || evt.dataTransfer?.files;\r\n        if (files && files.length) {\r\n            const file = files[0];\r\n            this.props.globalState.envFile = file;\r\n            this.props.globalState.envType = PreviewType.Custom;\r\n            this.props.globalState.stateManager.onPreviewCommandActivated.notifyObservers(false);\r\n            this.forceUpdate();\r\n        }\r\n        if (this._envPickerRef.current) {\r\n            this._envPickerRef.current.value = \"\";\r\n        }\r\n    }\r\n\r\n    onPopUp() {\r\n        this.props.togglePreviewAreaComponent();\r\n    }\r\n\r\n    frame() {\r\n        this.props.globalState.onFrame.notifyObservers();\r\n    }\r\n\r\n    override render() {\r\n        const meshTypeOptions = [\r\n            { label: \"Cube\", value: PreviewType.Box },\r\n            { label: \"Cylinder\", value: PreviewType.Cylinder },\r\n            { label: \"Plane\", value: PreviewType.Plane },\r\n            { label: \"Shader ball\", value: PreviewType.ShaderBall },\r\n            { label: \"Sphere\", value: PreviewType.Sphere },\r\n            { label: \"Load...\", value: PreviewType.Custom + 1 },\r\n        ];\r\n\r\n        if (this.props.globalState.listOfCustomPreviewFiles.length > 0) {\r\n            meshTypeOptions.splice(0, 0, {\r\n                label: \"Custom\",\r\n                value: PreviewType.Custom,\r\n            });\r\n        }\r\n\r\n        const options = meshTypeOptions;\r\n        const accept = \".*\";\r\n\r\n        return (\r\n            <div id=\"preview-mesh-bar\">\r\n                <>\r\n                    <OptionsLine\r\n                        label=\"\"\r\n                        options={options}\r\n                        target={this.props.globalState}\r\n                        propertyName=\"previewType\"\r\n                        noDirectUpdate={true}\r\n                        onSelect={(value: any) => {\r\n                            if (value !== PreviewType.Custom + 1) {\r\n                                this.changeMeshType(value);\r\n                            } else {\r\n                                this._filePickerRef.current?.click();\r\n                            }\r\n                        }}\r\n                    />\r\n                    <div\r\n                        style={{\r\n                            display: \"none\",\r\n                        }}\r\n                        title=\"Preview with a custom mesh\"\r\n                    >\r\n                        <input ref={this._filePickerRef} multiple id=\"file-picker\" type=\"file\" onChange={(evt) => this.useCustomMesh(evt)} accept={accept} />\r\n                        <input ref={this._envPickerRef} id=\"env-picker\" accept=\".env\" type=\"file\" onChange={(evt) => this.useCustomEnv(evt)}></input>\r\n                    </div>\r\n                    <div id=\"env-button\" title=\"Environment image\" className=\"button\" onClick={(_) => this._envPickerRef.current?.click()}>\r\n                        <img src={envPicker} alt=\"\" id=\"env-picker-image\" />\r\n                    </div>\r\n                    <div title=\"Frame camera\" onClick={() => this.frame()} className=\"button\" id=\"frame-button\">\r\n                        <img src={frameIcon} alt=\"\" />\r\n                    </div>\r\n                </>\r\n                <div title=\"Open preview in new window\" id=\"preview-new-window\" onClick={() => this.onPopUp()} className=\"button\">\r\n                    <img src={popUpIcon} alt=\"\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
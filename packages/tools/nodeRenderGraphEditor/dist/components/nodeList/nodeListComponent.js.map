{"version":3,"file":"nodeListComponent.js","sourceRoot":"","sources":["../../../src/components/nodeList/nodeListComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport * as React from \"react\";\r\nimport type { GlobalState } from \"../../globalState\";\r\nimport { LineContainerComponent } from \"../../sharedComponents/lineContainerComponent\";\r\nimport { DraggableLineComponent } from \"../../sharedComponents/draggableLineComponent\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { DraggableLineWithButtonComponent } from \"../../sharedComponents/draggableLineWithButtonComponent\";\r\nimport { LineWithFileButtonComponent } from \"../../sharedComponents/lineWithFileButtonComponent\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport addButton from \"../../imgs/add.svg\";\r\nimport deleteButton from \"../../imgs/delete.svg\";\r\nimport { NodeLedger } from \"shared-ui-components/nodeGraphSystem/nodeLedger\";\r\n\r\nimport \"./nodeList.scss\";\r\n\r\ninterface INodeListComponentProps {\r\n    globalState: GlobalState;\r\n}\r\n\r\nexport class NodeListComponent extends React.Component<INodeListComponentProps, { filter: string }> {\r\n    private _onResetRequiredObserver: Nullable<Observer<boolean>>;\r\n\r\n    private static _Tooltips: { [key: string]: string } = {\r\n        TextureBlock: \"Input block set to a texture value\",\r\n        TextureBackBufferBlock: \"Input block corresponding to the back buffer color texture\",\r\n        TextureBackBufferDepthStencilBlock: \"Input block corresponding to the back buffer depth/stencil texture\",\r\n        TextureDepthStencilBlock: \"Input block corresponding to a depth/stencil texture\",\r\n        ElbowBlock: \"Passthrough block mostly used to organize your graph\",\r\n        TeleportInBlock: \"Passthrough block mostly used to organize your graph (but without visible lines). It works like a teleportation point for the graph.\",\r\n        TeleportOutBlock: \"Endpoint for a TeleportInBlock.\",\r\n        OutputBlock: \"Output block used to gather the final render graph\",\r\n        ClearBlock: \"Clears a texture\",\r\n        CopyTextureBlock: \"Copies a texture to another texture\",\r\n        GenerateMipmapsBlock: \"Generates mipmaps for a texture\",\r\n        BlackAndWhiteBlock: \"Applies a black and white post process\",\r\n        BloomBlock: \"Applies a bloom post process\",\r\n        BlurBlock: \"Applies a blur post process\",\r\n        CircleOfConfusionBlock: \"Applies a circle of confusion post process\",\r\n        DepthOfFieldBlock: \"Applies a depth of field post process\",\r\n        ExtractHighlightsBlock: \"Applies an extract highlights post process\",\r\n        GUIBlock: \"Used to render a GUI\",\r\n        ObjectRendererBlock: \"Renders objects to a render target\",\r\n        GeometryRendererBlock: \"Generates geometry buffers for a list of objects\",\r\n        ObjectListBlock: \"List of objects (meshes, particle systems, sprites)\",\r\n        CullBlock: \"Culls a list of objects\",\r\n        CameraBlock: \"Camera\",\r\n    };\r\n\r\n    private _customFrameList: { [key: string]: string };\r\n\r\n    constructor(props: INodeListComponentProps) {\r\n        super(props);\r\n\r\n        this.state = { filter: \"\" };\r\n\r\n        const frameJson = localStorage.getItem(\"Custom-Frame-List\");\r\n        if (frameJson) {\r\n            this._customFrameList = JSON.parse(frameJson);\r\n        }\r\n\r\n        this._onResetRequiredObserver = this.props.globalState.onResetRequiredObservable.add(() => {\r\n            this.forceUpdate();\r\n        });\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        this.props.globalState.onResetRequiredObservable.remove(this._onResetRequiredObserver);\r\n    }\r\n\r\n    filterContent(filter: string) {\r\n        this.setState({ filter: filter });\r\n    }\r\n\r\n    loadCustomFrame(file: File) {\r\n        Tools.ReadFile(\r\n            file,\r\n            async (data) => {\r\n                // get Frame Data from file\r\n                const decoder = new TextDecoder(\"utf-8\");\r\n                const frameData = JSON.parse(decoder.decode(data));\r\n                const frameName = frameData.editorData.frames[0].name + \"Custom\";\r\n                const frameToolTip = frameData.editorData.frames[0].comments || \"\";\r\n\r\n                try {\r\n                    localStorage.setItem(frameName, JSON.stringify(frameData));\r\n                } catch (error) {\r\n                    this.props.globalState.stateManager.onErrorMessageDialogRequiredObservable.notifyObservers(\"Error Saving Frame\");\r\n                    return;\r\n                }\r\n\r\n                const frameJson = localStorage.getItem(\"Custom-Frame-List\");\r\n                let frameList: { [key: string]: string } = {};\r\n                if (frameJson) {\r\n                    frameList = JSON.parse(frameJson);\r\n                }\r\n                frameList[frameName] = frameToolTip;\r\n                localStorage.setItem(\"Custom-Frame-List\", JSON.stringify(frameList));\r\n                this._customFrameList = frameList;\r\n                this.forceUpdate();\r\n            },\r\n            undefined,\r\n            true\r\n        );\r\n    }\r\n\r\n    removeItem(value: string): void {\r\n        const frameJson = localStorage.getItem(\"Custom-Frame-List\");\r\n        if (frameJson) {\r\n            const registeredIdx = NodeLedger.RegisteredNodeNames.indexOf(value);\r\n            if (registeredIdx !== -1) {\r\n                NodeLedger.RegisteredNodeNames.splice(registeredIdx, 1);\r\n            }\r\n            const frameList = JSON.parse(frameJson);\r\n            delete frameList[value];\r\n            localStorage.removeItem(value);\r\n            localStorage.setItem(\"Custom-Frame-List\", JSON.stringify(frameList));\r\n            this._customFrameList = frameList;\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    override render() {\r\n        const customFrameNames: string[] = [];\r\n        for (const frame in this._customFrameList) {\r\n            customFrameNames.push(frame);\r\n        }\r\n\r\n        // Block types used to create the menu from\r\n        const allBlocks: any = {\r\n            Custom_Frames: customFrameNames,\r\n            Inputs: [\"TextureBlock\", \"TextureBackBufferBlock\", \"TextureBackBufferDepthStencilBlock\", \"TextureDepthStencilBlock\", \"ObjectListBlock\", \"CameraBlock\"],\r\n            Post_Processes: [\"BlackAndWhiteBlock\", \"BloomBlock\", \"BlurBlock\", \"CircleOfConfusionBlock\", \"DepthOfFieldBlock\", \"ExtractHighlightsBlock\"],\r\n            Misc: [\"ElbowBlock\", \"TeleportInBlock\", \"TeleportOutBlock\", \"GUIBlock\"],\r\n            Textures: [\"ClearBlock\", \"CopyTextureBlock\", \"GenerateMipmapsBlock\"],\r\n            Output_Nodes: [\"OutputBlock\"],\r\n            Rendering: [\"ObjectRendererBlock\", \"GeometryRendererBlock\", \"CullBlock\"],\r\n        };\r\n\r\n        // Create node menu\r\n        const blockMenu = [];\r\n        for (const key in allBlocks) {\r\n            const blockList = (allBlocks as any)[key]\r\n                .filter((b: string) => !this.state.filter || b.toLowerCase().indexOf(this.state.filter.toLowerCase()) !== -1)\r\n                .sort((a: string, b: string) => a.localeCompare(b))\r\n                .map((block: any) => {\r\n                    if (key === \"Custom_Frames\") {\r\n                        return (\r\n                            <DraggableLineWithButtonComponent\r\n                                key={block}\r\n                                data={block}\r\n                                tooltip={this._customFrameList[block] || \"\"}\r\n                                iconImage={deleteButton}\r\n                                iconTitle=\"Delete\"\r\n                                onIconClick={(value) => this.removeItem(value)}\r\n                            />\r\n                        );\r\n                    }\r\n                    return <DraggableLineComponent key={block} data={block} tooltip={NodeListComponent._Tooltips[block] || \"\"} />;\r\n                });\r\n\r\n            if (key === \"Custom_Frames\") {\r\n                const line = (\r\n                    <LineWithFileButtonComponent\r\n                        key=\"add...\"\r\n                        title={\"Add Custom Frame\"}\r\n                        closed={false}\r\n                        label=\"Add...\"\r\n                        uploadName={\"custom-frame-upload\"}\r\n                        iconImage={addButton}\r\n                        accept=\".json\"\r\n                        onIconClick={(file) => {\r\n                            this.loadCustomFrame(file);\r\n                        }}\r\n                    />\r\n                );\r\n                blockList.push(line);\r\n            }\r\n            if (blockList.length) {\r\n                blockMenu.push(\r\n                    <LineContainerComponent key={key + \" blocks\"} title={key.replace(\"__\", \": \").replace(\"_\", \" \")} closed={false}>\r\n                        {blockList}\r\n                    </LineContainerComponent>\r\n                );\r\n            }\r\n\r\n            // Register blocks\r\n            const ledger = NodeLedger.RegisteredNodeNames;\r\n            for (const key in allBlocks) {\r\n                const blocks = allBlocks[key] as string[];\r\n                if (blocks.length) {\r\n                    for (const block of blocks) {\r\n                        if (!ledger.includes(block)) {\r\n                            ledger.push(block);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            NodeLedger.NameFormatter = (name) => {\r\n                let finalName = name;\r\n                // custom frame\r\n                if (name.endsWith(\"Custom\")) {\r\n                    const nameIndex = name.lastIndexOf(\"Custom\");\r\n                    finalName = name.substring(0, nameIndex);\r\n                    finalName += \" [custom]\";\r\n                } else {\r\n                    finalName = name.replace(\"Block\", \"\");\r\n                }\r\n                return finalName;\r\n            };\r\n        }\r\n\r\n        return (\r\n            <div id=\"nrgeNodeList\">\r\n                <div className=\"panes\">\r\n                    <div className=\"pane\">\r\n                        <div className=\"filter\">\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Filter\"\r\n                                onFocus={() => (this.props.globalState.lockObject.lock = true)}\r\n                                onBlur={() => {\r\n                                    this.props.globalState.lockObject.lock = false;\r\n                                }}\r\n                                onChange={(evt) => this.filterContent(evt.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className=\"list-container\">{blockMenu}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
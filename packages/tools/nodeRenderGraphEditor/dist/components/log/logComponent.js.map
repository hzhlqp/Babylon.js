{"version":3,"file":"logComponent.js","sourceRoot":"","sources":["../../../src/components/log/logComponent.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAG/B,OAAO,YAAY,CAAC;AAMpB,MAAM,OAAO,QAAQ;IAGjB,YACW,OAAe,EACf,OAAgB;QADhB,YAAO,GAAP,OAAO,CAAQ;QACf,YAAO,GAAP,OAAO,CAAS;QAJpB,SAAI,GAAG,IAAI,IAAI,EAAE,CAAC;IAKtB,CAAC;CACP;AAED,MAAM,OAAO,YAAa,SAAQ,KAAK,CAAC,SAAmD;IAEvF,YAAY,KAAyB;QACjC,KAAK,CAAC,KAAK,CAAC,CAAC;QAEb,IAAI,CAAC,KAAK,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;QAC1B,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;IAC5C,CAAC;IAEQ,iBAAiB;QACtB,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACvD,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;YACpC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAEtB,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACP,CAAC;IAEQ,kBAAkB;QACvB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;YAC9B,OAAO;SACV;QAED,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,YAAY,CAAC;IACrF,CAAC;IAEQ,MAAM;QACX,OAAO,CACH,cAAK,EAAE,EAAC,iBAAiB,EAAC,GAAG,EAAE,IAAI,CAAC,cAAc,YAC7C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC1B,OAAO,CACH,cAAa,SAAS,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,YACtD,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,IAAI,GAAG,CAAC,CAAC,OAAO,IADvF,CAAC,CAEL,CACT,CAAC;YACN,CAAC,CAAC,GACA,CACT,CAAC;IACN,CAAC;CACJ","sourcesContent":["import * as React from \"react\";\r\nimport type { GlobalState } from \"../../globalState\";\r\n\r\nimport \"./log.scss\";\r\n\r\ninterface ILogComponentProps {\r\n    globalState: GlobalState;\r\n}\r\n\r\nexport class LogEntry {\r\n    public time = new Date();\r\n\r\n    constructor(\r\n        public message: string,\r\n        public isError: boolean\r\n    ) {}\r\n}\r\n\r\nexport class LogComponent extends React.Component<ILogComponentProps, { logs: LogEntry[] }> {\r\n    private _logConsoleRef: React.RefObject<HTMLDivElement>;\r\n    constructor(props: ILogComponentProps) {\r\n        super(props);\r\n\r\n        this.state = { logs: [] };\r\n        this._logConsoleRef = React.createRef();\r\n    }\r\n\r\n    override componentDidMount() {\r\n        this.props.globalState.onLogRequiredObservable.add((log) => {\r\n            const currentLogs = this.state.logs;\r\n            currentLogs.push(log);\r\n\r\n            this.setState({ logs: currentLogs });\r\n        });\r\n    }\r\n\r\n    override componentDidUpdate() {\r\n        if (!this._logConsoleRef.current) {\r\n            return;\r\n        }\r\n\r\n        this._logConsoleRef.current.scrollTop = this._logConsoleRef.current.scrollHeight;\r\n    }\r\n\r\n    override render() {\r\n        return (\r\n            <div id=\"nge-log-console\" ref={this._logConsoleRef}>\r\n                {this.state.logs.map((l, i) => {\r\n                    return (\r\n                        <div key={i} className={\"log\" + (l.isError ? \" error\" : \"\")}>\r\n                            {l.time.getHours() + \":\" + l.time.getMinutes() + \":\" + l.time.getSeconds() + \": \" + l.message}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
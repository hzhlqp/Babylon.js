{"version":3,"file":"propertyTabComponent.js","sourceRoot":"","sources":["../../../src/components/propertyTab/propertyTabComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport type { GlobalState } from \"../../globalState\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { LineContainerComponent } from \"../../sharedComponents/lineContainerComponent\";\r\nimport { StringTools } from \"shared-ui-components/stringTools\";\r\nimport { FileButtonLineComponent } from \"../../sharedComponents/fileButtonLineComponent\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { SerializationTools } from \"../../serializationTools\";\r\nimport { CheckBoxLineComponent } from \"../../sharedComponents/checkBoxLineComponent\";\r\nimport { DataStorage } from \"core/Misc/dataStorage\";\r\nimport { Engine } from \"core/Engines/engine\";\r\nimport { FramePropertyTabComponent } from \"../../graphSystem/properties/framePropertyComponent\";\r\nimport { FrameNodePortPropertyTabComponent } from \"../../graphSystem/properties/frameNodePortPropertyComponent\";\r\nimport { NodePortPropertyTabComponent } from \"../../graphSystem/properties/nodePortPropertyComponent\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { InputsPropertyTabComponent } from \"./inputsPropertyTabComponent\";\r\nimport { LogEntry } from \"../log/logComponent\";\r\nimport \"./propertyTab.scss\";\r\nimport { GraphNode } from \"shared-ui-components/nodeGraphSystem/graphNode\";\r\nimport { GraphFrame } from \"shared-ui-components/nodeGraphSystem/graphFrame\";\r\nimport { NodePort } from \"shared-ui-components/nodeGraphSystem/nodePort\";\r\nimport type { FrameNodePort } from \"shared-ui-components/nodeGraphSystem/frameNodePort\";\r\nimport { IsFramePortData } from \"shared-ui-components/nodeGraphSystem/tools\";\r\nimport { TextInputLineComponent } from \"shared-ui-components/lines/textInputLineComponent\";\r\nimport { ButtonLineComponent } from \"shared-ui-components/lines/buttonLineComponent\";\r\nimport type { LockObject } from \"shared-ui-components/tabs/propertyGrids/lockObject\";\r\nimport { TextLineComponent } from \"shared-ui-components/lines/textLineComponent\";\r\nimport { SliderLineComponent } from \"shared-ui-components/lines/sliderLineComponent\";\r\nimport { NodeRenderGraph } from \"core/FrameGraph/Node/nodeRenderGraph\";\r\n\r\ninterface IPropertyTabComponentProps {\r\n    globalState: GlobalState;\r\n    lockObject: LockObject;\r\n}\r\n\r\ninterface IPropertyTabComponentState {\r\n    currentNode: Nullable<GraphNode>;\r\n    currentFrame: Nullable<GraphFrame>;\r\n    currentFrameNodePort: Nullable<FrameNodePort>;\r\n    currentNodePort: Nullable<NodePort>;\r\n    uploadInProgress: boolean;\r\n}\r\n\r\nexport class PropertyTabComponent extends React.Component<IPropertyTabComponentProps, IPropertyTabComponentState> {\r\n    private _onBuiltObserver: Nullable<Observer<void>>;\r\n\r\n    constructor(props: IPropertyTabComponentProps) {\r\n        super(props);\r\n\r\n        this.state = { currentNode: null, currentFrame: null, currentFrameNodePort: null, currentNodePort: null, uploadInProgress: false };\r\n    }\r\n\r\n    override componentDidMount() {\r\n        this.props.globalState.stateManager.onSelectionChangedObservable.add((options) => {\r\n            const { selection } = options || {};\r\n            if (selection instanceof GraphNode) {\r\n                this.setState({ currentNode: selection, currentFrame: null, currentFrameNodePort: null, currentNodePort: null });\r\n            } else if (selection instanceof GraphFrame) {\r\n                this.setState({ currentNode: null, currentFrame: selection, currentFrameNodePort: null, currentNodePort: null });\r\n            } else if (IsFramePortData(selection)) {\r\n                this.setState({ currentNode: null, currentFrame: selection.frame, currentFrameNodePort: selection.port, currentNodePort: null });\r\n            } else if (selection instanceof NodePort) {\r\n                this.setState({ currentNode: null, currentFrame: null, currentFrameNodePort: null, currentNodePort: selection });\r\n            } else {\r\n                this.setState({ currentNode: null, currentFrame: null, currentFrameNodePort: null, currentNodePort: null });\r\n            }\r\n        });\r\n\r\n        this._onBuiltObserver = this.props.globalState.onBuiltObservable.add(() => {\r\n            this.forceUpdate();\r\n        });\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        this.props.globalState.onBuiltObservable.remove(this._onBuiltObserver);\r\n    }\r\n\r\n    load(file: File) {\r\n        Tools.ReadFile(\r\n            file,\r\n            (data) => {\r\n                const decoder = new TextDecoder(\"utf-8\");\r\n                SerializationTools.Deserialize(JSON.parse(decoder.decode(data)), this.props.globalState);\r\n\r\n                this.props.globalState.onResetRequiredObservable.notifyObservers(false);\r\n                this.props.globalState.stateManager.onSelectionChangedObservable.notifyObservers(null);\r\n                this.props.globalState.onFrame.notifyObservers();\r\n            },\r\n            undefined,\r\n            true\r\n        );\r\n    }\r\n\r\n    loadFrame(file: File) {\r\n        Tools.ReadFile(\r\n            file,\r\n            (data) => {\r\n                // get Frame Data from file\r\n                const decoder = new TextDecoder(\"utf-8\");\r\n                const frameData = JSON.parse(decoder.decode(data));\r\n                SerializationTools.AddFrameToRenderGraph(frameData, this.props.globalState, this.props.globalState.nodeRenderGraph);\r\n            },\r\n            undefined,\r\n            true\r\n        );\r\n    }\r\n\r\n    save() {\r\n        const json = SerializationTools.Serialize(this.props.globalState.nodeRenderGraph, this.props.globalState);\r\n        StringTools.DownloadAsFile(this.props.globalState.hostDocument, json, \"nodeRenderGraph.json\");\r\n    }\r\n\r\n    customSave() {\r\n        this.setState({ uploadInProgress: true });\r\n        this.props.globalState.onLogRequiredObservable.notifyObservers(new LogEntry(\"Saving your render graph to Babylon.js snippet server...\", false));\r\n        this.props.globalState\r\n            .customSave!.action(SerializationTools.Serialize(this.props.globalState.nodeRenderGraph, this.props.globalState))\r\n            .then(() => {\r\n                this.props.globalState.onLogRequiredObservable.notifyObservers(new LogEntry(\"Render graph saved successfully\", false));\r\n                this.setState({ uploadInProgress: false });\r\n            })\r\n            .catch((err) => {\r\n                this.props.globalState.onLogRequiredObservable.notifyObservers(new LogEntry(err, true));\r\n                this.setState({ uploadInProgress: false });\r\n            });\r\n    }\r\n\r\n    saveToSnippetServer() {\r\n        const renderGraph = this.props.globalState.nodeRenderGraph;\r\n        const xmlHttp = new XMLHttpRequest();\r\n\r\n        const json = SerializationTools.Serialize(renderGraph, this.props.globalState);\r\n\r\n        xmlHttp.onreadystatechange = () => {\r\n            if (xmlHttp.readyState == 4) {\r\n                if (xmlHttp.status == 200) {\r\n                    const snippet = JSON.parse(xmlHttp.responseText);\r\n                    const oldId = renderGraph.snippetId;\r\n                    renderGraph.snippetId = snippet.id;\r\n                    if (snippet.version && snippet.version != \"0\") {\r\n                        renderGraph.snippetId += \"#\" + snippet.version;\r\n                    }\r\n\r\n                    this.forceUpdate();\r\n                    if (navigator.clipboard) {\r\n                        navigator.clipboard.writeText(renderGraph.snippetId);\r\n                    }\r\n\r\n                    const windowAsAny = window as any;\r\n\r\n                    if (windowAsAny.Playground && oldId) {\r\n                        windowAsAny.Playground.onRequestCodeChangeObservable.notifyObservers({\r\n                            regex: new RegExp(oldId, \"g\"),\r\n                            replace: renderGraph.snippetId,\r\n                        });\r\n                    }\r\n\r\n                    this.props.globalState.hostDocument.defaultView!.alert(\r\n                        \"NodeRenderGraph saved with ID: \" + renderGraph.snippetId + \" (please note that the id was also saved to your clipboard)\"\r\n                    );\r\n                } else {\r\n                    this.props.globalState.hostDocument.defaultView!.alert(\r\n                        `Unable to save your node render graph. It may be too large (${(dataToSend.payload.length / 1024).toFixed(2)} KB).`\r\n                    );\r\n                }\r\n            }\r\n        };\r\n\r\n        xmlHttp.open(\"POST\", NodeRenderGraph.SnippetUrl + (renderGraph.snippetId ? \"/\" + renderGraph.snippetId : \"\"), true);\r\n        xmlHttp.setRequestHeader(\"Content-Type\", \"application/json\");\r\n\r\n        const dataToSend = {\r\n            payload: JSON.stringify({\r\n                nodeRenderGraph: json,\r\n            }),\r\n            name: \"\",\r\n            description: \"\",\r\n            tags: \"\",\r\n        };\r\n\r\n        xmlHttp.send(JSON.stringify(dataToSend));\r\n    }\r\n\r\n    loadFromSnippet() {\r\n        const renderGraph = this.props.globalState.nodeRenderGraph;\r\n\r\n        const snippedId = this.props.globalState.hostDocument.defaultView!.prompt(\"Please enter the snippet ID to use\");\r\n\r\n        if (!snippedId) {\r\n            return;\r\n        }\r\n\r\n        this.props.globalState.stateManager.onSelectionChangedObservable.notifyObservers(null);\r\n\r\n        NodeRenderGraph.ParseFromSnippetAsync(snippedId, this.props.globalState.scene, undefined, renderGraph)\r\n            .then(() => {\r\n                renderGraph.build();\r\n                this.props.globalState.onFrame.notifyObservers();\r\n            })\r\n            .catch((err) => {\r\n                this.props.globalState.hostDocument.defaultView!.alert(\"Unable to load your node render graph: \" + err);\r\n            });\r\n    }\r\n\r\n    override render() {\r\n        if (this.state.currentNode) {\r\n            return (\r\n                <div id=\"propertyTab\">\r\n                    <div id=\"header\">\r\n                        <img id=\"logo\" src=\"https://www.babylonjs.com/Assets/logo-babylonjs-social-twitter.png\" />\r\n                        <div id=\"title\">NODE RENDER GRAPH EDITOR</div>\r\n                    </div>\r\n                    {this.state.currentNode?.renderProperties() || this.state.currentNodePort?.node.renderProperties()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.state.currentFrameNodePort && this.state.currentFrame) {\r\n            return (\r\n                <FrameNodePortPropertyTabComponent\r\n                    globalState={this.props.globalState}\r\n                    stateManager={this.props.globalState.stateManager}\r\n                    frame={this.state.currentFrame}\r\n                    frameNodePort={this.state.currentFrameNodePort}\r\n                />\r\n            );\r\n        }\r\n\r\n        if (this.state.currentNodePort) {\r\n            return <NodePortPropertyTabComponent stateManager={this.props.globalState.stateManager} nodePort={this.state.currentNodePort} />;\r\n        }\r\n\r\n        if (this.state.currentFrame) {\r\n            return <FramePropertyTabComponent globalState={this.props.globalState} frame={this.state.currentFrame} />;\r\n        }\r\n\r\n        const gridSize = DataStorage.ReadNumber(\"GridSize\", 20);\r\n\r\n        return (\r\n            <div id=\"propertyTab\">\r\n                <div id=\"header\">\r\n                    <img id=\"logo\" src=\"https://www.babylonjs.com/Assets/logo-babylonjs-social-twitter.png\" />\r\n                    <div id=\"title\">NODE RENDER GRAPH EDITOR</div>\r\n                </div>\r\n                <div>\r\n                    <LineContainerComponent title=\"GENERAL\">\r\n                        <TextLineComponent label=\"Version\" value={Engine.Version} />\r\n                        <TextLineComponent\r\n                            label=\"Help\"\r\n                            value=\"doc.babylonjs.com\"\r\n                            underline={true}\r\n                            onLink={() => this.props.globalState.hostDocument.defaultView!.open(\"https://doc.babylonjs.com/how_to/node_render_graph\", \"_blank\")}\r\n                        />\r\n                        <TextInputLineComponent\r\n                            label=\"Comment\"\r\n                            multilines={true}\r\n                            lockObject={this.props.globalState.lockObject}\r\n                            value={this.props.globalState.nodeRenderGraph!.comment}\r\n                            target={this.props.globalState.nodeRenderGraph}\r\n                            propertyName=\"comment\"\r\n                        />\r\n                        <ButtonLineComponent\r\n                            label=\"Reset to default\"\r\n                            onClick={() => {\r\n                                this.props.globalState.nodeRenderGraph!.setToDefault();\r\n                                this.props.globalState.onResetRequiredObservable.notifyObservers(true);\r\n                                this.props.globalState.onFrame.notifyObservers();\r\n                            }}\r\n                        />\r\n                    </LineContainerComponent>\r\n                    <LineContainerComponent title=\"UI\">\r\n                        <ButtonLineComponent\r\n                            label=\"Zoom to fit\"\r\n                            onClick={() => {\r\n                                this.props.globalState.onZoomToFitRequiredObservable.notifyObservers();\r\n                            }}\r\n                        />\r\n                        <ButtonLineComponent\r\n                            label=\"Reorganize\"\r\n                            onClick={() => {\r\n                                this.props.globalState.onReOrganizedRequiredObservable.notifyObservers();\r\n                            }}\r\n                        />\r\n                    </LineContainerComponent>\r\n                    <LineContainerComponent title=\"OPTIONS\">\r\n                        <SliderLineComponent\r\n                            lockObject={this.props.lockObject}\r\n                            label=\"Grid size\"\r\n                            minimum={0}\r\n                            maximum={100}\r\n                            step={5}\r\n                            decimalCount={0}\r\n                            directValue={gridSize}\r\n                            onChange={(value) => {\r\n                                DataStorage.WriteNumber(\"GridSize\", value);\r\n                                this.props.globalState.stateManager.onGridSizeChanged.notifyObservers();\r\n                                this.forceUpdate();\r\n                            }}\r\n                        />\r\n                        <CheckBoxLineComponent\r\n                            label=\"Show grid\"\r\n                            isSelected={() => DataStorage.ReadBoolean(\"ShowGrid\", true)}\r\n                            onSelect={(value: boolean) => {\r\n                                DataStorage.WriteBoolean(\"ShowGrid\", value);\r\n                                this.props.globalState.stateManager.onGridSizeChanged.notifyObservers();\r\n                            }}\r\n                        />\r\n                    </LineContainerComponent>\r\n                    <LineContainerComponent title=\"FILE\">\r\n                        <FileButtonLineComponent label=\"Load\" onClick={(file) => this.load(file)} accept=\".json\" />\r\n                        <ButtonLineComponent\r\n                            label=\"Save\"\r\n                            onClick={() => {\r\n                                this.save();\r\n                            }}\r\n                        />\r\n                        <ButtonLineComponent\r\n                            label=\"Generate code\"\r\n                            onClick={() => {\r\n                                StringTools.DownloadAsFile(this.props.globalState.hostDocument, this.props.globalState.nodeRenderGraph!.generateCode(), \"code.txt\");\r\n                            }}\r\n                        />\r\n                        {this.props.globalState.customSave && (\r\n                            <>\r\n                                <ButtonLineComponent\r\n                                    label={this.props.globalState.customSave!.label}\r\n                                    isDisabled={this.state.uploadInProgress}\r\n                                    onClick={() => {\r\n                                        this.customSave();\r\n                                    }}\r\n                                />\r\n                            </>\r\n                        )}\r\n                        <FileButtonLineComponent label=\"Load Frame\" uploadName={\"frame-upload\"} onClick={(file) => this.loadFrame(file)} accept=\".json\" />\r\n                    </LineContainerComponent>\r\n                    {!this.props.globalState.customSave && (\r\n                        <LineContainerComponent title=\"SNIPPET\">\r\n                            {this.props.globalState.nodeRenderGraph!.snippetId && (\r\n                                <TextLineComponent label=\"Snippet ID\" value={this.props.globalState.nodeRenderGraph!.snippetId} />\r\n                            )}\r\n                            <ButtonLineComponent label=\"Load from snippet server\" onClick={() => this.loadFromSnippet()} />\r\n                            <ButtonLineComponent\r\n                                label=\"Save to snippet server\"\r\n                                onClick={() => {\r\n                                    this.saveToSnippetServer();\r\n                                }}\r\n                            />\r\n                        </LineContainerComponent>\r\n                    )}\r\n                    <InputsPropertyTabComponent\r\n                        lockObject={this.props.lockObject}\r\n                        globalState={this.props.globalState}\r\n                        inputs={this.props.globalState.nodeRenderGraph.getInputBlocks()}\r\n                    ></InputsPropertyTabComponent>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
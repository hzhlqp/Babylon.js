{"version":3,"file":"serializationTools.js","sourceRoot":"","sources":["../src/serializationTools.ts"],"names":[],"mappings":"AAMA,MAAM,OAAO,kBAAkB;IACpB,MAAM,CAAC,eAAe,CAAC,WAA4B,EAAE,WAAwB,EAAE,KAA4B;QAC9G,WAAW,CAAC,UAAU,GAAG;YACrB,SAAS,EAAE,EAAE;SAChB,CAAC;QAEF,uBAAuB;QACvB,MAAM,MAAM,GAA2B,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,cAAc,CAAC;QAEnH,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;YACxB,MAAM,IAAI,GAAG,WAAW,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;YAEnD,WAAW,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC;gBAClC,OAAO,EAAE,KAAK,CAAC,QAAQ;gBACvB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACvB,CAAC,CAAC;SACN;QAED,WAAW,CAAC,eAAe,CAAC,WAAW,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IAC/D,CAAC;IAEM,MAAM,CAAC,SAAS,CAAC,WAA4B,EAAE,WAAwB,EAAE,KAA4B;QACxG,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;QAEtD,MAAM,cAAc,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAElF,MAAM,mBAAmB,GAAG,WAAW,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QAElE,OAAO,IAAI,CAAC,SAAS,CAAC,mBAAmB,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;IAC7D,CAAC;IAEM,MAAM,CAAC,WAAW,CAAC,mBAAwB,EAAE,WAAwB;QACxE,WAAW,CAAC,eAAgB,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,CAAC;QACxE,WAAW,CAAC,kBAAkB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IAC1D,CAAC;IAEM,MAAM,CAAC,qBAAqB,CAAC,mBAAwB,EAAE,WAAwB,EAAE,kBAAmC;QACvH,IAAI,CAAC,eAAe,CAAC,kBAAkB,EAAE,WAAW,CAAC,CAAC;QACtD,WAAW,CAAC,eAAgB,CAAC,qBAAqB,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;QAC9E,WAAW,CAAC,uBAAuB,CAAC,eAAe,CAAC,mBAAmB,CAAC,CAAC;QACzE,WAAW,CAAC,kBAAkB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IAC1D,CAAC;CACJ","sourcesContent":["import type { GlobalState } from \"./globalState\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { GraphFrame } from \"shared-ui-components/nodeGraphSystem/graphFrame\";\r\nimport type { NodeRenderGraph } from \"core/FrameGraph/Node/nodeRenderGraph\";\r\nimport type { NodeRenderGraphBlock } from \"core/FrameGraph/Node/nodeRenderGraphBlock\";\r\n\r\nexport class SerializationTools {\r\n    public static UpdateLocations(renderGraph: NodeRenderGraph, globalState: GlobalState, frame?: Nullable<GraphFrame>) {\r\n        renderGraph.editorData = {\r\n            locations: [],\r\n        };\r\n\r\n        // Store node locations\r\n        const blocks: NodeRenderGraphBlock[] = frame ? frame.nodes.map((n) => n.content.data) : renderGraph.attachedBlocks;\r\n\r\n        for (const block of blocks) {\r\n            const node = globalState.onGetNodeFromBlock(block);\r\n\r\n            renderGraph.editorData.locations.push({\r\n                blockId: block.uniqueId,\r\n                x: node ? node.x : 0,\r\n                y: node ? node.y : 0,\r\n            });\r\n        }\r\n\r\n        globalState.storeEditorData(renderGraph.editorData, frame);\r\n    }\r\n\r\n    public static Serialize(renderGraph: NodeRenderGraph, globalState: GlobalState, frame?: Nullable<GraphFrame>) {\r\n        this.UpdateLocations(renderGraph, globalState, frame);\r\n\r\n        const selectedBlocks = frame ? frame.nodes.map((n) => n.content.data) : undefined;\r\n\r\n        const serializationObject = renderGraph.serialize(selectedBlocks);\r\n\r\n        return JSON.stringify(serializationObject, undefined, 2);\r\n    }\r\n\r\n    public static Deserialize(serializationObject: any, globalState: GlobalState) {\r\n        globalState.nodeRenderGraph!.parseSerializedObject(serializationObject);\r\n        globalState.onIsLoadingChanged.notifyObservers(false);\r\n    }\r\n\r\n    public static AddFrameToRenderGraph(serializationObject: any, globalState: GlobalState, currentRenderGraph: NodeRenderGraph) {\r\n        this.UpdateLocations(currentRenderGraph, globalState);\r\n        globalState.nodeRenderGraph!.parseSerializedObject(serializationObject, true);\r\n        globalState.onImportFrameObservable.notifyObservers(serializationObject);\r\n        globalState.onIsLoadingChanged.notifyObservers(false);\r\n    }\r\n}\r\n"]}
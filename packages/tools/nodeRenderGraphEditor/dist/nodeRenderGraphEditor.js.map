{"version":3,"file":"nodeRenderGraphEditor.js","sourceRoot":"","sources":["../src/nodeRenderGraphEditor.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { GlobalState } from \"./globalState\";\r\nimport { GraphEditor } from \"./graphEditor\";\r\nimport type { NodeRenderGraph } from \"core/FrameGraph/Node/nodeRenderGraph\";\r\nimport { Popup } from \"./sharedComponents/popup\";\r\nimport { SerializationTools } from \"./serializationTools\";\r\nimport type { Observable } from \"core/Misc/observable\";\r\nimport { RegisterToDisplayManagers } from \"./graphSystem/registerToDisplayLedger\";\r\nimport { RegisterToPropertyTabManagers } from \"./graphSystem/registerToPropertyLedger\";\r\nimport { RegisterTypeLedger } from \"./graphSystem/registerToTypeLedger\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\n/**\r\n * Interface used to specify creation options for the node editor\r\n */\r\nexport interface INodeEditorOptions {\r\n    nodeRenderGraph: NodeRenderGraph;\r\n    hostScene?: Scene;\r\n    hostElement?: HTMLElement;\r\n    customSave?: { label: string; action: (data: string) => Promise<void> };\r\n    customLoadObservable?: Observable<any>;\r\n}\r\n\r\n/**\r\n * Class used to create a node editor\r\n */\r\nexport class NodeRenderGraphEditor {\r\n    private static _CurrentState: GlobalState;\r\n\r\n    /**\r\n     * Show the node editor\r\n     * @param options defines the options to use to configure the node editor\r\n     */\r\n    public static Show(options: INodeEditorOptions) {\r\n        // Initial setup\r\n        RegisterToDisplayManagers();\r\n        RegisterToPropertyTabManagers();\r\n        RegisterTypeLedger();\r\n\r\n        if (this._CurrentState) {\r\n            const popupWindow = (Popup as any)[\"node-render-graph-editor\"];\r\n            if (popupWindow) {\r\n                popupWindow.close();\r\n            }\r\n        }\r\n\r\n        let hostElement = options.hostElement;\r\n\r\n        if (!hostElement) {\r\n            hostElement = Popup.CreatePopup(\"BABYLON.JS NODE RENDER GRAPH EDITOR\", \"node-render-graph-editor\", 1000, 800)!;\r\n        }\r\n\r\n        const globalState = new GlobalState(options.nodeRenderGraph.getScene());\r\n        globalState.nodeRenderGraph = options.nodeRenderGraph;\r\n        globalState.hostElement = hostElement;\r\n        globalState.hostDocument = hostElement.ownerDocument!;\r\n        globalState.customSave = options.customSave;\r\n        globalState.hostWindow = hostElement.ownerDocument!.defaultView!;\r\n        globalState.stateManager.hostDocument = globalState.hostDocument;\r\n        globalState.noAutoFillExternalInputs = options.hostScene !== undefined && options.hostScene !== null;\r\n\r\n        const graphEditor = React.createElement(GraphEditor, {\r\n            globalState: globalState,\r\n        });\r\n\r\n        ReactDOM.render(graphEditor, hostElement);\r\n\r\n        if (options.customLoadObservable) {\r\n            options.customLoadObservable.add((data) => {\r\n                SerializationTools.Deserialize(data, globalState);\r\n                globalState.onResetRequiredObservable.notifyObservers(false);\r\n                globalState.onBuiltObservable.notifyObservers();\r\n            });\r\n        }\r\n\r\n        this._CurrentState = globalState;\r\n\r\n        globalState.hostWindow.addEventListener(\"beforeunload\", () => {\r\n            globalState.onPopupClosedObservable.notifyObservers();\r\n        });\r\n\r\n        // Close the popup window when the page is refreshed or scene is disposed\r\n        const popupWindow = (Popup as any)[\"node-render-graph-editor\"];\r\n        if (globalState.nodeRenderGraph && options.hostScene && popupWindow) {\r\n            options.hostScene.onDisposeObservable.addOnce(() => {\r\n                if (popupWindow) {\r\n                    popupWindow.close();\r\n                }\r\n            });\r\n            window.onbeforeunload = () => {\r\n                const popupWindow = (Popup as any)[\"node-render-graph-editor\"];\r\n                if (popupWindow) {\r\n                    popupWindow.close();\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\r\n"]}
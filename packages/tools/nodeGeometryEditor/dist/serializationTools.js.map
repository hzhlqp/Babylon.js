{"version":3,"file":"serializationTools.js","sourceRoot":"","sources":["../src/serializationTools.ts"],"names":[],"mappings":"AAMA,MAAM,OAAO,kBAAkB;IACpB,MAAM,CAAC,eAAe,CAAC,QAAsB,EAAE,WAAwB,EAAE,KAA4B;QACxG,QAAQ,CAAC,UAAU,GAAG;YAClB,SAAS,EAAE,EAAE;SAChB,CAAC;QAEF,uBAAuB;QACvB,MAAM,MAAM,GAAwB,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC;QAE7G,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;YACxB,MAAM,IAAI,GAAG,WAAW,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;YAEnD,QAAQ,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC;gBAC/B,OAAO,EAAE,KAAK,CAAC,QAAQ;gBACvB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACvB,CAAC,CAAC;SACN;QAED,WAAW,CAAC,eAAe,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IAC5D,CAAC;IAEM,MAAM,CAAC,SAAS,CAAC,QAAsB,EAAE,WAAwB,EAAE,KAA4B;QAClG,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;QAEnD,MAAM,cAAc,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAElF,MAAM,mBAAmB,GAAG,QAAQ,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QAE/D,OAAO,IAAI,CAAC,SAAS,CAAC,mBAAmB,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;IAC7D,CAAC;IAEM,MAAM,CAAC,WAAW,CAAC,mBAAwB,EAAE,WAAwB;QACxE,WAAW,CAAC,YAAa,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,CAAC;QACrE,WAAW,CAAC,kBAAkB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IAC1D,CAAC;IAEM,MAAM,CAAC,kBAAkB,CAAC,mBAAwB,EAAE,WAAwB,EAAE,eAA6B;QAC9G,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;QACnD,WAAW,CAAC,YAAa,CAAC,qBAAqB,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;QAC3E,WAAW,CAAC,uBAAuB,CAAC,eAAe,CAAC,mBAAmB,CAAC,CAAC;QACzE,WAAW,CAAC,kBAAkB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IAC1D,CAAC;CACJ","sourcesContent":["import type { GlobalState } from \"./globalState\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { GraphFrame } from \"shared-ui-components/nodeGraphSystem/graphFrame\";\r\nimport type { NodeGeometry } from \"core/Meshes/Node/nodeGeometry\";\r\nimport type { NodeGeometryBlock } from \"core/Meshes/Node/nodeGeometryBlock\";\r\n\r\nexport class SerializationTools {\r\n    public static UpdateLocations(geometry: NodeGeometry, globalState: GlobalState, frame?: Nullable<GraphFrame>) {\r\n        geometry.editorData = {\r\n            locations: [],\r\n        };\r\n\r\n        // Store node locations\r\n        const blocks: NodeGeometryBlock[] = frame ? frame.nodes.map((n) => n.content.data) : geometry.attachedBlocks;\r\n\r\n        for (const block of blocks) {\r\n            const node = globalState.onGetNodeFromBlock(block);\r\n\r\n            geometry.editorData.locations.push({\r\n                blockId: block.uniqueId,\r\n                x: node ? node.x : 0,\r\n                y: node ? node.y : 0,\r\n            });\r\n        }\r\n\r\n        globalState.storeEditorData(geometry.editorData, frame);\r\n    }\r\n\r\n    public static Serialize(geometry: NodeGeometry, globalState: GlobalState, frame?: Nullable<GraphFrame>) {\r\n        this.UpdateLocations(geometry, globalState, frame);\r\n\r\n        const selectedBlocks = frame ? frame.nodes.map((n) => n.content.data) : undefined;\r\n\r\n        const serializationObject = geometry.serialize(selectedBlocks);\r\n\r\n        return JSON.stringify(serializationObject, undefined, 2);\r\n    }\r\n\r\n    public static Deserialize(serializationObject: any, globalState: GlobalState) {\r\n        globalState.nodeGeometry!.parseSerializedObject(serializationObject);\r\n        globalState.onIsLoadingChanged.notifyObservers(false);\r\n    }\r\n\r\n    public static AddFrameToGeometry(serializationObject: any, globalState: GlobalState, currentGeometry: NodeGeometry) {\r\n        this.UpdateLocations(currentGeometry, globalState);\r\n        globalState.nodeGeometry!.parseSerializedObject(serializationObject, true);\r\n        globalState.onImportFrameObservable.notifyObservers(serializationObject);\r\n        globalState.onIsLoadingChanged.notifyObservers(false);\r\n    }\r\n}\r\n"]}
{"version":3,"file":"nodeListComponent.js","sourceRoot":"","sources":["../../../src/components/nodeList/nodeListComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport * as React from \"react\";\r\nimport type { GlobalState } from \"../../globalState\";\r\nimport { LineContainerComponent } from \"shared-ui-components/lines/lineContainerComponent\";\r\nimport { DraggableLineComponent } from \"shared-ui-components/lines/draggableLineComponent\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { DraggableLineWithButtonComponent } from \"shared-ui-components/lines/draggableLineWithButtonComponent\";\r\nimport { LineWithFileButtonComponent } from \"shared-ui-components/lines/lineWithFileButtonComponent\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport addButton from \"../../imgs/add.svg\";\r\nimport deleteButton from \"../../imgs/delete.svg\";\r\nimport { NodeLedger } from \"shared-ui-components/nodeGraphSystem/nodeLedger\";\r\n\r\nimport \"./nodeList.scss\";\r\n\r\ninterface INodeListComponentProps {\r\n    globalState: GlobalState;\r\n}\r\n\r\nexport class NodeListComponent extends React.Component<INodeListComponentProps, { filter: string }> {\r\n    private _onResetRequiredObserver: Nullable<Observer<boolean>>;\r\n\r\n    private static _Tooltips: { [key: string]: string } = {\r\n        BoxBlock: \"Create a box geometry\",\r\n        PlaneBlock: \"Create a plane geometry\",\r\n        SphereBlock: \"Create a sphere geometry\",\r\n        TorusBlock: \"Create a torus geometry\",\r\n        CylinderBlock: \"Create a cylinder geometry\",\r\n        CapsuleBlock: \"Create a capsule geometry\",\r\n        DiscBlock: \"Create a disc geometry\",\r\n        IcoSphereBlock: \"Create an icosphere geometry\",\r\n        MeshBlock: \"Generate a geometry from a mesh\",\r\n        GridBlock: \"Generate a grid geometry\",\r\n        Float: \"Input block set to a float value\",\r\n        Vector2: \"Input block set to a Vector2 value\",\r\n        Vector3: \"Input block set to a Vector3 value\",\r\n        Vector4: \"Input block set to a Vector4 value\",\r\n        Int: \"Input block set to a integer value\",\r\n        PositionsBlock: \"Contextual value pointing at the positions array of the active geometry\",\r\n        NormalsBlock: \"Contextual value pointing at the normals array of the active geometry\",\r\n        ColorsBlock: \"Contextual value pointing at the colors array of the active geometry\",\r\n        TangentsBlock: \"Contextual value pointing at the tangents array of the active geometry\",\r\n        UVsBlock: \"Contextual value pointing at the uvs array of the active geometry\",\r\n        VertexIDBlock: \"Contextual value representing the vertex index of the current vertex of the active geometry\",\r\n        FaceIDBlock: \"Contextual value representing the face index of the current face of the active geometry\",\r\n        LoopIDBlock: \"Contextual value representing the current loop index (within a clone or an instantiate block)\",\r\n        InstanceIDBlock: \"Contextual value representing the current instance index (within an instantiate block)\",\r\n        GeometryIDBlock: \"Contextual value representing the identifier of the current active geometry\",\r\n        CollectionIDBlock: \"Contextual value representing the collection ID associated with the current active geometry\",\r\n        LatticeIDBlock: \"Contextual value representing the current lattice ID ie. the coordinate of the lattice control point inside the lattice\",\r\n        LatticeControlBlock: \"Contextual value representing the current lattice control point\",\r\n        PosterizeBlock: \"Reduces the number of values in each channel to the number in the corresponding channel of steps\",\r\n        ReplaceColorBlock: \"Outputs the replacement color if the distance between value and reference is less than distance, else outputs the value color\",\r\n        EqualBlock: \"Conditional block set to Equal\",\r\n        NotEqualBlock: \"Conditional block set to NotEqual\",\r\n        LessThanBlock: \"Conditional block set to LessThan\",\r\n        LessOrEqualBlock: \"Conditional block set to LessOrEqual\",\r\n        GreaterThanBlock: \"Conditional block set to GreaterThan\",\r\n        GreaterOrEqualBlock: \"Conditional block set to GreaterOrEqual\",\r\n        XorBlock: \"Conditional block set to Xor\",\r\n        OrBlock: \"Conditional block set to Or\",\r\n        AndBlock: \"Conditional block set to And\",\r\n        AddBlock: \"Math block set to Add\",\r\n        DivideBlock: \"Math block set to Divide\",\r\n        MaxBlock: \"Math block set to Max\",\r\n        MinBlock: \"Math block set to Min\",\r\n        MultiplyBlock: \"Math block set to Multiply\",\r\n        NegateBlock: \"Math block set to Negate\",\r\n        OneMinusBlock: \"Trigonometry block set to One Minus\",\r\n        ReciprocalBlock: \"Trigonometry block set to Reciprocal\",\r\n        SignBlock: \"Trigonometry block set to Sign\",\r\n        SqrtBlock: \"Trigonometry block set to Square Root\",\r\n        SubtractBlock: \"Math block set to Subtract\",\r\n        MapRangeBlock: \"Map range block used to change the range of a value\",\r\n        RoundBlock: \"Trigonometry block set to Round\",\r\n        FloorBlock: \"Trigonometry block set to Floor\",\r\n        CeilingBlock: \"Trigonometry block set to Ceiling\",\r\n        IntFloatConverterBlock: \"Block used to convert from Int to Float or Float to Int\",\r\n        AbsBlock: \"Trigonometry block set to Abs\",\r\n        ArcCosBlock: \"Trigonometry block set to Arc cos (using radians)\",\r\n        ArcSinBlock: \"Trigonometry block set to Arc sin (using radians)\",\r\n        ArcTanBlock: \"Trigonometry block set to Arc tan (using radians)\",\r\n        ArcTan2Block: \"Trigonometry block set to Arc tan2 (using radians)\",\r\n        CosBlock: \"Trigonometry block set to Cos (using radians)\",\r\n        ExpBlock: \"Trigonometry block set to Exp (using radians)\",\r\n        Exp2Block: \"Trigonometry block set to Exp2 (using radians)\",\r\n        LogBlock: \"Trigonometry block set to Log (using radians)\",\r\n        SinBlock: \"Trigonometry block set to Sin (using radians)\",\r\n        TanBlock: \"Trigonometry block set to Tan (using radians)\",\r\n        ToDegreesBlock: \"Conversion block used to convert radians to degree\",\r\n        ToRadiansBlock: \"Conversion block used to convert degrees to radians\",\r\n        TransformBlock: \"Apply a transform to a geometry or a vector\",\r\n        VectorConverterBlock: \"Convert to and from any type of value (scalar or vector)\",\r\n        NormalizeBlock: \"Normalize a vector\",\r\n        RotationXBlock: \"Create a rotation matrix around X axis\",\r\n        RotationYBlock: \"Create a rotation matrix around Y axis\",\r\n        RotationZBlock: \"Create a rotation matrix around Z axis\",\r\n        ScalingBlock: \"Create a scaling matrix\",\r\n        TranslationBlock: \"Create a translation matrix\",\r\n        AlignBlock: \"Create a rotation matrix used to align two vectors\",\r\n        InstantiateOnVerticesBlock: \"Instantiate a geometry on every vertex of a target geometry\",\r\n        InstantiateOnFacesBlock: \"Instantiate a geometry on the faces of a target geometry\",\r\n        InstantiateOnVolumeBlock: \"Instantiate a geometry inside a target geometry\",\r\n        InstantiateBlock: \"Instantiate a geometry with a loop count\",\r\n        ElbowBlock: \"Passthrough block mostly used to organize your graph\",\r\n        TeleportInBlock: \"Passthrough block mostly used to organize your graph (but without visible lines). It works like a teleportation point for the graph.\",\r\n        TeleportOutBlock: \"Endpoint for a TeleportInBlock.\",\r\n        DebugBlock: \"Passthrough block used to capture values and display them for debugging purposes\",\r\n        SetColorsBlock: \"Block used to update the colors attribute of a geometry\",\r\n        SetNormalsBlock: \"Block used to update the normals attribute of a geometry\",\r\n        SetPositionsBlock: \"Block used to update the positions attribute of a geometry\",\r\n        SetTangentsBlock: \"Block used to update the tangents attribute of a geometry\",\r\n        SetUVsBlock: \"Block used to update one of the uvs attribute of a geometry\",\r\n        SetMaterialIDBlock: \"Block used to associate a material ID with a geometry\",\r\n        MergeBlock: \"Block used to merge up to 5 geometries\",\r\n        BooleanBlock: \"Block used to apply a boolean operation between two geometries\",\r\n        computeNormalsBlock: \"Block used to compute the normals of a geometry\",\r\n        RandomBlock: \"Block used to generate a random value within a range\",\r\n        NoiseBlock: \"Generate a value using Perlin noise algorithm\",\r\n        GeometryOutputBlock: \"Output block used to gather the final geometry\",\r\n        NullBlock: \"Generate an empty geometry\",\r\n        OptimizeBlock: \"Eliminate vertices that share positions with another vertex\",\r\n        InstantiateLinearBlock: \"Clone a geometry linearly\",\r\n        InstantiateRadialBlock: \"Clone a geometry in a circle\",\r\n        GeometryInfoBlock: \"Provides information about a geometry\",\r\n        MappingBlock: \"Generate uv coordinates based on mapping type\",\r\n        MatrixComposeBlock: \"Multiply two matrices together\",\r\n        TextureBlock: \"Provide a texture data source\",\r\n        TextureFetchBlock: \"Fetch a color from a texture data source\",\r\n        BoundingBlock: \"Compute the bounding box of a geometry\",\r\n        LerpBlock: \"Interpolate with a lerp\",\r\n        NLerpBlock: \"Interpolate with a normalized lerp\",\r\n        SmoothStepBlock: \"Interpolate with a smooth step\",\r\n        StepBlock: \"Interpolate with a step function\",\r\n        FractBlock: \"Outputs only the fractional value of a floating point number\",\r\n        ModBlock: \"Outputs the value of one parameter modulo another\",\r\n        PowBlock: \"Outputs the input value multiplied by itself the number of times equal to the power input (Exponent of power)\",\r\n        ClampBlock: \"Outputs values above the maximum or below minimum as maximum or minimum values respectively\",\r\n        CrossBlock: \"Outputs a vector that is perpendicular to two input vectors\",\r\n        CurveBlock: \"Apply a curve function\",\r\n        DesaturateBlock: \"Convert a color input into a grayscale representation.\",\r\n        DotBlock: \"Outputs the cos of the angle between two vectors\",\r\n        DistanceBlock: \"Provides a distance vector based on the left and right input vectors\",\r\n        Rotate2dBlock: \"Rotates UV coordinates around the W axis.\",\r\n        LengthBlock: \"Outputs the length of an input vector\",\r\n        InterceptorBlock: \"Block used to trigger an observable when traversed\",\r\n        LatticeBlock: \"Block used to apply Lattice on geometry\",\r\n        AggregatorBlock: \"Block used to aggregate values from a geometry\",\r\n        CleanGeometryBlock: \"Try to clean a geometry\",\r\n    };\r\n\r\n    private _customFrameList: { [key: string]: string };\r\n\r\n    constructor(props: INodeListComponentProps) {\r\n        super(props);\r\n\r\n        this.state = { filter: \"\" };\r\n\r\n        const frameJson = localStorage.getItem(\"Custom-Frame-List\");\r\n        if (frameJson) {\r\n            this._customFrameList = JSON.parse(frameJson);\r\n        }\r\n\r\n        this._onResetRequiredObserver = this.props.globalState.onResetRequiredObservable.add(() => {\r\n            this.forceUpdate();\r\n        });\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        this.props.globalState.onResetRequiredObservable.remove(this._onResetRequiredObserver);\r\n    }\r\n\r\n    filterContent(filter: string) {\r\n        this.setState({ filter: filter });\r\n    }\r\n\r\n    loadCustomFrame(file: File) {\r\n        Tools.ReadFile(\r\n            file,\r\n            async (data) => {\r\n                // get Frame Data from file\r\n                const decoder = new TextDecoder(\"utf-8\");\r\n                const frameData = JSON.parse(decoder.decode(data));\r\n                const frameName = frameData.editorData.frames[0].name + \"Custom\";\r\n                const frameToolTip = frameData.editorData.frames[0].comments || \"\";\r\n\r\n                try {\r\n                    localStorage.setItem(frameName, JSON.stringify(frameData));\r\n                } catch (error) {\r\n                    this.props.globalState.stateManager.onErrorMessageDialogRequiredObservable.notifyObservers(\"Error Saving Frame\");\r\n                    return;\r\n                }\r\n\r\n                const frameJson = localStorage.getItem(\"Custom-Frame-List\");\r\n                let frameList: { [key: string]: string } = {};\r\n                if (frameJson) {\r\n                    frameList = JSON.parse(frameJson);\r\n                }\r\n                frameList[frameName] = frameToolTip;\r\n                localStorage.setItem(\"Custom-Frame-List\", JSON.stringify(frameList));\r\n                this._customFrameList = frameList;\r\n                this.forceUpdate();\r\n            },\r\n            undefined,\r\n            true\r\n        );\r\n    }\r\n\r\n    removeItem(value: string): void {\r\n        const frameJson = localStorage.getItem(\"Custom-Frame-List\");\r\n        if (frameJson) {\r\n            const registeredIdx = NodeLedger.RegisteredNodeNames.indexOf(value);\r\n            if (registeredIdx !== -1) {\r\n                NodeLedger.RegisteredNodeNames.splice(registeredIdx, 1);\r\n            }\r\n            const frameList = JSON.parse(frameJson);\r\n            delete frameList[value];\r\n            localStorage.removeItem(value);\r\n            localStorage.setItem(\"Custom-Frame-List\", JSON.stringify(frameList));\r\n            this._customFrameList = frameList;\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    override render() {\r\n        const customFrameNames: string[] = [];\r\n        for (const frame in this._customFrameList) {\r\n            customFrameNames.push(frame);\r\n        }\r\n\r\n        // Block types used to create the menu from\r\n        const allBlocks: any = {\r\n            Custom_Frames: customFrameNames,\r\n            Sources: [\"BoxBlock\", \"PlaneBlock\", \"SphereBlock\", \"TorusBlock\", \"CylinderBlock\", \"CapsuleBlock\", \"DiscBlock\", \"IcoSphereBlock\", \"MeshBlock\", \"GridBlock\", \"NullBlock\"],\r\n            Inputs: [\"Float\", \"Vector2\", \"Vector3\", \"Vector4\", \"Int\"],\r\n            Interpolation: [\"LerpBlock\", \"NLerpBlock\", \"SmoothStepBlock\", \"StepBlock\"],\r\n            Color_Management: [\"DesaturateBlock\", \"PosterizeBlock\", \"ReplaceColorBlock\"],\r\n            Contextual: [\r\n                \"PositionsBlock\",\r\n                \"NormalsBlock\",\r\n                \"ColorsBlock\",\r\n                \"TangentsBlock\",\r\n                \"UVsBlock\",\r\n                \"VertexIDBlock\",\r\n                \"FaceIDBlock\",\r\n                \"LoopIDBlock\",\r\n                \"InstanceIDBlock\",\r\n                \"GeometryIDBlock\",\r\n                \"CollectionIDBlock\",\r\n                \"LatticeIDBlock\",\r\n                \"LatticeControlBlock\",\r\n            ],\r\n            Logical: [\"EqualBlock\", \"NotEqualBlock\", \"LessThanBlock\", \"LessOrEqualBlock\", \"GreaterThanBlock\", \"GreaterOrEqualBlock\", \"XorBlock\", \"OrBlock\", \"AndBlock\"],\r\n            Math__Standard: [\r\n                \"AddBlock\",\r\n                \"DivideBlock\",\r\n                \"MaxBlock\",\r\n                \"MinBlock\",\r\n                \"MultiplyBlock\",\r\n                \"NegateBlock\",\r\n                \"OneMinusBlock\",\r\n                \"ReciprocalBlock\",\r\n                \"SignBlock\",\r\n                \"SqrtBlock\",\r\n                \"SubtractBlock\",\r\n                \"MapRangeBlock\",\r\n                \"RoundBlock\",\r\n                \"FloorBlock\",\r\n                \"CeilingBlock\",\r\n                \"IntFloatConverterBlock\",\r\n                \"ModBlock\",\r\n                \"ClampBlock\",\r\n            ],\r\n            Math__Scientific: [\r\n                \"AbsBlock\",\r\n                \"ArcCosBlock\",\r\n                \"ArcSinBlock\",\r\n                \"ArcTanBlock\",\r\n                \"ArcTan2Block\",\r\n                \"CosBlock\",\r\n                \"ExpBlock\",\r\n                \"Exp2Block\",\r\n                \"LogBlock\",\r\n                \"SinBlock\",\r\n                \"TanBlock\",\r\n                \"ToDegreesBlock\",\r\n                \"ToRadiansBlock\",\r\n                \"FractBlock\",\r\n                \"PowBlock\",\r\n            ],\r\n            Math__Vector: [\r\n                \"TransformBlock\",\r\n                \"VectorConverterBlock\",\r\n                \"NormalizeBlock\",\r\n                \"BoundingBlock\",\r\n                \"CrossBlock\",\r\n                \"CurveBlock\",\r\n                \"DistanceBlock\",\r\n                \"DotBlock\",\r\n                \"LengthBlock\",\r\n                \"Rotate2dBlock\",\r\n            ],\r\n            Matrices: [\"RotationXBlock\", \"RotationYBlock\", \"RotationZBlock\", \"ScalingBlock\", \"TranslationBlock\", \"AlignBlock\", \"MatrixComposeBlock\"],\r\n            Instances: [\r\n                \"InstantiateOnVerticesBlock\",\r\n                \"InstantiateOnFacesBlock\",\r\n                \"InstantiateOnVolumeBlock\",\r\n                \"InstantiateBlock\",\r\n                \"InstantiateLinearBlock\",\r\n                \"InstantiateRadialBlock\",\r\n            ],\r\n            Misc: [\"ElbowBlock\", \"DebugBlock\", \"TeleportInBlock\", \"TeleportOutBlock\", \"GeometryInfoBlock\", \"InterceptorBlock\"],\r\n            Updates: [\r\n                \"SetColorsBlock\",\r\n                \"SetNormalsBlock\",\r\n                \"SetPositionsBlock\",\r\n                \"SetTangentsBlock\",\r\n                \"SetUVsBlock\",\r\n                \"SetMaterialIDBlock\",\r\n                \"MergeBlock\",\r\n                \"BooleanBlock\",\r\n                \"CollectionBlock\",\r\n                \"ComputeNormalsBlock\",\r\n                \"OptimizeBlock\",\r\n                \"CleanGeometryBlock\",\r\n                \"MappingBlock\",\r\n                \"LatticeBlock\",\r\n                \"AggregatorBlock\",\r\n            ],\r\n            Noises: [\"RandomBlock\", \"NoiseBlock\"],\r\n            Textures: [\"TextureBlock\", \"TextureFetchBlock\"],\r\n            Output_Nodes: [\"GeometryOutputBlock\"],\r\n        };\r\n\r\n        // Create node menu\r\n        const blockMenu = [];\r\n        for (const key in allBlocks) {\r\n            const blockList = (allBlocks as any)[key]\r\n                .filter((b: string) => !this.state.filter || b.toLowerCase().indexOf(this.state.filter.toLowerCase()) !== -1)\r\n                .sort((a: string, b: string) => a.localeCompare(b))\r\n                .map((block: any) => {\r\n                    if (key === \"Custom_Frames\") {\r\n                        return (\r\n                            <DraggableLineWithButtonComponent\r\n                                key={block}\r\n                                format={\"babylonjs-geometry-node\"}\r\n                                data={block}\r\n                                tooltip={this._customFrameList[block] || \"\"}\r\n                                iconImage={deleteButton}\r\n                                iconTitle=\"Delete\"\r\n                                onIconClick={(value) => this.removeItem(value)}\r\n                            />\r\n                        );\r\n                    }\r\n                    return <DraggableLineComponent key={block} format={\"babylonjs-geometry-node\"} data={block} tooltip={NodeListComponent._Tooltips[block] || \"\"} />;\r\n                });\r\n\r\n            if (key === \"Custom_Frames\") {\r\n                const line = (\r\n                    <LineWithFileButtonComponent\r\n                        key=\"add...\"\r\n                        title={\"Add Custom Frame\"}\r\n                        closed={false}\r\n                        label=\"Add...\"\r\n                        uploadName={\"custom-frame-upload\"}\r\n                        iconImage={addButton}\r\n                        accept=\".json\"\r\n                        onIconClick={(file) => {\r\n                            this.loadCustomFrame(file);\r\n                        }}\r\n                    />\r\n                );\r\n                blockList.push(line);\r\n            }\r\n            if (blockList.length) {\r\n                blockMenu.push(\r\n                    <LineContainerComponent key={key + \" blocks\"} title={key.replace(\"__\", \": \").replace(\"_\", \" \")} closed={false}>\r\n                        {blockList}\r\n                    </LineContainerComponent>\r\n                );\r\n            }\r\n\r\n            // Register blocks\r\n            const ledger = NodeLedger.RegisteredNodeNames;\r\n            for (const key in allBlocks) {\r\n                const blocks = allBlocks[key] as string[];\r\n                if (blocks.length) {\r\n                    for (const block of blocks) {\r\n                        if (!ledger.includes(block)) {\r\n                            ledger.push(block);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            NodeLedger.NameFormatter = (name) => {\r\n                let finalName = name;\r\n                // custom frame\r\n                if (name.endsWith(\"Custom\")) {\r\n                    const nameIndex = name.lastIndexOf(\"Custom\");\r\n                    finalName = name.substring(0, nameIndex);\r\n                    finalName += \" [custom]\";\r\n                } else {\r\n                    finalName = name.replace(\"Block\", \"\");\r\n                }\r\n                return finalName;\r\n            };\r\n        }\r\n\r\n        return (\r\n            <div id=\"ngeNodeList\">\r\n                <div className=\"panes\">\r\n                    <div className=\"pane\">\r\n                        <div className=\"filter\">\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Filter\"\r\n                                onFocus={() => (this.props.globalState.lockObject.lock = true)}\r\n                                onBlur={() => {\r\n                                    this.props.globalState.lockObject.lock = false;\r\n                                }}\r\n                                onChange={(evt) => this.filterContent(evt.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className=\"list-container\">{blockMenu}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
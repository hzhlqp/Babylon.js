{"version":3,"file":"inputsPropertyTabComponent.js","sourceRoot":"","sources":["../../../src/components/propertyTab/inputsPropertyTabComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport type { GlobalState } from \"../../globalState\";\r\nimport { LineContainerComponent } from \"shared-ui-components/lines/lineContainerComponent\";\r\n\r\nimport \"./propertyTab.scss\";\r\nimport { Vector2LineComponent } from \"shared-ui-components/lines/vector2LineComponent\";\r\nimport { Vector3LineComponent } from \"shared-ui-components/lines/vector3LineComponent\";\r\nimport { Vector4LineComponent } from \"shared-ui-components/lines/vector4LineComponent\";\r\nimport type { LockObject } from \"shared-ui-components/tabs/propertyGrids/lockObject\";\r\nimport { FloatLineComponent } from \"shared-ui-components/lines/floatLineComponent\";\r\nimport { SliderLineComponent } from \"shared-ui-components/lines/sliderLineComponent\";\r\nimport type { GeometryInputBlock } from \"core/Meshes/Node/Blocks/geometryInputBlock\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"core/Meshes/Node/Enums/nodeGeometryConnectionPointTypes\";\r\n\r\ninterface IInputsPropertyTabComponentProps {\r\n    globalState: GlobalState;\r\n    inputs: GeometryInputBlock[];\r\n    lockObject: LockObject;\r\n}\r\n\r\nexport class InputsPropertyTabComponent extends React.Component<IInputsPropertyTabComponentProps> {\r\n    constructor(props: IInputsPropertyTabComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    processInputBlockUpdate() {\r\n        this.props.globalState.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n    }\r\n\r\n    renderInputBlock(block: GeometryInputBlock) {\r\n        switch (block.type) {\r\n            case NodeGeometryBlockConnectionPointTypes.Int:\r\n            case NodeGeometryBlockConnectionPointTypes.Float: {\r\n                const cantDisplaySlider = isNaN(block.min) || isNaN(block.max) || block.min === block.max;\r\n                const isInteger = block.type === NodeGeometryBlockConnectionPointTypes.Int;\r\n                return (\r\n                    <div key={block.uniqueId}>\r\n                        {cantDisplaySlider && (\r\n                            <FloatLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                key={block.uniqueId}\r\n                                label={block.name}\r\n                                target={block}\r\n                                isInteger={isInteger}\r\n                                propertyName=\"value\"\r\n                                onChange={() => this.processInputBlockUpdate()}\r\n                            />\r\n                        )}\r\n                        {!cantDisplaySlider && (\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                key={block.uniqueId}\r\n                                label={block.name}\r\n                                target={block}\r\n                                propertyName=\"value\"\r\n                                step={isInteger ? 1 : Math.abs(block.max - block.min) / 100.0}\r\n                                decimalCount={isInteger ? 0 : 2}\r\n                                minimum={block.min}\r\n                                maximum={block.max}\r\n                                onChange={() => this.processInputBlockUpdate()}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                );\r\n            }\r\n            case NodeGeometryBlockConnectionPointTypes.Vector2:\r\n                return (\r\n                    <Vector2LineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        key={block.uniqueId}\r\n                        label={block.name}\r\n                        target={block}\r\n                        propertyName=\"value\"\r\n                        onChange={() => this.processInputBlockUpdate()}\r\n                    />\r\n                );\r\n            case NodeGeometryBlockConnectionPointTypes.Vector3:\r\n                return (\r\n                    <Vector3LineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        key={block.uniqueId}\r\n                        label={block.name}\r\n                        target={block}\r\n                        propertyName=\"value\"\r\n                        onChange={() => this.processInputBlockUpdate()}\r\n                    />\r\n                );\r\n            case NodeGeometryBlockConnectionPointTypes.Vector4:\r\n                return (\r\n                    <Vector4LineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        key={block.uniqueId}\r\n                        label={block.name}\r\n                        target={block}\r\n                        propertyName=\"value\"\r\n                        onChange={() => this.processInputBlockUpdate()}\r\n                    />\r\n                );\r\n        }\r\n        return null;\r\n    }\r\n\r\n    override render() {\r\n        return (\r\n            <LineContainerComponent title=\"INPUTS\">\r\n                {this.props.inputs.map((ib) => {\r\n                    if (ib.isContextual || !ib.name) {\r\n                        return null;\r\n                    }\r\n                    return this.renderInputBlock(ib);\r\n                })}\r\n            </LineContainerComponent>\r\n        );\r\n    }\r\n}\r\n"]}
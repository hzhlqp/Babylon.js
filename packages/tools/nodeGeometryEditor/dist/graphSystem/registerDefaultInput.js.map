{"version":3,"file":"registerDefaultInput.js","sourceRoot":"","sources":["../../src/graphSystem/registerDefaultInput.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAEhD,OAAO,EAAE,qCAAqC,EAAE,MAAM,yDAAyD,CAAC;AAChH,OAAO,EAAE,kBAAkB,EAAE,MAAM,4CAA4C,CAAC;AAEhF,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,YAA0B,EAAE,EAAE;IAC/D,YAAY,CAAC,sBAAsB,GAAG,CAAC,QAAa,EAAE,QAAmB,EAAE,aAA6B,EAAE,EAAE;QACxG,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAmC,CAAC;QAC3D,MAAM,SAAS,GAAG,QAAQ,CAAC;QAE3B,IAAI,KAAK,CAAC,IAAI,KAAK,qCAAqC,CAAC,UAAU,EAAE;YACjE,OAAO,IAAI,CAAC;SACf;QACD,MAAM,YAAY,GAAG,IAAI,kBAAkB,CAAC,qCAAqC,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;QAE3G,MAAM,YAAY,GAAI,QAAwB,CAAC,YAAY,CAAC;QAC5D,YAAY,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC/C,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;YACvB,YAAY,CAAC,aAAa,EAAE,CAAC;SAChC;QAED,OAAO;YACH,IAAI,EAAE,IAAI,aAAa,CAAC,YAAY,EAAE,aAAa,CAAC;YACpD,IAAI,EAAE,SAAS;SAClB,CAAC;IACN,CAAC,CAAC;AACN,CAAC,CAAC","sourcesContent":["import type { GlobalState } from \"../globalState\";\r\nimport type { INodeContainer } from \"shared-ui-components/nodeGraphSystem/interfaces/nodeContainer\";\r\nimport type { IPortData } from \"shared-ui-components/nodeGraphSystem/interfaces/portData\";\r\nimport type { StateManager } from \"shared-ui-components/nodeGraphSystem/stateManager\";\r\nimport { BlockNodeData } from \"./blockNodeData\";\r\nimport type { NodeGeometryConnectionPoint } from \"core/Meshes/Node/nodeGeometryBlockConnectionPoint\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"core/Meshes/Node/Enums/nodeGeometryConnectionPointTypes\";\r\nimport { GeometryInputBlock } from \"core/Meshes/Node/Blocks/geometryInputBlock\";\r\n\r\nexport const RegisterDefaultInput = (stateManager: StateManager) => {\r\n    stateManager.createDefaultInputData = (rootData: any, portData: IPortData, nodeContainer: INodeContainer) => {\r\n        const point = portData.data as NodeGeometryConnectionPoint;\r\n        const pointName = \"output\";\r\n\r\n        if (point.type === NodeGeometryBlockConnectionPointTypes.AutoDetect) {\r\n            return null;\r\n        }\r\n        const emittedBlock = new GeometryInputBlock(NodeGeometryBlockConnectionPointTypes[point.type], point.type);\r\n\r\n        const nodeGeometry = (rootData as GlobalState).nodeGeometry;\r\n        nodeGeometry.attachedBlocks.push(emittedBlock);\r\n        if (!emittedBlock.isInput) {\r\n            emittedBlock.autoConfigure();\r\n        }\r\n\r\n        return {\r\n            data: new BlockNodeData(emittedBlock, nodeContainer),\r\n            name: pointName,\r\n        };\r\n    };\r\n};\r\n"]}
{"version":3,"file":"inputNodePropertyComponent.js","sourceRoot":"","sources":["../../../src/graphSystem/properties/inputNodePropertyComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport type { GlobalState } from \"../../globalState\";\r\nimport { FloatPropertyTabComponent } from \"../../components/propertyTab/properties/floatPropertyTabComponent\";\r\nimport { Vector2PropertyTabComponent } from \"../../components/propertyTab/properties/vector2PropertyTabComponent\";\r\nimport { Vector3PropertyTabComponent } from \"../../components/propertyTab/properties/vector3PropertyTabComponent\";\r\nimport { Vector4PropertyTabComponent } from \"../../components/propertyTab/properties/vector4PropertyTabComponent\";\r\nimport { LineContainerComponent } from \"shared-ui-components/lines/lineContainerComponent\";\r\nimport { GeneralPropertyTabComponent } from \"./genericNodePropertyComponent\";\r\nimport { CheckBoxLineComponent } from \"../../sharedComponents/checkBoxLineComponent\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { IPropertyComponentProps } from \"shared-ui-components/nodeGraphSystem/interfaces/propertyComponentProps\";\r\nimport { OptionsLine } from \"shared-ui-components/lines/optionsLineComponent\";\r\nimport { FloatLineComponent } from \"shared-ui-components/lines/floatLineComponent\";\r\nimport { SliderLineComponent } from \"shared-ui-components/lines/sliderLineComponent\";\r\nimport type { GeometryInputBlock } from \"core/Meshes/Node/Blocks/geometryInputBlock\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"core/Meshes/Node/Enums/nodeGeometryConnectionPointTypes\";\r\nimport { NodeGeometryContextualSources } from \"core/Meshes/Node/Enums/nodeGeometryContextualSources\";\r\n\r\nexport class InputPropertyTabComponent extends React.Component<IPropertyComponentProps> {\r\n    private _onValueChangedObserver: Nullable<Observer<GeometryInputBlock>>;\r\n\r\n    constructor(props: IPropertyComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    override componentDidMount() {\r\n        const inputBlock = this.props.nodeData.data as GeometryInputBlock;\r\n        this._onValueChangedObserver = inputBlock.onValueChangedObservable.add(() => {\r\n            this.forceUpdate();\r\n            this.props.stateManager.onUpdateRequiredObservable.notifyObservers(inputBlock);\r\n        });\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        const inputBlock = this.props.nodeData.data as GeometryInputBlock;\r\n        if (this._onValueChangedObserver) {\r\n            inputBlock.onValueChangedObservable.remove(this._onValueChangedObserver);\r\n            this._onValueChangedObserver = null;\r\n        }\r\n    }\r\n\r\n    renderValue(globalState: GlobalState) {\r\n        const inputBlock = this.props.nodeData.data as GeometryInputBlock;\r\n        switch (inputBlock.type) {\r\n            case NodeGeometryBlockConnectionPointTypes.Int:\r\n            case NodeGeometryBlockConnectionPointTypes.Float: {\r\n                const cantDisplaySlider = isNaN(inputBlock.min) || isNaN(inputBlock.max) || inputBlock.min === inputBlock.max;\r\n                const isIntger = inputBlock.type === NodeGeometryBlockConnectionPointTypes.Int;\r\n                return (\r\n                    <>\r\n                        <FloatLineComponent\r\n                            lockObject={this.props.stateManager.lockObject}\r\n                            label=\"Min\"\r\n                            target={inputBlock}\r\n                            isInteger={isIntger}\r\n                            propertyName=\"min\"\r\n                            onChange={() => {\r\n                                if (inputBlock.value < inputBlock.min) {\r\n                                    inputBlock.value = inputBlock.min;\r\n                                }\r\n                                this.forceUpdate();\r\n                            }}\r\n                        ></FloatLineComponent>\r\n                        <FloatLineComponent\r\n                            lockObject={this.props.stateManager.lockObject}\r\n                            label=\"Max\"\r\n                            target={inputBlock}\r\n                            isInteger={isIntger}\r\n                            propertyName=\"max\"\r\n                            onChange={() => {\r\n                                if (inputBlock.value > inputBlock.max) {\r\n                                    inputBlock.value = inputBlock.max;\r\n                                }\r\n                                this.forceUpdate();\r\n                            }}\r\n                        ></FloatLineComponent>\r\n                        {cantDisplaySlider && <FloatPropertyTabComponent globalState={globalState} inputBlock={inputBlock} />}\r\n                        {!cantDisplaySlider && (\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.stateManager.lockObject}\r\n                                label=\"Value\"\r\n                                target={inputBlock}\r\n                                propertyName=\"value\"\r\n                                step={isIntger ? 1 : Math.abs(inputBlock.max - inputBlock.min) / 100.0}\r\n                                decimalCount={isIntger ? 0 : 2}\r\n                                minimum={Math.min(inputBlock.min, inputBlock.max)}\r\n                                maximum={inputBlock.max}\r\n                                onChange={() => {\r\n                                    this.props.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n                                }}\r\n                            />\r\n                        )}\r\n                    </>\r\n                );\r\n            }\r\n            case NodeGeometryBlockConnectionPointTypes.Vector2:\r\n                return <Vector2PropertyTabComponent lockObject={globalState.lockObject} globalState={globalState} inputBlock={inputBlock} />;\r\n            case NodeGeometryBlockConnectionPointTypes.Vector3:\r\n                return <Vector3PropertyTabComponent lockObject={globalState.lockObject} globalState={globalState} inputBlock={inputBlock} />;\r\n            case NodeGeometryBlockConnectionPointTypes.Vector4:\r\n                return <Vector4PropertyTabComponent lockObject={globalState.lockObject} globalState={globalState} inputBlock={inputBlock} />;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    setDefaultValue() {\r\n        const inputBlock = this.props.nodeData.data as GeometryInputBlock;\r\n        inputBlock.setDefaultValue();\r\n    }\r\n\r\n    override render() {\r\n        const inputBlock = this.props.nodeData.data as GeometryInputBlock;\r\n\r\n        let contextualSourcesOptions: { label: string; value: NodeGeometryContextualSources }[] = [{ label: \"None\", value: NodeGeometryContextualSources.None }];\r\n\r\n        switch (inputBlock.type) {\r\n            case NodeGeometryBlockConnectionPointTypes.Float:\r\n            case NodeGeometryBlockConnectionPointTypes.Int:\r\n                contextualSourcesOptions = [\r\n                    { label: \"Vertex ID\", value: NodeGeometryContextualSources.VertexID },\r\n                    { label: \"Face ID\", value: NodeGeometryContextualSources.FaceID },\r\n                    { label: \"Loop ID\", value: NodeGeometryContextualSources.LoopID },\r\n                    { label: \"Instance ID\", value: NodeGeometryContextualSources.InstanceID },\r\n                    { label: \"Geometry ID\", value: NodeGeometryContextualSources.GeometryID },\r\n                    { label: \"Collection ID\", value: NodeGeometryContextualSources.CollectionID },\r\n                ];\r\n                break;\r\n            case NodeGeometryBlockConnectionPointTypes.Vector2:\r\n                contextualSourcesOptions = [\r\n                    { label: \"UV1s\", value: NodeGeometryContextualSources.UV },\r\n                    { label: \"UV2s\", value: NodeGeometryContextualSources.UV2 },\r\n                    { label: \"UV3s\", value: NodeGeometryContextualSources.UV3 },\r\n                    { label: \"UV4s\", value: NodeGeometryContextualSources.UV4 },\r\n                    { label: \"UV5s\", value: NodeGeometryContextualSources.UV5 },\r\n                    { label: \"UV6s\", value: NodeGeometryContextualSources.UV6 },\r\n                ];\r\n                break;\r\n            case NodeGeometryBlockConnectionPointTypes.Vector3:\r\n                contextualSourcesOptions = [\r\n                    { label: \"Positions\", value: NodeGeometryContextualSources.Positions },\r\n                    { label: \"Normals\", value: NodeGeometryContextualSources.Normals },\r\n                    { label: \"LatticeID\", value: NodeGeometryContextualSources.LatticeID },\r\n                    { label: \"LatticeControl\", value: NodeGeometryContextualSources.LatticeControl },\r\n                ];\r\n                break;\r\n            case NodeGeometryBlockConnectionPointTypes.Vector4:\r\n                contextualSourcesOptions = [\r\n                    { label: \"Tangents\", value: NodeGeometryContextualSources.Tangents },\r\n                    { label: \"Colors\", value: NodeGeometryContextualSources.Colors },\r\n                ];\r\n                break;\r\n        }\r\n\r\n        const modeOptions = [{ label: \"User-defined\", value: 0 }];\r\n\r\n        if (contextualSourcesOptions.length > 0) {\r\n            modeOptions.push({ label: \"Contextual value (Integer)\", value: NodeGeometryBlockConnectionPointTypes.Int });\r\n            modeOptions.push({ label: \"Contextual value (Vector2)\", value: NodeGeometryBlockConnectionPointTypes.Vector2 });\r\n            modeOptions.push({ label: \"Contextual value (Vector3)\", value: NodeGeometryBlockConnectionPointTypes.Vector3 });\r\n            modeOptions.push({ label: \"Contextual value (Vector4)\", value: NodeGeometryBlockConnectionPointTypes.Vector4 });\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <GeneralPropertyTabComponent stateManager={this.props.stateManager} nodeData={this.props.nodeData} />\r\n                <LineContainerComponent title=\"PROPERTIES\">\r\n                    <OptionsLine\r\n                        label=\"Mode\"\r\n                        options={modeOptions}\r\n                        target={inputBlock}\r\n                        noDirectUpdate={true}\r\n                        extractValue={() => {\r\n                            if (inputBlock.isContextual) {\r\n                                return inputBlock.type;\r\n                            }\r\n\r\n                            return 0;\r\n                        }}\r\n                        onSelect={(value: any) => {\r\n                            switch (value) {\r\n                                case 0:\r\n                                    this.setDefaultValue();\r\n                                    break;\r\n                                default:\r\n                                    switch (value) {\r\n                                        case NodeGeometryBlockConnectionPointTypes.Int:\r\n                                            inputBlock.contextualValue = NodeGeometryContextualSources.VertexID;\r\n                                            break;\r\n                                        case NodeGeometryBlockConnectionPointTypes.Vector2:\r\n                                            inputBlock.contextualValue = NodeGeometryContextualSources.UV;\r\n                                            break;\r\n                                        case NodeGeometryBlockConnectionPointTypes.Vector3:\r\n                                            inputBlock.contextualValue = NodeGeometryContextualSources.Positions;\r\n                                            break;\r\n                                        case NodeGeometryBlockConnectionPointTypes.Vector4:\r\n                                            inputBlock.contextualValue = NodeGeometryContextualSources.Colors;\r\n                                            break;\r\n                                    }\r\n                                    break;\r\n                            }\r\n                            this.forceUpdate();\r\n                            this.props.stateManager.onUpdateRequiredObservable.notifyObservers(inputBlock);\r\n                            this.props.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n                        }}\r\n                        propertyName={\"\"}\r\n                    />\r\n                    {!inputBlock.isContextual && this.renderValue(this.props.stateManager.data as GlobalState)}\r\n                    {inputBlock.isContextual && (\r\n                        <OptionsLine\r\n                            label=\"Contextual value\"\r\n                            options={contextualSourcesOptions}\r\n                            target={inputBlock}\r\n                            propertyName=\"contextualValue\"\r\n                            onSelect={(value: any) => {\r\n                                inputBlock.contextualValue = value;\r\n                                this.forceUpdate();\r\n\r\n                                this.props.stateManager.onUpdateRequiredObservable.notifyObservers(inputBlock);\r\n                                this.props.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n                            }}\r\n                        />\r\n                    )}\r\n                    {!inputBlock.isContextual && <CheckBoxLineComponent label=\"Visible on frame\" target={inputBlock} propertyName={\"visibleOnFrame\"}></CheckBoxLineComponent>}\r\n                </LineContainerComponent>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
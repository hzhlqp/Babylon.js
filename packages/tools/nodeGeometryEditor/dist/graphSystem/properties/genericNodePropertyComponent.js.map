{"version":3,"file":"genericNodePropertyComponent.js","sourceRoot":"","sources":["../../../src/graphSystem/properties/genericNodePropertyComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { LineContainerComponent } from \"shared-ui-components/lines/lineContainerComponent\";\r\nimport { CheckBoxLineComponent } from \"../../sharedComponents/checkBoxLineComponent\";\r\nimport type { IPropertyComponentProps } from \"shared-ui-components/nodeGraphSystem/interfaces/propertyComponentProps\";\r\nimport { TextInputLineComponent } from \"shared-ui-components/lines/textInputLineComponent\";\r\nimport { Vector2LineComponent } from \"shared-ui-components/lines/vector2LineComponent\";\r\nimport { OptionsLine } from \"shared-ui-components/lines/optionsLineComponent\";\r\nimport { TextLineComponent } from \"shared-ui-components/lines/textLineComponent\";\r\nimport { FloatLineComponent } from \"shared-ui-components/lines/floatLineComponent\";\r\nimport { SliderLineComponent } from \"shared-ui-components/lines/sliderLineComponent\";\r\nimport type { NodeGeometryBlock } from \"core/Meshes/Node/nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"core/Meshes/Node/nodeGeometryBlockConnectionPoint\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"core/Meshes/Node/Enums/nodeGeometryConnectionPointTypes\";\r\nimport { Vector3LineComponent } from \"shared-ui-components/lines/vector3LineComponent\";\r\nimport { Vector4LineComponent } from \"shared-ui-components/lines/vector4LineComponent\";\r\nimport type { IEditablePropertyListOption } from \"core/Decorators/nodeDecorator\";\r\nimport { PropertyTypeForEdition, type IPropertyDescriptionForEdition } from \"core/Decorators/nodeDecorator\";\r\nimport { ForceRebuild } from \"shared-ui-components/nodeGraphSystem/automaticProperties\";\r\n\r\nexport class GenericPropertyComponent extends React.Component<IPropertyComponentProps> {\r\n    constructor(props: IPropertyComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    override render() {\r\n        return (\r\n            <>\r\n                <GeneralPropertyTabComponent stateManager={this.props.stateManager} nodeData={this.props.nodeData} />\r\n                <GenericPropertyTabComponent stateManager={this.props.stateManager} nodeData={this.props.nodeData} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport class GeneralPropertyTabComponent extends React.Component<IPropertyComponentProps> {\r\n    constructor(props: IPropertyComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    processUpdate() {\r\n        this.props.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n    }\r\n\r\n    renderConnectionPoint(point: NodeGeometryConnectionPoint) {\r\n        switch (point.type) {\r\n            case NodeGeometryBlockConnectionPointTypes.Int: {\r\n                if (point.valueMax !== undefined && point.valueMin !== undefined) {\r\n                    return (\r\n                        <SliderLineComponent\r\n                            lockObject={this.props.stateManager.lockObject}\r\n                            key={point.name}\r\n                            label={point.name}\r\n                            target={point}\r\n                            propertyName=\"value\"\r\n                            decimalCount={0}\r\n                            step={1}\r\n                            minimum={point.valueMin}\r\n                            maximum={point.valueMax}\r\n                            onChange={() => this.processUpdate()}\r\n                        />\r\n                    );\r\n                }\r\n                return (\r\n                    <FloatLineComponent\r\n                        lockObject={this.props.stateManager.lockObject}\r\n                        key={point.name}\r\n                        label={point.name}\r\n                        isInteger={true}\r\n                        step=\"1\"\r\n                        digits={0}\r\n                        target={point}\r\n                        propertyName=\"value\"\r\n                        onChange={() => this.processUpdate()}\r\n                    />\r\n                );\r\n            }\r\n            case NodeGeometryBlockConnectionPointTypes.Float: {\r\n                if (point.valueMax !== undefined && point.valueMin !== undefined) {\r\n                    return (\r\n                        <SliderLineComponent\r\n                            lockObject={this.props.stateManager.lockObject}\r\n                            key={point.name}\r\n                            label={point.name}\r\n                            target={point}\r\n                            propertyName=\"value\"\r\n                            decimalCount={2}\r\n                            step={(point.valueMax - point.valueMin) / 100.0}\r\n                            minimum={point.valueMin}\r\n                            maximum={point.valueMax}\r\n                            onChange={() => this.processUpdate()}\r\n                        />\r\n                    );\r\n                }\r\n                return (\r\n                    <FloatLineComponent\r\n                        lockObject={this.props.stateManager.lockObject}\r\n                        key={point.name}\r\n                        label={point.name}\r\n                        target={point}\r\n                        propertyName=\"value\"\r\n                        onChange={() => this.processUpdate()}\r\n                    />\r\n                );\r\n            }\r\n            case NodeGeometryBlockConnectionPointTypes.Vector2:\r\n                return (\r\n                    <Vector2LineComponent\r\n                        lockObject={this.props.stateManager.lockObject}\r\n                        key={point.name}\r\n                        label={point.name}\r\n                        target={point}\r\n                        propertyName=\"value\"\r\n                        onChange={() => this.processUpdate()}\r\n                    />\r\n                );\r\n            case NodeGeometryBlockConnectionPointTypes.Vector3:\r\n                return (\r\n                    <Vector3LineComponent\r\n                        lockObject={this.props.stateManager.lockObject}\r\n                        key={point.name}\r\n                        label={point.name}\r\n                        target={point}\r\n                        propertyName=\"value\"\r\n                        onChange={() => this.processUpdate()}\r\n                    />\r\n                );\r\n            case NodeGeometryBlockConnectionPointTypes.Vector4:\r\n                return (\r\n                    <Vector4LineComponent\r\n                        lockObject={this.props.stateManager.lockObject}\r\n                        key={point.name}\r\n                        label={point.name}\r\n                        target={point}\r\n                        propertyName=\"value\"\r\n                        onChange={() => this.processUpdate()}\r\n                    />\r\n                );\r\n        }\r\n        return null;\r\n    }\r\n\r\n    override render() {\r\n        const block = this.props.nodeData.data as NodeGeometryBlock;\r\n\r\n        const nonConnectedInputs = block.inputs.filter((input) => {\r\n            return !input.isConnected && input.value !== null && input.value !== undefined;\r\n        });\r\n\r\n        return (\r\n            <>\r\n                <LineContainerComponent title=\"GENERAL\">\r\n                    <TextInputLineComponent\r\n                        label=\"Name\"\r\n                        propertyName=\"name\"\r\n                        target={block}\r\n                        lockObject={this.props.stateManager.lockObject}\r\n                        onChange={() => this.props.stateManager.onUpdateRequiredObservable.notifyObservers(block)}\r\n                        throttlePropertyChangedNotification={true}\r\n                        validator={() => {\r\n                            return true;\r\n                        }}\r\n                    />\r\n                    <TextLineComponent label=\"Type\" value={block.getClassName()} />\r\n                    <TextInputLineComponent\r\n                        label=\"Comments\"\r\n                        propertyName=\"comments\"\r\n                        lockObject={this.props.stateManager.lockObject}\r\n                        target={block}\r\n                        onChange={() => this.props.stateManager.onUpdateRequiredObservable.notifyObservers(block)}\r\n                        throttlePropertyChangedNotification={true}\r\n                    />\r\n                    {<TextLineComponent label=\"Build execution time\" value={`${block.buildExecutionTime.toFixed(2)} ms`} />}\r\n                </LineContainerComponent>\r\n                {nonConnectedInputs.length > 0 && (\r\n                    <LineContainerComponent title=\"PROPERTIES\">\r\n                        {nonConnectedInputs.map((input) => {\r\n                            return this.renderConnectionPoint(input);\r\n                        })}\r\n                    </LineContainerComponent>\r\n                )}\r\n                <LineContainerComponent title=\"DEBUG INFOS\">\r\n                    {block.outputs.map((output) => {\r\n                        return (\r\n                            <>\r\n                                <TextLineComponent label={(output.displayName || output.name) + \":\"} ignoreValue={true} additionalClass=\"bold\" />\r\n                                <TextLineComponent label=\"> Call count\" value={output.callCount.toString()} />\r\n                                <TextLineComponent label=\"> Execution count\" value={output.executionCount.toString()} />\r\n                            </>\r\n                        );\r\n                    })}\r\n                </LineContainerComponent>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport class GenericPropertyTabComponent extends React.Component<IPropertyComponentProps> {\r\n    constructor(props: IPropertyComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    override render() {\r\n        const block = this.props.nodeData.data as NodeGeometryBlock,\r\n            propStore: IPropertyDescriptionForEdition[] = (block as any)._propStore;\r\n\r\n        if (!propStore) {\r\n            return <></>;\r\n        }\r\n\r\n        const componentList: { [groupName: string]: JSX.Element[] } = {},\r\n            groups: string[] = [];\r\n\r\n        for (const { propertyName, displayName, type, groupName, options } of propStore) {\r\n            let components = componentList[groupName];\r\n\r\n            if (options.embedded) {\r\n                continue;\r\n            }\r\n\r\n            if (!components) {\r\n                components = [];\r\n                componentList[groupName] = components;\r\n                groups.push(groupName);\r\n            }\r\n\r\n            switch (type) {\r\n                case PropertyTypeForEdition.Boolean: {\r\n                    components.push(\r\n                        <CheckBoxLineComponent\r\n                            key={`checkBox-${propertyName}`}\r\n                            label={displayName}\r\n                            target={block}\r\n                            propertyName={propertyName}\r\n                            onValueChanged={() => ForceRebuild(block, this.props.stateManager, propertyName, options.notifiers)}\r\n                        />\r\n                    );\r\n                    break;\r\n                }\r\n                case PropertyTypeForEdition.Float: {\r\n                    const cantDisplaySlider = isNaN(options.min as number) || isNaN(options.max as number) || options.min === options.max;\r\n                    if (cantDisplaySlider) {\r\n                        components.push(\r\n                            <FloatLineComponent\r\n                                key={`float-${propertyName}`}\r\n                                lockObject={this.props.stateManager.lockObject}\r\n                                label={displayName}\r\n                                propertyName={propertyName}\r\n                                target={block}\r\n                                onChange={() => ForceRebuild(block, this.props.stateManager, propertyName, options.notifiers)}\r\n                            />\r\n                        );\r\n                    } else {\r\n                        components.push(\r\n                            <SliderLineComponent\r\n                                key={`slider-${propertyName}`}\r\n                                lockObject={this.props.stateManager.lockObject}\r\n                                label={displayName}\r\n                                target={block}\r\n                                propertyName={propertyName}\r\n                                step={Math.abs((options.max as number) - (options.min as number)) / 100.0}\r\n                                minimum={Math.min(options.min as number, options.max as number)}\r\n                                maximum={options.max as number}\r\n                                onChange={() => ForceRebuild(block, this.props.stateManager, propertyName, options.notifiers)}\r\n                            />\r\n                        );\r\n                    }\r\n                    break;\r\n                }\r\n                case PropertyTypeForEdition.Int: {\r\n                    const cantDisplaySlider = isNaN(options.min as number) || isNaN(options.max as number) || options.min === options.max;\r\n                    if (cantDisplaySlider) {\r\n                        components.push(\r\n                            <FloatLineComponent\r\n                                key={`int-${propertyName}`}\r\n                                lockObject={this.props.stateManager.lockObject}\r\n                                digits={0}\r\n                                step={\"1\"}\r\n                                isInteger={true}\r\n                                label={displayName}\r\n                                propertyName={propertyName}\r\n                                target={block}\r\n                                onChange={() => ForceRebuild(block, this.props.stateManager, propertyName, options.notifiers)}\r\n                            />\r\n                        );\r\n                    } else {\r\n                        components.push(\r\n                            <SliderLineComponent\r\n                                key={`slider-${propertyName}`}\r\n                                lockObject={this.props.stateManager.lockObject}\r\n                                label={displayName}\r\n                                target={block}\r\n                                step={1}\r\n                                decimalCount={0}\r\n                                propertyName={propertyName}\r\n                                minimum={Math.min(options.min as number, options.max as number)}\r\n                                maximum={options.max as number}\r\n                                onChange={() => ForceRebuild(block, this.props.stateManager, propertyName, options.notifiers)}\r\n                            />\r\n                        );\r\n                    }\r\n                    break;\r\n                }\r\n                case PropertyTypeForEdition.Vector2: {\r\n                    components.push(\r\n                        <Vector2LineComponent\r\n                            key={`vector2-${propertyName}`}\r\n                            lockObject={this.props.stateManager.lockObject}\r\n                            label={displayName}\r\n                            propertyName={propertyName}\r\n                            target={block}\r\n                            onChange={() => ForceRebuild(block, this.props.stateManager, propertyName, options.notifiers)}\r\n                        />\r\n                    );\r\n                    break;\r\n                }\r\n                case PropertyTypeForEdition.List: {\r\n                    components.push(\r\n                        <OptionsLine\r\n                            key={`options-${propertyName}`}\r\n                            label={displayName}\r\n                            options={options.options as IEditablePropertyListOption[]}\r\n                            target={block}\r\n                            propertyName={propertyName}\r\n                            onSelect={() => ForceRebuild(block, this.props.stateManager, propertyName, options.notifiers)}\r\n                        />\r\n                    );\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {groups.map((group) => (\r\n                    <LineContainerComponent key={`group-${group}`} title={group}>\r\n                        {componentList[group]}\r\n                    </LineContainerComponent>\r\n                ))}\r\n            </>\r\n        );\r\n    }\r\n}\r\n"]}
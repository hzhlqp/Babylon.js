{"version":3,"file":"meshNodePropertyComponent.js","sourceRoot":"","sources":["../../../src/graphSystem/properties/meshNodePropertyComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { LineContainerComponent } from \"shared-ui-components/lines/lineContainerComponent\";\r\nimport { GeneralPropertyTabComponent } from \"./genericNodePropertyComponent\";\r\nimport type { IPropertyComponentProps } from \"shared-ui-components/nodeGraphSystem/interfaces/propertyComponentProps\";\r\nimport { FileButtonLine } from \"shared-ui-components/lines/fileButtonLineComponent\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\nimport { TextLineComponent } from \"shared-ui-components/lines/textLineComponent\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { OptionsLine } from \"shared-ui-components/lines/optionsLineComponent\";\r\nimport type { MeshBlock } from \"core/Meshes/Node/Blocks/Sources/meshBlock\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { ButtonLineComponent } from \"shared-ui-components/lines/buttonLineComponent\";\r\nimport { CheckBoxLineComponent } from \"../../sharedComponents/checkBoxLineComponent\";\r\n\r\nexport class MeshPropertyTabComponent extends React.Component<IPropertyComponentProps, { isLoading: boolean }> {\r\n    constructor(props: IPropertyComponentProps) {\r\n        super(props);\r\n\r\n        this.state = { isLoading: false };\r\n    }\r\n\r\n    async loadMesh(file: File) {\r\n        this.setState({ isLoading: true });\r\n        const scene = await SceneLoader.LoadAsync(\"file:\", file, EngineStore.LastCreatedEngine);\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ isLoading: false });\r\n\r\n        const nodeData = this.props.nodeData as any;\r\n\r\n        if (nodeData.__scene) {\r\n            nodeData.__scene.dispose();\r\n        }\r\n        nodeData.__scene = scene;\r\n\r\n        const meshes = scene.meshes.filter((m) => !!m.name && m.getTotalVertices() > 0);\r\n\r\n        if (meshes.length) {\r\n            const block = this.props.nodeData.data as MeshBlock;\r\n            block.mesh = meshes[0] as Mesh;\r\n\r\n            this.props.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n        }\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    removeData() {\r\n        const block = this.props.nodeData.data as MeshBlock;\r\n        block.cleanData();\r\n        this.forceUpdate();\r\n        this.props.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n    }\r\n\r\n    override render() {\r\n        const scene = (this.props.nodeData as any).__scene as Nullable<Scene>;\r\n        const meshOptions = [{ label: \"None\", value: -1 }];\r\n        let meshes: AbstractMesh[] = [];\r\n\r\n        if (scene) {\r\n            meshes = scene.meshes.filter((m) => !!m.name && m.getTotalVertices() > 0);\r\n            meshes.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n            meshes.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n            meshOptions.push(\r\n                ...meshes.map((v, i) => {\r\n                    return { label: v.name, value: i };\r\n                })\r\n            );\r\n        }\r\n        const block = this.props.nodeData.data as MeshBlock;\r\n\r\n        return (\r\n            <div>\r\n                <GeneralPropertyTabComponent stateManager={this.props.stateManager} nodeData={this.props.nodeData} />\r\n                <LineContainerComponent title=\"SOURCE\">\r\n                    {this.state.isLoading && <TextLineComponent ignoreValue={true} label=\"Loading...\" />}\r\n                    {!this.state.isLoading && <FileButtonLine label=\"Load\" onClick={(file) => this.loadMesh(file)} accept=\".glb, .babylon\" />}\r\n                    {scene && (\r\n                        <OptionsLine\r\n                            label=\"Mesh\"\r\n                            options={meshOptions}\r\n                            target={block}\r\n                            propertyName=\"mesh\"\r\n                            noDirectUpdate={true}\r\n                            onSelect={(value) => {\r\n                                switch (value) {\r\n                                    case -1:\r\n                                        block.mesh = null;\r\n                                        break;\r\n                                    default:\r\n                                        block.mesh = meshes[value as number] as Mesh;\r\n                                }\r\n\r\n                                this.props.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n                                this.forceUpdate();\r\n                            }}\r\n                            extractValue={() => {\r\n                                if (!block.mesh) {\r\n                                    return -1;\r\n                                }\r\n\r\n                                const meshIndex = meshes.indexOf(block.mesh);\r\n\r\n                                if (meshIndex > -1) {\r\n                                    return meshIndex;\r\n                                }\r\n\r\n                                return -1;\r\n                            }}\r\n                        />\r\n                    )}\r\n                    {!scene && !!block.mesh && <TextLineComponent ignoreValue={true} label={`Mesh ${block.mesh.name} defined by code`} />}\r\n                    {!scene && !!block.isUsingCachedData && <TextLineComponent ignoreValue={true} label={`Block is using cached data`} />}\r\n                    {!this.state.isLoading && (!!block.mesh || !!block.isUsingCachedData) && <ButtonLineComponent label=\"Remove\" onClick={() => this.removeData()} />}\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"ADVANCED\">\r\n                    <CheckBoxLineComponent\r\n                        label=\"Serialized cached data\"\r\n                        target={block}\r\n                        propertyName=\"serializedCachedData\"\r\n                        onValueChanged={() => {\r\n                            this.props.stateManager.onRebuildRequiredObservable.notifyObservers();\r\n                        }}\r\n                    />\r\n                </LineContainerComponent>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
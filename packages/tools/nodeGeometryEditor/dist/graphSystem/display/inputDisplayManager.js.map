{"version":3,"file":"inputDisplayManager.js","sourceRoot":"","sources":["../../../src/graphSystem/display/inputDisplayManager.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Vector2, Vector3, Vector4 } from \"core/Maths/math.vector\";\r\nimport { BlockTools } from \"../../blockTools\";\r\nimport type { IDisplayManager } from \"shared-ui-components/nodeGraphSystem/interfaces/displayManager\";\r\nimport type { INodeData } from \"shared-ui-components/nodeGraphSystem/interfaces/nodeData\";\r\nimport styles from \"./inputDisplayManager.modules.scss\";\r\nimport type { GeometryInputBlock } from \"core/Meshes/Node/Blocks/geometryInputBlock\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"core/Meshes/Node/Enums/nodeGeometryConnectionPointTypes\";\r\nimport { NodeGeometryContextualSources } from \"core/Meshes/Node/Enums/nodeGeometryContextualSources\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { StateManager } from \"shared-ui-components/nodeGraphSystem/stateManager\";\r\nimport type { NodeGeometryBlock } from \"core/Meshes/Node/nodeGeometryBlock\";\r\n\r\nconst predicate = (b: NodeGeometryBlock) => !!(b as any).getExecutionIndex;\r\n\r\nexport class InputDisplayManager implements IDisplayManager {\r\n    private _hasHighlights = false;\r\n\r\n    public getHeaderClass(nodeData: INodeData) {\r\n        const inputBlock = nodeData.data as GeometryInputBlock;\r\n\r\n        if (inputBlock.isContextual) {\r\n            return styles[\"contextual\"];\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    public getHeaderText(nodeData: INodeData): string {\r\n        return nodeData.data.name;\r\n    }\r\n\r\n    public shouldDisplayPortLabels(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public static GetBaseType(type: NodeGeometryBlockConnectionPointTypes): string {\r\n        return NodeGeometryBlockConnectionPointTypes[type];\r\n    }\r\n\r\n    public getBackgroundColor(nodeData: INodeData): string {\r\n        let color = \"\";\r\n        const inputBlock = nodeData.data as GeometryInputBlock;\r\n\r\n        switch (inputBlock.type) {\r\n            default:\r\n                color = BlockTools.GetColorFromConnectionNodeType(inputBlock.type);\r\n                break;\r\n        }\r\n\r\n        return color;\r\n    }\r\n\r\n    public updatePreviewContent(nodeData: INodeData, contentArea: HTMLDivElement): void {\r\n        let value = \"\";\r\n        const inputBlock = nodeData.data as GeometryInputBlock;\r\n\r\n        if (inputBlock.isContextual) {\r\n            switch (inputBlock.contextualValue) {\r\n                case NodeGeometryContextualSources.Positions:\r\n                    value = \"Positions\";\r\n                    break;\r\n                case NodeGeometryContextualSources.Normals:\r\n                    value = \"Normals\";\r\n                    break;\r\n                case NodeGeometryContextualSources.VertexID:\r\n                    value = \"VertexID\";\r\n                    break;\r\n                case NodeGeometryContextualSources.GeometryID:\r\n                    value = \"GeometryID\";\r\n                    break;\r\n                case NodeGeometryContextualSources.LoopID:\r\n                    value = \"LoopID\";\r\n                    break;\r\n                case NodeGeometryContextualSources.InstanceID:\r\n                    value = \"InstanceID\";\r\n                    break;\r\n                case NodeGeometryContextualSources.CollectionID:\r\n                    value = \"CollectionID\";\r\n                    break;\r\n                case NodeGeometryContextualSources.FaceID:\r\n                    value = \"FaceID\";\r\n                    break;\r\n                case NodeGeometryContextualSources.Tangents:\r\n                    value = \"Tangents\";\r\n                    break;\r\n                case NodeGeometryContextualSources.UV:\r\n                    value = \"UV\";\r\n                    break;\r\n                case NodeGeometryContextualSources.UV2:\r\n                    value = \"UV2\";\r\n                    break;\r\n                case NodeGeometryContextualSources.UV3:\r\n                    value = \"UV3\";\r\n                    break;\r\n                case NodeGeometryContextualSources.UV4:\r\n                    value = \"UV4\";\r\n                    break;\r\n                case NodeGeometryContextualSources.UV5:\r\n                    value = \"UV5\";\r\n                    break;\r\n                case NodeGeometryContextualSources.UV6:\r\n                    value = \"UV6\";\r\n                    break;\r\n                case NodeGeometryContextualSources.Colors:\r\n                    value = \"Colors\";\r\n                    break;\r\n                case NodeGeometryContextualSources.LatticeID:\r\n                    value = \"LatticeID\";\r\n                    break;\r\n                case NodeGeometryContextualSources.LatticeControl:\r\n                    value = \"LatticeControl\";\r\n                    break;\r\n            }\r\n        } else {\r\n            switch (inputBlock.type) {\r\n                case NodeGeometryBlockConnectionPointTypes.Int:\r\n                    value = inputBlock.value.toFixed(0);\r\n                    break;\r\n                case NodeGeometryBlockConnectionPointTypes.Float:\r\n                    value = inputBlock.value.toFixed(4);\r\n                    break;\r\n                case NodeGeometryBlockConnectionPointTypes.Vector2: {\r\n                    const vec2Value = inputBlock.value as Vector2;\r\n                    value = `(${vec2Value.x.toFixed(2)}, ${vec2Value.y.toFixed(2)})`;\r\n                    break;\r\n                }\r\n                case NodeGeometryBlockConnectionPointTypes.Vector3: {\r\n                    const vec3Value = inputBlock.value as Vector3;\r\n                    value = `(${vec3Value.x.toFixed(2)}, ${vec3Value.y.toFixed(2)}, ${vec3Value.z.toFixed(2)})`;\r\n                    break;\r\n                }\r\n                case NodeGeometryBlockConnectionPointTypes.Vector4: {\r\n                    const vec4Value = inputBlock.value as Vector4;\r\n                    value = `(${vec4Value.x.toFixed(2)}, ${vec4Value.y.toFixed(2)}, ${vec4Value.z.toFixed(2)}, ${vec4Value.w.toFixed(2)})`;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        contentArea.innerHTML = value;\r\n        contentArea.classList.add(styles[\"input-block\"]);\r\n    }\r\n\r\n    public onSelectionChanged(nodeData: INodeData, selectedData: Nullable<INodeData>, manager: StateManager): void {\r\n        const block = nodeData.data as GeometryInputBlock;\r\n        if (!block.isContextual) {\r\n            return;\r\n        }\r\n        const contextGenerationBlock = block.getDescendantOfPredicate(predicate);\r\n\r\n        if (selectedData !== nodeData) {\r\n            if (this._hasHighlights) {\r\n                let removeHighlight: boolean;\r\n\r\n                if (selectedData && selectedData.data.getClassName() === \"GeometryInputBlock\") {\r\n                    const otherSelection = selectedData.data as GeometryInputBlock;\r\n                    const otherContextGenerationBlock = otherSelection.getDescendantOfPredicate(predicate);\r\n\r\n                    removeHighlight = contextGenerationBlock !== otherContextGenerationBlock;\r\n                } else {\r\n                    removeHighlight = true;\r\n                }\r\n\r\n                if (removeHighlight) {\r\n                    manager.onHighlightNodeObservable.notifyObservers({ data: contextGenerationBlock, active: false });\r\n                }\r\n                this._hasHighlights = false;\r\n            }\r\n            return;\r\n        }\r\n        if (contextGenerationBlock) {\r\n            manager.onHighlightNodeObservable.notifyObservers({ data: contextGenerationBlock, active: true });\r\n            this._hasHighlights = true;\r\n        }\r\n    }\r\n\r\n    public onDispose(nodeData: INodeData, manager: StateManager) {\r\n        const block = nodeData.data as GeometryInputBlock;\r\n        if (!block.isContextual) {\r\n            return;\r\n        }\r\n\r\n        const contextGenerationBlock = block.getDescendantOfPredicate(predicate);\r\n\r\n        if (contextGenerationBlock) {\r\n            manager.onHighlightNodeObservable.notifyObservers({ data: contextGenerationBlock, active: false });\r\n        }\r\n    }\r\n}\r\n"]}
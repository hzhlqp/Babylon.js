{"version":3,"file":"teleportInDisplayManager.js","sourceRoot":"","sources":["../../../src/graphSystem/display/teleportInDisplayManager.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAC;AAM9C,MAAM,OAAO,wBAAwB;IAArC;QACY,mBAAc,GAAG,KAAK,CAAC;IA4CnC,CAAC;IA1CU,cAAc;QACjB,OAAO,EAAE,CAAC;IACd,CAAC;IAEM,uBAAuB;QAC1B,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,aAAa,CAAC,QAAmB;QACpC,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;IAC9B,CAAC;IAEM,kBAAkB,CAAC,QAAmB;QACzC,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAuB,CAAC;QAC/C,OAAO,6BAA6B,UAAU,CAAC,8BAA8B,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC;IAC9G,CAAC;IAEM,oBAAoB,CAAC,QAAmB,EAAE,WAA2B,IAAS,CAAC;IAE/E,kBAAkB,CAAC,QAAmB,EAAE,YAAiC,EAAE,OAAqB;QACnG,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAuB,CAAC;QAC/C,IAAI,YAAY,KAAK,QAAQ,EAAE;YAC3B,IAAI,IAAI,CAAC,cAAc,EAAE;gBACrB,KAAK,MAAM,QAAQ,IAAI,KAAK,CAAC,SAAS,EAAE;oBACpC,OAAO,CAAC,yBAAyB,CAAC,eAAe,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;iBACxF;gBACD,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;aAC/B;YACD,OAAO;SACV;QACD,KAAK,MAAM,QAAQ,IAAI,KAAK,CAAC,SAAS,EAAE;YACpC,OAAO,CAAC,yBAAyB,CAAC,eAAe,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;SACvF;QACD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;IAC/B,CAAC;IAEM,SAAS,CAAC,QAAmB,EAAE,OAAqB;QACvD,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAuB,CAAC;QAC/C,KAAK,MAAM,QAAQ,IAAI,KAAK,CAAC,SAAS,EAAE;YACpC,OAAO,CAAC,yBAAyB,CAAC,eAAe,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;SACxF;IACL,CAAC;CACJ","sourcesContent":["import type { TeleportInBlock } from \"core/Meshes/Node/Blocks/Teleport/teleportInBlock\";\r\nimport { BlockTools } from \"../../blockTools\";\r\nimport type { IDisplayManager } from \"shared-ui-components/nodeGraphSystem/interfaces/displayManager\";\r\nimport type { INodeData } from \"shared-ui-components/nodeGraphSystem/interfaces/nodeData\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { StateManager } from \"shared-ui-components/nodeGraphSystem/stateManager\";\r\n\r\nexport class TeleportInDisplayManager implements IDisplayManager {\r\n    private _hasHighlights = false;\r\n\r\n    public getHeaderClass() {\r\n        return \"\";\r\n    }\r\n\r\n    public shouldDisplayPortLabels(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public getHeaderText(nodeData: INodeData): string {\r\n        return nodeData.data.name;\r\n    }\r\n\r\n    public getBackgroundColor(nodeData: INodeData): string {\r\n        const block = nodeData.data as TeleportInBlock;\r\n        return `linear-gradient(to right, ${BlockTools.GetColorFromConnectionNodeType(block.input.type)}, white)`;\r\n    }\r\n\r\n    public updatePreviewContent(nodeData: INodeData, contentArea: HTMLDivElement): void {}\r\n\r\n    public onSelectionChanged(nodeData: INodeData, selectedData: Nullable<INodeData>, manager: StateManager): void {\r\n        const block = nodeData.data as TeleportInBlock;\r\n        if (selectedData !== nodeData) {\r\n            if (this._hasHighlights) {\r\n                for (const endpoint of block.endpoints) {\r\n                    manager.onHighlightNodeObservable.notifyObservers({ data: endpoint, active: false });\r\n                }\r\n                this._hasHighlights = false;\r\n            }\r\n            return;\r\n        }\r\n        for (const endpoint of block.endpoints) {\r\n            manager.onHighlightNodeObservable.notifyObservers({ data: endpoint, active: true });\r\n        }\r\n        this._hasHighlights = true;\r\n    }\r\n\r\n    public onDispose(nodeData: INodeData, manager: StateManager) {\r\n        const block = nodeData.data as TeleportInBlock;\r\n        for (const endpoint of block.endpoints) {\r\n            manager.onHighlightNodeObservable.notifyObservers({ data: endpoint, active: false });\r\n        }\r\n    }\r\n}\r\n"]}
{"version":3,"file":"textureDisplayManager.js","sourceRoot":"","sources":["../../../src/graphSystem/display/textureDisplayManager.ts"],"names":[],"mappings":"AAEA,OAAO,WAAW,MAAM,sCAAsC,CAAC;AAI/D,MAAM,OAAO,qBAAqB;IAIvB,cAAc;QACjB,OAAO,EAAE,CAAC;IACd,CAAC;IAEM,uBAAuB;QAC1B,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,aAAa,CAAC,QAAmB;QACpC,OAAQ,QAAQ,CAAC,IAA0B,CAAC,IAAI,CAAC;IACrD,CAAC;IAEM,kBAAkB,CAAC,QAAmB;QACzC,OAAO,SAAS,CAAC;IACrB,CAAC;IAEM,oBAAoB,CAAC,QAAmB,EAAE,WAA2B;QACxE,MAAM,KAAK,GAAG,QAAQ,CAAC,IAA4B,CAAC;QAEpD,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACtB,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC;YAExD,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,aAAc,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACzE,IAAI,CAAC,aAAa,GAAG,WAAW,CAAC,aAAc,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YACrE,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAC5C,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;SACvD;QAED,IAAI,KAAK,CAAC,WAAW,EAAE;YACnB,IAAI,CAAC,cAAc,CAAC,KAAK,GAAG,KAAK,CAAC,YAAY,CAAC;YAC/C,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,KAAK,CAAC,aAAa,CAAC;YACjD,MAAM,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACjD,MAAM,OAAO,GAAG,GAAI,CAAC,eAAe,CAAC,KAAK,CAAC,YAAY,EAAE,KAAK,CAAC,aAAa,CAAC,CAAC;YAE9E,4BAA4B;YAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;gBAClD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI;gBAClD,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI;gBAC1D,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI;gBAC1D,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI;aAC7D;YAED,oCAAoC;YACpC,GAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,aAAa,CAAC,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YACpE,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;SAC1D;aAAM;YACH,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;SACvD;IACL,CAAC;CACJ","sourcesContent":["import type { IDisplayManager } from \"shared-ui-components/nodeGraphSystem/interfaces/displayManager\";\r\nimport type { INodeData } from \"shared-ui-components/nodeGraphSystem/interfaces/nodeData\";\r\nimport localStyles from \"./textureDisplayManager.modules.scss\";\r\nimport type { GeometryTextureBlock } from \"core/Meshes/Node/Blocks/Textures/geometryTextureBlock\";\r\nimport type { NodeGeometryBlock } from \"core/Meshes/Node/nodeGeometryBlock\";\r\n\r\nexport class TextureDisplayManager implements IDisplayManager {\r\n    private _previewCanvas: HTMLCanvasElement;\r\n    private _previewImage: HTMLImageElement;\r\n\r\n    public getHeaderClass() {\r\n        return \"\";\r\n    }\r\n\r\n    public shouldDisplayPortLabels(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public getHeaderText(nodeData: INodeData): string {\r\n        return (nodeData.data as NodeGeometryBlock).name;\r\n    }\r\n\r\n    public getBackgroundColor(nodeData: INodeData): string {\r\n        return \"#323232\";\r\n    }\r\n\r\n    public updatePreviewContent(nodeData: INodeData, contentArea: HTMLDivElement): void {\r\n        const block = nodeData.data as GeometryTextureBlock;\r\n\r\n        if (!this._previewCanvas) {\r\n            contentArea.classList.add(localStyles[\"texture-block\"]);\r\n\r\n            this._previewCanvas = contentArea.ownerDocument!.createElement(\"canvas\");\r\n            this._previewImage = contentArea.ownerDocument!.createElement(\"img\");\r\n            contentArea.appendChild(this._previewImage);\r\n            this._previewImage.classList.add(localStyles.empty);\r\n        }\r\n\r\n        if (block.textureData) {\r\n            this._previewCanvas.width = block.textureWidth;\r\n            this._previewCanvas.height = block.textureHeight;\r\n            const ctx = this._previewCanvas.getContext(\"2d\");\r\n            const imgData = ctx!.createImageData(block.textureWidth, block.textureHeight);\r\n\r\n            // Convert Float32Array data\r\n            for (let i = 0; i < block.textureData.length; i += 4) {\r\n                imgData.data[i] = block.textureData[i] * 255; // R\r\n                imgData.data[i + 1] = block.textureData[i + 1] * 255; // G\r\n                imgData.data[i + 2] = block.textureData[i + 2] * 255; // B\r\n                imgData.data[i + 3] = block.textureData[i + 3] * 255; // A\r\n            }\r\n\r\n            // Draw the image data on the canvas\r\n            ctx!.putImageData(imgData, 0, 0);\r\n            this._previewImage.src = this._previewCanvas.toDataURL(\"image/png\");\r\n            this._previewImage.classList.remove(localStyles.empty);\r\n        } else {\r\n            this._previewImage.classList.add(localStyles.empty);\r\n        }\r\n    }\r\n}\r\n"]}
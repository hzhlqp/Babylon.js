{"version":3,"file":"ConfigCache.js","sourceRoot":"","sources":["../src/ConfigCache.ts"],"names":[],"mappings":"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","sourcesContent":["import { TSDocConfigFile } from \"@microsoft/tsdoc-config\";\r\nimport * as path from \"path\";\r\nimport * as fs from \"fs\";\r\n\r\nimport { Debug } from \"./Debug\";\r\n\r\ninterface ICachedConfig {\r\n    loadTimeMs: number;\r\n    lastCheckTimeMs: number;\r\n    configFile: TSDocConfigFile;\r\n}\r\n\r\n// How often to check for modified input files.  If a file's modification timestamp has changed, then we will\r\n// evict the cache entry immediately.\r\nconst cacheCheckIntervalMs: number = 3 * 1000;\r\n\r\n// Evict old entries from the cache after this much time, regardless of whether the file was detected as being\r\n// modified or not.\r\nconst cacheExpireMs: number = 20 * 1000;\r\n\r\n// If this many objects accumulate in the cache, then it is cleared to avoid a memory leak.\r\nconst cacheMaxSize: number = 100;\r\n\r\nexport class ConfigCache {\r\n    // findConfigPathForFolder() result --> loaded tsdoc.json configuration\r\n    private static _CachedConfigs: Map<string, ICachedConfig> = new Map<string, ICachedConfig>();\r\n\r\n    /**\r\n     * Node.js equivalent of performance.now().\r\n     * @returns A high-resolution timestamp in milliseconds.\r\n     */\r\n    private static _GetTimeInMs(): number {\r\n        const [seconds, nanoseconds] = process.hrtime();\r\n        return seconds * 1000 + nanoseconds / 1000000;\r\n    }\r\n\r\n    public static GetForSourceFile(sourceFilePath: string): TSDocConfigFile {\r\n        const sourceFileFolder: string = path.dirname(path.resolve(sourceFilePath));\r\n\r\n        // First, determine the file to be loaded. If not found, the configFilePath will be an empty string.\r\n        // const configFilePath: string = TSDocConfigFile.findConfigPathForFolder(sourceFileFolder);\r\n        let configFilePath = path.resolve(sourceFileFolder, \"tsdoc.json\");\r\n        while (configFilePath.length > 11 && !fs.existsSync(configFilePath)) {\r\n            configFilePath = path.resolve(path.dirname(configFilePath), \"..\", \"tsdoc.json\");\r\n        }\r\n\r\n        // If configFilePath is an empty string, then we'll use the folder of sourceFilePath as our cache key\r\n        // (instead of an empty string)\r\n        const cacheKey: string = configFilePath || sourceFileFolder + \"/\";\r\n        Debug.Log(`Cache key: \"${cacheKey}\"`);\r\n\r\n        const nowMs: number = ConfigCache._GetTimeInMs();\r\n\r\n        let cachedConfig: ICachedConfig | undefined = undefined;\r\n\r\n        // Do we have a cached object?\r\n        cachedConfig = ConfigCache._CachedConfigs.get(cacheKey);\r\n\r\n        if (cachedConfig) {\r\n            Debug.Log(\"Cache hit\");\r\n\r\n            // Is the cached object still valid?\r\n            const loadAgeMs: number = nowMs - cachedConfig.loadTimeMs;\r\n            const lastCheckAgeMs: number = nowMs - cachedConfig.lastCheckTimeMs;\r\n\r\n            if (loadAgeMs > cacheExpireMs || loadAgeMs < 0) {\r\n                Debug.Log(\"Evicting because item is expired\");\r\n                cachedConfig = undefined;\r\n                ConfigCache._CachedConfigs.delete(cacheKey);\r\n            } else if (lastCheckAgeMs > cacheCheckIntervalMs || lastCheckAgeMs < 0) {\r\n                Debug.Log(\"Checking for modifications\");\r\n                cachedConfig.lastCheckTimeMs = nowMs;\r\n                if (cachedConfig.configFile.checkForModifiedFiles()) {\r\n                    // Invalidate the cache because it failed to load completely\r\n                    Debug.Log(\"Evicting because item was modified\");\r\n                    cachedConfig = undefined;\r\n                    ConfigCache._CachedConfigs.delete(cacheKey);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Load the object\r\n        if (!cachedConfig) {\r\n            if (ConfigCache._CachedConfigs.size > cacheMaxSize) {\r\n                Debug.Log(\"Clearing cache\");\r\n                ConfigCache._CachedConfigs.clear(); // avoid a memory leak\r\n            }\r\n\r\n            const configFile: TSDocConfigFile = TSDocConfigFile.loadFile(configFilePath);\r\n\r\n            if (configFile.fileNotFound) {\r\n                Debug.Log(`File not found: \"${configFilePath}\"`);\r\n            } else {\r\n                Debug.Log(`Loaded: \"${configFilePath}\"`);\r\n            }\r\n\r\n            cachedConfig = {\r\n                configFile,\r\n                lastCheckTimeMs: nowMs,\r\n                loadTimeMs: nowMs,\r\n            };\r\n\r\n            ConfigCache._CachedConfigs.set(cacheKey, cachedConfig);\r\n        }\r\n\r\n        return cachedConfig.configFile;\r\n    }\r\n}\r\n"]}
{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAIA,0CAA8E;AAC9E,wCAA0C;AAE1C,+BAAiC;AAEjC,mCAAmC;AACnC,6CAA4C;AAE5C,IAAM,eAAe,GAA4B,EAAE,CAAC;AAEpD,IAAM,yBAAyB,GAAuB,IAAI,0BAAkB,EAAE,CAAC;AAC/E,yBAAyB,CAAC,kBAAkB,CAAC,OAAO,CAAC,UAAC,SAAiB;IACnE,eAAe,CAAC,SAAS,CAAC,GAAG,UAAG,SAAS,0BAAuB,CAAC;AACrE,CAAC,CAAC,CAAC;AAMH,IAAM,WAAW,GAAa,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;AAYtD,SAAS,iBAAiB,CAAC,IAAmB;IAC1C,OAAO,CACH,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,aAAa;QACpC,2CAA2C;QAC3C,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,gBAAgB;QACvC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,eAAe;QACtC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,WAAW;QAClC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,eAAe;QACtC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,UAAU;QACjC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,eAAe;QACtC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,mBAAmB;QAC1C,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,kBAAkB;QACzC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,WAAW;QAClC,yCAAyC;QACzC,oDAAoD;QACpD,4CAA4C;QAC5C,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,oBAAoB;QAC3C,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,YAAY;QACnC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,iBAAiB;QACxC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,eAAe;QACtC,8CAA8C;QAC9C,uDAAuD;QACvD,4CAA4C;QAC5C,sCAAsC;QACtC,+CAA+C;QAC/C,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,mBAAmB;QAC1C,8CAA8C;QAC9C,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,2DAA2D;IAC9F,wDAAwD;IACxD,8CAA8C;IAC9C,0CAA0C;IAC1C,6CAA6C;IAC7C,4CAA4C;IAC5C,6CAA6C;IAC7C,0CAA0C;KAC7C,CAAC;AACN,CAAC;AAED,SAAS,qBAAqB,CAAC,IAAa,EAAE,IAAY;IACtD,IAAM,aAAa,GAAsB,EAAE,CAAC;IAE5C,QAAQ,IAAI,CAAC,IAAI,EAAE;QACf,KAAK,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC;QAC7B,KAAK,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC;QACjC,KAAK,EAAE,CAAC,UAAU,CAAC,kBAAkB,CAAC;QACtC,KAAK,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC;QACjC,KAAK,EAAE,CAAC,UAAU,CAAC,uBAAuB;YACtC,aAAa,CAAC,IAAI,OAAlB,aAAa,EAAS,CAAC,EAAE,CAAC,wBAAwB,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE;YAC3E,MAAM;KACb;IACD,aAAa,CAAC,IAAI,OAAlB,aAAa,EAAS,CAAC,EAAE,CAAC,uBAAuB,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE;IAE1E,gEAAgE;IAChE,OAAO,aAAa,CAAC,MAAM,CACvB,UAAC,OAAO;QACJ,OAAA,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,gCAAgC;YAC1E,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,gCAAgC;YAC1E,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,IAAI;IAFzC,CAEyC,CAAC,6BAA6B,CAC9E,CAAC;AACN,CAAC;AAED,SAAS,8BAA8B,CAAC,IAAa,EAAE,MAAc,EAAE,gBAAiC,EAAE,UAAkB,EAAE,iBAA2B;;IACrJ,IAAM,MAAM,GAAW,UAAU,CAAC,CAAC,mEAAmE;IAEtG,4FAA4F;IAC5F,+EAA+E;IAC/E,IAAI,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;QAC9B,IAAI,MAAI,GAAG,KAAK,CAAC;QACjB,MAAA,EAAE,CAAC,YAAY,CAAC,IAAuB,CAAC,0CAAE,OAAO,CAAC,UAAC,QAAQ;YACvD,IAAI,QAAQ,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,cAAc,IAAI,QAAQ,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,gBAAgB,EAAE;gBACpG,MAAI,GAAG,IAAI,CAAC;aACf;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,MAAI,EAAE;YACP,0DAA0D;YAC1D,+EAA+E;YAC/E,IAAM,QAAQ,GAAsB,qBAAqB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAExE,IAAM,UAAU,GAAI,IAAgC,CAAC,IAAqB,CAAC;YAC3E,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;gBACvB,IAAI,UAAU,EAAE;oBACZ,gBAAgB,CAAC,IAAI,CAAC;wBAClB,YAAY,EAAE,IAAI;wBAClB,IAAI,EAAE,UAAU,CAAC,WAAW,IAAI,UAAU,CAAC,WAAW,CAAC,QAAQ,EAAE;wBACjE,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC,eAAe,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;qBACzI,CAAC,CAAC;iBACN;aACJ;iBAAM;gBACH,gCAAgC;gBAChC,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,WAAW,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,WAAW,EAAE;oBACpF,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC;iBAC7D;qBAAM;oBACH,yCAAyC;oBACzC,IAAM,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAC5B,uBAAuB;oBACvB,IAAM,WAAW,GAAG,KAAK,CAAC,SAAS,CAAC,eAAe,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;oBACjG,IAAI,WAAW,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;wBACnC,OAAO;qBACV;iBACJ;aACJ;SACJ;KACJ;IAED,OAAO,IAAI,CAAC,YAAY,CAAC,UAAC,KAAK,IAAK,OAAA,8BAA8B,CAAC,KAAK,EAAE,MAAM,GAAG,IAAI,EAAE,gBAAgB,EAAE,UAAU,EAAE,iBAAiB,CAAC,EAArG,CAAqG,CAAC,CAAC;AAC/I,CAAC;AAED,IAAM,MAAM,GAAY;IACpB,KAAK,EAAE;QACH,2GAA2G;QAC3G,6DAA6D;QAC7D,MAAM,EAAE;YACJ,IAAI,EAAE;gBACF,QAAQ,qBACJ,2BAA2B,EAAE,+CAA+C,EAC5E,uBAAuB,EAAE,iDAAiD,IACvE,eAAe,CACrB;gBACD,IAAI,EAAE,SAAS;gBACf,IAAI,EAAE;oBACF,WAAW,EAAE,gFAAgF;oBAC7F,QAAQ,EAAE,kBAAkB;oBAC5B,+BAA+B;oBAC/B,WAAW,EAAE,KAAK;oBAClB,GAAG,EAAE,sDAAsD;iBAC9D;aACJ;YACD,MAAM,EAAE,UAAC,OAAgC;gBACrC,IAAM,cAAc,GAAW,OAAO,CAAC,WAAW,EAAE,CAAC;gBAErD,IAAM,kBAAkB,GAAuB,IAAI,0BAAkB,EAAE,CAAC;gBAExE,IAAI;oBACA,IAAM,eAAe,GAAoB,yBAAW,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;oBACtF,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE;wBAC/B,IAAI,eAAe,CAAC,SAAS,EAAE;4BAC3B,OAAO,CAAC,MAAM,CAAC;gCACX,GAAG,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE;gCAC3B,SAAS,EAAE,2BAA2B;gCACtC,IAAI,EAAE;oCACF,OAAO,EAAE,eAAe,CAAC,eAAe,EAAE;iCAC7C;6BACJ,CAAC,CAAC;yBACN;wBAED,IAAI;4BACA,eAAe,CAAC,eAAe,CAAC,kBAAkB,CAAC,CAAC;yBACvD;wBAAC,OAAO,CAAC,EAAE;4BACR,OAAO,CAAC,MAAM,CAAC;gCACX,GAAG,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE;gCAC3B,SAAS,EAAE,uBAAuB;gCAClC,IAAI,EAAE;oCACF,OAAO,EAAE,CAAC,CAAC,OAAO;iCACrB;6BACJ,CAAC,CAAC;yBACN;qBACJ;iBACJ;gBAAC,OAAO,CAAC,EAAE;oBACR,OAAO,CAAC,MAAM,CAAC;wBACX,GAAG,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE;wBAC3B,SAAS,EAAE,2BAA2B;wBACtC,IAAI,EAAE;4BACF,OAAO,EAAE,gCAAyB,CAAC,CAAC,OAAO,CAAE;yBAChD;qBACJ,CAAC,CAAC;iBACN;gBAED,IAAM,WAAW,GAAgB,IAAI,mBAAW,CAAC,kBAAkB,CAAC,CAAC;gBAErE,IAAM,UAAU,GAAsB,OAAO,CAAC,aAAa,EAAE,CAAC;gBAC9D,IAAM,kBAAkB,GAAgC,UAAU,KAAkB;oBAChF,KAAsB,UAA2B,EAA3B,KAAA,UAAU,CAAC,cAAc,EAAE,EAA3B,cAA2B,EAA3B,IAA2B,EAAE;wBAA9C,IAAM,OAAO,SAAA;wBACd,IAAI,OAAO,CAAC,IAAI,KAAK,OAAO,EAAE;4BAC1B,SAAS;yBACZ;wBACD,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;4BAChB,SAAS;yBACZ;wBAED,IAAM,SAAS,GAAc,iBAAS,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;wBAE5G,8BAA8B;wBAC9B,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;4BACtB,SAAS;yBACZ;wBACD,iCAAiC;wBACjC,IAAI,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;4BAC7C,SAAS;yBACZ;wBAED,IAAM,aAAa,GAAkB,WAAW,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;gDAI5D,OAAO;4BACd,IAAI,OAAO,CAAC,SAAS,KAAK,gCAAgC,EAAE;;6BAE3D;4BACD,2DAA2D;4BAC3D,IAAI,OAAO,CAAC,SAAS,KAAK,qBAAqB,EAAE;gCAC7C,IAAI,WAAW,CAAC,IAAI,CAAC,UAAC,GAAG,IAAK,OAAA,OAAO,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,EAArC,CAAqC,CAAC,EAAE;;iCAErE;6BACJ;4BACD,OAAO,CAAC,MAAM,CAAC;gCACX,GAAG,EAAE;oCACD,KAAK,EAAE,UAAU,CAAC,eAAe,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC;oCACxD,GAAG,EAAE,UAAU,CAAC,eAAe,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC;iCACzD;gCACD,SAAS,EAAE,OAAO,CAAC,SAAS;gCAC5B,IAAI,EAAE;oCACF,eAAe,EAAE,OAAO,CAAC,eAAe;iCAC3C;6BACJ,CAAC,CAAC;;wBAtBP,+CAA+C;wBAC/C,mDAAmD;wBACnD,IAAI;wBACJ,KAAsB,UAA0B,EAA1B,KAAA,aAAa,CAAC,GAAG,CAAC,QAAQ,EAA1B,cAA0B,EAA1B,IAA0B;4BAA3C,IAAM,OAAO,SAAA;oCAAP,OAAO;yBAoBjB;qBACJ;gBACL,CAAC,CAAC;gBAEF,OAAO;oBACH,OAAO,EAAE,kBAAkB;iBAC9B,CAAC;YACN,CAAC;SACJ;QACD,SAAS,EAAE;YACP,IAAI,EAAE;gBACF,QAAQ,qBACJ,oBAAoB,EAAE,sCAAsC,IACzD,eAAe,CACrB;gBACD,IAAI,EAAE,SAAS;gBACf,IAAI,EAAE;oBACF,WAAW,EAAE,yDAAyD;oBACtE,QAAQ,EAAE,kBAAkB;oBAC5B,+BAA+B;oBAC/B,WAAW,EAAE,KAAK;oBAClB,GAAG,EAAE,sDAAsD;iBAC9D;aACJ;YACD,MAAM,EAAE,UAAC,OAAgC;gBACrC,IAAM,UAAU,GAAsB,OAAO,CAAC,aAAa,EAAE,CAAC;gBAC9D,IAAM,kBAAkB,GAA4G,UAChI,IAA6F;;oBAE7F,IAAM,IAAI,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACtC,6CAA6C;oBAC7C,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;wBACvF,OAAO;qBACV;oBACD,IAAI,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;wBACjD,qFAAqF;wBACrF,IAAM,MAAM,GAAG,UAAU,CAAC,eAAe,CAAC,IAAI,EAAE;4BAC5C,MAAM,EAAE,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,KAAK,KAAM,IAAI,CAAC,GAAyB,CAAC,IAAI,EAApD,CAAoD;yBAC1E,CAAC,CAAC;wBACH,IAAI,MAAM,CAAC,MAAM,EAAE;4BACf,IAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,UAAC,KAAK;gCACjC,IAAM,IAAI,GAAG,UAAU,CAAC,mBAAmB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gCAE5D,OAAO,CACH,IAAI;oCACH,IAAY,CAAC,MAAM;oCACnB,IAAY,CAAC,MAAM,CAAC,IAAI,KAAK,kBAAkB;oCAChD,UAAU,CAAC,iBAAiB,CAAE,IAAY,CAAC,MAAM,CAAC,CAAC,MAAM,GAAG,CAAC,CAChE,CAAC;4BACN,CAAC,CAAC,CAAC;4BACH,IAAI,UAAU,EAAE;gCACZ,OAAO;6BACV;yBACJ;wBAED,IAAI;wBACJ,OAAO,CAAC,MAAM,CAAC;4BACX,GAAG,EAAE;gCACD,KAAK,EAAE,UAAU,CAAC,eAAe,CAAC,MAAA,IAAI,CAAC,GAAG,0CAAE,KAAK,CAAE,CAAC,CAAC,CAAC;gCACtD,GAAG,EAAE,UAAU,CAAC,eAAe,CAAC,MAAA,IAAI,CAAC,GAAG,0CAAE,KAAK,CAAE,CAAC,CAAC,CAAC;6BACvD;4BACD,SAAS,EAAE,oBAAoB;4BAC/B,IAAI,EAAE;gCACF,IAAI,EAAG,IAAI,CAAC,GAAyB,CAAC,IAAI;6BAC7C;yBACJ,CAAC,CAAC;qBACN;gBACL,CAAC,CAAC;gBAEF,OAAO;oBACH,+BAA+B;oBAC/B,gBAAgB,EAAE,kBAAkB;oBACpC,kBAAkB,EAAE,kBAAkB;iBACzC,CAAC;YACN,CAAC;SACJ;QACD,QAAQ,EAAE;YACN,IAAI,EAAE;gBACF,QAAQ,EAAE;oBACN,sBAAsB,EAAE,gCAAgC;iBAC3D;gBACD,IAAI,EAAE,SAAS;gBACf,IAAI,EAAE;oBACF,WAAW,EAAE,4BAA4B;oBACzC,QAAQ,EAAE,kBAAkB;oBAC5B,WAAW,EAAE,KAAK;oBAClB,GAAG,EAAE,sDAAsD;iBAC9D;aACJ;YACD,MAAM,EAAE,UAAC,OAAgC;gBACrC,IAAM,cAAc,GAAW,OAAO,CAAC,WAAW,EAAE,CAAC;gBACrD,IAAM,OAAO,GAAe,EAAE,CAAC,aAAa,CAAC,CAAC,cAAc,CAAC,EAAE;oBAC3D,OAAO,EAAE,KAAK;oBACd,iBAAiB,EAAE,KAAK;oBACxB,WAAW,EAAE,KAAK;oBAClB,MAAM,EAAE,IAAI;oBACZ,aAAa,EAAE,IAAI;oBACnB,KAAK,EAAE,IAAI;oBACX,SAAS,EAAE,IAAI;oBACf,gBAAgB,EAAE,KAAK;oBACvB,4BAA4B,EAAE,KAAK;oBACnC,YAAY,EAAE,IAAI;oBAClB,mBAAmB,EAAE,IAAI;oBACzB,SAAS,EAAE,KAAK;oBAChB,eAAe,EAAE,KAAK;iBACzB,CAAC,CAAC;gBAEH,IAAM,UAAU,GAAsB,OAAO,CAAC,aAAa,EAAE,CAAC;gBAC9D,IAAM,UAAU,GAA8B,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;gBACpF,IAAI,CAAC,UAAU,EAAE;oBACb,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;iBACnD;gBAED,IAAM,kBAAkB,GAAgC,UAAU,KAAkB;oBAChF,IAAM,aAAa,GAAoB,EAAE,CAAC;oBAC1C,IAAM,cAAc,GAAa,EAAE,CAAC;oBACpC,8BAA8B,CAAC,UAAU,EAAE,EAAE,EAAE,aAAa,EAAE,UAAU,CAAC,OAAO,EAAE,EAAE,cAAc,CAAC,CAAC;oBACpG,KAA2B,UAAa,EAAb,+BAAa,EAAb,2BAAa,EAAb,IAAa,EAAE;wBAArC,IAAM,YAAY,sBAAA;wBACnB,iCAAiC;wBACjC,IAAI,cAAc,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE;4BAC5C,SAAS;yBACZ;wBACD,OAAO,CAAC,MAAM,CAAC;4BACX,GAAG,EAAE;gCACD,KAAK,EAAE,UAAU,CAAC,eAAe,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC;gCAC7D,GAAG,EAAE,UAAU,CAAC,eAAe,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC;6BAC9D;4BACD,SAAS,EAAE,sBAAsB;4BACjC,IAAI,EAAE;gCACF,OAAO,EAAG,YAAY,CAAC,YAAoB,CAAC,IAAI,CAAC,CAAC,CAAE,YAAY,CAAC,YAAoB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE;6BAC9G;yBACJ,CAAC,CAAC;qBACN;gBACL,CAAC,CAAC;gBAEF,OAAO;oBACH,OAAO,EAAE,kBAAkB;iBAC9B,CAAC;YACN,CAAC;SACJ;KACJ;CACJ,CAAC;AAEF,iBAAS,MAAM,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type * as eslint from \"eslint\";\r\nimport type * as ESTree from \"estree\";\r\nimport type { ParserContext } from \"@microsoft/tsdoc\";\r\nimport { TSDocConfiguration, TSDocParser, TextRange } from \"@microsoft/tsdoc\";\r\nimport * as tsdoc from \"@microsoft/tsdoc\";\r\nimport type { TSDocConfigFile } from \"@microsoft/tsdoc-config\";\r\nimport * as ts from \"typescript\";\r\n\r\n// import { Debug } from \"./Debug\";\r\nimport { ConfigCache } from \"./ConfigCache\";\r\n\r\nconst tsdocMessageIds: { [x: string]: string } = {};\r\n\r\nconst defaultTSDocConfiguration: TSDocConfiguration = new TSDocConfiguration();\r\ndefaultTSDocConfiguration.allTsdocMessageIds.forEach((messageId: string) => {\r\n    tsdocMessageIds[messageId] = `${messageId}: {{unformattedText}}`;\r\n});\r\n\r\ninterface IPlugin {\r\n    rules: { [x: string]: eslint.Rule.RuleModule };\r\n}\r\n\r\nconst allowedTags: string[] = [\"@internal\", \"@since\"];\r\n\r\n// const taskToMessageId = {\r\n//     \"param-tag-missing-hyphen\": \"tsdoc-param-tag-missing-hyphen\",\r\n// };\r\n\r\ninterface IFoundComment {\r\n    compilerNode: ts.Node;\r\n    name: string;\r\n    textRange: tsdoc.TextRange;\r\n}\r\n\r\nfunction isDeclarationKind(kind: ts.SyntaxKind): boolean {\r\n    return (\r\n        kind === ts.SyntaxKind.ArrowFunction ||\r\n        // kind === ts.SyntaxKind.BindingElement ||\r\n        kind === ts.SyntaxKind.ClassDeclaration ||\r\n        kind === ts.SyntaxKind.ClassExpression ||\r\n        kind === ts.SyntaxKind.Constructor ||\r\n        kind === ts.SyntaxKind.EnumDeclaration ||\r\n        kind === ts.SyntaxKind.EnumMember ||\r\n        kind === ts.SyntaxKind.ExportSpecifier ||\r\n        kind === ts.SyntaxKind.FunctionDeclaration ||\r\n        kind === ts.SyntaxKind.FunctionExpression ||\r\n        kind === ts.SyntaxKind.GetAccessor ||\r\n        // kind === ts.SyntaxKind.ImportClause ||\r\n        // kind === ts.SyntaxKind.ImportEqualsDeclaration ||\r\n        // kind === ts.SyntaxKind.ImportSpecifier ||\r\n        kind === ts.SyntaxKind.InterfaceDeclaration ||\r\n        kind === ts.SyntaxKind.JsxAttribute ||\r\n        kind === ts.SyntaxKind.MethodDeclaration ||\r\n        kind === ts.SyntaxKind.MethodSignature ||\r\n        // kind === ts.SyntaxKind.ModuleDeclaration ||\r\n        // kind === ts.SyntaxKind.NamespaceExportDeclaration ||\r\n        // kind === ts.SyntaxKind.NamespaceImport ||\r\n        // kind === ts.SyntaxKind.Parameter ||\r\n        // kind === ts.SyntaxKind.PropertyAssignment ||\r\n        kind === ts.SyntaxKind.PropertyDeclaration ||\r\n        // kind === ts.SyntaxKind.PropertySignature ||\r\n        kind === ts.SyntaxKind.SetAccessor // TODO - setters should technically be documented as well!\r\n        // kind === ts.SyntaxKind.ShorthandPropertyAssignment ||\r\n        // kind === ts.SyntaxKind.TypeAliasDeclaration\r\n        // kind === ts.SyntaxKind.TypeParameter ||\r\n        // kind === ts.SyntaxKind.VariableDeclaration\r\n        // kind === ts.SyntaxKind.JSDocTypedefTag ||\r\n        // kind === ts.SyntaxKind.JSDocCallbackTag ||\r\n        // kind === ts.SyntaxKind.JSDocPropertyTag\r\n    );\r\n}\r\n\r\nfunction getJSDocCommentRanges(node: ts.Node, text: string): ts.CommentRange[] {\r\n    const commentRanges: ts.CommentRange[] = [];\r\n\r\n    switch (node.kind) {\r\n        case ts.SyntaxKind.Parameter:\r\n        case ts.SyntaxKind.TypeParameter:\r\n        case ts.SyntaxKind.FunctionExpression:\r\n        case ts.SyntaxKind.ArrowFunction:\r\n        case ts.SyntaxKind.ParenthesizedExpression:\r\n            commentRanges.push(...(ts.getTrailingCommentRanges(text, node.pos) || []));\r\n            break;\r\n    }\r\n    commentRanges.push(...(ts.getLeadingCommentRanges(text, node.pos) || []));\r\n\r\n    // True if the comment starts with '/**' but not if it is '/**/'\r\n    return commentRanges.filter(\r\n        (comment) =>\r\n            text.charCodeAt(comment.pos + 1) === 0x2a /* ts.CharacterCodes.asterisk */ &&\r\n            text.charCodeAt(comment.pos + 2) === 0x2a /* ts.CharacterCodes.asterisk */ &&\r\n            text.charCodeAt(comment.pos + 3) !== 0x2f /* ts.CharacterCodes.slash */\r\n    );\r\n}\r\n\r\nfunction walkCompilerAstAndFindComments(node: ts.Node, indent: string, notFoundComments: IFoundComment[], sourceText: string, getterSetterFound: string[]): void {\r\n    const buffer: string = sourceText; // node.getSourceFile().getFullText(); // don't use getText() here!\r\n\r\n    // Only consider nodes that are part of a declaration form.  Without this, we could discover\r\n    // the same comment twice (e.g. for a MethodDeclaration and its PublicKeyword).\r\n    if (isDeclarationKind(node.kind)) {\r\n        let skip = false;\r\n        ts.getModifiers(node as ts.HasModifiers)?.forEach((modifier) => {\r\n            if (modifier.kind === ts.SyntaxKind.PrivateKeyword || modifier.kind === ts.SyntaxKind.ProtectedKeyword) {\r\n                skip = true;\r\n            }\r\n        });\r\n\r\n        if (!skip) {\r\n            // Find \"/** */\" style comments associated with this node.\r\n            // Note that this reinvokes the compiler's scanner -- the result is not cached.\r\n            const comments: ts.CommentRange[] = getJSDocCommentRanges(node, buffer);\r\n\r\n            const identifier = (node as ts.ParameterDeclaration).name as ts.Identifier;\r\n            if (comments.length === 0) {\r\n                if (identifier) {\r\n                    notFoundComments.push({\r\n                        compilerNode: node,\r\n                        name: identifier.escapedText && identifier.escapedText.toString(),\r\n                        textRange: tsdoc.TextRange.fromStringRange(buffer, identifier ? identifier.pos + 1 : node.pos, identifier ? identifier.end : node.end),\r\n                    });\r\n                }\r\n            } else {\r\n                // if this is a getter or setter\r\n                if (node.kind === ts.SyntaxKind.GetAccessor || node.kind === ts.SyntaxKind.SetAccessor) {\r\n                    getterSetterFound.push(identifier.escapedText.toString());\r\n                } else {\r\n                    // stop iterating anything with @internal\r\n                    const comment = comments[0];\r\n                    // get the comment text\r\n                    const commentTest = tsdoc.TextRange.fromStringRange(buffer, comment.pos, comment.end).toString();\r\n                    if (commentTest.includes(\"@internal\")) {\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return node.forEachChild((child) => walkCompilerAstAndFindComments(child, indent + \"  \", notFoundComments, sourceText, getterSetterFound));\r\n}\r\n\r\nconst plugin: IPlugin = {\r\n    rules: {\r\n        // NOTE: The actual ESLint rule name will be \"tsdoc/syntax\".  It is calculated by deleting \"eslint-plugin-\"\r\n        // from the NPM package name, and then appending this string.\r\n        syntax: {\r\n            meta: {\r\n                messages: {\r\n                    \"error-loading-config-file\": \"Issue loading TSDoc config file:\\n{{details}}\",\r\n                    \"error-applying-config\": \"Issue applying TSDoc configuration: {{details}}\",\r\n                    ...tsdocMessageIds,\r\n                },\r\n                type: \"problem\",\r\n                docs: {\r\n                    description: \"Validates that TypeScript documentation comments conform to the TSDoc standard\",\r\n                    category: \"Stylistic Issues\",\r\n                    // This package is experimental\r\n                    recommended: false,\r\n                    url: \"https://tsdoc.org/pages/packages/eslint-plugin-tsdoc\",\r\n                },\r\n            },\r\n            create: (context: eslint.Rule.RuleContext) => {\r\n                const sourceFilePath: string = context.getFilename();\r\n\r\n                const tsdocConfiguration: TSDocConfiguration = new TSDocConfiguration();\r\n\r\n                try {\r\n                    const tsdocConfigFile: TSDocConfigFile = ConfigCache.GetForSourceFile(sourceFilePath);\r\n                    if (!tsdocConfigFile.fileNotFound) {\r\n                        if (tsdocConfigFile.hasErrors) {\r\n                            context.report({\r\n                                loc: { line: 1, column: 1 },\r\n                                messageId: \"error-loading-config-file\",\r\n                                data: {\r\n                                    details: tsdocConfigFile.getErrorSummary(),\r\n                                },\r\n                            });\r\n                        }\r\n\r\n                        try {\r\n                            tsdocConfigFile.configureParser(tsdocConfiguration);\r\n                        } catch (e) {\r\n                            context.report({\r\n                                loc: { line: 1, column: 1 },\r\n                                messageId: \"error-applying-config\",\r\n                                data: {\r\n                                    details: e.message,\r\n                                },\r\n                            });\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    context.report({\r\n                        loc: { line: 1, column: 1 },\r\n                        messageId: \"error-loading-config-file\",\r\n                        data: {\r\n                            details: `Unexpected exception: ${e.message}`,\r\n                        },\r\n                    });\r\n                }\r\n\r\n                const tsdocParser: TSDocParser = new TSDocParser(tsdocConfiguration);\r\n\r\n                const sourceCode: eslint.SourceCode = context.getSourceCode();\r\n                const checkCommentBlocks: (node: ESTree.Node) => void = function (_node: ESTree.Node) {\r\n                    for (const comment of sourceCode.getAllComments()) {\r\n                        if (comment.type !== \"Block\") {\r\n                            continue;\r\n                        }\r\n                        if (!comment.range) {\r\n                            continue;\r\n                        }\r\n\r\n                        const textRange: TextRange = TextRange.fromStringRange(sourceCode.text, comment.range[0], comment.range[1]);\r\n\r\n                        // Smallest comment is \"/***/\"\r\n                        if (textRange.length < 5) {\r\n                            continue;\r\n                        }\r\n                        // Make sure it starts with \"/**\"\r\n                        if (textRange.buffer[textRange.pos + 2] !== \"*\") {\r\n                            continue;\r\n                        }\r\n\r\n                        const parserContext: ParserContext = tsdocParser.parseRange(textRange);\r\n                        // if (parserContext.log.messages.length > 0) {\r\n                        //     console.log(`Linting: \"${sourceFilePath}\"`);\r\n                        // }\r\n                        for (const message of parserContext.log.messages) {\r\n                            if (message.messageId === \"tsdoc-param-tag-missing-hyphen\") {\r\n                                continue;\r\n                            }\r\n                            // console.log(message.messageId, message.unformattedText);\r\n                            if (message.messageId === \"tsdoc-undefined-tag\") {\r\n                                if (allowedTags.some((tag) => message.unformattedText.includes(tag))) {\r\n                                    continue;\r\n                                }\r\n                            }\r\n                            context.report({\r\n                                loc: {\r\n                                    start: sourceCode.getLocFromIndex(message.textRange.pos),\r\n                                    end: sourceCode.getLocFromIndex(message.textRange.end),\r\n                                },\r\n                                messageId: message.messageId,\r\n                                data: {\r\n                                    unformattedText: message.unformattedText,\r\n                                },\r\n                            });\r\n                        }\r\n                    }\r\n                };\r\n\r\n                return {\r\n                    Program: checkCommentBlocks,\r\n                };\r\n            },\r\n        },\r\n        available: {\r\n            meta: {\r\n                messages: {\r\n                    \"error-no-doc-found\": \"Issue finding code doc for: {{name}}\",\r\n                    ...tsdocMessageIds,\r\n                },\r\n                type: \"problem\",\r\n                docs: {\r\n                    description: \"Make sure documentation is available for public members\",\r\n                    category: \"Stylistic Issues\",\r\n                    // This package is experimental\r\n                    recommended: false,\r\n                    url: \"https://tsdoc.org/pages/packages/eslint-plugin-tsdoc\",\r\n                },\r\n            },\r\n            create: (context: eslint.Rule.RuleContext) => {\r\n                const sourceCode: eslint.SourceCode = context.getSourceCode();\r\n                const checkCommentBlocks: (node: (ESTree.PropertyDefinition | ESTree.MethodDefinition) & eslint.Rule.NodeParentExtension) => void = function (\r\n                    node: (ESTree.PropertyDefinition | ESTree.MethodDefinition) & eslint.Rule.NodeParentExtension\r\n                ) {\r\n                    const text = sourceCode.getText(node);\r\n                    // avoid private, protected and hidden public\r\n                    if (text.includes(\"private \") || text.includes(\"protected \") || text.includes(\"public _\")) {\r\n                        return;\r\n                    }\r\n                    if (sourceCode.getCommentsBefore(node).length === 0) {\r\n                        // check if  another one with the same name has a comment (for example getter/setter)\r\n                        const tokens = sourceCode.getTokensBefore(node, {\r\n                            filter: (token) => token.value === (node.key as ESTree.Identifier).name,\r\n                        });\r\n                        if (tokens.length) {\r\n                            const hasComment = tokens.some((token) => {\r\n                                const node = sourceCode.getNodeByRangeIndex(token.range[0]);\r\n\r\n                                return (\r\n                                    node &&\r\n                                    (node as any).parent &&\r\n                                    (node as any).parent.type === \"MethodDefinition\" &&\r\n                                    sourceCode.getCommentsBefore((node as any).parent).length > 0\r\n                                );\r\n                            });\r\n                            if (hasComment) {\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        // }\r\n                        context.report({\r\n                            loc: {\r\n                                start: sourceCode.getLocFromIndex(node.key?.range![0]),\r\n                                end: sourceCode.getLocFromIndex(node.key?.range![1]),\r\n                            },\r\n                            messageId: \"error-no-doc-found\",\r\n                            data: {\r\n                                name: (node.key as ESTree.Identifier).name,\r\n                            },\r\n                        });\r\n                    }\r\n                };\r\n\r\n                return {\r\n                    // Program: checkCommentBlocks,\r\n                    MethodDefinition: checkCommentBlocks,\r\n                    PropertyDefinition: checkCommentBlocks,\r\n                };\r\n            },\r\n        },\r\n        existing: {\r\n            meta: {\r\n                messages: {\r\n                    \"error-no-tsdoc-found\": \"No TSDoc Found for {{details}}\",\r\n                },\r\n                type: \"problem\",\r\n                docs: {\r\n                    description: \"Make sure a comment exists\",\r\n                    category: \"Stylistic Issues\",\r\n                    recommended: false,\r\n                    url: \"https://tsdoc.org/pages/packages/eslint-plugin-tsdoc\",\r\n                },\r\n            },\r\n            create: (context: eslint.Rule.RuleContext) => {\r\n                const sourceFilePath: string = context.getFilename();\r\n                const program: ts.Program = ts.createProgram([sourceFilePath], {\r\n                    checkJs: false,\r\n                    resolveJsonModule: false,\r\n                    declaration: false,\r\n                    noEmit: true,\r\n                    stripInternal: true,\r\n                    noLib: true,\r\n                    noResolve: true,\r\n                    strictNullChecks: false,\r\n                    strictPropertyInitialization: false,\r\n                    skipLibCheck: true,\r\n                    skipDefaultLibCheck: true,\r\n                    sourceMap: false,\r\n                    inlineSourceMap: false,\r\n                });\r\n\r\n                const sourceCode: eslint.SourceCode = context.getSourceCode();\r\n                const sourceFile: ts.SourceFile | undefined = program.getSourceFile(sourceFilePath);\r\n                if (!sourceFile) {\r\n                    throw new Error(\"Error retrieving source file\");\r\n                }\r\n\r\n                const checkCommentBlocks: (node: ESTree.Node) => void = function (_node: ESTree.Node) {\r\n                    const foundComments: IFoundComment[] = [];\r\n                    const gettersSetters: string[] = [];\r\n                    walkCompilerAstAndFindComments(sourceFile, \"\", foundComments, sourceCode.getText(), gettersSetters);\r\n                    for (const notFoundNode of foundComments) {\r\n                        // check if it is a getter/setter\r\n                        if (gettersSetters.includes(notFoundNode.name)) {\r\n                            continue;\r\n                        }\r\n                        context.report({\r\n                            loc: {\r\n                                start: sourceCode.getLocFromIndex(notFoundNode.textRange.pos),\r\n                                end: sourceCode.getLocFromIndex(notFoundNode.textRange.end),\r\n                            },\r\n                            messageId: \"error-no-tsdoc-found\",\r\n                            data: {\r\n                                details: (notFoundNode.compilerNode as any).name ? (notFoundNode.compilerNode as any).name.escapedText : \"\",\r\n                            },\r\n                        });\r\n                    }\r\n                };\r\n\r\n                return {\r\n                    Program: checkCommentBlocks,\r\n                };\r\n            },\r\n        },\r\n    },\r\n};\r\n\r\nexport = plugin;\r\n"]}
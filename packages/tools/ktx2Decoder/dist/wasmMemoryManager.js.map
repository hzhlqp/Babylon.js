{"version":3,"file":"wasmMemoryManager.js","sourceRoot":"","sources":["../src/wasmMemoryManager.ts"],"names":[],"mappings":"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","sourcesContent":["declare function postMessage(message: any, transfer?: any[]): void;\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class WASMMemoryManager {\r\n    public static LoadBinariesFromCurrentThread = true;\r\n    public static InitialMemoryPages = (1 * 1024 * 1024) >> 16; // 1 Mbytes\r\n\r\n    private static _RequestId = 0;\r\n\r\n    public static LoadWASM(path: string): Promise<ArrayBuffer> {\r\n        if (this.LoadBinariesFromCurrentThread) {\r\n            return new Promise((resolve, reject) => {\r\n                fetch(path)\r\n                    .then((response) => {\r\n                        if (response.ok) {\r\n                            return response.arrayBuffer();\r\n                        }\r\n                        throw new Error(`Could not fetch the wasm component from \"${path}\": ${response.status} - ${response.statusText}`);\r\n                    })\r\n                    .then((wasmBinary) => resolve(wasmBinary))\r\n                    .catch((reason) => {\r\n                        reject(reason);\r\n                    });\r\n            });\r\n        }\r\n\r\n        const id = this._RequestId++;\r\n\r\n        return new Promise((resolve) => {\r\n            const wasmLoadedHandler = (msg: any) => {\r\n                if (msg.data.action === \"wasmLoaded\" && msg.data.id === id) {\r\n                    self.removeEventListener(\"message\", wasmLoadedHandler);\r\n                    resolve(msg.data.wasmBinary);\r\n                }\r\n            };\r\n\r\n            self.addEventListener(\"message\", wasmLoadedHandler);\r\n\r\n            postMessage({ action: \"loadWASM\", path: path, id: id });\r\n        });\r\n    }\r\n\r\n    private _memory: WebAssembly.Memory;\r\n    private _numPages: number;\r\n    private _memoryView: Uint8Array;\r\n    private _memoryViewByteLength: number;\r\n    private _memoryViewOffset: number;\r\n\r\n    constructor(initialMemoryPages: number = WASMMemoryManager.InitialMemoryPages) {\r\n        this._numPages = initialMemoryPages;\r\n\r\n        this._memory = new WebAssembly.Memory({ initial: this._numPages });\r\n        this._memoryViewByteLength = this._numPages << 16;\r\n        this._memoryViewOffset = 0;\r\n        this._memoryView = new Uint8Array(this._memory.buffer, this._memoryViewOffset, this._memoryViewByteLength);\r\n    }\r\n\r\n    public get wasmMemory(): WebAssembly.Memory {\r\n        return this._memory;\r\n    }\r\n\r\n    public getMemoryView(numPages: number, offset: number = 0, byteLength?: number): Uint8Array {\r\n        byteLength = byteLength ?? numPages << 16;\r\n\r\n        if (this._numPages < numPages) {\r\n            this._memory.grow(numPages - this._numPages);\r\n            this._numPages = numPages;\r\n            this._memoryView = new Uint8Array(this._memory.buffer, offset, byteLength);\r\n            this._memoryViewByteLength = byteLength;\r\n            this._memoryViewOffset = offset;\r\n        } else {\r\n            this._memoryView = new Uint8Array(this._memory.buffer, offset, byteLength);\r\n            this._memoryViewByteLength = byteLength;\r\n            this._memoryViewOffset = offset;\r\n        }\r\n\r\n        return this._memoryView;\r\n    }\r\n}\r\n"]}
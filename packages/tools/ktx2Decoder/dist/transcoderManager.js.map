{"version":3,"file":"transcoderManager.js","sourceRoot":"","sources":["../src/transcoderManager.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,IAAI,MAAM,0CAA0C,CAAC;AAGjE,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAExD;;GAEG;AACH,MAAM,OAAO,iBAAiB;IAGnB,MAAM,CAAC,kBAAkB,CAAC,UAA6B;QAC1D,iBAAiB,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACpD,CAAC;IAMM,cAAc,CAAC,GAA6B,EAAE,GAAyB,EAAE,cAAuB,EAAE,MAAiB;QACtH,IAAI,UAAU,GAAsB,IAAI,CAAC;QAEzC,MAAM,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAE5E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,YAAY,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC5D,IAAI,iBAAiB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,cAAc,CAAC,IAAI,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;gBACrJ,UAAU,GAAG,IAAI,CAAC,sBAAsB,CAAC,GAAG,EAAE,iBAAiB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;gBACtF,IAAI,CAAC,UAAU,EAAE;oBACb,UAAU,GAAG,IAAI,iBAAiB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC;oBACrD,UAAW,CAAC,UAAU,EAAE,CAAC;oBACzB,IAAI,UAAW,CAAC,iBAAiB,EAAE,EAAE;wBACjC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;4BAC1B,IAAI,CAAC,kBAAkB,GAAG,IAAI,iBAAiB,EAAE,CAAC;yBACrD;wBACD,UAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;qBACzD;oBACD,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,GAAG,CAAC,EAAE;wBAC9C,iBAAiB,CAAC,oBAAoB,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;qBACpD;oBACD,iBAAiB,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;iBAChE;gBACD,MAAM;aACT;SACJ;QAED,OAAO,UAAU,CAAC;IACtB,CAAC;IAEO,sBAAsB,CAAC,GAAW,EAAE,cAAsB;QAC9D,MAAM,WAAW,GAAG,iBAAiB,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;QAEhE,IAAI,WAAW,EAAE;YACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;gBACzC,MAAM,UAAU,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;gBAClC,IAAI,cAAc,KAAK,UAAU,CAAC,OAAO,EAAE,EAAE;oBACzC,OAAO,UAAU,CAAC;iBACrB;aACJ;SACJ;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;;AApDa,8BAAY,GAA6B,EAAE,CAAC;AAM3C,sCAAoB,GAAyC,EAAE,CAAC","sourcesContent":["import * as KTX2 from \"core/Materials/Textures/ktx2decoderTypes\";\r\n\r\nimport type { Transcoder } from \"./transcoder\";\r\nimport { WASMMemoryManager } from \"./wasmMemoryManager\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class TranscoderManager {\r\n    public static _Transcoders: Array<typeof Transcoder> = [];\r\n\r\n    public static RegisterTranscoder(transcoder: typeof Transcoder) {\r\n        TranscoderManager._Transcoders.push(transcoder);\r\n    }\r\n\r\n    private static _TranscoderInstances: { [key: string]: Array<Transcoder> } = {};\r\n\r\n    private _wasmMemoryManager: WASMMemoryManager;\r\n\r\n    public findTranscoder(src: KTX2.SourceTextureFormat, dst: KTX2.TranscodeTarget, isInGammaSpace: boolean, bypass?: string[]): Transcoder | null {\r\n        let transcoder: Transcoder | null = null;\r\n\r\n        const key = KTX2.SourceTextureFormat[src] + \"_\" + KTX2.TranscodeTarget[dst];\r\n\r\n        for (let i = 0; i < TranscoderManager._Transcoders.length; ++i) {\r\n            if (TranscoderManager._Transcoders[i].CanTranscode(src, dst, isInGammaSpace) && (!bypass || bypass.indexOf(TranscoderManager._Transcoders[i].Name) < 0)) {\r\n                transcoder = this._getExistingTranscoder(key, TranscoderManager._Transcoders[i].Name);\r\n                if (!transcoder) {\r\n                    transcoder = new TranscoderManager._Transcoders[i]();\r\n                    transcoder!.initialize();\r\n                    if (transcoder!.needMemoryManager()) {\r\n                        if (!this._wasmMemoryManager) {\r\n                            this._wasmMemoryManager = new WASMMemoryManager();\r\n                        }\r\n                        transcoder!.setMemoryManager(this._wasmMemoryManager);\r\n                    }\r\n                    if (!TranscoderManager._TranscoderInstances[key]) {\r\n                        TranscoderManager._TranscoderInstances[key] = [];\r\n                    }\r\n                    TranscoderManager._TranscoderInstances[key].push(transcoder);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return transcoder;\r\n    }\r\n\r\n    private _getExistingTranscoder(key: string, transcoderName: string): Transcoder | null {\r\n        const transcoders = TranscoderManager._TranscoderInstances[key];\r\n\r\n        if (transcoders) {\r\n            for (let t = 0; t < transcoders.length; ++t) {\r\n                const transcoder = transcoders[t];\r\n                if (transcoderName === transcoder.getName()) {\r\n                    return transcoder;\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n"]}
{"version":3,"file":"mscTranscoder.js","sourceRoot":"","sources":["../../src/Transcoders/mscTranscoder.ts"],"names":[],"mappings":"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","sourcesContent":["import * as KTX2 from \"core/Materials/Textures/ktx2decoderTypes\";\r\n\r\nimport { Transcoder } from \"../transcoder\";\r\nimport type { KTX2FileReader, IKTX2_ImageDesc } from \"../ktx2FileReader\";\r\nimport { WASMMemoryManager } from \"../wasmMemoryManager\";\r\n\r\ndeclare let MSC_TRANSCODER: any;\r\n\r\ndeclare function importScripts(...urls: string[]): void;\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class MSCTranscoder extends Transcoder {\r\n    /**\r\n     * URL to use when loading the MSC transcoder\r\n     */\r\n    public static JSModuleURL = \"https://cdn.babylonjs.com/ktx2Transcoders/1/msc_basis_transcoder.js\";\r\n    /**\r\n     * URL to use when loading the wasm module for the transcoder\r\n     */\r\n    public static WasmModuleURL = \"https://cdn.babylonjs.com/ktx2Transcoders/1/msc_basis_transcoder.wasm\";\r\n\r\n    /**\r\n     * Binary data of the wasm module\r\n     */\r\n    public static WasmBinary: ArrayBuffer | null = null;\r\n\r\n    /**\r\n     * MSC transcoder module, if provided externally\r\n     */\r\n    public static JSModule: any = null;\r\n\r\n    public static UseFromWorkerThread = true;\r\n\r\n    public static override Name = \"MSCTranscoder\";\r\n\r\n    public override getName(): string {\r\n        return MSCTranscoder.Name;\r\n    }\r\n\r\n    private _mscBasisTranscoderPromise: Promise<void>;\r\n    private _mscBasisModule: any;\r\n\r\n    private _getMSCBasisTranscoder(): Promise<void> {\r\n        if (this._mscBasisTranscoderPromise) {\r\n            return this._mscBasisTranscoderPromise;\r\n        }\r\n\r\n        this._mscBasisTranscoderPromise = (\r\n            MSCTranscoder.WasmBinary ? Promise.resolve(MSCTranscoder.WasmBinary) : WASMMemoryManager.LoadWASM(Transcoder.GetWasmUrl(MSCTranscoder.WasmModuleURL))\r\n        ).then((wasmBinary) => {\r\n            if (MSCTranscoder.JSModule && typeof MSC_TRANSCODER === \"undefined\") {\r\n                // this must be set on the global scope for the MSC transcoder to work. Mainly due to back-compat with the old way of loading the MSC transcoder.\r\n                (globalThis as any).MSC_TRANSCODER = MSCTranscoder.JSModule;\r\n            } else {\r\n                if (MSCTranscoder.UseFromWorkerThread) {\r\n                    importScripts(Transcoder.GetWasmUrl(MSCTranscoder.JSModuleURL));\r\n                }\r\n                // Worker Number = 0 and MSC_TRANSCODER has not been loaded yet.\r\n                else if (typeof MSC_TRANSCODER === \"undefined\") {\r\n                    return new Promise((resolve, reject) => {\r\n                        const head = document.getElementsByTagName(\"head\")[0];\r\n                        const script = document.createElement(\"script\");\r\n                        script.setAttribute(\"type\", \"text/javascript\");\r\n                        script.setAttribute(\"src\", Transcoder.GetWasmUrl(MSCTranscoder.JSModuleURL));\r\n\r\n                        script.onload = () => {\r\n                            // defensive\r\n                            if (typeof MSC_TRANSCODER === \"undefined\") {\r\n                                reject(\"MSC_TRANSCODER script loaded but MSC_TRANSCODER is not defined.\");\r\n                                return;\r\n                            }\r\n\r\n                            (MSC_TRANSCODER as any)({ wasmBinary }).then((basisModule: any) => {\r\n                                basisModule.initTranscoders();\r\n                                this._mscBasisModule = basisModule;\r\n                                resolve();\r\n                            });\r\n                        };\r\n\r\n                        script.onerror = () => {\r\n                            reject(\"Can not load MSC_TRANSCODER script.\");\r\n                        };\r\n\r\n                        head.appendChild(script);\r\n                    });\r\n                }\r\n            }\r\n\r\n            return new Promise((resolve) => {\r\n                MSC_TRANSCODER({ wasmBinary }).then((basisModule: any) => {\r\n                    basisModule.initTranscoders();\r\n                    this._mscBasisModule = basisModule;\r\n                    resolve();\r\n                });\r\n            });\r\n        });\r\n\r\n        return this._mscBasisTranscoderPromise;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static override CanTranscode(src: KTX2.SourceTextureFormat, dst: KTX2.TranscodeTarget, isInGammaSpace: boolean): boolean {\r\n        return true;\r\n    }\r\n\r\n    public override transcode(\r\n        src: KTX2.SourceTextureFormat,\r\n        dst: KTX2.TranscodeTarget,\r\n        level: number,\r\n        width: number,\r\n        height: number,\r\n        uncompressedByteLength: number,\r\n        ktx2Reader: KTX2FileReader,\r\n        imageDesc: IKTX2_ImageDesc | null,\r\n        encodedData: Uint8Array\r\n    ): Promise<Uint8Array | null> {\r\n        const isVideo = false;\r\n\r\n        return this._getMSCBasisTranscoder().then(() => {\r\n            const basisModule = this._mscBasisModule;\r\n\r\n            let transcoder: any;\r\n            let imageInfo: any;\r\n            let result: any;\r\n            let textureData: any = null;\r\n\r\n            try {\r\n                transcoder = src === KTX2.SourceTextureFormat.UASTC4x4 ? new basisModule.UastcImageTranscoder() : new basisModule.BasisLzEtc1sImageTranscoder();\r\n                const texFormat = src === KTX2.SourceTextureFormat.UASTC4x4 ? basisModule.TextureFormat.UASTC4x4 : basisModule.TextureFormat.ETC1S;\r\n\r\n                imageInfo = new basisModule.ImageInfo(texFormat, width, height, level);\r\n\r\n                const targetFormat = basisModule.TranscodeTarget[KTX2.TranscodeTarget[dst]]; // works because the labels of the sourceTextureFormat enum are the same as the property names used in TranscodeTarget!\r\n\r\n                if (!basisModule.isFormatSupported(targetFormat, texFormat)) {\r\n                    throw new Error(\r\n                        `MSCTranscoder: Transcoding from \"${KTX2.SourceTextureFormat[src]}\" to \"${KTX2.TranscodeTarget[dst]}\" not supported by current transcoder build.`\r\n                    );\r\n                }\r\n\r\n                if (src === KTX2.SourceTextureFormat.ETC1S) {\r\n                    const sgd = ktx2Reader.supercompressionGlobalData;\r\n\r\n                    transcoder.decodePalettes(sgd.endpointCount, sgd.endpointsData, sgd.selectorCount, sgd.selectorsData);\r\n                    transcoder.decodeTables(sgd.tablesData);\r\n\r\n                    imageInfo.flags = imageDesc!.imageFlags;\r\n                    imageInfo.rgbByteOffset = 0;\r\n                    imageInfo.rgbByteLength = imageDesc!.rgbSliceByteLength;\r\n                    imageInfo.alphaByteOffset = imageDesc!.alphaSliceByteOffset > 0 ? imageDesc!.rgbSliceByteLength : 0;\r\n                    imageInfo.alphaByteLength = imageDesc!.alphaSliceByteLength;\r\n\r\n                    result = transcoder.transcodeImage(targetFormat, encodedData, imageInfo, 0, isVideo);\r\n                } else {\r\n                    imageInfo.flags = 0;\r\n                    imageInfo.rgbByteOffset = 0;\r\n                    imageInfo.rgbByteLength = uncompressedByteLength;\r\n                    imageInfo.alphaByteOffset = 0;\r\n                    imageInfo.alphaByteLength = 0;\r\n\r\n                    result = transcoder.transcodeImage(targetFormat, encodedData, imageInfo, 0, ktx2Reader.hasAlpha, isVideo);\r\n                }\r\n            } finally {\r\n                if (transcoder) {\r\n                    transcoder.delete();\r\n                }\r\n\r\n                if (imageInfo) {\r\n                    imageInfo.delete();\r\n                }\r\n\r\n                if (result && result.transcodedImage) {\r\n                    textureData = result.transcodedImage.get_typed_memory_view().slice();\r\n                    result.transcodedImage.delete();\r\n                }\r\n            }\r\n\r\n            return textureData;\r\n        });\r\n    }\r\n}\r\n"]}
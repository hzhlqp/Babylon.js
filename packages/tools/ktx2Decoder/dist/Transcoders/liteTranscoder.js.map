{"version":3,"file":"liteTranscoder.js","sourceRoot":"","sources":["../../src/Transcoders/liteTranscoder.ts"],"names":[],"mappings":"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","sourcesContent":["import type * as KTX2 from \"core/Materials/Textures/ktx2decoderTypes\";\r\n\r\nimport { Transcoder } from \"../transcoder\";\r\nimport { WASMMemoryManager } from \"../wasmMemoryManager\";\r\nimport type { KTX2FileReader, IKTX2_ImageDesc } from \"../ktx2FileReader\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class LiteTranscoder extends Transcoder {\r\n    private _modulePath: string;\r\n    private _wasmBinary: ArrayBuffer | null = null;\r\n    private _modulePromise: Promise<{ module: any }>;\r\n    private _memoryManager: WASMMemoryManager;\r\n    protected _transcodeInPlace: boolean;\r\n\r\n    private _instantiateWebAssembly(wasmBinary: ArrayBuffer): Promise<{ module: any }> {\r\n        return WebAssembly.instantiate(wasmBinary as ArrayBuffer, { env: { memory: this._memoryManager.wasmMemory } }).then((moduleWrapper) => {\r\n            return { module: moduleWrapper.instance.exports };\r\n        });\r\n    }\r\n\r\n    protected _loadModule(wasmBinary: ArrayBuffer | null = this._wasmBinary): Promise<{ module: any }> {\r\n        this._modulePromise =\r\n            this._modulePromise ||\r\n            (wasmBinary ? Promise.resolve(wasmBinary) : WASMMemoryManager.LoadWASM(this._modulePath)).then((wasmBinary) => {\r\n                return this._instantiateWebAssembly(wasmBinary);\r\n            });\r\n        return this._modulePromise;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected get memoryManager(): WASMMemoryManager {\r\n        return this._memoryManager;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected setModulePath(modulePath: string, wasmBinary: ArrayBuffer | null): void {\r\n        this._modulePath = Transcoder.GetWasmUrl(modulePath);\r\n        this._wasmBinary = wasmBinary;\r\n    }\r\n\r\n    public override initialize(): void {\r\n        this._transcodeInPlace = true;\r\n    }\r\n\r\n    public override needMemoryManager(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public override setMemoryManager(memoryMgr: WASMMemoryManager): void {\r\n        this._memoryManager = memoryMgr;\r\n    }\r\n\r\n    public override transcode(\r\n        src: KTX2.SourceTextureFormat,\r\n        dst: KTX2.TranscodeTarget,\r\n        level: number,\r\n        width: number,\r\n        height: number,\r\n        uncompressedByteLength: number,\r\n        ktx2Reader: KTX2FileReader,\r\n        imageDesc: IKTX2_ImageDesc | null,\r\n        encodedData: Uint8Array\r\n    ): Promise<Uint8Array | null> {\r\n        return this._loadModule().then((moduleWrapper: any) => {\r\n            const transcoder: any = moduleWrapper.module;\r\n            const [textureView, uncompressedTextureView, nBlocks] = this._prepareTranscoding(width, height, uncompressedByteLength, encodedData);\r\n\r\n            return transcoder.transcode(nBlocks) === 0 ? (this._transcodeInPlace ? textureView.slice() : uncompressedTextureView!.slice()) : null;\r\n        });\r\n    }\r\n\r\n    protected _prepareTranscoding(\r\n        width: number,\r\n        height: number,\r\n        uncompressedByteLength: number,\r\n        encodedData: Uint8Array,\r\n        uncompressedNumComponents?: number\r\n    ): [Uint8Array, Uint8Array | null, number] {\r\n        const nBlocks = ((width + 3) >> 2) * ((height + 3) >> 2);\r\n\r\n        if (uncompressedNumComponents !== undefined) {\r\n            uncompressedByteLength = width * ((height + 3) >> 2) * 4 * uncompressedNumComponents;\r\n        }\r\n\r\n        const texMemoryPages = ((nBlocks * 16 + 65535 + (this._transcodeInPlace ? 0 : uncompressedByteLength)) >> 16) + 1;\r\n\r\n        const textureView = this.memoryManager.getMemoryView(texMemoryPages, 65536, nBlocks * 16);\r\n\r\n        const uncompressedTextureView = this._transcodeInPlace\r\n            ? null\r\n            : new Uint8Array(\r\n                  this._memoryManager.wasmMemory.buffer,\r\n                  65536 + nBlocks * 16,\r\n                  uncompressedNumComponents !== undefined ? width * height * uncompressedNumComponents : uncompressedByteLength\r\n              );\r\n\r\n        textureView.set(encodedData);\r\n\r\n        return [textureView, uncompressedTextureView, nBlocks];\r\n    }\r\n}\r\n"]}
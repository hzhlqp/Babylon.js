{"version":3,"file":"propertyTabComponent.js","sourceRoot":"","sources":["../../../src/components/propertyTab/propertyTabComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport type { GlobalState } from \"../../globalState\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { StringTools } from \"shared-ui-components/stringTools\";\r\nimport { LockObject } from \"shared-ui-components/tabs/propertyGrids/lockObject\";\r\nimport { SliderGenericPropertyGridComponent } from \"./propertyGrids/gui/sliderGenericPropertyGridComponent\";\r\nimport type { Slider } from \"gui/2D/controls/sliders/slider\";\r\nimport { LinePropertyGridComponent } from \"./propertyGrids/gui/linePropertyGridComponent\";\r\nimport { RadioButtonPropertyGridComponent } from \"./propertyGrids/gui/radioButtonPropertyGridComponent\";\r\nimport type { TextBlock } from \"gui/2D/controls/textBlock\";\r\nimport type { InputText } from \"gui/2D/controls/inputText\";\r\nimport type { ColorPicker } from \"gui/2D/controls/colorpicker\";\r\nimport type { Image } from \"gui/2D/controls/image\";\r\nimport type { ImageBasedSlider } from \"gui/2D/controls/sliders/imageBasedSlider\";\r\nimport type { Rectangle } from \"gui/2D/controls/rectangle\";\r\nimport type { Ellipse } from \"gui/2D/controls/ellipse\";\r\nimport type { Checkbox } from \"gui/2D/controls/checkbox\";\r\nimport type { RadioButton } from \"gui/2D/controls/radioButton\";\r\nimport type { Line } from \"gui/2D/controls/line\";\r\nimport type { ScrollViewer } from \"gui/2D/controls/scrollViewers/scrollViewer\";\r\nimport type { Grid } from \"gui/2D/controls/grid\";\r\nimport type { StackPanel } from \"gui/2D/controls/stackPanel\";\r\nimport { TextBlockPropertyGridComponent } from \"./propertyGrids/gui/textBlockPropertyGridComponent\";\r\nimport { InputTextPropertyGridComponent } from \"./propertyGrids/gui/inputTextPropertyGridComponent\";\r\nimport { ColorPickerPropertyGridComponent } from \"./propertyGrids/gui/colorPickerPropertyGridComponent\";\r\nimport { ImagePropertyGridComponent } from \"./propertyGrids/gui/imagePropertyGridComponent\";\r\nimport { ImageBasedSliderPropertyGridComponent } from \"./propertyGrids/gui/imageBasedSliderPropertyGridComponent\";\r\nimport { RectanglePropertyGridComponent } from \"./propertyGrids/gui/rectanglePropertyGridComponent\";\r\nimport { StackPanelPropertyGridComponent } from \"./propertyGrids/gui/stackPanelPropertyGridComponent\";\r\nimport { GridPropertyGridComponent } from \"./propertyGrids/gui/gridPropertyGridComponent\";\r\nimport { ScrollViewerPropertyGridComponent } from \"./propertyGrids/gui/scrollViewerPropertyGridComponent\";\r\nimport { EllipsePropertyGridComponent } from \"./propertyGrids/gui/ellipsePropertyGridComponent\";\r\nimport { CheckboxPropertyGridComponent } from \"./propertyGrids/gui/checkboxPropertyGridComponent\";\r\nimport type { Control } from \"gui/2D/controls/control\";\r\nimport { ControlPropertyGridComponent } from \"./propertyGrids/gui/controlPropertyGridComponent\";\r\nimport { AdvancedDynamicTexture } from \"gui/2D/advancedDynamicTexture\";\r\n\r\nimport { TextInputLineComponent } from \"shared-ui-components/lines/textInputLineComponent\";\r\nimport { ParentingPropertyGridComponent } from \"../parentingPropertyGridComponent\";\r\nimport { DisplayGridPropertyGridComponent } from \"./propertyGrids/gui/displayGridPropertyGridComponent\";\r\nimport type { DisplayGrid } from \"gui/2D/controls/displayGrid\";\r\nimport type { Button } from \"gui/2D/controls/button\";\r\nimport { ButtonPropertyGridComponent } from \"./propertyGrids/gui/buttonPropertyGridComponent\";\r\nimport { GUINodeTools } from \"../../guiNodeTools\";\r\nimport { makeTargetsProxy } from \"shared-ui-components/lines/targetsProxy\";\r\n\r\nimport \"./propertyTab.scss\";\r\nimport adtIcon from \"../../imgs/adtIcon.svg\";\r\nimport { ControlTypes } from \"../../controlTypes\";\r\nimport { EncodeArrayBufferToBase64 } from \"core/Misc/stringTools\";\r\n\r\ninterface IPropertyTabComponentProps {\r\n    globalState: GlobalState;\r\n}\r\n\r\nexport class PropertyTabComponent extends React.Component<IPropertyTabComponentProps> {\r\n    private _onBuiltObserver: Nullable<Observer<void>>;\r\n    private _timerIntervalId: number;\r\n    private _lockObject: LockObject;\r\n\r\n    constructor(props: IPropertyTabComponentProps) {\r\n        super(props);\r\n\r\n        this._lockObject = new LockObject();\r\n        this.props.globalState.lockObject = this._lockObject;\r\n        this.props.globalState.onSaveObservable.add(() => {\r\n            this.save(this.saveLocally);\r\n        });\r\n        this.props.globalState.onSaveSelectedControl.add(() => {\r\n            this.save(this.saveSelectedControlLocally);\r\n        });\r\n        this.props.globalState.onSnippetSaveObservable.add(() => {\r\n            this.save(this.saveToSnippetServer);\r\n        });\r\n        this.props.globalState.onSnippetLoadObservable.add(() => {\r\n            this.loadFromSnippet();\r\n        });\r\n\r\n        this.props.globalState.onPropertyGridUpdateRequiredObservable.add(() => {\r\n            this.forceUpdate();\r\n        });\r\n\r\n        this.props.globalState.onLoadObservable.add((file) => this.load(file));\r\n\r\n        this.props.globalState.onControlLoadObservable.add((file) => this.loadControl(file));\r\n    }\r\n\r\n    override componentDidMount() {\r\n        this.props.globalState.onSelectionChangedObservable.add(() => {\r\n            this.forceUpdate();\r\n        });\r\n        this.props.globalState.onResizeObservable.add(() => {\r\n            this.forceUpdate();\r\n        });\r\n\r\n        this._onBuiltObserver = this.props.globalState.onBuiltObservable.add(() => {\r\n            this.forceUpdate();\r\n        });\r\n        this.props.globalState.onPropertyChangedObservable.add(() => this.forceUpdate());\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        window.clearInterval(this._timerIntervalId);\r\n        this.props.globalState.onBuiltObservable.remove(this._onBuiltObserver);\r\n    }\r\n\r\n    load(file: File) {\r\n        Tools.ReadFile(\r\n            file,\r\n            (data) => {\r\n                const decoder = new TextDecoder(\"utf-8\");\r\n                this.props.globalState.workbench.loadFromJson(JSON.parse(decoder.decode(data)));\r\n\r\n                this.props.globalState.setSelection([]);\r\n            },\r\n            undefined,\r\n            true\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Read loaded file\r\n     * @param file\r\n     */\r\n    loadControl(file: File) {\r\n        Tools.ReadFile(\r\n            file,\r\n            (data) => {\r\n                const decoder = new TextDecoder(\"utf-8\");\r\n                this.props.globalState.workbench.loadControlFromJson(JSON.parse(decoder.decode(data)));\r\n            },\r\n            undefined,\r\n            true\r\n        );\r\n    }\r\n\r\n    save(saveCallback: () => void) {\r\n        this.props.globalState.workbench.removeEditorTransformation();\r\n        const allControls = this.props.globalState.guiTexture.rootContainer.getDescendants();\r\n        for (const control of allControls) {\r\n            this.props.globalState.workbench.removeEditorBehavior(control);\r\n        }\r\n        const size = this.props.globalState.workbench.guiSize;\r\n        this.props.globalState.guiTexture.scaleTo(size.width, size.height);\r\n        saveCallback();\r\n        for (const control of allControls) {\r\n            this.props.globalState.workbench.addEditorBehavior(control);\r\n        }\r\n    }\r\n\r\n    saveLocally = () => {\r\n        try {\r\n            const json = JSON.stringify(this.props.globalState.guiTexture.serializeContent());\r\n            StringTools.DownloadAsFile(this.props.globalState.hostDocument, json, \"guiTexture.json\");\r\n        } catch (error) {\r\n            this.props.globalState.hostWindow.alert(\"Unable to save your GUI\");\r\n            Tools.Error(\"Unable to save your GUI\");\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Save the selected control as Json with file name of guiControl\r\n     */\r\n    saveSelectedControlLocally = () => {\r\n        try {\r\n            const serializationObject: any = {\r\n                controls: [],\r\n            };\r\n            for (const control of this.props.globalState.selectedControls) {\r\n                const controlSerializationObject = {};\r\n                control.serialize(controlSerializationObject);\r\n                serializationObject.controls.push(controlSerializationObject);\r\n            }\r\n            const json = JSON.stringify(serializationObject);\r\n            StringTools.DownloadAsFile(this.props.globalState.hostDocument, json, \"guiControl.json\");\r\n        } catch (error) {\r\n            this.props.globalState.hostWindow.alert(\"Unable to save your selected Control\");\r\n            Tools.Error(\"Unable to save your selected Control\");\r\n        }\r\n    };\r\n\r\n    saveToSnippetServerHelper = (content: string, adt: AdvancedDynamicTexture): Promise<string> => {\r\n        return new Promise((resolve, reject) => {\r\n            const xmlHttp = new XMLHttpRequest();\r\n            xmlHttp.onreadystatechange = () => {\r\n                if (xmlHttp.readyState == 4) {\r\n                    if (xmlHttp.status == 200) {\r\n                        const snippet = JSON.parse(xmlHttp.responseText);\r\n                        const oldId = adt.snippetId;\r\n                        adt.snippetId = snippet.id;\r\n                        if (snippet.version && snippet.version != \"0\") {\r\n                            adt.snippetId += \"#\" + snippet.version;\r\n                        }\r\n                        const windowAsAny = window as any;\r\n                        if (windowAsAny.Playground && oldId) {\r\n                            windowAsAny.Playground.onRequestCodeChangeObservable.notifyObservers({\r\n                                regex: new RegExp(oldId, \"g\"),\r\n                                replace: adt.snippetId,\r\n                            });\r\n                        }\r\n                        resolve(adt.snippetId);\r\n                    } else {\r\n                        reject(\"Unable to save your GUI\");\r\n                    }\r\n                }\r\n            };\r\n\r\n            // Check if we need to encode it to store the unicode characters (same approach as PR #12391)\r\n            const encoder = new TextEncoder();\r\n            const buffer = encoder.encode(content);\r\n\r\n            let testData = \"\";\r\n\r\n            for (let i = 0; i < buffer.length; i++) {\r\n                testData += String.fromCharCode(buffer[i]);\r\n            }\r\n\r\n            const isUnicode = testData !== content;\r\n\r\n            const objToSend = {\r\n                gui: content,\r\n                encodedGui: isUnicode ? EncodeArrayBufferToBase64(buffer) : undefined,\r\n            };\r\n\r\n            xmlHttp.open(\"POST\", AdvancedDynamicTexture.SnippetUrl + (adt.snippetId ? \"/\" + adt.snippetId : \"\"), true);\r\n            xmlHttp.setRequestHeader(\"Content-Type\", \"application/json\");\r\n            const dataToSend = {\r\n                payload: JSON.stringify(objToSend),\r\n                name: \"\",\r\n                description: \"\",\r\n                tags: \"\",\r\n            };\r\n            xmlHttp.send(JSON.stringify(dataToSend));\r\n        });\r\n    };\r\n\r\n    saveToSnippetServer = async () => {\r\n        const adt = this.props.globalState.guiTexture;\r\n        const content = JSON.stringify(adt.serializeContent());\r\n\r\n        const savePromise = this.props.globalState.customSave?.action || this.saveToSnippetServerHelper;\r\n        savePromise(content, adt)\r\n            .then((snippetId: string) => {\r\n                adt.snippetId = snippetId;\r\n                const alertMessage = `GUI saved with ID:  ${adt.snippetId}`;\r\n                if (this.props.globalState.hostWindow.navigator.clipboard) {\r\n                    this.props.globalState.hostWindow.navigator.clipboard\r\n                        .writeText(adt.snippetId)\r\n                        .then(() => {\r\n                            this.props.globalState.hostWindow.alert(`${alertMessage}. The ID was copied to your clipboard.`);\r\n                        })\r\n                        .catch(() => {\r\n                            this.props.globalState.hostWindow.alert(alertMessage);\r\n                        });\r\n                } else {\r\n                    this.props.globalState.hostWindow.alert(alertMessage);\r\n                }\r\n                this.props.globalState.onBuiltObservable.notifyObservers();\r\n            })\r\n            .catch((err: any) => {\r\n                this.props.globalState.hostWindow.alert(err);\r\n            });\r\n        this.forceUpdate();\r\n    };\r\n\r\n    loadFromSnippet() {\r\n        const snippedId = this.props.globalState.hostWindow.prompt(\"Please enter the snippet ID to use\");\r\n        if (!snippedId) {\r\n            return;\r\n        }\r\n        this.props.globalState.workbench.loadFromSnippet(snippedId);\r\n    }\r\n\r\n    renderNode(nodes: Control[]) {\r\n        const node = nodes[0];\r\n        return (\r\n            <>\r\n                <div id=\"header\">\r\n                    <img id=\"logo\" src={this.renderControlIcon(nodes)} />\r\n                    <div id=\"title\">\r\n                        <TextInputLineComponent\r\n                            noUnderline={true}\r\n                            lockObject={this._lockObject}\r\n                            target={makeTargetsProxy(nodes, this.props.globalState.onPropertyChangedObservable)}\r\n                            propertyName=\"name\"\r\n                            onPropertyChangedObservable={this.props.globalState.onPropertyChangedObservable}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                {this.renderProperties(nodes)}\r\n                {node?.parent?.typeName === \"Grid\" && (\r\n                    <ParentingPropertyGridComponent\r\n                        control={node}\r\n                        onPropertyChangedObservable={this.props.globalState.onPropertyChangedObservable}\r\n                        lockObject={this._lockObject}\r\n                    ></ParentingPropertyGridComponent>\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * returns the class name of a list of controls if they share a class, or an empty string if not\r\n     * @param nodes the list of controls to check\r\n     * @returns the class name of a list of controls if they share a class, or an empty string if not\r\n     */\r\n    getControlsCommonClassName(nodes: Control[]) {\r\n        if (nodes.length === 0) return \"\";\r\n        const firstNode = nodes[0];\r\n        const firstClass = firstNode.getClassName();\r\n        for (const node of nodes) {\r\n            if (node.getClassName() !== firstClass) {\r\n                return \"\";\r\n            }\r\n        }\r\n        return firstClass;\r\n    }\r\n\r\n    renderProperties(nodes: Control[]) {\r\n        if (nodes.length === 0) return;\r\n        const className = this.getControlsCommonClassName(nodes);\r\n        switch (className) {\r\n            case \"TextBlock\": {\r\n                const textBlocks = nodes as TextBlock[];\r\n                return (\r\n                    <TextBlockPropertyGridComponent\r\n                        textBlocks={textBlocks}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.globalState.onPropertyChangedObservable}\r\n                        onFontsParsedObservable={this.props.globalState.onFontsParsedObservable}\r\n                        globalState={this.props.globalState}\r\n                    />\r\n                );\r\n            }\r\n            case \"InputText\": {\r\n                const inputTexts = nodes as InputText[];\r\n                return (\r\n                    <InputTextPropertyGridComponent\r\n                        inputTexts={inputTexts}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.globalState.onPropertyChangedObservable}\r\n                        onFontsParsedObservable={this.props.globalState.onFontsParsedObservable}\r\n                        globalState={this.props.globalState}\r\n                    />\r\n                );\r\n            }\r\n            case \"ColorPicker\": {\r\n                const colorPickers = nodes as ColorPicker[];\r\n                return (\r\n                    <ColorPickerPropertyGridComponent\r\n                        colorPickers={colorPickers}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.globalState.onPropertyChangedObservable}\r\n                        onFontsParsedObservable={this.props.globalState.onFontsParsedObservable}\r\n                        globalState={this.props.globalState}\r\n                    />\r\n                );\r\n            }\r\n            case \"Image\": {\r\n                const images = nodes as Image[];\r\n                return (\r\n                    <ImagePropertyGridComponent\r\n                        images={images}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.globalState.onPropertyChangedObservable}\r\n                        onFontsParsedObservable={this.props.globalState.onFontsParsedObservable}\r\n                        globalState={this.props.globalState}\r\n                    />\r\n                );\r\n            }\r\n            case \"Slider\": {\r\n                const sliders = nodes as Slider[];\r\n                return (\r\n                    <SliderGenericPropertyGridComponent\r\n                        sliders={sliders}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.globalState.onPropertyChangedObservable}\r\n                        onFontsParsedObservable={this.props.globalState.onFontsParsedObservable}\r\n                        globalState={this.props.globalState}\r\n                    />\r\n                );\r\n            }\r\n            case \"ImageBasedSlider\": {\r\n                const imageBasedSliders = nodes as ImageBasedSlider[];\r\n                return (\r\n                    <ImageBasedSliderPropertyGridComponent\r\n                        imageBasedSliders={imageBasedSliders}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.globalState.onPropertyChangedObservable}\r\n                        onFontsParsedObservable={this.props.globalState.onFontsParsedObservable}\r\n                        globalState={this.props.globalState}\r\n                    />\r\n                );\r\n            }\r\n            case \"Rectangle\": {\r\n                return (\r\n                    <RectanglePropertyGridComponent\r\n                        rectangles={nodes as Rectangle[]}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.globalState.onPropertyChangedObservable}\r\n                        onFontsParsedObservable={this.props.globalState.onFontsParsedObservable}\r\n                    />\r\n                );\r\n            }\r\n            case \"StackPanel\": {\r\n                const stackPanels = nodes as StackPanel[];\r\n                return (\r\n                    <StackPanelPropertyGridComponent\r\n                        stackPanels={stackPanels}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.globalState.onPropertyChangedObservable}\r\n                        onFontsParsedObservable={this.props.globalState.onFontsParsedObservable}\r\n                        globalState={this.props.globalState}\r\n                    />\r\n                );\r\n            }\r\n            case \"Grid\": {\r\n                const grids = nodes as Grid[];\r\n                return (\r\n                    <GridPropertyGridComponent\r\n                        grids={grids}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.globalState.onPropertyChangedObservable}\r\n                        onFontsParsedObservable={this.props.globalState.onFontsParsedObservable}\r\n                        globalState={this.props.globalState}\r\n                    />\r\n                );\r\n            }\r\n            case \"ScrollViewer\": {\r\n                const scrollViewers = nodes as ScrollViewer[];\r\n                return (\r\n                    <ScrollViewerPropertyGridComponent\r\n                        scrollViewers={scrollViewers}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.globalState.onPropertyChangedObservable}\r\n                        onFontsParsedObservable={this.props.globalState.onFontsParsedObservable}\r\n                        globalState={this.props.globalState}\r\n                    />\r\n                );\r\n            }\r\n            case \"Ellipse\": {\r\n                const ellipses = nodes as Ellipse[];\r\n                return (\r\n                    <EllipsePropertyGridComponent\r\n                        ellipses={ellipses}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.globalState.onPropertyChangedObservable}\r\n                        onFontsParsedObservable={this.props.globalState.onFontsParsedObservable}\r\n                        globalState={this.props.globalState}\r\n                    />\r\n                );\r\n            }\r\n            case \"Checkbox\": {\r\n                const checkboxes = nodes as Checkbox[];\r\n                return (\r\n                    <CheckboxPropertyGridComponent\r\n                        checkboxes={checkboxes}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.globalState.onPropertyChangedObservable}\r\n                        onFontsParsedObservable={this.props.globalState.onFontsParsedObservable}\r\n                        globalState={this.props.globalState}\r\n                    />\r\n                );\r\n            }\r\n            case \"RadioButton\": {\r\n                const radioButtons = nodes as RadioButton[];\r\n                return (\r\n                    <RadioButtonPropertyGridComponent\r\n                        radioButtons={radioButtons}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.globalState.onPropertyChangedObservable}\r\n                        onFontsParsedObservable={this.props.globalState.onFontsParsedObservable}\r\n                        globalState={this.props.globalState}\r\n                    />\r\n                );\r\n            }\r\n            case \"Line\": {\r\n                const lines = nodes as Line[];\r\n                return (\r\n                    <LinePropertyGridComponent\r\n                        lines={lines}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.globalState.onPropertyChangedObservable}\r\n                        onFontsParsedObservable={this.props.globalState.onFontsParsedObservable}\r\n                        globalState={this.props.globalState}\r\n                    />\r\n                );\r\n            }\r\n            case \"DisplayGrid\": {\r\n                const displayGrids = nodes as DisplayGrid[];\r\n                return (\r\n                    <DisplayGridPropertyGridComponent\r\n                        displayGrids={displayGrids}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.globalState.onPropertyChangedObservable}\r\n                        onFontsParsedObservable={this.props.globalState.onFontsParsedObservable}\r\n                        globalState={this.props.globalState}\r\n                    />\r\n                );\r\n            }\r\n            case \"Button\": {\r\n                const buttons = nodes as Button[];\r\n                return (\r\n                    <ButtonPropertyGridComponent\r\n                        key=\"buttonMenu\"\r\n                        rectangles={buttons}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.globalState.onPropertyChangedObservable}\r\n                        onAddComponent={(value) => {\r\n                            for (const button of buttons) {\r\n                                const guiElement = GUINodeTools.CreateControlFromString(value);\r\n                                this.props.globalState.workbench.addEditorBehavior(guiElement);\r\n                                button.addControl(guiElement);\r\n                                this.props.globalState.select(guiElement);\r\n                            }\r\n                        }}\r\n                        onFontsParsedObservable={this.props.globalState.onFontsParsedObservable}\r\n                        globalState={this.props.globalState}\r\n                    />\r\n                );\r\n            }\r\n        }\r\n\r\n        const controls = nodes as Control[];\r\n        return (\r\n            <ControlPropertyGridComponent\r\n                controls={controls}\r\n                lockObject={this._lockObject}\r\n                onPropertyChangedObservable={this.props.globalState.onPropertyChangedObservable}\r\n                onFontsParsedObservable={this.props.globalState.onFontsParsedObservable}\r\n                globalState={this.props.globalState}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderControlIcon(nodes: Control[]) {\r\n        const node = nodes[0];\r\n        const className = node.getClassName();\r\n        for (const node of nodes) {\r\n            if (node.getClassName() !== className) {\r\n                return adtIcon;\r\n            }\r\n        }\r\n        const type = ControlTypes.find((control) => control.className === className);\r\n        return type ? type.icon : adtIcon;\r\n    }\r\n\r\n    override render() {\r\n        if (this.props.globalState.guiTexture == undefined) return null;\r\n        const nodesToRender = this.props.globalState.selectedControls.length > 0 ? this.props.globalState.selectedControls : [this.props.globalState.workbench.trueRootContainer];\r\n        return <div id=\"ge-propertyTab\">{this.renderNode(nodesToRender)}</div>;\r\n    }\r\n}\r\n"]}
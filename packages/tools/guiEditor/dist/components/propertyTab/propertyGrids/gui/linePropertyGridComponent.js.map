{"version":3,"file":"linePropertyGridComponent.js","sourceRoot":"","sources":["../../../../../src/components/propertyTab/propertyGrids/gui/linePropertyGridComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport type { Observable } from \"core/Misc/observable\";\r\nimport type { PropertyChangedEvent } from \"shared-ui-components/propertyChangedEvent\";\r\nimport { CommonControlPropertyGridComponent } from \"../gui/commonControlPropertyGridComponent\";\r\nimport type { LockObject } from \"shared-ui-components/tabs/propertyGrids/lockObject\";\r\nimport type { Line } from \"gui/2D/controls/line\";\r\nimport { FloatLineComponent } from \"shared-ui-components/lines/floatLineComponent\";\r\nimport { TextInputLineComponent } from \"shared-ui-components/lines/textInputLineComponent\";\r\nimport { TextLineComponent } from \"shared-ui-components/lines/textLineComponent\";\r\nimport { makeTargetsProxy } from \"shared-ui-components/lines/targetsProxy\";\r\n\r\nimport strokeWeightIcon from \"shared-ui-components/imgs/strokeWeightIcon.svg\";\r\nimport linePoint1Icon from \"shared-ui-components/imgs/linePoint1Icon.svg\";\r\nimport linePoint2Icon from \"shared-ui-components/imgs/linePoint2Icon.svg\";\r\nimport lineDashIcon from \"shared-ui-components/imgs/lineDashIcon.svg\";\r\nimport { IconComponent } from \"shared-ui-components/lines/iconComponent\";\r\nimport { UnitButton } from \"shared-ui-components/lines/unitButton\";\r\nimport type { GlobalState } from \"../../../../globalState\";\r\n\r\ninterface ILinePropertyGridComponentProps {\r\n    lines: Line[];\r\n    lockObject: LockObject;\r\n    onPropertyChangedObservable?: Observable<PropertyChangedEvent>;\r\n    onFontsParsedObservable?: Observable<void>;\r\n    globalState?: GlobalState;\r\n}\r\n\r\nexport class LinePropertyGridComponent extends React.Component<ILinePropertyGridComponentProps> {\r\n    constructor(props: ILinePropertyGridComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    onDashChange(value: string) {\r\n        const split = value.split(\",\");\r\n        for (const line of this.props.lines) {\r\n            line.dash = [];\r\n\r\n            split.forEach((v) => {\r\n                const int = parseInt(v);\r\n\r\n                if (isNaN(int)) {\r\n                    return;\r\n                }\r\n\r\n                line.dash.push(int);\r\n            });\r\n        }\r\n        this.forceUpdate();\r\n    }\r\n\r\n    override render() {\r\n        const { lines, onPropertyChangedObservable, lockObject } = this.props;\r\n        const proxy = makeTargetsProxy(lines, onPropertyChangedObservable);\r\n        let dashes = lines[0].dash;\r\n        for (const line of lines) {\r\n            if (dashes.length === 0) break;\r\n            if (line.dash.length !== dashes.length) {\r\n                dashes = [];\r\n            }\r\n            dashes.forEach((dash, index) => {\r\n                if (line.dash[index] !== dash) {\r\n                    dashes = [];\r\n                }\r\n            });\r\n        }\r\n        const dashString = dashes.join(\",\");\r\n\r\n        return (\r\n            <div className=\"pane\">\r\n                <TextLineComponent label=\"LINE\" value=\" \" color=\"grey\"></TextLineComponent>\r\n                <div className=\"ge-divider double\">\r\n                    <IconComponent icon={linePoint1Icon} label={\"Position 1\"} />\r\n                    <TextInputLineComponent lockObject={lockObject} label=\"X\" target={proxy} propertyName=\"x1\" />\r\n                    <TextInputLineComponent lockObject={lockObject} label=\"Y\" target={proxy} propertyName=\"y1\" />\r\n                </div>\r\n                <div className=\"ge-divider double\">\r\n                    <IconComponent icon={linePoint2Icon} label={\"Position 2\"} />\r\n                    <TextInputLineComponent lockObject={lockObject} label=\"X\" target={proxy} propertyName=\"x2\" />\r\n                    <TextInputLineComponent lockObject={lockObject} label=\"Y\" target={proxy} propertyName=\"y2\" />\r\n                </div>\r\n                <div className=\"ge-divider double\">\r\n                    <IconComponent icon={strokeWeightIcon} label={\"Line Width\"} />\r\n                    <FloatLineComponent lockObject={lockObject} label=\"\" target={proxy} propertyName=\"lineWidth\" unit={<UnitButton unit=\"PX\" locked />} min={0} arrows={true} />\r\n                </div>\r\n                <div className=\"ge-divider\">\r\n                    <IconComponent icon={lineDashIcon} label={\"Dash Pattern\"} />\r\n                    <TextInputLineComponent lockObject={lockObject} label=\"\" target={proxy} value={dashString} onChange={(newValue) => this.onDashChange(newValue)} />\r\n                </div>\r\n                <hr />\r\n                <CommonControlPropertyGridComponent\r\n                    hideDimensions\r\n                    lockObject={lockObject}\r\n                    controls={lines}\r\n                    onPropertyChangedObservable={onPropertyChangedObservable}\r\n                    onFontsParsedObservable={this.props.onFontsParsedObservable}\r\n                    globalState={this.props.globalState}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
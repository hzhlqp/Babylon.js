{"version":3,"file":"sliderPropertyGridComponent.js","sourceRoot":"","sources":["../../../../../src/components/propertyTab/propertyGrids/gui/sliderPropertyGridComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport type { Observable } from \"core/Misc/observable\";\r\nimport type { PropertyChangedEvent } from \"shared-ui-components/propertyChangedEvent\";\r\nimport type { LockObject } from \"shared-ui-components/tabs/propertyGrids/lockObject\";\r\nimport type { Slider } from \"gui/2D/controls/sliders/slider\";\r\nimport { FloatLineComponent } from \"shared-ui-components/lines/floatLineComponent\";\r\nimport { CheckBoxLineComponent } from \"shared-ui-components/lines/checkBoxLineComponent\";\r\nimport { TextInputLineComponent } from \"shared-ui-components/lines/textInputLineComponent\";\r\nimport { TextLineComponent } from \"shared-ui-components/lines/textLineComponent\";\r\nimport { ColorLine } from \"shared-ui-components/lines/colorLineComponent\";\r\nimport type { ImageBasedSlider } from \"gui/2D/controls/sliders/imageBasedSlider\";\r\nimport { makeTargetsProxy } from \"shared-ui-components/lines/targetsProxy\";\r\n\r\nimport colorIcon from \"shared-ui-components/imgs/colorIcon.svg\";\r\nimport verticalSliderIcon from \"shared-ui-components/imgs/verticalSliderIcon.svg\";\r\nimport sliderValueIcon from \"shared-ui-components/imgs/sliderValueIcon.svg\";\r\nimport sliderValueMaximumIcon from \"shared-ui-components/imgs/sliderValueMaximumIcon.svg\";\r\nimport sliderValueMinimumIcon from \"shared-ui-components/imgs/sliderValueMinimumIcon.svg\";\r\nimport widthIcon from \"shared-ui-components/imgs/widthIcon.svg\";\r\nimport clampSliderValueIcon from \"shared-ui-components/imgs/clampSliderValueIcon.svg\";\r\nimport showThumbIcon from \"shared-ui-components/imgs/showThumbIcon.svg\";\r\nimport barOffsetIcon from \"shared-ui-components/imgs/barOffsetIcon.svg\";\r\nimport thumbCircleIcon from \"shared-ui-components/imgs/thumbCircleIcon.svg\";\r\nimport { IconComponent } from \"shared-ui-components/lines/iconComponent\";\r\n\r\ninterface ISliderPropertyGridComponentProps {\r\n    sliders: (Slider | ImageBasedSlider)[];\r\n    lockObject: LockObject;\r\n    onPropertyChangedObservable?: Observable<PropertyChangedEvent>;\r\n}\r\n\r\nexport class SliderPropertyGridComponent extends React.Component<ISliderPropertyGridComponentProps> {\r\n    constructor(props: ISliderPropertyGridComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    override render() {\r\n        const { sliders, onPropertyChangedObservable } = this.props;\r\n        const proxy = makeTargetsProxy(sliders, onPropertyChangedObservable);\r\n\r\n        return (\r\n            <div className=\"pane\">\r\n                <hr />\r\n                <TextLineComponent label=\"SLIDER\" value=\" \" color=\"grey\"></TextLineComponent>\r\n                {sliders.every((slider) => slider.typeName === \"Slider\") && (\r\n                    <div className=\"ge-divider\">\r\n                        <IconComponent icon={colorIcon} label=\"Border Color\" />\r\n                        <ColorLine lockObject={this.props.lockObject} label=\"\" target={proxy} propertyName=\"borderColor\" />\r\n                    </div>\r\n                )}\r\n                <div className=\"ge-divider\">\r\n                    <IconComponent icon={verticalSliderIcon} label=\"Vertical\" />\r\n                    <CheckBoxLineComponent label=\"VERTICAL\" target={proxy} propertyName=\"isVertical\" />\r\n                </div>\r\n                <div className=\"ge-divider double\">\r\n                    <IconComponent icon={barOffsetIcon} label=\"Bar Offset\" />\r\n                    <TextInputLineComponent lockObject={this.props.lockObject} label=\"\" target={proxy} propertyName=\"barOffset\" />\r\n                </div>\r\n                <div className=\"ge-divider double\">\r\n                    <IconComponent icon={sliderValueMinimumIcon} label=\"Minimum Value\" />\r\n                    <FloatLineComponent lockObject={this.props.lockObject} label=\"\" target={proxy} propertyName=\"minimum\" arrows={true} />\r\n                </div>\r\n                <div className=\"ge-divider double\">\r\n                    <IconComponent icon={sliderValueMaximumIcon} label=\"Maximum Value\" />\r\n                    <FloatLineComponent lockObject={this.props.lockObject} label=\"\" target={proxy} propertyName=\"maximum\" arrows={true} />\r\n                </div>\r\n                <div className=\"ge-divider double\">\r\n                    <IconComponent icon={sliderValueIcon} label=\"Initial Value\" />\r\n                    <FloatLineComponent lockObject={this.props.lockObject} label=\"\" target={proxy} propertyName=\"value\" arrows={true} />\r\n                </div>\r\n                <hr />\r\n                <TextLineComponent label=\"THUMB\" value=\" \" color=\"grey\"></TextLineComponent>\r\n                <div className=\"ge-divider\">\r\n                    <IconComponent icon={showThumbIcon} label=\"Display Thumb\" />\r\n                    <CheckBoxLineComponent label=\"DISPLAY THUMB\" target={proxy} propertyName=\"displayThumb\" onValueChanged={() => this.forceUpdate()} />\r\n                </div>\r\n                {proxy.displayThumb && (\r\n                    <>\r\n                        <div className=\"ge-divider\">\r\n                            <IconComponent icon={thumbCircleIcon} label=\"Thumb Circular\" />\r\n                            <CheckBoxLineComponent label=\"CIRCULAR\" target={proxy} propertyName=\"isThumbCircle\" />\r\n                        </div>\r\n                        <div className=\"ge-divider\">\r\n                            <IconComponent icon={clampSliderValueIcon} label=\"Thumb Clamped to Edges\" />\r\n                            <CheckBoxLineComponent label=\"CLAMPED\" target={proxy} propertyName=\"isThumbClamped\" />\r\n                        </div>\r\n                        <div className=\"ge-divider double\">\r\n                            <IconComponent icon={widthIcon} label=\"Width\" />\r\n                            <TextInputLineComponent lockObject={this.props.lockObject} label=\"\" target={proxy} propertyName=\"thumbWidth\" />\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
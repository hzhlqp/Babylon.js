{"version":3,"file":"imagePropertyGridComponent.js","sourceRoot":"","sources":["../../../../../src/components/propertyTab/propertyGrids/gui/imagePropertyGridComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport type { Observable, Observer } from \"core/Misc/observable\";\r\nimport type { PropertyChangedEvent } from \"shared-ui-components/propertyChangedEvent\";\r\nimport { CommonControlPropertyGridComponent } from \"../gui/commonControlPropertyGridComponent\";\r\nimport type { LockObject } from \"shared-ui-components/tabs/propertyGrids/lockObject\";\r\nimport { Image } from \"gui/2D/controls/image\";\r\nimport { FloatLineComponent } from \"shared-ui-components/lines/floatLineComponent\";\r\nimport { CheckBoxLineComponent } from \"shared-ui-components/lines/checkBoxLineComponent\";\r\nimport { OptionsLine } from \"shared-ui-components/lines/optionsLineComponent\";\r\nimport { TextInputLineComponent } from \"shared-ui-components/lines/textInputLineComponent\";\r\nimport { TextLineComponent } from \"shared-ui-components/lines/textLineComponent\";\r\nimport { makeTargetsProxy } from \"shared-ui-components/lines/targetsProxy\";\r\n\r\nimport stretchFillIcon from \"shared-ui-components/imgs/stretchFillIcon.svg\";\r\nimport imageLinkIcon from \"shared-ui-components/imgs/imageLinkIcon.svg\";\r\nimport cropIcon from \"shared-ui-components/imgs/cropIcon.svg\";\r\nimport cellIDIcon from \"shared-ui-components/imgs/cellIDIcon.svg\";\r\nimport autoResizeIcon from \"shared-ui-components/imgs/autoResizeIcon.svg\";\r\nimport sizeIcon from \"shared-ui-components/imgs/sizeIcon.svg\";\r\nimport animationSheetIcon from \"shared-ui-components/imgs/animationSheetIcon.svg\";\r\nimport { IconComponent } from \"shared-ui-components/lines/iconComponent\";\r\nimport { UnitButton } from \"shared-ui-components/lines/unitButton\";\r\nimport type { GlobalState } from \"../../../../globalState\";\r\n\r\ninterface IImagePropertyGridComponentProps {\r\n    images: Image[];\r\n    lockObject: LockObject;\r\n    onPropertyChangedObservable?: Observable<PropertyChangedEvent>;\r\n    onFontsParsedObservable?: Observable<void>;\r\n    globalState?: GlobalState;\r\n}\r\n\r\nexport class ImagePropertyGridComponent extends React.Component<IImagePropertyGridComponentProps> {\r\n    private _observers = new Map<Image, Observer<Image>>();\r\n    constructor(props: IImagePropertyGridComponentProps) {\r\n        super(props);\r\n        this.updateObservers([], props.images);\r\n    }\r\n\r\n    override shouldComponentUpdate(nextProps: IImagePropertyGridComponentProps) {\r\n        this.updateObservers(this.props.images, nextProps.images);\r\n        return true;\r\n    }\r\n\r\n    updateObservers(oldImages: Image[], newImages: Image[]) {\r\n        for (const image of newImages) {\r\n            if (!oldImages.includes(image)) {\r\n                this._observers.set(image, image.onImageLoadedObservable.add(() => this.forceUpdate())!);\r\n            }\r\n        }\r\n        for (const image of oldImages) {\r\n            if (!newImages.includes(image)) {\r\n                image.onImageLoadedObservable.remove(this._observers.get(image)!);\r\n                this._observers.delete(image);\r\n            }\r\n        }\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        this.updateObservers(this.props.images, []);\r\n    }\r\n\r\n    toggleAnimations(on: boolean) {\r\n        for (const image of this.props.images) {\r\n            if (on) {\r\n                image.cellId = 0;\r\n                image.cellWidth = image.imageWidth;\r\n                image.cellHeight = image.imageHeight;\r\n            } else {\r\n                image.cellId = -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    getMaxCells() {\r\n        let maxCells = Number.MAX_SAFE_INTEGER;\r\n        for (const image of this.props.images) {\r\n            if (image.cellWidth === 0 || image.cellHeight === 0) continue;\r\n            const cols = Math.ceil(image.imageWidth / image.cellWidth);\r\n            const rows = Math.ceil(image.imageHeight / image.cellHeight);\r\n            const max = cols * rows - 1;\r\n            if (max < maxCells) maxCells = max;\r\n        }\r\n        return maxCells;\r\n    }\r\n\r\n    updateCellSize() {\r\n        const maxCells = this.getMaxCells();\r\n        for (const image of this.props.images) {\r\n            if (image.cellId > maxCells) {\r\n                image.cellId = maxCells;\r\n            }\r\n        }\r\n        this.forceUpdate();\r\n    }\r\n\r\n    override render() {\r\n        const images = this.props.images;\r\n        const image = images[0]; // for nine slice\r\n\r\n        const proxy = makeTargetsProxy(images, this.props.onPropertyChangedObservable);\r\n\r\n        const stretchOptions = [\r\n            { label: \"None\", value: Image.STRETCH_NONE },\r\n            { label: \"Fill\", value: Image.STRETCH_FILL },\r\n            { label: \"Uniform\", value: Image.STRETCH_UNIFORM },\r\n            { label: \"Extend\", value: Image.STRETCH_EXTEND },\r\n            { label: \"NinePatch\", value: Image.STRETCH_NINE_PATCH },\r\n        ];\r\n\r\n        const animationSheet = images.every((image) => image.cellId !== -1);\r\n        const maxCells = this.getMaxCells();\r\n        const maxCellWidth = Math.max(...images.map((image) => image.imageWidth));\r\n        const maxCellHeight = Math.max(...images.map((image) => image.imageHeight));\r\n\r\n        return (\r\n            <div className=\"pane\">\r\n                <CommonControlPropertyGridComponent\r\n                    lockObject={this.props.lockObject}\r\n                    controls={images}\r\n                    onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    onFontsParsedObservable={this.props.onFontsParsedObservable}\r\n                    globalState={this.props.globalState}\r\n                />\r\n                <hr />\r\n                <TextLineComponent label=\"IMAGE\" value=\" \" color=\"grey\"></TextLineComponent>\r\n                <div className=\"ge-divider double\">\r\n                    <IconComponent icon={imageLinkIcon} label=\"Source\" />\r\n                    <TextInputLineComponent lockObject={this.props.lockObject} label=\" \" target={proxy} propertyName=\"source\" />\r\n                </div>\r\n                <div className=\"ge-divider double\">\r\n                    <IconComponent icon={cropIcon} label=\"Crop\" />\r\n                    <TextInputLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"L\"\r\n                        target={proxy}\r\n                        propertyName=\"sourceLeft\"\r\n                        numeric={true}\r\n                        arrows={true}\r\n                        min={0}\r\n                        placeholder=\"0\"\r\n                        unit={<UnitButton unit=\"PX\" locked />}\r\n                    />\r\n                    <TextInputLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"T\"\r\n                        target={proxy}\r\n                        propertyName=\"sourceTop\"\r\n                        numeric={true}\r\n                        arrows={true}\r\n                        min={0}\r\n                        placeholder=\"0\"\r\n                        unit={<UnitButton unit=\"PX\" locked />}\r\n                    />\r\n                </div>\r\n                <div className=\"ge-divider double\">\r\n                    <IconComponent icon={cropIcon} label=\"Crop\" />\r\n                    <TextInputLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"W\"\r\n                        target={proxy}\r\n                        propertyName=\"sourceWidth\"\r\n                        numeric={true}\r\n                        arrows={true}\r\n                        min={0}\r\n                        placeholder={Math.max(...images.map((image) => image.imageWidth)).toString()}\r\n                        unit={<UnitButton unit=\"PX\" locked />}\r\n                    />\r\n                    <TextInputLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"H\"\r\n                        target={proxy}\r\n                        propertyName=\"sourceHeight\"\r\n                        numeric={true}\r\n                        arrows={true}\r\n                        min={0}\r\n                        placeholder={Math.max(...images.map((image) => image.imageHeight)).toString()}\r\n                        unit={<UnitButton unit=\"PX\" locked />}\r\n                    />\r\n                </div>\r\n                <div className=\"ge-divider\">\r\n                    <IconComponent icon={autoResizeIcon} label=\"Autoscale\" />\r\n                    <CheckBoxLineComponent label=\"AUTOSCALE\" target={proxy} propertyName=\"autoScale\" onPropertyChangedObservable={this.props.onPropertyChangedObservable} />\r\n                </div>\r\n                <div className=\"ge-divider\">\r\n                    <IconComponent icon={stretchFillIcon} label=\"Stretch\" />\r\n                    <OptionsLine label=\" \" options={stretchOptions} target={proxy} propertyName=\"stretch\" onSelect={(value) => this.setState({ mode: value })} />\r\n                </div>\r\n                {images.length === 1 && image.stretch === Image.STRETCH_NINE_PATCH && (\r\n                    <>\r\n                        <div className=\"ge-divider double\">\r\n                            <IconComponent icon={cropIcon} label=\"Slice Horizontal\" />\r\n                            <FloatLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"L\"\r\n                                target={image}\r\n                                propertyName=\"sliceLeft\"\r\n                                onChange={() => {\r\n                                    image.populateNinePatchSlicesFromImage = false;\r\n                                    this.forceUpdate();\r\n                                }}\r\n                            />\r\n                            <FloatLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"R\"\r\n                                target={image}\r\n                                propertyName=\"sliceRight\"\r\n                                onChange={() => {\r\n                                    image.populateNinePatchSlicesFromImage = false;\r\n                                    this.forceUpdate();\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div className=\"ge-divider double\">\r\n                            <IconComponent icon={cropIcon} label=\"Slice Vertical\" />\r\n                            <FloatLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"T\"\r\n                                target={image}\r\n                                propertyName=\"sliceTop\"\r\n                                onChange={() => {\r\n                                    image.populateNinePatchSlicesFromImage = false;\r\n                                    this.forceUpdate();\r\n                                }}\r\n                            />\r\n                            <FloatLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"B\"\r\n                                target={image}\r\n                                propertyName=\"sliceBottom\"\r\n                                onChange={() => {\r\n                                    image.populateNinePatchSlicesFromImage = false;\r\n                                    this.forceUpdate();\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div className=\"ge-divider\">\r\n                            <IconComponent icon={autoResizeIcon} label=\"Populate Nine Patch Slices From Image\" />\r\n                            <CheckBoxLineComponent\r\n                                label=\"SLICE FROM IMAGE\"\r\n                                target={image}\r\n                                propertyName=\"populateNinePatchSlicesFromImage\"\r\n                                onValueChanged={() => {\r\n                                    this.forceUpdate();\r\n                                    image._markAsDirty();\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                )}\r\n                <hr />\r\n                <CheckBoxLineComponent\r\n                    iconLabel={\"animationSheet\"}\r\n                    icon={animationSheetIcon}\r\n                    label=\"ANIMATION SHEET\"\r\n                    target={makeTargetsProxy(images, this.props.onPropertyChangedObservable, (target: Image) => target.cellId !== -1)}\r\n                    onValueChanged={() => {\r\n                        this.toggleAnimations(!animationSheet);\r\n                        this.forceUpdate();\r\n                    }}\r\n                />\r\n                {animationSheet && (\r\n                    <>\r\n                        <div className=\"ge-divider double\">\r\n                            <FloatLineComponent\r\n                                iconLabel={\"Cell Id\"}\r\n                                icon={cellIDIcon}\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"\"\r\n                                isInteger={true}\r\n                                target={proxy}\r\n                                propertyName=\"cellId\"\r\n                                min={0}\r\n                                max={maxCells}\r\n                            />\r\n                        </div>\r\n                        <div className=\"ge-divider\">\r\n                            <FloatLineComponent\r\n                                icon={sizeIcon}\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"W\"\r\n                                target={proxy}\r\n                                propertyName=\"cellWidth\"\r\n                                isInteger={true}\r\n                                onChange={() => this.updateCellSize()}\r\n                                min={1}\r\n                                max={maxCellWidth}\r\n                            />\r\n                            <FloatLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"H\"\r\n                                target={proxy}\r\n                                propertyName=\"cellHeight\"\r\n                                isInteger={true}\r\n                                onChange={() => this.updateCellSize()}\r\n                                min={1}\r\n                                max={maxCellHeight}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
{"version":3,"file":"gridPropertyGridComponent.js","sourceRoot":"","sources":["../../../../../src/components/propertyTab/propertyGrids/gui/gridPropertyGridComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport type { Observable } from \"core/Misc/observable\";\r\nimport type { PropertyChangedEvent } from \"shared-ui-components/propertyChangedEvent\";\r\nimport { CommonControlPropertyGridComponent } from \"../gui/commonControlPropertyGridComponent\";\r\nimport type { LockObject } from \"shared-ui-components/tabs/propertyGrids/lockObject\";\r\nimport type { Grid } from \"gui/2D/controls/grid\";\r\nimport { TextLineComponent } from \"shared-ui-components/lines/textLineComponent\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { TextInputLineComponent } from \"shared-ui-components/lines/textInputLineComponent\";\r\nimport { CommandButtonComponent } from \"../../../commandButtonComponent\";\r\n\r\nimport gridColumnIconDark from \"shared-ui-components/imgs/gridColumnIconDark.svg\";\r\nimport gridRowIconDark from \"shared-ui-components/imgs/gridRowIconDark.svg\";\r\nimport confirmGridElementDark from \"shared-ui-components/imgs/confirmGridElementDark.svg\";\r\nimport subtractGridElementDark from \"shared-ui-components/imgs/subtractGridElementDark.svg\";\r\nimport addGridElementDark from \"shared-ui-components/imgs/addGridElementDark.svg\";\r\nimport cancelGridElementDark from \"shared-ui-components/imgs/cancelGridElementDark.svg\";\r\nimport valueChangedGridDark from \"shared-ui-components/imgs/valueChangedGridDark.svg\";\r\nimport deleteGridElementDark from \"shared-ui-components/imgs/deleteGridElementDark.svg\";\r\nimport type { GlobalState } from \"../../../../globalState\";\r\nimport { MathTools } from \"gui/2D/math2D\";\r\n\r\ninterface IGridPropertyGridComponentProps {\r\n    grids: Grid[];\r\n    lockObject: LockObject;\r\n    onPropertyChangedObservable?: Observable<PropertyChangedEvent>;\r\n    onFontsParsedObservable?: Observable<void>;\r\n    globalState?: GlobalState;\r\n    onUpdateRequiredObservable?: Observable<void>;\r\n}\r\n\r\ninterface IGridPropertyComponentState {\r\n    removingColumn: boolean;\r\n    removingRow: boolean;\r\n}\r\n\r\nexport class GridPropertyGridComponent extends React.Component<IGridPropertyGridComponentProps, IGridPropertyComponentState> {\r\n    constructor(props: IGridPropertyGridComponentProps) {\r\n        super(props);\r\n\r\n        this.state = { removingColumn: false, removingRow: false };\r\n    }\r\n    private _previousGrid: Nullable<Grid> = null;\r\n    private _rowDefinitions: string[] = [];\r\n    private _rowEditFlags: boolean[] = [];\r\n    private _columnEditFlags: boolean[] = [];\r\n    private _columnDefinitions: string[] = [];\r\n    private _editedRow: boolean = false;\r\n    private _editedColumn: boolean = false;\r\n    private _rowChild: boolean = false;\r\n    private _columnChild: boolean = false;\r\n\r\n    renderRows() {\r\n        return this._rowDefinitions.map((rd, i) => {\r\n            return (\r\n                <div\r\n                    key={`r${i}`}\r\n                    className={this.state.removingRow && i === this._rowEditFlags.length - 1 ? \"ge-grid-remove\" : this._rowEditFlags[i] ? \"ge-grid-edit\" : \"ge-grid\"}\r\n                >\r\n                    <div className=\"ge-grid-divider\">\r\n                        <TextInputLineComponent\r\n                            lockObject={this.props.lockObject}\r\n                            key={`rText${i}-${this.state.removingRow}`}\r\n                            label=\"\"\r\n                            icon={gridRowIconDark}\r\n                            iconLabel={`Row ${i}`}\r\n                            value={rd}\r\n                            numbersOnly={true}\r\n                            onChange={(newValue) => {\r\n                                if (newValue === this._rowDefinitions[i]) {\r\n                                    return;\r\n                                }\r\n                                this._rowDefinitions[i] = newValue;\r\n                                this._rowEditFlags[i] = true;\r\n                                this._editedRow = true;\r\n                                this._rowChild = false;\r\n                                this.setState({ removingRow: false });\r\n                            }}\r\n                            disabled={this.state.removingRow}\r\n                        />\r\n                        <TextLineComponent tooltip=\"\" label={`[${i}]`} value=\"\" color=\"grey\"></TextLineComponent>\r\n                        {this.state.removingRow && i === this._rowEditFlags.length - 1 && (\r\n                            <TextLineComponent icon={deleteGridElementDark} label=\" \" value=\" \" color=\"grey\"></TextLineComponent>\r\n                        )}\r\n                        {this._rowEditFlags[i] && <TextLineComponent icon={valueChangedGridDark} label=\" \" value=\" \" color=\"grey\"></TextLineComponent>}\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    setRowValues() {\r\n        const grid = this.props.grids[0];\r\n        this._rowDefinitions = [];\r\n        this._rowEditFlags = [];\r\n        this._editedRow = false;\r\n        for (let index = 0; index < grid.rowCount; index++) {\r\n            const value = grid.getRowDefinition(index);\r\n            if (value) {\r\n                this._rowDefinitions.push(value.toString(grid._host, 2));\r\n                this._rowEditFlags.push(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    setColumnValues() {\r\n        const grid = this.props.grids[0];\r\n        this._columnDefinitions = [];\r\n        this._columnEditFlags = [];\r\n        this._editedColumn = false;\r\n        for (let index = 0; index < grid.columnCount; index++) {\r\n            const value = grid.getColumnDefinition(index);\r\n            if (value) {\r\n                this._columnDefinitions.push(value.toString(grid._host, 2));\r\n                this._columnEditFlags.push(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    renderColumns() {\r\n        return this._columnDefinitions.map((cd, i) => {\r\n            return (\r\n                <div\r\n                    key={`c${i}`}\r\n                    className={this.state.removingColumn && i === this._columnEditFlags.length - 1 ? \"ge-grid-remove\" : this._columnEditFlags[i] ? \"ge-grid-edit\" : \"ge-grid\"}\r\n                >\r\n                    <div className=\"ge-grid-divider\">\r\n                        <TextInputLineComponent\r\n                            lockObject={this.props.lockObject}\r\n                            key={`ctext${i}-${this.state.removingColumn}`}\r\n                            label=\"\"\r\n                            icon={gridColumnIconDark}\r\n                            iconLabel={`Column ${i}`}\r\n                            value={cd}\r\n                            numbersOnly={true}\r\n                            onChange={(newValue) => {\r\n                                if (newValue === this._columnDefinitions[i]) {\r\n                                    return;\r\n                                }\r\n                                this._columnDefinitions[i] = newValue;\r\n                                this._columnEditFlags[i] = true;\r\n                                this._editedColumn = true;\r\n                                this._columnChild = false;\r\n                                this.setState({ removingColumn: false });\r\n                            }}\r\n                            disabled={this.state.removingColumn}\r\n                        />\r\n                        <TextLineComponent tooltip=\"\" label={`[${i}]`} value=\"\" color=\"grey\"></TextLineComponent>\r\n                        {this.state.removingColumn && i === this._columnEditFlags.length - 1 && (\r\n                            <TextLineComponent icon={deleteGridElementDark} label=\" \" value=\" \" color=\"grey\"></TextLineComponent>\r\n                        )}\r\n                        {this._columnEditFlags[i] && <TextLineComponent icon={valueChangedGridDark} label=\" \" value=\" \" color=\"grey\"></TextLineComponent>}\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    parsePercentage(value: string) {\r\n        let floatResult;\r\n        if (value.trim().at(-1) === \"%\") {\r\n            floatResult = parseFloat(value.replace(\"%\", \"\")) / 100;\r\n        } else {\r\n            floatResult = parseFloat(value);\r\n        }\r\n        return MathTools.Round(floatResult, 10000);\r\n    }\r\n\r\n    isCloseTo(value: number, expected: number, epsilon: number = 0.001) {\r\n        return Math.abs(value - expected) < epsilon;\r\n    }\r\n\r\n    adjustPercentages(definitions: string[], editFlags: boolean[]): string[] {\r\n        let percentageTotal = 0;\r\n        let modifiedEntriesPercentageTotal = 0;\r\n\r\n        const cellValues: string[] = [];\r\n\r\n        for (let i = 0; i < definitions.length; ++i) {\r\n            let value = definitions[i];\r\n            const percent = this.checkPercentage(value);\r\n            if (editFlags[i]) {\r\n                value = this.checkValue(value, percent);\r\n            }\r\n            if (percent) {\r\n                percentageTotal += this.parsePercentage(value);\r\n                if (editFlags[i]) {\r\n                    modifiedEntriesPercentageTotal += this.parsePercentage(value);\r\n                }\r\n            }\r\n            cellValues.push(value);\r\n        }\r\n\r\n        let modifiedCellValues = [];\r\n\r\n        // If the total percentage is not 100% we need to adjust the values based on the remaining percentage that was not modified by the user;\r\n        // If the remaining percentage is 0% we need to resize the modified entries to fit the remaining space\r\n        if (this.isCloseTo(percentageTotal, 1)) {\r\n            modifiedCellValues = cellValues;\r\n        } else {\r\n            const absoluteRemainingPercentage = 1 - modifiedEntriesPercentageTotal;\r\n            const magnitudeRemainingPercentage = Math.abs(absoluteRemainingPercentage);\r\n            const unmodifiedEntriesPercentage = percentageTotal - modifiedEntriesPercentageTotal;\r\n\r\n            const resizeModifiedEntries = this.isCloseTo(unmodifiedEntriesPercentage, 0);\r\n            for (let i = 0; i < cellValues.length; ++i) {\r\n                const value = cellValues[i];\r\n                const percent = this.checkPercentage(value);\r\n                if ((percent && !editFlags[i]) || (editFlags[i] && resizeModifiedEntries)) {\r\n                    const parsedValue = this.parsePercentage(value);\r\n                    const entryWeight = parsedValue / (resizeModifiedEntries ? percentageTotal : unmodifiedEntriesPercentage);\r\n                    const newEntryValue = entryWeight * (resizeModifiedEntries ? 1 : magnitudeRemainingPercentage);\r\n                    modifiedCellValues.push(`${newEntryValue * 100}%`);\r\n                } else {\r\n                    modifiedCellValues.push(value);\r\n                }\r\n            }\r\n        }\r\n\r\n        return modifiedCellValues;\r\n    }\r\n\r\n    resizeRow() {\r\n        const grid = this.props.grids[0];\r\n\r\n        const modifiedRowValues = this.adjustPercentages(this._rowDefinitions, this._rowEditFlags);\r\n\r\n        for (let i = 0; i < modifiedRowValues.length; ++i) {\r\n            grid.setRowDefinition(i, this.parsePercentage(modifiedRowValues[i]), !this.checkPercentage(modifiedRowValues[i]));\r\n        }\r\n\r\n        this.setRowValues();\r\n    }\r\n\r\n    resizeColumn() {\r\n        const grid = this.props.grids[0];\r\n\r\n        const columnValues = this.adjustPercentages(this._columnDefinitions, this._columnEditFlags);\r\n\r\n        for (let i = 0; i < columnValues.length; ++i) {\r\n            grid.setColumnDefinition(i, this.parsePercentage(columnValues[i]), !this.checkPercentage(this._columnDefinitions[i]));\r\n        }\r\n\r\n        this.setColumnValues();\r\n    }\r\n\r\n    checkValue(value: string, percent: boolean): string {\r\n        let newValue = value.match(/([0-9.,]+)/g)?.[0];\r\n        if (!newValue) {\r\n            newValue = \"0\";\r\n        }\r\n        newValue += percent ? \"%\" : \"px\";\r\n        return newValue;\r\n    }\r\n\r\n    checkPercentage(value: string): boolean {\r\n        const toSearch = \"px\";\r\n        return value.substring(value.length - toSearch.length, value.length) !== toSearch;\r\n    }\r\n\r\n    resetValues() {\r\n        const grid = this.props.grids[0];\r\n        this._columnChild = false;\r\n        this._rowChild = false;\r\n        this._previousGrid = grid;\r\n        this.setRowValues();\r\n        this.setColumnValues();\r\n        this.resizeColumn();\r\n        this.resizeRow();\r\n\r\n        this.setState({ removingColumn: false, removingRow: false });\r\n    }\r\n\r\n    override render() {\r\n        const grids = this.props.grids;\r\n        const grid = this.props.grids[0];\r\n        if (grid !== this._previousGrid) {\r\n            this.resetValues();\r\n        }\r\n        return (\r\n            <div className=\"pane\">\r\n                <CommonControlPropertyGridComponent\r\n                    lockObject={this.props.lockObject}\r\n                    controls={grids}\r\n                    onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    onFontsParsedObservable={this.props.onFontsParsedObservable}\r\n                    globalState={this.props.globalState}\r\n                />\r\n                <hr className=\"ge\" />\r\n                <TextLineComponent tooltip=\"\" label=\"GRID\" value=\" \" color=\"grey\"></TextLineComponent>\r\n                {this.renderRows()}\r\n                {this.props.grids.length === 1 && (\r\n                    <>\r\n                        <div className=\"ge-gridLine\">\r\n                            <div className=\"ge-grid-button-divider\">\r\n                                <CommandButtonComponent\r\n                                    altStyle={true}\r\n                                    tooltip=\"Add Row\"\r\n                                    icon={addGridElementDark}\r\n                                    shortcut=\"\"\r\n                                    isActive={false}\r\n                                    disabled={this.state.removingRow || this._editedRow}\r\n                                    onClick={() => {\r\n                                        let total = 0;\r\n                                        let count = 0;\r\n                                        for (let i = 0; i < grid.rowCount; ++i) {\r\n                                            const rd = grid.getRowDefinition(i);\r\n                                            if (rd?.isPercentage) {\r\n                                                total += rd?.getValue(grid.host);\r\n                                                count++;\r\n                                            }\r\n                                        }\r\n                                        grid.addRowDefinition(total / count, false);\r\n                                        this.resetValues();\r\n                                        this.forceUpdate();\r\n                                    }}\r\n                                />{\" \"}\r\n                                <CommandButtonComponent\r\n                                    altStyle={true}\r\n                                    tooltip=\"Remove Row\"\r\n                                    icon={subtractGridElementDark}\r\n                                    shortcut=\"\"\r\n                                    isActive={false}\r\n                                    disabled={this.state.removingRow || grid.rowCount <= 1 || this._editedRow}\r\n                                    onClick={() => {\r\n                                        let hasChild = false;\r\n                                        for (let i = 0; i < grid.columnCount; ++i) {\r\n                                            const child = grid.cells[grid.rowCount - 1 + \":\" + i];\r\n                                            if (child?.children.length) {\r\n                                                hasChild = true;\r\n                                                break;\r\n                                            }\r\n                                        }\r\n                                        this.resetValues();\r\n                                        if (hasChild) {\r\n                                            this._rowChild = true;\r\n                                        }\r\n                                        this.setState({ removingRow: true });\r\n                                    }}\r\n                                />\r\n                                {this._editedRow && (\r\n                                    <>\r\n                                        {\" \"}\r\n                                        <CommandButtonComponent\r\n                                            altStyle={true}\r\n                                            tooltip=\"Confirm\"\r\n                                            icon={confirmGridElementDark}\r\n                                            shortcut=\"\"\r\n                                            isActive={false}\r\n                                            onClick={() => {\r\n                                                this.resizeRow();\r\n                                                this.forceUpdate();\r\n                                            }}\r\n                                        />\r\n                                        <CommandButtonComponent\r\n                                            altStyle={true}\r\n                                            tooltip=\"Cancel\"\r\n                                            icon={cancelGridElementDark}\r\n                                            shortcut=\"\"\r\n                                            isActive={false}\r\n                                            onClick={() => {\r\n                                                this.resetValues();\r\n                                                this.forceUpdate();\r\n                                            }}\r\n                                        />\r\n                                    </>\r\n                                )}\r\n                                {this.state.removingRow && (\r\n                                    <>\r\n                                        <CommandButtonComponent\r\n                                            altStyle={true}\r\n                                            tooltip=\"Confirm\"\r\n                                            icon={confirmGridElementDark}\r\n                                            shortcut=\"\"\r\n                                            isActive={false}\r\n                                            onClick={() => {\r\n                                                grid.removeRowDefinition(grid.rowCount - 1);\r\n                                                this.setRowValues();\r\n                                                this.resizeRow();\r\n                                                this.setState({ removingRow: false });\r\n                                                this._rowChild = false;\r\n                                                this.props.onUpdateRequiredObservable?.notifyObservers();\r\n                                            }}\r\n                                        />\r\n                                        <CommandButtonComponent\r\n                                            altStyle={true}\r\n                                            tooltip=\"Cancel\"\r\n                                            icon={cancelGridElementDark}\r\n                                            shortcut=\"\"\r\n                                            isActive={false}\r\n                                            onClick={() => {\r\n                                                this.setState({ removingRow: false });\r\n                                                this._rowChild = false;\r\n                                                this.forceUpdate();\r\n                                            }}\r\n                                        />\r\n                                    </>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        {this._rowChild && (\r\n                            <>\r\n                                <TextLineComponent\r\n                                    tooltip=\"\"\r\n                                    label=\"This row is not empty. Removing it will delete all contained controls. Do you want to remove this row and delete all controls within?\"\r\n                                    value=\" \"\r\n                                    color=\"grey\"\r\n                                ></TextLineComponent>\r\n                            </>\r\n                        )}\r\n                        <hr className=\"ge\" />\r\n                        {this.renderColumns()}\r\n                        <div className=\"ge-grid-button-divider\">\r\n                            <CommandButtonComponent\r\n                                altStyle={true}\r\n                                tooltip=\"Add Column\"\r\n                                icon={addGridElementDark}\r\n                                shortcut=\"\"\r\n                                isActive={false}\r\n                                disabled={this.state.removingColumn || this._editedColumn}\r\n                                onClick={() => {\r\n                                    let total = 0;\r\n                                    let count = 0;\r\n                                    for (let i = 0; i < grid.columnCount; ++i) {\r\n                                        const cd = grid.getColumnDefinition(i);\r\n                                        if (cd?.isPercentage) {\r\n                                            total += cd?.getValue(grid.host);\r\n                                            count++;\r\n                                        }\r\n                                    }\r\n                                    grid.addColumnDefinition(total / count, false);\r\n                                    this.resetValues();\r\n                                    this.forceUpdate();\r\n                                }}\r\n                            />\r\n                            <CommandButtonComponent\r\n                                altStyle={true}\r\n                                tooltip=\"Remove Column\"\r\n                                icon={subtractGridElementDark}\r\n                                shortcut=\"\"\r\n                                isActive={false}\r\n                                disabled={this.state.removingColumn || this._editedColumn || grid.columnCount <= 1}\r\n                                onClick={() => {\r\n                                    let hasChild = false;\r\n                                    for (let i = 0; i < grid.rowCount; ++i) {\r\n                                        const child = grid.cells[i + \":\" + (grid.columnCount - 1)];\r\n                                        if (child?.children.length) {\r\n                                            hasChild = true;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                    this.resetValues();\r\n                                    if (hasChild) {\r\n                                        this._columnChild = true;\r\n                                    }\r\n                                    this.setState({ removingColumn: true });\r\n                                }}\r\n                            />\r\n                            {this._editedColumn && (\r\n                                <>\r\n                                    <CommandButtonComponent\r\n                                        altStyle={true}\r\n                                        tooltip=\"Confirm\"\r\n                                        icon={confirmGridElementDark}\r\n                                        shortcut=\"\"\r\n                                        isActive={false}\r\n                                        onClick={() => {\r\n                                            this.resizeColumn();\r\n                                            this.forceUpdate();\r\n                                        }}\r\n                                    />\r\n                                    <CommandButtonComponent\r\n                                        altStyle={true}\r\n                                        tooltip=\"Cancel\"\r\n                                        icon={cancelGridElementDark}\r\n                                        shortcut=\"\"\r\n                                        isActive={false}\r\n                                        onClick={() => {\r\n                                            this.resetValues();\r\n                                            this.forceUpdate();\r\n                                        }}\r\n                                    />\r\n                                </>\r\n                            )}\r\n                            {this.state.removingColumn && (\r\n                                <>\r\n                                    <CommandButtonComponent\r\n                                        altStyle={true}\r\n                                        tooltip=\"Confirm\"\r\n                                        icon={confirmGridElementDark}\r\n                                        shortcut=\"\"\r\n                                        isActive={false}\r\n                                        onClick={() => {\r\n                                            grid.removeColumnDefinition(grid.columnCount - 1);\r\n                                            this.setColumnValues();\r\n                                            this.resizeColumn();\r\n                                            this.setState({ removingColumn: false });\r\n                                            this._columnChild = false;\r\n                                            this.props.onUpdateRequiredObservable?.notifyObservers();\r\n                                        }}\r\n                                    />\r\n                                    <CommandButtonComponent\r\n                                        altStyle={true}\r\n                                        tooltip=\"Cancel\"\r\n                                        icon={cancelGridElementDark}\r\n                                        shortcut=\"\"\r\n                                        isActive={false}\r\n                                        onClick={() => {\r\n                                            this.setState({ removingColumn: false });\r\n                                            this._columnChild = false;\r\n                                        }}\r\n                                    />\r\n                                </>\r\n                            )}{\" \"}\r\n                        </div>\r\n                        {this._columnChild && (\r\n                            <>\r\n                                <TextLineComponent\r\n                                    tooltip=\"\"\r\n                                    label=\"This column is not empty. Removing it will delete all contained controls. Do you want to remove this column and delete all controls within?\"\r\n                                    value=\" \"\r\n                                    color=\"grey\"\r\n                                ></TextLineComponent>\r\n                            </>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
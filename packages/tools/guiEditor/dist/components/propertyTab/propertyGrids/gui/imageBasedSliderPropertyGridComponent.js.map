{"version":3,"file":"imageBasedSliderPropertyGridComponent.js","sourceRoot":"","sources":["../../../../../src/components/propertyTab/propertyGrids/gui/imageBasedSliderPropertyGridComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport type { Observable } from \"core/Misc/observable\";\r\nimport type { PropertyChangedEvent } from \"shared-ui-components/propertyChangedEvent\";\r\nimport { CommonControlPropertyGridComponent } from \"../gui/commonControlPropertyGridComponent\";\r\nimport type { LockObject } from \"shared-ui-components/tabs/propertyGrids/lockObject\";\r\nimport type { ImageBasedSlider } from \"gui/2D/controls/sliders/imageBasedSlider\";\r\nimport { TextInputLineComponent } from \"shared-ui-components/lines/textInputLineComponent\";\r\nimport { TextLineComponent } from \"shared-ui-components/lines/textLineComponent\";\r\nimport { SliderPropertyGridComponent } from \"./sliderPropertyGridComponent\";\r\nimport { makeTargetsProxy } from \"shared-ui-components/lines/targetsProxy\";\r\n\r\nimport thumbImageLinkIcon from \"shared-ui-components/imgs/thumbImageLinkIcon.svg\";\r\nimport valueBarImageLinkIcon from \"shared-ui-components/imgs/valueBarImageLinkIcon.svg\";\r\nimport sliderBackgroundImageIcon from \"shared-ui-components/imgs/sliderBackgroundImageIcon.svg\";\r\nimport { IconComponent } from \"shared-ui-components/lines/iconComponent\";\r\nimport type { GlobalState } from \"../../../../globalState\";\r\n\r\ninterface IImageBasedSliderPropertyGridComponentProps {\r\n    imageBasedSliders: ImageBasedSlider[];\r\n    lockObject: LockObject;\r\n    onPropertyChangedObservable?: Observable<PropertyChangedEvent>;\r\n    onFontsParsedObservable?: Observable<void>;\r\n    globalState?: GlobalState;\r\n}\r\n\r\nexport class ImageBasedSliderPropertyGridComponent extends React.Component<IImageBasedSliderPropertyGridComponentProps> {\r\n    constructor(props: IImageBasedSliderPropertyGridComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    override render() {\r\n        const imageBasedSliders = this.props.imageBasedSliders;\r\n\r\n        return (\r\n            <div className=\"pane\">\r\n                <CommonControlPropertyGridComponent\r\n                    lockObject={this.props.lockObject}\r\n                    controls={imageBasedSliders}\r\n                    onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    onFontsParsedObservable={this.props.onFontsParsedObservable}\r\n                    globalState={this.props.globalState}\r\n                />\r\n                <hr />\r\n                <TextLineComponent label=\"IMAGE LINKS\" value=\" \" color=\"grey\"></TextLineComponent>\r\n                <div className=\"ge-divider\">\r\n                    <IconComponent icon={thumbImageLinkIcon} label=\"Thumb Image Link\" />\r\n                    <TextInputLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        target={makeTargetsProxy(\r\n                            imageBasedSliders.map((slider) => slider.thumbImage),\r\n                            this.props.onPropertyChangedObservable\r\n                        )}\r\n                        label=\"\"\r\n                        propertyName=\"source\"\r\n                    />\r\n                </div>\r\n                <div className=\"ge-divider\">\r\n                    <IconComponent icon={valueBarImageLinkIcon} label=\"Value Bar Image Link\" />\r\n                    <TextInputLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        target={makeTargetsProxy(\r\n                            imageBasedSliders.map((slider) => slider.valueBarImage),\r\n                            this.props.onPropertyChangedObservable\r\n                        )}\r\n                        label=\"\"\r\n                        propertyName=\"source\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                </div>\r\n                <div className=\"ge-divider\">\r\n                    <IconComponent icon={sliderBackgroundImageIcon} label=\"Background Image Link\" />\r\n                    <TextInputLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        target={makeTargetsProxy(\r\n                            imageBasedSliders.map((slider) => slider.backgroundImage),\r\n                            this.props.onPropertyChangedObservable\r\n                        )}\r\n                        label=\"\"\r\n                        propertyName=\"source\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                </div>\r\n                <SliderPropertyGridComponent sliders={imageBasedSliders} lockObject={this.props.lockObject} onPropertyChangedObservable={this.props.onPropertyChangedObservable} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
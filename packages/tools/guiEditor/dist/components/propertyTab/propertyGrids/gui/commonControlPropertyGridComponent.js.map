{"version":3,"file":"commonControlPropertyGridComponent.js","sourceRoot":"","sources":["../../../../../src/components/propertyTab/propertyGrids/gui/commonControlPropertyGridComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport type { Observable, Observer } from \"core/Misc/observable\";\r\nimport type { PropertyChangedEvent } from \"shared-ui-components/propertyChangedEvent\";\r\nimport { TextLineComponent } from \"shared-ui-components/lines/textLineComponent\";\r\nimport { Control } from \"gui/2D/controls/control\";\r\nimport { SliderLineComponent } from \"shared-ui-components/lines/sliderLineComponent\";\r\nimport { TextInputLineComponent } from \"shared-ui-components/lines/textInputLineComponent\";\r\nimport type { LockObject } from \"shared-ui-components/tabs/propertyGrids/lockObject\";\r\nimport { CommandButtonComponent } from \"../../../commandButtonComponent\";\r\nimport type { Image } from \"gui/2D/controls/image\";\r\nimport type { TextBlock } from \"gui/2D/controls/textBlock\";\r\nimport { Container } from \"gui/2D/controls/container\";\r\nimport { CheckBoxLineComponent } from \"shared-ui-components/lines/checkBoxLineComponent\";\r\nimport { ValueAndUnit } from \"gui/2D/valueAndUnit\";\r\nimport { ColorLine } from \"shared-ui-components/lines/colorLineComponent\";\r\nimport { makeTargetsProxy, conflictingValuesPlaceholder } from \"shared-ui-components/lines/targetsProxy\";\r\nimport type { DimensionProperties } from \"../../../../diagram/coordinateHelper\";\r\nimport { CoordinateHelper } from \"../../../../diagram/coordinateHelper\";\r\nimport { Vector2 } from \"core/Maths/math\";\r\n\r\nimport type { Nullable } from \"core/types\";\r\nimport { IconComponent } from \"shared-ui-components/lines/iconComponent\";\r\nimport { OptionsLineComponent } from \"shared-ui-components/components/lines/OptionsLineComponent\";\r\n\r\nimport sizeIcon from \"shared-ui-components/imgs/sizeIcon.svg\";\r\nimport verticalMarginIcon from \"shared-ui-components/imgs/verticalMarginIcon.svg\";\r\nimport positionIcon from \"shared-ui-components/imgs/positionIcon.svg\";\r\nimport fontFamilyIcon from \"shared-ui-components/imgs/fontFamilyIcon.svg\";\r\nimport alphaIcon from \"shared-ui-components/imgs/alphaIcon.svg\";\r\nimport fontSizeIcon from \"shared-ui-components/imgs/fontSizeIcon.svg\";\r\nimport fontStyleIcon from \"shared-ui-components/imgs/fontStyleIcon.svg\";\r\nimport fontWeightIcon from \"shared-ui-components/imgs/fontWeightIcon.svg\";\r\nimport rotationIcon from \"shared-ui-components/imgs/rotationIcon.svg\";\r\nimport pivotIcon from \"shared-ui-components/imgs/pivotIcon.svg\";\r\nimport scaleIcon from \"shared-ui-components/imgs/scaleIcon.svg\";\r\nimport shadowBlurIcon from \"shared-ui-components/imgs/shadowBlurIcon.svg\";\r\nimport horizontalMarginIcon from \"shared-ui-components/imgs/horizontalMarginIcon.svg\";\r\nimport shadowColorIcon from \"shared-ui-components/imgs/shadowColorIcon.svg\";\r\nimport shadowOffsetXIcon from \"shared-ui-components/imgs/shadowOffsetXIcon.svg\";\r\nimport colorIcon from \"shared-ui-components/imgs/colorIcon.svg\";\r\nimport fillColorIcon from \"shared-ui-components/imgs/fillColorIcon.svg\";\r\nimport linkedMeshOffsetIcon from \"shared-ui-components/imgs/linkedMeshOffsetIcon.svg\";\r\nimport visibleIcon from \"../../../../imgs/visibilityActiveIcon.svg\";\r\nimport addIcon from \"shared-ui-components/imgs/addGridElementDark.svg\";\r\nimport removeIcon from \"shared-ui-components/imgs/deleteGridElementDark.svg\";\r\nimport adtIcon from \"../../../../imgs/adtIcon.svg\";\r\n\r\nimport hAlignCenterIcon from \"shared-ui-components/imgs/hAlignCenterIcon.svg\";\r\nimport hAlignLeftIcon from \"shared-ui-components/imgs/hAlignLeftIcon.svg\";\r\nimport hAlignRightIcon from \"shared-ui-components/imgs/hAlignRightIcon.svg\";\r\nimport vAlignCenterIcon from \"shared-ui-components/imgs/vAlignCenterIcon.svg\";\r\nimport vAlignTopIcon from \"shared-ui-components/imgs/vAlignTopIcon.svg\";\r\nimport vAlignBottomIcon from \"shared-ui-components/imgs/vAlignBottomIcon.svg\";\r\nimport descendantsOnlyPaddingIcon from \"shared-ui-components/imgs/descendantsOnlyPaddingIcon.svg\";\r\nimport type { StackPanel } from \"gui/2D/controls/stackPanel\";\r\nimport { FloatLineComponent } from \"shared-ui-components/lines/floatLineComponent\";\r\nimport { UnitButton } from \"shared-ui-components/lines/unitButton\";\r\nimport type { IInspectableOptions } from \"core/Misc/iInspectable\";\r\n\r\nimport { WorkbenchComponent } from \"../../../../diagram/workbench\";\r\nimport type { GlobalState } from \"../../../../globalState\";\r\nimport { Popup } from \"shared-ui-components/lines/popup\";\r\n\r\ninterface ICommonControlPropertyGridComponentProps {\r\n    controls: Control[];\r\n    lockObject: LockObject;\r\n    onPropertyChangedObservable?: Observable<PropertyChangedEvent>;\r\n    hideDimensions?: boolean;\r\n    onFontsParsedObservable?: Observable<void>;\r\n    globalState?: GlobalState;\r\n}\r\ninterface ICommonControlPropertyGridComponentState {\r\n    fontFamilyOptions: IInspectableOptions[];\r\n}\r\n\r\ntype ControlProperty = keyof Control | \"_paddingLeft\" | \"_paddingRight\" | \"_paddingTop\" | \"_paddingBottom\" | \"_fontSize\" | \"_linkOffsetX\" | \"_linkOffsetY\";\r\n\r\nexport class CommonControlPropertyGridComponent extends React.Component<ICommonControlPropertyGridComponentProps, ICommonControlPropertyGridComponentState> {\r\n    private _onPropertyChangedObserver: Nullable<Observer<PropertyChangedEvent>> | undefined;\r\n    private _onFontsParsedObserver: Nullable<Observer<void>> | undefined;\r\n    private _onControlVisibilityChangedObservers: Array<Nullable<Observer<boolean>>> = [];\r\n\r\n    constructor(props: ICommonControlPropertyGridComponentProps) {\r\n        super(props);\r\n        this.state = {\r\n            fontFamilyOptions: JSON.parse(String(window.sessionStorage.getItem(\"fonts\"))) ?? [\r\n                { label: \"Arial\", value: 1 },\r\n                { label: \"Verdana\", value: 2 },\r\n                { label: \"Helvetica\", value: 3 },\r\n                { label: \"Trebuchet MS\", value: 4 },\r\n                { label: \"Times New Roman\", value: 5 },\r\n                { label: \"Georgia\", value: 6 },\r\n                { label: \"Garamond\", value: 7 },\r\n                { label: \"Courier New\", value: 8 },\r\n                { label: \"Brush Script MT\", value: 9 },\r\n            ],\r\n        };\r\n\r\n        const controls = this.props.controls;\r\n        for (const control of controls) {\r\n            const transformed = this._getTransformedReferenceCoordinate(control);\r\n            if (!control.metadata) {\r\n                control.metadata = {};\r\n            }\r\n            control.metadata._previousCenter = transformed;\r\n            const visibilityObserver = control.onIsVisibleChangedObservable.add(() => {\r\n                this.forceUpdate();\r\n            });\r\n            this._onControlVisibilityChangedObservers.push(visibilityObserver);\r\n        }\r\n        this._onFontsParsedObserver = this.props.onFontsParsedObservable?.add(() => {\r\n            this._checkFontsInLayout();\r\n        });\r\n        this._onPropertyChangedObserver = this.props.onPropertyChangedObservable?.add((event) => {\r\n            const isTransformEvent = event.property === \"transformCenterX\" || event.property === \"transformCenterY\";\r\n            for (const control of controls) {\r\n                let transformed = this._getTransformedReferenceCoordinate(control);\r\n                if (isTransformEvent && control.metadata._previousCenter) {\r\n                    // Calculate the difference between current center and previous center\r\n                    const diff = transformed.subtract(control.metadata._previousCenter);\r\n                    control.leftInPixels -= diff.x;\r\n                    control.topInPixels -= diff.y;\r\n\r\n                    // Update center in reference to left and top positions\r\n                    transformed = this._getTransformedReferenceCoordinate(control);\r\n                }\r\n\r\n                control.metadata._previousCenter = transformed;\r\n\r\n                if (control.getClassName() === \"TextBlock\" && (event.property === \"width\" || event.property === \"height\")) {\r\n                    (control as TextBlock).resizeToFit = false;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    override componentWillMount() {\r\n        this._checkFontsInLayout();\r\n    }\r\n\r\n    private _checkFontsInLayout() {\r\n        const correctFonts: IInspectableOptions[] = [];\r\n        for (const font of this.state.fontFamilyOptions.values()) {\r\n            if (document.fonts.check(`12px \"${font.label}\"`) && font.label != \"Custom Font\") {\r\n                correctFonts.push(font);\r\n            }\r\n        }\r\n\r\n        const moreFonts = WorkbenchComponent.addedFonts;\r\n        for (let i = 0; i < moreFonts.length; i++) {\r\n            const fontName = moreFonts[i].trim();\r\n            correctFonts.push({ label: fontName, value: fontName });\r\n        }\r\n        this.setState({\r\n            fontFamilyOptions: correctFonts,\r\n        });\r\n        window.sessionStorage.setItem(\"fonts\", JSON.stringify(correctFonts));\r\n    }\r\n\r\n    private _addFont(fontValue: string) {\r\n        const fontName = fontValue.trim();\r\n        if (fontName.length > 0) {\r\n            if (!this.state.fontFamilyOptions.find(({ value }) => value === fontValue)) {\r\n                this.setState((state) => {\r\n                    state.fontFamilyOptions.push({ label: fontName, value: fontName });\r\n                    return state;\r\n                }, this._checkFontsInLayout);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _getTransformedReferenceCoordinate(control: Control) {\r\n        const nodeMatrix = CoordinateHelper.GetNodeMatrix(control);\r\n        const transformed = new Vector2(1, 1);\r\n        nodeMatrix.transformCoordinates(1, 1, transformed);\r\n        return transformed;\r\n    }\r\n\r\n    private _updateAlignment(alignment: string, value: number) {\r\n        for (const control of this.props.controls) {\r\n            if (control.typeName === \"TextBlock\" && (control as TextBlock).resizeToFit === false) {\r\n                (control as any)[\"text\" + alignment.charAt(0).toUpperCase() + alignment.slice(1)] = value;\r\n            } else {\r\n                (control as any)[alignment] = value;\r\n            }\r\n        }\r\n        this.forceUpdate();\r\n    }\r\n\r\n    private _checkAndUpdateValues(propertyName: string, value: string) {\r\n        for (const control of this.props.controls) {\r\n            // checking the previous value unit to see what it was.\r\n            const vau = (control as any)[\"_\" + propertyName];\r\n            let percentage = (vau as ValueAndUnit).isPercentage;\r\n\r\n            // now checking if the new string contains either a px or a % sign in case we need to change the unit.\r\n            const negative = value.charAt(0) === \"-\";\r\n            if (value.charAt(value.length - 1) === \"%\") {\r\n                percentage = true;\r\n            } else if (value.charAt(value.length - 1) === \"x\" && value.charAt(value.length - 2) === \"p\") {\r\n                percentage = false;\r\n            }\r\n\r\n            if (control.parent?.typeName === \"StackPanel\") {\r\n                percentage = false;\r\n            }\r\n\r\n            let newValue = value.match(/([\\d.,]+)/g)?.[0];\r\n            if (!newValue) {\r\n                newValue = \"0\";\r\n            }\r\n            newValue = (negative ? \"-\" : \"\") + newValue;\r\n            newValue += percentage ? \"%\" : \"px\";\r\n\r\n            const initialValue = (control as any)[propertyName];\r\n            (control as any)[propertyName] = newValue;\r\n            this.props.onPropertyChangedObservable?.notifyObservers({\r\n                object: control,\r\n                property: propertyName,\r\n                initialValue: initialValue,\r\n                value: (control as any)[propertyName],\r\n            });\r\n        }\r\n    }\r\n\r\n    private _addOrUpdateMetadata(options: { [key: string]: any }) {\r\n        for (const control of this.props.controls) {\r\n            const initialValue = control.metadata;\r\n            // Convert strings to their proper types\r\n            for (const key in options) {\r\n                const v = options[key];\r\n                if (!isNaN(v) && !isNaN(parseFloat(v))) {\r\n                    options[key] = parseFloat(v);\r\n                } else if (v.trim() === \"true\") {\r\n                    options[key] = true;\r\n                } else if (v.trim() === \"false\") {\r\n                    options[key] = false;\r\n                }\r\n            }\r\n            const newValue = Object.assign({}, control.metadata, options);\r\n            control.metadata = newValue;\r\n            this.props.onPropertyChangedObservable?.notifyObservers({\r\n                object: control,\r\n                property: \"metadata\",\r\n                initialValue: initialValue,\r\n                value: newValue,\r\n            });\r\n        }\r\n    }\r\n\r\n    private _removeFromMetadata(key: string) {\r\n        for (const control of this.props.controls) {\r\n            const initialValue = Object.assign({}, control.metadata);\r\n            delete control.metadata[key];\r\n            this.props.onPropertyChangedObservable?.notifyObservers({\r\n                object: control,\r\n                property: \"metadata\",\r\n                initialValue: initialValue,\r\n                value: control.metadata,\r\n            });\r\n        }\r\n    }\r\n\r\n    private _getCommonPropertyKeys(objects: {}[]) {\r\n        objects = objects.filter((x) => !!x);\r\n        if (objects.length === 0) return [];\r\n        if (objects.length === 1) {\r\n            return Object.keys(objects[0]);\r\n        }\r\n        const [firstObject, ...restObjects] = objects;\r\n        return Object.keys(firstObject).filter((property) => {\r\n            return restObjects.every((obj) => property in obj);\r\n        });\r\n    }\r\n\r\n    private _markChildrenAsDirty() {\r\n        for (const control of this.props.controls) {\r\n            if (control instanceof Container)\r\n                (control as Container)._children.forEach((child) => {\r\n                    child._markAsDirty();\r\n                });\r\n        }\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        if (this._onPropertyChangedObserver) {\r\n            this.props.onPropertyChangedObservable?.remove(this._onPropertyChangedObserver);\r\n        }\r\n        if (this._onFontsParsedObserver) {\r\n            this.props.onFontsParsedObservable?.remove(this._onFontsParsedObserver);\r\n        }\r\n        for (let i = 0; i < this._onControlVisibilityChangedObservers.length; i++) {\r\n            this.props.controls[i].onIsVisibleChangedObservable.remove(this._onControlVisibilityChangedObservers[i]);\r\n        }\r\n    }\r\n\r\n    _filterFontDuplicates(array: { label: string; value: string; id: string }[]) {\r\n        const seen = new Set();\r\n        return array.filter((item) => {\r\n            const val = item.value;\r\n            const duplicate = seen.has(val);\r\n            seen.add(val);\r\n            return !duplicate;\r\n        });\r\n    }\r\n\r\n    override render() {\r\n        const controls = this.props.controls;\r\n        const firstControl = controls[0];\r\n        let horizontalAlignment = firstControl.horizontalAlignment;\r\n        let verticalAlignment = firstControl.verticalAlignment;\r\n        for (const control of controls) {\r\n            if (control.horizontalAlignment !== horizontalAlignment) {\r\n                horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n            }\r\n            if (control.verticalAlignment !== verticalAlignment) {\r\n                verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            }\r\n        }\r\n        if (controls.every((control) => control.typeName === \"TextBlock\" && (control as TextBlock).resizeToFit === false)) {\r\n            horizontalAlignment = (firstControl as TextBlock).textHorizontalAlignment;\r\n            verticalAlignment = (firstControl as TextBlock).textVerticalAlignment;\r\n        }\r\n\r\n        const showTextProperties =\r\n            firstControl instanceof Container || firstControl.typeName === \"TextBlock\" || firstControl.typeName === \"InputText\" || firstControl.typeName === \"InputPassword\";\r\n\r\n        const proxy = makeTargetsProxy(controls, this.props.onPropertyChangedObservable);\r\n        const getValue = (propertyName: ControlProperty) => {\r\n            const values = controls.map((control) => control[propertyName]._value);\r\n            const firstValue = values[0];\r\n            if (values.every((value: any) => value === firstValue)) {\r\n                const units = getUnitString(propertyName);\r\n                if (units === \"%\") {\r\n                    return (firstValue * 100).toFixed(2);\r\n                } else if (units === \"PX\") {\r\n                    return firstValue.toFixed(2);\r\n                } else {\r\n                    return conflictingValuesPlaceholder;\r\n                }\r\n            } else {\r\n                return conflictingValuesPlaceholder;\r\n            }\r\n        };\r\n        const getUnitString = (propertyName: ControlProperty) => {\r\n            const units = controls.map((control) => control[propertyName]._unit);\r\n            const firstUnit = units[0];\r\n            if (units.every((unit: any) => unit === firstUnit)) {\r\n                if (firstUnit === ValueAndUnit.UNITMODE_PIXEL) {\r\n                    return \"PX\";\r\n                } else {\r\n                    return \"%\";\r\n                }\r\n            } else {\r\n                return conflictingValuesPlaceholder;\r\n            }\r\n        };\r\n        const increment = (propertyName: DimensionProperties, amount: number, minimum?: number, maximum?: number) => {\r\n            for (const control of controls) {\r\n                const initialValue = control[propertyName];\r\n                const initialUnit = (control as any)[\"_\" + propertyName]._unit;\r\n                let newValue: number = (control as any)[`${propertyName}InPixels`] + amount;\r\n                if (minimum !== undefined && newValue < minimum) newValue = minimum;\r\n                if (maximum !== undefined && newValue > maximum) newValue = maximum;\r\n                (control as any)[`${propertyName}InPixels`] = newValue;\r\n                if (initialUnit === ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n                    CoordinateHelper.ConvertToPercentage(control, [propertyName]);\r\n                }\r\n                this.props.onPropertyChangedObservable?.notifyObservers({\r\n                    object: control,\r\n                    property: propertyName,\r\n                    initialValue: initialValue,\r\n                    value: control[propertyName],\r\n                });\r\n            }\r\n        };\r\n        const convertUnits = (unit: string, property: DimensionProperties) => {\r\n            for (const control of controls) {\r\n                if (unit === \"PX\") {\r\n                    CoordinateHelper.ConvertToPercentage(control, [property], this.props.onPropertyChangedObservable);\r\n                } else {\r\n                    CoordinateHelper.ConvertToPixels(control, [property], this.props.onPropertyChangedObservable);\r\n                }\r\n            }\r\n        };\r\n\r\n        const fontStyleOptions = [\r\n            { label: \"normal\", value: \"normal\", id: \"0\" },\r\n            { label: \"italic\", value: \"italic\", id: \"1\" },\r\n            { label: \"oblique\", value: \"oblique\", id: \"2\" },\r\n        ];\r\n\r\n        let horizontalDisabled = false,\r\n            verticalDisabled = false,\r\n            widthUnitsLocked = false,\r\n            heightUnitsLocked = false;\r\n\r\n        const parent = controls[0].parent;\r\n\r\n        const fonts = this._filterFontDuplicates(\r\n            this.state.fontFamilyOptions.filter(({ label }) => label !== \"Custom Font\").map(({ label, value }) => ({ label, value: label, id: value.toString() }))\r\n        );\r\n\r\n        if (parent?.getClassName() === \"StackPanel\" || parent?.getClassName() === \"VirtualKeyboard\") {\r\n            if ((parent as StackPanel).isVertical) {\r\n                verticalDisabled = true;\r\n                heightUnitsLocked = true;\r\n            } else {\r\n                horizontalDisabled = true;\r\n                widthUnitsLocked = true;\r\n            }\r\n        }\r\n        return (\r\n            <div>\r\n                {!this.props.hideDimensions && (\r\n                    <>\r\n                        <div className=\"ge-divider alignment-bar\">\r\n                            <CommandButtonComponent\r\n                                tooltip=\"Left\"\r\n                                icon={hAlignLeftIcon}\r\n                                shortcut=\"\"\r\n                                isActive={horizontalAlignment === Control.HORIZONTAL_ALIGNMENT_LEFT}\r\n                                onClick={() => {\r\n                                    this._updateAlignment(\"horizontalAlignment\", Control.HORIZONTAL_ALIGNMENT_LEFT);\r\n                                }}\r\n                                disabled={horizontalDisabled}\r\n                            />\r\n                            <CommandButtonComponent\r\n                                tooltip=\"Center\"\r\n                                icon={hAlignCenterIcon}\r\n                                shortcut=\"\"\r\n                                isActive={horizontalAlignment === Control.HORIZONTAL_ALIGNMENT_CENTER}\r\n                                onClick={() => {\r\n                                    this._updateAlignment(\"horizontalAlignment\", Control.HORIZONTAL_ALIGNMENT_CENTER);\r\n                                }}\r\n                                disabled={horizontalDisabled}\r\n                            />\r\n                            <CommandButtonComponent\r\n                                tooltip=\"Right\"\r\n                                icon={hAlignRightIcon}\r\n                                shortcut=\"\"\r\n                                isActive={horizontalAlignment === Control.HORIZONTAL_ALIGNMENT_RIGHT}\r\n                                onClick={() => {\r\n                                    this._updateAlignment(\"horizontalAlignment\", Control.HORIZONTAL_ALIGNMENT_RIGHT);\r\n                                }}\r\n                                disabled={horizontalDisabled}\r\n                            />\r\n                            <CommandButtonComponent\r\n                                tooltip=\"Top\"\r\n                                icon={vAlignTopIcon}\r\n                                shortcut=\"\"\r\n                                isActive={verticalAlignment === Control.VERTICAL_ALIGNMENT_TOP}\r\n                                onClick={() => {\r\n                                    this._updateAlignment(\"verticalAlignment\", Control.VERTICAL_ALIGNMENT_TOP);\r\n                                }}\r\n                                disabled={verticalDisabled}\r\n                            />\r\n                            <CommandButtonComponent\r\n                                tooltip=\"Center\"\r\n                                icon={vAlignCenterIcon}\r\n                                shortcut=\"\"\r\n                                isActive={verticalAlignment === Control.VERTICAL_ALIGNMENT_CENTER}\r\n                                onClick={() => {\r\n                                    this._updateAlignment(\"verticalAlignment\", Control.VERTICAL_ALIGNMENT_CENTER);\r\n                                }}\r\n                                disabled={verticalDisabled}\r\n                            />\r\n                            <CommandButtonComponent\r\n                                tooltip=\"Bottom\"\r\n                                icon={vAlignBottomIcon}\r\n                                shortcut=\"\"\r\n                                isActive={verticalAlignment === Control.VERTICAL_ALIGNMENT_BOTTOM}\r\n                                onClick={() => {\r\n                                    this._updateAlignment(\"verticalAlignment\", Control.VERTICAL_ALIGNMENT_BOTTOM);\r\n                                }}\r\n                                disabled={verticalDisabled}\r\n                            />\r\n                        </div>\r\n                        <div className=\"ge-divider double\">\r\n                            <IconComponent icon={positionIcon} label={\"Position\"} />\r\n                            <TextInputLineComponent\r\n                                numbersOnly={true}\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"X\"\r\n                                delayInput={true}\r\n                                value={getValue(\"_left\")}\r\n                                onChange={(newValue) => this._checkAndUpdateValues(\"left\", newValue)}\r\n                                unit={<UnitButton unit={getUnitString(\"_left\")} onClick={(unit) => convertUnits(unit, \"left\")} />}\r\n                                arrows={true}\r\n                                arrowsIncrement={(amount) => increment(\"left\", amount)}\r\n                            />\r\n                            <TextInputLineComponent\r\n                                numbersOnly={true}\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"Y\"\r\n                                delayInput={true}\r\n                                value={getValue(\"_top\")}\r\n                                onChange={(newValue) => this._checkAndUpdateValues(\"top\", newValue)}\r\n                                unit={<UnitButton unit={getUnitString(\"_top\")} onClick={(unit) => convertUnits(unit, \"top\")} />}\r\n                                arrows={true}\r\n                                arrowsIncrement={(amount) => increment(\"top\", amount)}\r\n                            />\r\n                        </div>\r\n                        <div className=\"ge-divider double\">\r\n                            <IconComponent icon={sizeIcon} label={\"Size\"} />\r\n                            <TextInputLineComponent\r\n                                numbersOnly={true}\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"W\"\r\n                                delayInput={true}\r\n                                value={getValue(\"_width\")}\r\n                                onChange={(newValue) => {\r\n                                    for (const control of controls) {\r\n                                        if (control.typeName === \"Image\") {\r\n                                            (control as Image).autoScale = false;\r\n                                        } else if (control instanceof Container) {\r\n                                            (control as Container).adaptWidthToChildren = false;\r\n                                        } else if (control.typeName === \"ColorPicker\") {\r\n                                            if (newValue === \"0\" || newValue === \"-\") {\r\n                                                newValue = \"1\";\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    this._checkAndUpdateValues(\"width\", newValue);\r\n                                }}\r\n                                unit={<UnitButton unit={getUnitString(\"_width\")} locked={widthUnitsLocked} onClick={(unit) => convertUnits(unit, \"width\")} />}\r\n                                arrows={true}\r\n                                arrowsIncrement={(amount) => increment(\"width\", amount)}\r\n                            />\r\n                            <TextInputLineComponent\r\n                                numbersOnly={true}\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"H\"\r\n                                delayInput={true}\r\n                                value={getValue(\"_height\")}\r\n                                onChange={(newValue) => {\r\n                                    for (const control of controls) {\r\n                                        if (control.typeName === \"Image\") {\r\n                                            (control as Image).autoScale = false;\r\n                                        } else if (control instanceof Container) {\r\n                                            (control as Container).adaptHeightToChildren = false;\r\n                                        } else if (control.typeName === \"ColorPicker\") {\r\n                                            if (newValue === \"0\" || newValue === \"-\") {\r\n                                                newValue = \"1\";\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    this._checkAndUpdateValues(\"height\", newValue);\r\n                                }}\r\n                                unit={<UnitButton unit={getUnitString(\"_height\")} locked={heightUnitsLocked} onClick={(unit) => convertUnits(unit, \"height\")} />}\r\n                                arrows={true}\r\n                                arrowsIncrement={(amount) => increment(\"height\", amount)}\r\n                            />\r\n                        </div>\r\n                        <div className=\"ge-divider double\">\r\n                            <IconComponent icon={verticalMarginIcon} label={\"Vertical Padding\"} />\r\n                            <TextInputLineComponent\r\n                                numbersOnly={true}\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"T\"\r\n                                delayInput={true}\r\n                                value={getValue(\"_paddingTop\")}\r\n                                onChange={(newValue) => {\r\n                                    this._checkAndUpdateValues(\"paddingTop\", newValue);\r\n                                    this._markChildrenAsDirty();\r\n                                }}\r\n                                unit={<UnitButton unit={getUnitString(\"_paddingTop\")} onClick={(unit) => convertUnits(unit, \"paddingTop\")} />}\r\n                                arrows={true}\r\n                                arrowsIncrement={(amount) => increment(\"paddingTop\", amount, 0)}\r\n                            />\r\n                            <TextInputLineComponent\r\n                                numbersOnly={true}\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"B\"\r\n                                delayInput={true}\r\n                                value={getValue(\"_paddingBottom\")}\r\n                                onChange={(newValue) => {\r\n                                    this._checkAndUpdateValues(\"paddingBottom\", newValue);\r\n                                    this._markChildrenAsDirty();\r\n                                }}\r\n                                unit={<UnitButton unit={getUnitString(\"_paddingBottom\")} onClick={(unit) => convertUnits(unit, \"paddingBottom\")} />}\r\n                                arrows={true}\r\n                                arrowsIncrement={(amount) => increment(\"paddingBottom\", amount, 0)}\r\n                            />\r\n                        </div>\r\n                        <div className=\"ge-divider double\">\r\n                            <IconComponent icon={horizontalMarginIcon} label={\"Horizontal Padding\"} />\r\n                            <TextInputLineComponent\r\n                                numbersOnly={true}\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"L\"\r\n                                delayInput={true}\r\n                                value={getValue(\"_paddingLeft\")}\r\n                                onChange={(newValue) => {\r\n                                    this._checkAndUpdateValues(\"paddingLeft\", newValue);\r\n                                    this._markChildrenAsDirty();\r\n                                }}\r\n                                unit={<UnitButton unit={getUnitString(\"_paddingLeft\")} onClick={(unit) => convertUnits(unit, \"paddingLeft\")} />}\r\n                                arrows={true}\r\n                                arrowsIncrement={(amount) => increment(\"paddingLeft\", amount)}\r\n                            />\r\n                            <TextInputLineComponent\r\n                                numbersOnly={true}\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"R\"\r\n                                delayInput={true}\r\n                                value={getValue(\"_paddingRight\")}\r\n                                onChange={(newValue) => {\r\n                                    this._checkAndUpdateValues(\"paddingRight\", newValue);\r\n                                    this._markChildrenAsDirty();\r\n                                }}\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                                unit={<UnitButton unit={getUnitString(\"_paddingRight\")} onClick={(unit) => convertUnits(unit, \"paddingRight\")} />}\r\n                                arrows={true}\r\n                                arrowsIncrement={(amount) => increment(\"paddingRight\", amount)}\r\n                            />\r\n                        </div>\r\n                        <div className=\"ge-divider\">\r\n                            <IconComponent icon={descendantsOnlyPaddingIcon} label={\"Makes padding affect only the descendants of this control\"} />\r\n                            <CheckBoxLineComponent label=\"ONLY PAD DESCENDANTS\" target={proxy} propertyName=\"descendentsOnlyPadding\" />\r\n                        </div>\r\n                        <hr className=\"ge\" />\r\n                    </>\r\n                )}\r\n                {parent?.name === \"root\" && (\r\n                    <>\r\n                        <TextLineComponent label=\"LINK OFFSET\" value=\" \" color=\"grey\"></TextLineComponent>\r\n                        <div className=\"ge-divider double\">\r\n                            <IconComponent icon={linkedMeshOffsetIcon} label={\"Link offset\"} />\r\n                            <TextInputLineComponent\r\n                                numbersOnly={true}\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"X\"\r\n                                delayInput={true}\r\n                                value={getValue(\"_linkOffsetX\")}\r\n                                onChange={(newValue) => this._checkAndUpdateValues(\"linkOffsetX\", newValue)}\r\n                                unit={<UnitButton unit={getUnitString(\"_linkOffsetX\")} onClick={(unit) => convertUnits(unit, \"linkOffsetX\")} />}\r\n                                arrows={true}\r\n                                arrowsIncrement={(amount) => increment(\"linkOffsetX\", amount)}\r\n                            />\r\n                            <TextInputLineComponent\r\n                                numbersOnly={true}\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"Y\"\r\n                                delayInput={true}\r\n                                value={getValue(\"_linkOffsetY\")}\r\n                                onChange={(newValue) => this._checkAndUpdateValues(\"linkOffsetY\", newValue)}\r\n                                unit={<UnitButton unit={getUnitString(\"_linkOffsetY\")} onClick={(unit) => convertUnits(unit, \"linkOffsetY\")} />}\r\n                                arrows={true}\r\n                                arrowsIncrement={(amount) => increment(\"linkOffsetY\", amount)}\r\n                            />\r\n                        </div>\r\n                        <hr className=\"ge\" />\r\n                    </>\r\n                )}\r\n                <TextLineComponent tooltip=\"\" label=\"SERIALIZATION\" value=\" \" color=\"grey\"></TextLineComponent>\r\n                <div className=\"ge-divider\">\r\n                    <IconComponent icon={adtIcon} label={\"Serializable\"} />\r\n                    <CheckBoxLineComponent label=\"ISSERIALIZABLE\" target={proxy} propertyName=\"isSerializable\" />\r\n                </div>\r\n                <TextLineComponent tooltip=\"\" label=\"VISIBILITY\" value=\" \" color=\"grey\"></TextLineComponent>\r\n                <div className=\"ge-divider\">\r\n                    <IconComponent icon={visibleIcon} label={\"Visible\"} />\r\n                    <CheckBoxLineComponent label=\"ISVISIBLE\" target={proxy} propertyName=\"isVisible\" onPropertyChangedObservable={this.props.onPropertyChangedObservable} />\r\n                </div>\r\n                <TextLineComponent tooltip=\"\" label=\"TRANSFORMATION\" value=\" \" color=\"grey\"></TextLineComponent>\r\n                <div className=\"ge-divider double\">\r\n                    <IconComponent icon={scaleIcon} label={\"Scale\"} />\r\n                    <FloatLineComponent lockObject={this.props.lockObject} label=\"X\" target={proxy} propertyName=\"scaleX\" arrows={true} digits={2} step=\"0.0005\" />\r\n                    <FloatLineComponent lockObject={this.props.lockObject} label=\"Y\" target={proxy} propertyName=\"scaleY\" arrows={true} digits={2} step=\"0.0005\" />\r\n                </div>\r\n                <div className=\"ge-divider double\">\r\n                    <IconComponent icon={pivotIcon} label={\"Transform Center\"} />\r\n                    <FloatLineComponent lockObject={this.props.lockObject} label=\"X\" target={proxy} propertyName=\"transformCenterX\" arrows={true} digits={2} step=\"0.0005\" />\r\n                    <FloatLineComponent lockObject={this.props.lockObject} label=\"Y\" target={proxy} propertyName=\"transformCenterY\" arrows={true} digits={2} step=\"0.0005\" />\r\n                </div>\r\n                <div className=\"ge-divider\">\r\n                    <IconComponent icon={rotationIcon} label={\"Rotation\"} />\r\n                    <SliderLineComponent\r\n                        iconLabel={\"Rotation\"}\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"\"\r\n                        target={proxy}\r\n                        decimalCount={2}\r\n                        propertyName=\"rotation\"\r\n                        minimum={0}\r\n                        maximum={2 * Math.PI}\r\n                        step={0.01}\r\n                        unit={<UnitButton unit=\"RAD\" locked />}\r\n                    />\r\n                </div>\r\n                <hr className=\"ge\" />\r\n                <TextLineComponent tooltip=\"\" label=\"APPEARANCE\" value=\" \" color=\"grey\" />\r\n                {controls.every(\r\n                    (control) => control.color !== undefined && control.typeName !== \"Image\" && control.typeName !== \"ImageBasedSlider\" && control.typeName !== \"ColorPicker\"\r\n                ) && (\r\n                    <div className=\"ge-divider\">\r\n                        <IconComponent icon={colorIcon} label={\"Outline Color\"} />\r\n                        <ColorLine lockObject={this.props.lockObject} label=\"Outline Color\" target={proxy} propertyName=\"color\" />\r\n                    </div>\r\n                )}\r\n                {controls.every((control) => (control as any).background !== undefined) && (\r\n                    <div className=\"ge-divider\">\r\n                        <IconComponent icon={fillColorIcon} label={\"Background Color\"} />\r\n                        <ColorLine lockObject={this.props.lockObject} label=\"Background Color\" target={proxy} propertyName=\"background\" />\r\n                    </div>\r\n                )}\r\n                <div className=\"ge-divider\">\r\n                    <IconComponent icon={alphaIcon} label={\"Alpha\"} />\r\n                    <SliderLineComponent lockObject={this.props.lockObject} label=\"\" target={proxy} propertyName=\"alpha\" minimum={0} maximum={1} step={0.01} />\r\n                </div>\r\n                <div className=\"ge-divider\">\r\n                    <IconComponent icon={shadowColorIcon} label={\"Shadow Color\"} />\r\n                    <ColorLine lockObject={this.props.lockObject} label=\"\" target={proxy} propertyName=\"shadowColor\" />\r\n                </div>\r\n                <div className=\"ge-divider double\">\r\n                    <IconComponent icon={shadowOffsetXIcon} label={\"Shadow Offset\"} />\r\n                    <FloatLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"X\"\r\n                        target={proxy}\r\n                        propertyName=\"shadowOffsetX\"\r\n                        unit={<UnitButton unit=\"PX\" locked />}\r\n                        arrows={true}\r\n                        step=\"0.1\"\r\n                        digits={2}\r\n                    />\r\n                    <FloatLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"Y\"\r\n                        target={proxy}\r\n                        propertyName=\"shadowOffsetY\"\r\n                        unit={<UnitButton unit=\"PX\" locked />}\r\n                        arrows={true}\r\n                        step=\"0.1\"\r\n                        digits={2}\r\n                    />\r\n                </div>\r\n                <div className=\"ge-divider double\">\r\n                    <IconComponent icon={shadowBlurIcon} label={\"Shadow Blur\"} />\r\n                    <FloatLineComponent lockObject={this.props.lockObject} label=\" \" target={proxy} propertyName=\"shadowBlur\" arrows={true} min={0} digits={2} />\r\n                </div>\r\n                {showTextProperties && (\r\n                    <>\r\n                        <hr className=\"ge\" />\r\n                        <TextLineComponent tooltip=\"\" label=\"FONT STYLE\" value=\" \" color=\"grey\"></TextLineComponent>\r\n                        <div className=\"ge-divider\">\r\n                            <IconComponent icon={fontFamilyIcon} label={\"Font Family\"} />\r\n                            <OptionsLineComponent\r\n                                options={fonts}\r\n                                selectedOptionValue={proxy.fontFamily}\r\n                                onOptionSelected={(selectedFontValue) => {\r\n                                    proxy.fontFamily = selectedFontValue;\r\n                                }}\r\n                                onOptionAdded={({ value }) => {\r\n                                    this._addFont(value);\r\n                                }}\r\n                                addOptionPlaceholder={\"Add new font...\"}\r\n                                validateNewOptionValue={(newFontValue) => {\r\n                                    if (newFontValue.length > 0 && !fonts.find((f) => f.label === newFontValue)) {\r\n                                        return document.fonts.check(`12px ${newFontValue}`);\r\n                                    }\r\n                                    return false;\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div className=\"ge-divider\">\r\n                            <IconComponent icon={fontWeightIcon} label={\"Font Weight\"} />\r\n                            <TextInputLineComponent lockObject={this.props.lockObject} label=\"\" target={proxy} propertyName=\"fontWeight\" />\r\n                        </div>\r\n                        <div className=\"ge-divider\">\r\n                            <IconComponent icon={fontStyleIcon} label={\"Font Style\"} />\r\n                            <OptionsLineComponent\r\n                                options={fontStyleOptions}\r\n                                selectedOptionValue={proxy.fontStyle}\r\n                                onOptionSelected={(value) => {\r\n                                    proxy.fontStyle = value;\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div className=\"ge-divider double\">\r\n                            <IconComponent icon={fontSizeIcon} label={\"Font Size\"} />\r\n                            <TextInputLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"\"\r\n                                numbersOnly={true}\r\n                                value={getValue(\"_fontSize\")}\r\n                                onChange={(newValue) => this._checkAndUpdateValues(\"fontSize\", newValue)}\r\n                                unit={<UnitButton unit={getUnitString(\"_fontSize\")} onClick={(unit) => convertUnits(unit, \"fontSize\")} />}\r\n                                arrows={true}\r\n                                arrowsIncrement={(amount) => increment(\"fontSize\", amount, 0)}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                )}\r\n\r\n                <hr className=\"ge\" />\r\n                <div className=\"ge-divider\">\r\n                    <TextLineComponent tooltip=\"\" label=\"METADATA\" value=\" \" color=\"grey\" />\r\n                    <CommandButtonComponent\r\n                        tooltip=\"Add\"\r\n                        icon={addIcon}\r\n                        isActive={false}\r\n                        onClick={() => {\r\n                            const w = (Popup as any)[\"gui-editor\"] ?? window;\r\n                            const input = w.prompt(\"Enter new key name for metadata value\", \"newKey\");\r\n                            if (input === null || input.trim() === \"\") {\r\n                                return;\r\n                            }\r\n\r\n                            let keyName = input;\r\n                            let num = 1;\r\n                            while (controls.some((x) => keyName in x.metadata)) {\r\n                                num++;\r\n                                keyName = input + num;\r\n                            }\r\n                            this._addOrUpdateMetadata({ [keyName]: \"\" });\r\n                        }}\r\n                    />\r\n                </div>\r\n                {this._getCommonPropertyKeys(controls.map((x) => x.metadata)).map((metaKey) => {\r\n                    if (metaKey === \"guiEditor\" || metaKey.startsWith(\"_\") || metaKey === \"editorUniqueId\") {\r\n                        return;\r\n                    }\r\n\r\n                    const firstControl = controls.find((x) => !!x.metadata);\r\n                    if (!firstControl) {\r\n                        return;\r\n                    }\r\n\r\n                    let value = firstControl.metadata[metaKey];\r\n                    const isNotEditableValue = typeof value === \"object\";\r\n\r\n                    const allValues = controls.map((x) => x.metadata[metaKey]);\r\n                    if (!allValues.every((x) => x === value)) {\r\n                        value = conflictingValuesPlaceholder;\r\n                    }\r\n\r\n                    return (\r\n                        <div key={metaKey}>\r\n                            <div className=\"ge-divider double\">\r\n                                <TextInputLineComponent numbersOnly={false} lockObject={this.props.lockObject} label=\"\" delayInput={true} value={metaKey} disabled={true} />\r\n                                <TextInputLineComponent\r\n                                    numbersOnly={false}\r\n                                    lockObject={this.props.lockObject}\r\n                                    label=\":\"\r\n                                    delayInput={true}\r\n                                    disabled={isNotEditableValue}\r\n                                    value={typeof value === \"string\" ? value : JSON.stringify(value)}\r\n                                    onChange={(x) => this._addOrUpdateMetadata({ [metaKey]: x })}\r\n                                />\r\n                                <CommandButtonComponent tooltip=\"Remove\" icon={removeIcon} isActive={false} onClick={() => this._removeFromMetadata(metaKey)} />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
{"version":3,"file":"guiListComponent.js","sourceRoot":"","sources":["../../../src/components/guiList/guiListComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport * as React from \"react\";\r\nimport type { GlobalState } from \"../../globalState\";\r\nimport { LineContainerComponent } from \"shared-ui-components/lines/lineContainerComponent\";\r\nimport { DraggableLineComponent } from \"shared-ui-components/lines/draggableLineComponent\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\nimport \"./guiList.scss\";\r\n\r\ninterface IGuiListComponentProps {\r\n    globalState: GlobalState;\r\n}\r\n\r\nexport class GuiListComponent extends React.Component<IGuiListComponentProps, { filter: string }> {\r\n    private _onResetRequiredObserver: Nullable<Observer<void>>;\r\n\r\n    private static _Tooltips: { [key: string]: string } = {\r\n        Button: \"A simple button\",\r\n    };\r\n\r\n    constructor(props: IGuiListComponentProps) {\r\n        super(props);\r\n\r\n        this.state = { filter: \"\" };\r\n\r\n        this._onResetRequiredObserver = this.props.globalState.onResetRequiredObservable.add(() => {\r\n            this.forceUpdate();\r\n        });\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        this.props.globalState.onResetRequiredObservable.remove(this._onResetRequiredObserver);\r\n    }\r\n\r\n    filterContent(filter: string) {\r\n        this.setState({ filter: filter });\r\n    }\r\n\r\n    override render() {\r\n        // Block types used to create the menu from\r\n        const allBlocks: any = {\r\n            Buttons: [\"TextButton\", \"ImageButton\"],\r\n            // eslint-disable-next-line @typescript-eslint/naming-convention\r\n            Controls: [\"Slider\", \"Checkbox\", \"ColorPicker\", \"VirtualKeyboard\"],\r\n            Containers: [\"DisplayGrid\", \"Grid\", \"StackPanel\"],\r\n            Shapes: [\"Ellipse\", \"Image\", \"Line\", \"Rectangle\"],\r\n            Inputs: [\"Text\", \"InputText\", \"InputPassword\"],\r\n        };\r\n\r\n        // Create node menu\r\n        const blockMenu = [];\r\n        for (const key in allBlocks) {\r\n            const blockList = (allBlocks as any)[key]\r\n                .filter((b: string) => !this.state.filter || b.toLowerCase().indexOf(this.state.filter.toLowerCase()) !== -1)\r\n                .sort((a: string, b: string) => a.localeCompare(b))\r\n                .map((block: any) => {\r\n                    return <DraggableLineComponent key={block} format={\"babylonjs-gui-node\"} data={block} tooltip={GuiListComponent._Tooltips[block] || \"\"} />;\r\n                });\r\n\r\n            if (blockList.length) {\r\n                blockMenu.push(\r\n                    <LineContainerComponent key={key + \" blocks\"} title={key.replace(\"__\", \": \").replace(\"_\", \" \")} closed={false}>\r\n                        {blockList}\r\n                    </LineContainerComponent>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div id=\"guiList\">\r\n                <div className=\"panes\">\r\n                    <div className=\"pane\">\r\n                        <div className=\"filter\">\r\n                            <input type=\"text\" placeholder=\"Filter\" onChange={(evt) => this.filterContent(evt.target.value)} />\r\n                        </div>\r\n                        <div className=\"list-container\">{blockMenu}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
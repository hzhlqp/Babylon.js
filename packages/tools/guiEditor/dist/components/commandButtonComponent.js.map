{"version":3,"file":"commandButtonComponent.js","sourceRoot":"","sources":["../../src/components/commandButtonComponent.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAe/B,MAAM,OAAO,sBAAuB,SAAQ,KAAK,CAAC,SAAuC;IACrF,YAAmB,KAAmC;QAClD,KAAK,CAAC,KAAK,CAAC,CAAC;IACjB,CAAC;IAEe,MAAM;QAClB,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,qBAAqB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC;QAE3J,IAAI,aAAa,GAAG,sBAAsB,CAAC;QAE3C,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YACrB,YAAY,IAAI,SAAS,CAAC;YAC1B,aAAa,IAAI,SAAS,CAAC;SAC9B;QACD,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YACrB,YAAY,IAAI,WAAW,CAAC;SAC/B;aAAM,IAAI,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE;YACtC,YAAY,IAAI,wBAAwB,CAAC;SAC5C;aAAM,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;YACjC,YAAY,IAAI,gBAAgB,CAAC;SACpC;QACD,OAAO,CACH,eAAK,SAAS,EAAE,YAAY,EAAE,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,aACpJ,cAAK,SAAS,EAAE,aAAa,YACzB,cAAK,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,SAAS,EAAE,KAAK,GAAI,GACrJ,EACN,cAAK,SAAS,EAAC,eAAe,YAAE,IAAI,CAAC,KAAK,CAAC,OAAO,GAAO,IACvD,CACT,CAAC;IACN,CAAC;CACJ","sourcesContent":["import * as React from \"react\";\r\n\r\ninterface ICommandButtonComponentProps {\r\n    tooltip: string;\r\n    shortcut?: string;\r\n    icon: string;\r\n    iconLabel?: string;\r\n    isActive: boolean;\r\n    copyDeleteDisabled?: boolean;\r\n    pasteDisabled?: boolean;\r\n    onClick: () => void;\r\n    altStyle?: boolean;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport class CommandButtonComponent extends React.Component<ICommandButtonComponentProps> {\r\n    public constructor(props: ICommandButtonComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    public override render() {\r\n        let divClassName = this.props.altStyle ? `command-button-alt${this.props.disabled ? \"-disabled\" : \"\"}${this.props.isActive ? \"-\" : \"\"}` : `command-button`;\r\n\r\n        let iconClassName = `command-button-icon `;\r\n\r\n        if (this.props.isActive) {\r\n            divClassName += \" active\";\r\n            iconClassName += \" active\";\r\n        }\r\n        if (this.props.disabled) {\r\n            divClassName += \" disabled\";\r\n        } else if (this.props.copyDeleteDisabled) {\r\n            divClassName += \" copyAndDeleteDisabled\";\r\n        } else if (this.props.pasteDisabled) {\r\n            divClassName += \" pasteDisabled\";\r\n        }\r\n        return (\r\n            <div className={divClassName} onClick={this.props.onClick} title={`${this.props.tooltip} ${this.props.shortcut ? \" (\" + this.props.shortcut + \")\" : \"\"}`}>\r\n                <div className={iconClassName}>\r\n                    <img src={this.props.icon} title={this.props.iconLabel} alt={this.props.iconLabel} className={this.props.isActive ? \"active\" : \"\"} draggable={false} />\r\n                </div>\r\n                <div className=\"command-label\">{this.props.tooltip}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
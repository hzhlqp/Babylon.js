{"version":3,"file":"controlTreeItemComponent.js","sourceRoot":"","sources":["../../../../../src/components/sceneExplorer/entities/gui/controlTreeItemComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { IExplorerExtensibilityGroup } from \"core/Debug/debugLayer\";\r\nimport type { Control } from \"gui/2D/controls/control\";\r\nimport { TreeItemLabelComponent } from \"../../treeItemLabelComponent\";\r\nimport { ExtensionsComponent } from \"../../extensionsComponent\";\r\nimport * as React from \"react\";\r\nimport type { GlobalState } from \"../../../../globalState\";\r\nimport { DragOverLocation } from \"../../../../globalState\";\r\nimport type { Grid } from \"gui/2D/controls/grid\";\r\nimport { Container } from \"gui/2D/controls/container\";\r\nimport { ControlTypes } from \"../../../../controlTypes\";\r\n\r\nimport visibilityNotActiveIcon from \"../../../../imgs/visibilityNotActiveIcon.svg\";\r\nimport visibilityActiveIcon from \"../../../../imgs/visibilityActiveIcon.svg\";\r\nimport makeComponentIcon from \"../../../../imgs/makeComponentIcon.svg\";\r\nimport makeChildOfContainerIcon from \"../../../../imgs/makeChildOfContainerIcon.svg\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\ninterface IControlTreeItemComponentProps {\r\n    control: Control;\r\n    extensibilityGroups?: IExplorerExtensibilityGroup[];\r\n    onClick: () => void;\r\n    globalState: GlobalState;\r\n    isHovered: boolean;\r\n    isDragOver: boolean;\r\n    dragOverLocation: DragOverLocation;\r\n    onRenamingStateChanged: (renaming: boolean) => void;\r\n}\r\n\r\nexport class ControlTreeItemComponent extends React.Component<IControlTreeItemComponentProps, { isActive: boolean; isVisible: boolean; isRenaming: boolean }> {\r\n    private _onIsVisibleChangedObserver: Nullable<Observer<boolean>>;\r\n    constructor(props: IControlTreeItemComponentProps) {\r\n        super(props);\r\n\r\n        const control = this.props.control;\r\n\r\n        this.state = { isActive: control.isHighlighted, isVisible: control.isVisible, isRenaming: false };\r\n\r\n        this._onIsVisibleChangedObserver = control.onIsVisibleChangedObservable.add((isVisible) => {\r\n            this.setState({ isVisible });\r\n        });\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        if (this._onIsVisibleChangedObserver) {\r\n            this.props.control.onIsVisibleChangedObservable.remove(this._onIsVisibleChangedObserver);\r\n        }\r\n    }\r\n\r\n    highlight() {\r\n        const control = this.props.control;\r\n        control.isHighlighted = !control.isHighlighted;\r\n\r\n        this.setState({ isActive: control.isHighlighted });\r\n    }\r\n\r\n    switchVisibility(): void {\r\n        const newState = !this.state.isVisible;\r\n        this.setState({ isVisible: newState });\r\n        this.props.control.isVisible = newState;\r\n    }\r\n\r\n    onRename(name: string) {\r\n        this.props.control.name = name;\r\n        this.props.globalState.onPropertyGridUpdateRequiredObservable.notifyObservers();\r\n    }\r\n\r\n    override render() {\r\n        const control = this.props.control;\r\n\r\n        let bracket = \"\";\r\n        if (control.parent?.typeName === \"Grid\") {\r\n            bracket = (control.parent as Grid).getChildCellInfo(this.props.control);\r\n        }\r\n        const draggingSelf = this.props.globalState.draggedControl === control;\r\n        const controlType = ControlTypes.find((type) => type.className === control.getClassName());\r\n        return (\r\n            <div className=\"controlTools\">\r\n                {controlType && (\r\n                    <div className=\"controlType icon\">\r\n                        <img src={controlType.icon} alt={controlType.className} />\r\n                    </div>\r\n                )}\r\n                <TreeItemLabelComponent\r\n                    label={control.name}\r\n                    bracket={bracket}\r\n                    onClick={() => this.props.onClick()}\r\n                    onChange={(name) => this.onRename(name)}\r\n                    setRenaming={(renaming) => {\r\n                        this.setState({ isRenaming: renaming });\r\n                        this.props.onRenamingStateChanged(renaming);\r\n                    }}\r\n                    renaming={this.state.isRenaming}\r\n                />\r\n                {!draggingSelf && this.props.isDragOver && this.props.dragOverLocation == DragOverLocation.CENTER && control instanceof Container && (\r\n                    <>\r\n                        <div className=\"makeChild icon\" onClick={() => this.highlight()} title=\"Make Child\">\r\n                            <img src={makeChildOfContainerIcon} />\r\n                        </div>\r\n                    </>\r\n                )}\r\n                {!this.state.isRenaming && this.props.isHovered && this.props.globalState.draggedControl === null && this.props.dragOverLocation == DragOverLocation.NONE && (\r\n                    <>\r\n                        <div className=\"addComponent icon\" onClick={() => this.highlight()} title=\"Add component (Not Implemented)\">\r\n                            <img src={makeComponentIcon} />\r\n                        </div>\r\n                        <div className=\"visibility icon\" onClick={() => this.switchVisibility()} title=\"Set isVisible\">\r\n                            <img src={this.state.isVisible ? visibilityActiveIcon : visibilityNotActiveIcon} />\r\n                        </div>\r\n                    </>\r\n                )}\r\n                <ExtensionsComponent target={control} extensibilityGroups={this.props.extensibilityGroups} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
{"version":3,"file":"extensionsComponent.js","sourceRoot":"","sources":["../../../src/components/sceneExplorer/extensionsComponent.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,gCAAgC,CAAC;AACjE,OAAO,EAAE,WAAW,EAAE,MAAM,mCAAmC,CAAC;AAChE,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAS/B,MAAM,OAAO,mBAAoB,SAAQ,KAAK,CAAC,SAA+D;IAI1G,YAAY,KAAgC;QACxC,KAAK,CAAC,KAAK,CAAC,CAAC;QAEb,IAAI,CAAC,KAAK,GAAG,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC;QACrC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;IAC3C,CAAC;IAED,SAAS;QACL,IAAI,CAAC,QAAQ,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC;IAC1C,CAAC;IAEQ,iBAAiB;QACtB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YACd,OAAO;SACV;QACD,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;IAEQ,kBAAkB;QACvB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YACd,OAAO;SACV;QACD,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;IAEQ,MAAM;QACX,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,mBAAmB,EAAE;YACjC,OAAO,IAAI,CAAC;SACf;QAED,MAAM,OAAO,GAAG,EAAE,CAAC;QAEnB,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,mBAAmB,EAAE;YAChD,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;gBACpC,OAAO,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;aAClC;SACJ;QAED,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,OAAO,IAAI,CAAC;SACf;QAED,OAAO,CACH,eAAK,GAAG,EAAE,IAAI,CAAC,aAAa,EAAE,SAAS,EAAC,YAAY,EAAC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,aAChF,cAAK,KAAK,EAAC,oBAAoB,EAAC,SAAS,EAAC,MAAM,YAC5C,KAAC,eAAe,IAAC,IAAI,EAAE,WAAW,GAAI,GACpC,EACN,cACI,GAAG,EAAE,CAAC,KAAK,EAAE,EAAE;wBACX,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;oBACxB,CAAC,EACD,QAAQ,EAAE,CAAC,CAAC,EACZ,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,EAC3D,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC,YAEnD,OAAO,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,EAAE;wBAC3B,OAAO,CACH,cAA+B,SAAS,EAAC,WAAW,EAAC,OAAO,EAAE,GAAG,EAAE,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,YACtG,aAAa,CAAC,KAAK,IADd,aAAa,CAAC,KAAK,CAEvB,CACT,CAAC;oBACN,CAAC,CAAC,GACA,IACJ,CACT,CAAC;IACN,CAAC;CACJ","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEllipsisH } from \"@fortawesome/free-solid-svg-icons\";\r\nimport * as React from \"react\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { IExplorerExtensibilityGroup } from \"core/Debug/debugLayer\";\r\n\r\ninterface IExtensionsComponentProps {\r\n    target: any;\r\n    extensibilityGroups?: IExplorerExtensibilityGroup[];\r\n}\r\n\r\nexport class ExtensionsComponent extends React.Component<IExtensionsComponentProps, { popupVisible: boolean }> {\r\n    private _popup: Nullable<HTMLDivElement>;\r\n    private _extensionRef: React.RefObject<HTMLDivElement>;\r\n\r\n    constructor(props: IExtensionsComponentProps) {\r\n        super(props);\r\n\r\n        this.state = { popupVisible: false };\r\n        this._extensionRef = React.createRef();\r\n    }\r\n\r\n    showPopup() {\r\n        this.setState({ popupVisible: true });\r\n    }\r\n\r\n    override componentDidMount() {\r\n        if (!this._popup) {\r\n            return;\r\n        }\r\n        this._popup.focus();\r\n    }\r\n\r\n    override componentDidUpdate() {\r\n        if (!this._popup) {\r\n            return;\r\n        }\r\n        this._popup.focus();\r\n    }\r\n\r\n    override render() {\r\n        if (!this.props.extensibilityGroups) {\r\n            return null;\r\n        }\r\n\r\n        const options = [];\r\n\r\n        for (const group of this.props.extensibilityGroups) {\r\n            if (group.predicate(this.props.target)) {\r\n                options.push(...group.entries);\r\n            }\r\n        }\r\n\r\n        if (options.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div ref={this._extensionRef} className=\"extensions\" onClick={() => this.showPopup()}>\r\n                <div title=\"Additional options\" className=\"icon\">\r\n                    <FontAwesomeIcon icon={faEllipsisH} />\r\n                </div>\r\n                <div\r\n                    ref={(input) => {\r\n                        this._popup = input;\r\n                    }}\r\n                    tabIndex={-1}\r\n                    className={this.state.popupVisible ? \"popup show\" : \"popup\"}\r\n                    onBlur={() => this.setState({ popupVisible: false })}\r\n                >\r\n                    {options.map((extensibility) => {\r\n                        return (\r\n                            <div key={extensibility.label} className=\"popupMenu\" onClick={() => extensibility.action(this.props.target)}>\r\n                                {extensibility.label}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
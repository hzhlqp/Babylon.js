{"version":3,"file":"treeItemLabelComponent.js","sourceRoot":"","sources":["../../../src/components/sceneExplorer/treeItemLabelComponent.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAe/B,MAAM,OAAO,sBAAuB,SAAQ,KAAK,CAAC,SAA4D;IAC1G,YAAY,KAAmC;QAC3C,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,KAAK,GAAG;YACT,KAAK,EAAE,EAAE;SACZ,CAAC;IACN,CAAC;IAED,OAAO;QACH,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YAC5C,OAAO;SACV;QAED,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;IACzB,CAAC;IAED,MAAM;QACF,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IAEQ,MAAM;QACX,gDAAgD;QAChD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,SAAS,CAAC;QACrF,OAAO,CACH,cAAK,SAAS,EAAC,OAAO,EAAC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,YAC/C,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CACnB,gBACI,IAAI,EAAC,MAAM,EACX,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,EAC3B,SAAS,EAAE,IAAI,EACf,KAAK,EAAE,KAAK,EACZ,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE;oBACb,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oBACrC,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;gBAC9C,CAAC,EACD,SAAS,EAAE,CAAC,EAAE,EAAE,EAAE;oBACd,IAAI,EAAE,CAAC,GAAG,KAAK,OAAO;wBAAE,IAAI,CAAC,MAAM,EAAE,CAAC;gBAC1C,CAAC,EACD,SAAS,EAAC,WAAW,GACvB,CACL,CAAC,CAAC,CAAC,CACA,cACI,SAAS,EAAC,WAAW,EACrB,aAAa,EAAE,GAAG,EAAE;oBAChB,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;oBAC7B,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;gBACpC,CAAC,YAEA,KAAK,GACJ,CACT,GACC,CACT,CAAC;IACN,CAAC;CACJ","sourcesContent":["import * as React from \"react\";\r\n\r\ninterface ITreeItemLabelComponentProps {\r\n    label?: string;\r\n    onClick?: () => void;\r\n    onChange: (newValue: string) => void;\r\n    bracket: string;\r\n    renaming: boolean;\r\n    setRenaming: (renaming: boolean) => void;\r\n}\r\n\r\ninterface ITreeItemLabelState {\r\n    value: string;\r\n}\r\n\r\nexport class TreeItemLabelComponent extends React.Component<ITreeItemLabelComponentProps, ITreeItemLabelState> {\r\n    constructor(props: ITreeItemLabelComponentProps) {\r\n        super(props);\r\n        this.state = {\r\n            value: \"\",\r\n        };\r\n    }\r\n\r\n    onClick() {\r\n        if (!this.props.onClick || this.props.renaming) {\r\n            return;\r\n        }\r\n\r\n        this.props.onClick();\r\n    }\r\n\r\n    onBlur() {\r\n        this.props.setRenaming(false);\r\n    }\r\n\r\n    override render() {\r\n        // if editing, overwrite string with local value\r\n        const label = this.props.renaming ? this.state.value : this.props.label || \"No Name\";\r\n        return (\r\n            <div className=\"title\" onClick={() => this.onClick()}>\r\n                {this.props.renaming ? (\r\n                    <input\r\n                        type=\"text\"\r\n                        onBlur={() => this.onBlur()}\r\n                        autoFocus={true}\r\n                        value={label}\r\n                        onChange={(ev) => {\r\n                            this.props.onChange(ev.target.value);\r\n                            this.setState({ value: ev.target.value });\r\n                        }}\r\n                        onKeyDown={(ev) => {\r\n                            if (ev.key === \"Enter\") this.onBlur();\r\n                        }}\r\n                        className=\"titleText\"\r\n                    />\r\n                ) : (\r\n                    <div\r\n                        className=\"titleText\"\r\n                        onDoubleClick={() => {\r\n                            this.props.setRenaming(true);\r\n                            this.setState({ value: label });\r\n                        }}\r\n                    >\r\n                        {label}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
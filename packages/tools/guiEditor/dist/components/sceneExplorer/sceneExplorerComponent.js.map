{"version":3,"file":"sceneExplorerComponent.js","sourceRoot":"","sources":["../../../src/components/sceneExplorer/sceneExplorerComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\n\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { IExplorerExtensibilityGroup } from \"core/Debug/debugLayer\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { TreeItemComponent } from \"./treeItemComponent\";\r\nimport { Tools } from \"../../tools\";\r\nimport type { GlobalState } from \"../../globalState\";\r\nimport type { PropertyChangedEvent } from \"shared-ui-components/propertyChangedEvent\";\r\n\r\nimport \"./sceneExplorer.scss\";\r\nimport { Logger } from \"core/Misc/logger\";\r\n\r\ninterface ISceneExplorerFilterComponentProps {\r\n    onFilter: (filter: string) => void;\r\n}\r\n\r\nexport class SceneExplorerFilterComponent extends React.Component<ISceneExplorerFilterComponentProps> {\r\n    constructor(props: ISceneExplorerFilterComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    override render() {\r\n        return (\r\n            <div className=\"filter\">\r\n                <input type=\"text\" placeholder=\"Filter\" onChange={(evt) => this.props.onFilter(evt.target.value)} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface ISceneExplorerComponentProps {\r\n    scene?: Scene;\r\n    noCommands?: boolean;\r\n    noHeader?: boolean;\r\n    noExpand?: boolean;\r\n    noClose?: boolean;\r\n    extensibilityGroups?: IExplorerExtensibilityGroup[];\r\n    globalState: GlobalState;\r\n    popupMode?: boolean;\r\n    onPopup?: () => void;\r\n    onClose?: () => void;\r\n}\r\n\r\nexport class SceneExplorerComponent extends React.Component<ISceneExplorerComponentProps, { filter: Nullable<string>; selectedEntity: any; scene: Nullable<Scene> }> {\r\n    private _onSelectionChangeObserver: Nullable<Observer<any>>;\r\n    private _onParrentingChangeObserver: Nullable<Observer<any>>;\r\n    private _onNewSceneObserver: Nullable<Observer<Nullable<Scene>>>;\r\n    private _onPropertyChangedObservable: Nullable<Observer<PropertyChangedEvent>>;\r\n    private _onUpdateRequiredObserver: Nullable<Observer<void>>;\r\n\r\n    constructor(props: ISceneExplorerComponentProps) {\r\n        super(props);\r\n        this.state = { filter: null, selectedEntity: null, scene: this.props.scene ? this.props.scene : null };\r\n        this._onNewSceneObserver = this.props.globalState.onNewSceneObservable.add((scene: Nullable<Scene>) => {\r\n            this.setState({\r\n                scene,\r\n            });\r\n        });\r\n\r\n        this._onPropertyChangedObservable = this.props.globalState.onPropertyChangedObservable.add((event: PropertyChangedEvent) => {\r\n            if (event.property === \"name\" || event.property === \"_columnNumber\" || event.property === \"_rowNumber\") {\r\n                this.forceUpdate();\r\n            }\r\n        });\r\n        this._onUpdateRequiredObserver = this.props.globalState.onUpdateRequiredObservable.add(() => {\r\n            this.forceUpdate();\r\n        });\r\n    }\r\n\r\n    override componentDidMount() {\r\n        this._onSelectionChangeObserver = this.props.globalState.onSelectionChangedObservable.add((entity) => {\r\n            if (this.state.selectedEntity !== entity) {\r\n                this.setState({ selectedEntity: entity });\r\n            }\r\n        });\r\n\r\n        this.props.globalState.onSelectionChangedObservable.add(() => {\r\n            this.forceUpdate();\r\n        });\r\n\r\n        this._onParrentingChangeObserver = this.props.globalState.onParentingChangeObservable.add(() => {\r\n            this.forceUpdate();\r\n        });\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        if (this._onSelectionChangeObserver) {\r\n            this.props.globalState.onSelectionChangedObservable.remove(this._onSelectionChangeObserver);\r\n        }\r\n\r\n        if (this._onNewSceneObserver) {\r\n            this.props.globalState.onNewSceneObservable.remove(this._onNewSceneObserver);\r\n        }\r\n\r\n        if (this._onParrentingChangeObserver) {\r\n            this.props.globalState.onParentingChangeObservable.remove(this._onParrentingChangeObserver);\r\n        }\r\n\r\n        if (this._onPropertyChangedObservable) {\r\n            this.props.globalState.onPropertyChangedObservable.remove(this._onPropertyChangedObservable);\r\n        }\r\n\r\n        if (this._onUpdateRequiredObserver) {\r\n            this.props.globalState.onUpdateRequiredObservable.remove(this._onUpdateRequiredObserver);\r\n        }\r\n    }\r\n\r\n    filterContent(filter: string) {\r\n        this.setState({ filter: filter });\r\n    }\r\n\r\n    findSiblings(parent: any, items: any[], target: any, goNext: boolean, data: { previousOne?: any; found?: boolean }): boolean {\r\n        if (!items) {\r\n            return false;\r\n        }\r\n\r\n        const sortedItems = Tools.SortAndFilter(parent, items);\r\n\r\n        if (!items || sortedItems.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        for (const item of sortedItems) {\r\n            if (item === target) {\r\n                // found the current selection!\r\n                data.found = true;\r\n                if (!goNext) {\r\n                    if (data.previousOne) {\r\n                        this.props.globalState.select(data.previousOne);\r\n                    }\r\n                    return true;\r\n                }\r\n            } else {\r\n                if (data.found) {\r\n                    this.props.globalState.select(item);\r\n                    return true;\r\n                }\r\n                data.previousOne = item;\r\n            }\r\n\r\n            if (item.getChildren && item.reservedDataStore && item.reservedDataStore.isExpanded) {\r\n                if (this.findSiblings(item, item.getChildren(), target, goNext, data)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    processKeys(keyEvent: React.KeyboardEvent<HTMLDivElement>) {\r\n        // if typing inside a text box, don't process keys\r\n        if ((keyEvent.target as HTMLElement).localName === \"input\") return;\r\n\r\n        const scene = this.state.scene;\r\n        let search = false;\r\n        let goNext = false;\r\n\r\n        switch (keyEvent.key) {\r\n            case \"ArrowUp\":\r\n                search = true;\r\n                break;\r\n            case \"ArrowDown\":\r\n                goNext = true;\r\n                search = true;\r\n                break;\r\n            case \"Enter\":\r\n            case \"ArrowRight\":\r\n                this.props.globalState.selectedControls.forEach((node) => {\r\n                    const reservedDataStore = (node as any).reservedDataStore;\r\n                    if (reservedDataStore && reservedDataStore.setExpandedState) {\r\n                        reservedDataStore.setExpandedState(true);\r\n                    }\r\n                });\r\n                keyEvent.preventDefault();\r\n                this.forceUpdate();\r\n                return;\r\n            case \"ArrowLeft\":\r\n                this.props.globalState.selectedControls.forEach((node) => {\r\n                    const reservedDataStore = (node as any).reservedDataStore;\r\n                    Logger.Log(reservedDataStore);\r\n                    if (reservedDataStore && reservedDataStore.setExpandedState) {\r\n                        reservedDataStore.setExpandedState(false);\r\n                    }\r\n                });\r\n                keyEvent.preventDefault();\r\n                this.forceUpdate();\r\n                return;\r\n            case \"Delete\":\r\n            case \"Backspace\":\r\n                this.props.globalState.deleteSelectedNodes();\r\n                this.forceUpdate();\r\n                break;\r\n        }\r\n\r\n        if (!search) {\r\n            return;\r\n        }\r\n\r\n        keyEvent.preventDefault();\r\n        if (scene) {\r\n            const selectedEntity = this.props.globalState.selectedControls[this.props.globalState.selectedControls.length - 1];\r\n            const data = {};\r\n            if (!this.findSiblings(null, scene.rootNodes, selectedEntity, goNext, data)) {\r\n                if (!this.findSiblings(null, scene.materials, selectedEntity, goNext, data)) {\r\n                    this.findSiblings(null, scene.textures, selectedEntity, goNext, data);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    renderContent() {\r\n        const scene = this.state.scene;\r\n\r\n        if (!scene) {\r\n            return null;\r\n        }\r\n\r\n        const guiElements = [this.props.globalState.guiTexture];\r\n\r\n        return (\r\n            <div\r\n                id=\"tree\"\r\n                onDrop={() => {\r\n                    this.props.globalState.onDropObservable.notifyObservers();\r\n                    this.props.globalState.onParentingChangeObservable.notifyObservers(null);\r\n                }}\r\n                onDragOver={(event) => {\r\n                    event.preventDefault();\r\n                }}\r\n                onClick={() => {\r\n                    if (!this.props.globalState.selectionLock) {\r\n                        this.props.globalState.setSelection([]);\r\n                    } else {\r\n                        this.props.globalState.selectionLock = false;\r\n                    }\r\n                }}\r\n                onContextMenu={(ev) => ev.preventDefault()}\r\n            >\r\n                {guiElements && guiElements.length > 0 && (\r\n                    <TreeItemComponent\r\n                        globalState={this.props.globalState}\r\n                        extensibilityGroups={this.props.extensibilityGroups}\r\n                        selectedEntities={this.props.globalState.selectedControls}\r\n                        items={guiElements}\r\n                        label=\"GUI\"\r\n                        offset={1}\r\n                        filter={this.state.filter}\r\n                    />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onClose() {\r\n        if (!this.props.onClose) {\r\n            return;\r\n        }\r\n\r\n        this.props.onClose();\r\n    }\r\n\r\n    onPopup() {\r\n        if (!this.props.onPopup) {\r\n            return;\r\n        }\r\n\r\n        this.props.onPopup();\r\n    }\r\n\r\n    override render() {\r\n        return (\r\n            <div id=\"ge-sceneExplorer\" tabIndex={0} onKeyDown={(keyEvent) => this.processKeys(keyEvent)}>\r\n                {this.props.children}\r\n                {this.renderContent()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
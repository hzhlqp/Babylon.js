{"version":3,"file":"coordinateHelper.js","sourceRoot":"","sources":["../../src/diagram/coordinateHelper.tsx"],"names":[],"mappings":"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","sourcesContent":["import { ValueAndUnit } from \"gui/2D/valueAndUnit\";\r\nimport { Control } from \"gui/2D/controls/control\";\r\nimport type { Grid } from \"gui/2D/controls/grid\";\r\nimport type { Rectangle } from \"gui/2D/controls/rectangle\";\r\nimport { Matrix2D } from \"gui/2D/math2D\";\r\nimport { Vector2 } from \"core/Maths/math.vector\";\r\nimport type { Observable } from \"core/Misc/observable\";\r\nimport type { GlobalState } from \"../globalState\";\r\nimport type { PropertyChangedEvent } from \"shared-ui-components/propertyChangedEvent\";\r\nimport { Measure } from \"gui/2D/measure\";\r\n\r\nexport type DimensionProperties =\r\n    | \"width\"\r\n    | \"left\"\r\n    | \"height\"\r\n    | \"top\"\r\n    | \"paddingLeft\"\r\n    | \"paddingRight\"\r\n    | \"paddingTop\"\r\n    | \"paddingBottom\"\r\n    | \"fontSize\"\r\n    | \"linkOffsetX\"\r\n    | \"linkOffsetY\";\r\n\r\nexport class Rect {\r\n    public top: number;\r\n    public left: number;\r\n    public right: number;\r\n    public bottom: number;\r\n    constructor(left: number, top: number, right: number, bottom: number) {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.right = right;\r\n        this.bottom = bottom;\r\n    }\r\n\r\n    public clone() {\r\n        return new Rect(this.left, this.top, this.right, this.bottom);\r\n    }\r\n\r\n    public get center() {\r\n        const topLeft = new Vector2(this.left, this.top);\r\n        return topLeft.addInPlace(new Vector2(this.right, this.bottom).subtractInPlace(topLeft).multiplyByFloats(0.5, 0.5));\r\n    }\r\n\r\n    public get width() {\r\n        return this.right - this.left;\r\n    }\r\n\r\n    public get height() {\r\n        return this.bottom - this.top;\r\n    }\r\n}\r\n\r\nconst roundFactor = 100;\r\nconst round = (value: number) => Math.round(value * roundFactor) / roundFactor;\r\n\r\nexport class CoordinateHelper {\r\n    private static _MatrixCache: Matrix2D[] = [Matrix2D.Identity(), Matrix2D.Identity(), Matrix2D.Identity(), Matrix2D.Identity()];\r\n    public static GlobalState: GlobalState;\r\n\r\n    /**\r\n     * Get the scaling of a specific GUI control\r\n     * @param node the node for which we are getting the scaling\r\n     * @param relative should we return only the relative scaling (relative to the parent)\r\n     * @returns an X,Y vector of the scaling\r\n     */\r\n    public static GetScale(node: Control, relative?: boolean): Vector2 {\r\n        let x = node.scaleX;\r\n        let y = node.scaleY;\r\n        if (relative) {\r\n            return new Vector2(x, y);\r\n        }\r\n        let parent = node.parent;\r\n        while (parent) {\r\n            x *= parent.scaleX;\r\n            y *= parent.scaleY;\r\n            parent = parent.parent;\r\n        }\r\n        return new Vector2(x, y);\r\n    }\r\n\r\n    public static GetRotation(node: Control, relative?: boolean): number {\r\n        // Gets rotate of a control account for all of it's parents rotations\r\n        let rotation = node.rotation;\r\n        if (relative) {\r\n            return rotation;\r\n        }\r\n        let parent = node.parent;\r\n        while (parent) {\r\n            rotation += parent.rotation;\r\n            parent = parent.parent;\r\n        }\r\n        return rotation;\r\n    }\r\n\r\n    public static GetParentSizes(guiControl: Control): Measure {\r\n        const parentMeasure = new Measure(0, 0, 0, 0);\r\n        if (guiControl.parent) {\r\n            parentMeasure.copyFrom(guiControl.parent._currentMeasure);\r\n            if (guiControl.parent.typeName === \"Grid\") {\r\n                const cellInfo = (guiControl.parent as Grid).getChildCellInfo(guiControl);\r\n                const cell = (guiControl.parent as Grid).cells[cellInfo];\r\n                if (cell) {\r\n                    parentMeasure.width = cell.widthInPixels;\r\n                    parentMeasure.height = cell.heightInPixels;\r\n                }\r\n            }\r\n        }\r\n        return parentMeasure;\r\n    }\r\n\r\n    /**\r\n     * This function calculates a local matrix for a node, including it's full transformation and pivot point\r\n     *\r\n     * @param node the node to calculate the matrix for\r\n     * @param storedValues should the stored (cached) values be used to calculate the matrix\r\n     * @returns a new matrix for the control\r\n     */\r\n    public static GetNodeMatrix(node: Control, storedValues?: Rect): Matrix2D {\r\n        const size = this.GlobalState.guiTexture.getSize();\r\n        // parent should always be defined, but stay safe\r\n        let parentWidth, parentHeight;\r\n        if (node.parent) {\r\n            const parentSizes = CoordinateHelper.GetParentSizes(node);\r\n            parentWidth = parentSizes.width;\r\n            parentHeight = parentSizes.height;\r\n        } else {\r\n            parentWidth = size.width;\r\n            parentHeight = size.height;\r\n        }\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        const width = storedValues ? storedValues.width : node.widthInPixels;\r\n        const height = storedValues ? storedValues.height : node.heightInPixels;\r\n        const left = storedValues ? storedValues.left : node.leftInPixels;\r\n        const top = storedValues ? storedValues.top : node.topInPixels;\r\n\r\n        switch (node.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = -(parentWidth - width) / 2;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = 0;\r\n                break;\r\n        }\r\n\r\n        switch (node.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = -(parentHeight - height) / 2;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = 0;\r\n                break;\r\n        }\r\n        this._ResetMatrixArray();\r\n\r\n        const m2d = this._MatrixCache[0];\r\n        const translateTo = this._MatrixCache[1];\r\n        // as this is used later it needs to persist\r\n        const resultMatrix = Matrix2D.Identity();\r\n\r\n        // the pivot point around which the object transforms\r\n        let offsetX = width * node.transformCenterX - width / 2;\r\n        let offsetY = height * node.transformCenterY - height / 2;\r\n        // pivot changes this point's position! but only in legacy pivot mode\r\n        if (!(node as any).descendantsOnlyPadding) {\r\n            // TODO - padding needs to also take scaling into account?\r\n            offsetX -= ((node.paddingRightInPixels - node.paddingLeftInPixels) * 1) / 2;\r\n            offsetY -= ((node.paddingBottomInPixels - node.paddingTopInPixels) * 1) / 2;\r\n        }\r\n\r\n        // Set the translation\r\n        Matrix2D.TranslationToRef(x + left, y + top, translateTo);\r\n        // without parents scaling and rotation, calculate world matrix for each\r\n        const rotation = this.GetRotation(node, true);\r\n        const scaling = this.GetScale(node, true);\r\n        // COmpose doesn't actually translate, but creates a form of pivot in a specific position\r\n        Matrix2D.ComposeToRef(-offsetX, -offsetY, rotation, scaling.x, scaling.y, null, m2d);\r\n        // actually compose the matrix\r\n        resultMatrix.multiplyToRef(m2d, resultMatrix);\r\n        resultMatrix.multiplyToRef(translateTo, resultMatrix);\r\n        return resultMatrix;\r\n    }\r\n\r\n    /**\r\n     * Using the node's tree, calculate its world matrix and return it\r\n     * @param node the node to calculate the matrix for\r\n     * @param storedValues used stored valued (cached when pointer down is clicked)\r\n     * @param stopAt stop looking when this node is found\r\n     * @returns the world matrix for this node\r\n     */\r\n    public static NodeToRTTWorldMatrix(node: Control, storedValues?: Rect, stopAt?: Control): Matrix2D {\r\n        const listOfNodes = [node];\r\n        let parent = node.parent;\r\n        let child = node;\r\n        while (parent && child !== stopAt) {\r\n            if (parent.typeName === \"Grid\") {\r\n                const cellInfo = (parent as Grid).getChildCellInfo(child);\r\n                const cell = (parent as Grid).cells[cellInfo];\r\n                listOfNodes.push(cell);\r\n            }\r\n            listOfNodes.push(parent);\r\n            child = parent;\r\n            parent = parent.parent;\r\n        }\r\n        this._ResetMatrixArray();\r\n        const matrices = listOfNodes.map((node, index) => this.GetNodeMatrix(node, index === 0 ? storedValues : undefined));\r\n        return matrices.reduce((acc, cur) => {\r\n            acc.multiplyToRef(cur, acc);\r\n            return acc;\r\n        }, this._MatrixCache[2]);\r\n    }\r\n\r\n    public static NodeToRTTSpace(node: Control, x: number, y: number, reference: Vector2 = new Vector2(), storedValues?: Rect, stopAt?: Control) {\r\n        const worldMatrix = this.NodeToRTTWorldMatrix(node, storedValues, stopAt);\r\n        worldMatrix.transformCoordinates(x, y, reference);\r\n        // round\r\n        reference.x = round(reference.x);\r\n        reference.y = round(reference.y);\r\n        return reference;\r\n    }\r\n\r\n    public static RttToLocalNodeSpace(node: Control, x: number, y: number, reference: Vector2 = new Vector2(), storedValues?: Rect) {\r\n        const worldMatrix = this.NodeToRTTWorldMatrix(node, storedValues);\r\n        const inv = this._MatrixCache[3];\r\n        worldMatrix.invertToRef(inv);\r\n        inv.transformCoordinates(x, y, reference);\r\n        // round\r\n        reference.x = round(reference.x);\r\n        reference.y = round(reference.y);\r\n        return reference;\r\n    }\r\n\r\n    public static RttToCanvasSpace(x: number, y: number) {\r\n        const engine = this.GlobalState.workbench._scene.getEngine();\r\n        return new Vector2(x + engine.getRenderWidth() / 2, y + engine.getRenderHeight() / 2);\r\n    }\r\n\r\n    public static MousePointerToRTTSpace(_node?: Control, x?: number, y?: number) {\r\n        const scene = this.GlobalState.workbench._scene;\r\n        const engine = scene.getEngine();\r\n        return new Vector2((x || scene.pointerX) - engine.getRenderWidth() / 2, (y || scene.pointerY) - engine.getRenderHeight() / 2);\r\n    }\r\n\r\n    private static _ResetMatrixArray() {\r\n        this._MatrixCache.forEach((matrix) => {\r\n            Matrix2D.IdentityToRef(matrix);\r\n        });\r\n    }\r\n\r\n    public static ComputeLocalBounds(node: Control) {\r\n        return new Rect(-node.widthInPixels * 0.5, -node.heightInPixels * 0.5, node.widthInPixels * 0.5, node.heightInPixels * 0.5);\r\n    }\r\n\r\n    /**\r\n     * converts a node's dimensions to percentage, properties can be specified as a list, or can convert all\r\n     * @param guiControl\r\n     * @param properties\r\n     * @param onPropertyChangedObservable\r\n     */\r\n    public static ConvertToPercentage(\r\n        guiControl: Control,\r\n        properties: DimensionProperties[] = [\"left\", \"top\", \"width\", \"height\"],\r\n        onPropertyChangedObservable?: Observable<PropertyChangedEvent>\r\n    ) {\r\n        let ratioX = 1;\r\n        let ratioY = 1;\r\n        if (guiControl.parent) {\r\n            if (guiControl.parent.typeName === \"Grid\") {\r\n                const cellInfo = (guiControl.parent as Grid).getChildCellInfo(guiControl);\r\n                const cell = (guiControl.parent as Grid).cells[cellInfo];\r\n                ratioX = cell.widthInPixels;\r\n                ratioY = cell.heightInPixels;\r\n            } else if (guiControl.parent.typeName === \"Rectangle\" || guiControl.parent.typeName === \"Button\") {\r\n                const thickness = (guiControl.parent as Rectangle).thickness * 2;\r\n                ratioX = guiControl.parent._currentMeasure.width - thickness;\r\n                ratioY = guiControl.parent._currentMeasure.height - thickness;\r\n            } else {\r\n                ratioX = guiControl.parent._currentMeasure.width;\r\n                ratioY = guiControl.parent._currentMeasure.height;\r\n            }\r\n        }\r\n        for (const property of properties) {\r\n            const initialValue = guiControl[property];\r\n            const ratio = property === \"left\" || property === \"width\" || property === \"paddingLeft\" || property === \"paddingRight\" ? ratioX : ratioY;\r\n            const newValue = (guiControl[`${property}InPixels`] * 100) / ratio;\r\n            guiControl[property] = `${newValue.toFixed(2)}%`;\r\n            onPropertyChangedObservable?.notifyObservers({\r\n                object: guiControl,\r\n                initialValue,\r\n                value: guiControl[property],\r\n                property,\r\n            });\r\n        }\r\n    }\r\n\r\n    public static Round(value: number) {\r\n        return Math.floor(value * 100) / 100;\r\n    }\r\n\r\n    public static ConvertToPixels(\r\n        guiControl: Control,\r\n        properties: DimensionProperties[] = [\"left\", \"top\", \"width\", \"height\"],\r\n        onPropertyChangedObservable?: Observable<PropertyChangedEvent>\r\n    ) {\r\n        // make sure we are using the latest measures for the control\r\n        const parentMeasure = CoordinateHelper.GetParentSizes(guiControl);\r\n        (guiControl as any)._processMeasures(parentMeasure, guiControl.host.getContext());\r\n        for (const property of properties) {\r\n            const initialValue = guiControl[property];\r\n            guiControl[`_${property}`] = new ValueAndUnit(this.Round(guiControl[`${property}InPixels`]), ValueAndUnit.UNITMODE_PIXEL);\r\n            onPropertyChangedObservable?.notifyObservers({\r\n                object: guiControl,\r\n                initialValue,\r\n                value: guiControl[property],\r\n                property,\r\n            });\r\n        }\r\n    }\r\n}\r\n"]}
{"version":3,"file":"gizmoWrapper.js","sourceRoot":"","sources":["../../src/diagram/gizmoWrapper.tsx"],"names":[],"mappings":";AAEA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAC9C,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAOxC,MAAM,OAAO,YAAa,SAAQ,KAAK,CAAC,SAA6B;IAExD,kBAAkB;QACvB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,4BAA4B,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;IACtG,CAAC;IAEQ,oBAAoB;QACzB,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,4BAA4B,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC9E,CAAC;IAEQ,MAAM;QACX,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,gBAAgB,CAAC;QACzD,OAAO,CACH,4BACK,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CACtB,OAAO,CAAC,YAAY,EAAE,KAAK,MAAM,CAAC,CAAC,CAAC,CAChC,KAAC,SAAS,IAAC,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,OAAO,EAAE,OAAe,IAAO,OAAO,CAAC,QAAQ,CAAI,CACtG,CAAC,CAAC,CAAC,CACA,KAAC,YAAY,IAAC,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,OAAO,EAAE,OAAO,IAAO,OAAO,CAAC,QAAQ,CAAI,CACjG,CACJ,GACF,CACN,CAAC;IACN,CAAC;CACJ","sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport * as React from \"react\";\r\nimport type { GlobalState } from \"../globalState\";\r\nimport { GizmoGeneric } from \"./gizmoGeneric\";\r\nimport { GizmoLine } from \"./gizmoLine\";\r\nimport type { Line } from \"gui/2D/controls/line\";\r\n\r\nexport interface IGizmoWrapperProps {\r\n    globalState: GlobalState;\r\n}\r\n\r\nexport class GizmoWrapper extends React.Component<IGizmoWrapperProps> {\r\n    observer: Nullable<Observer<void>>;\r\n    override componentWillMount() {\r\n        this.observer = this.props.globalState.onSelectionChangedObservable.add(() => this.forceUpdate());\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        this.props.globalState.onSelectionChangedObservable.remove(this.observer);\r\n    }\r\n\r\n    override render() {\r\n        const controls = this.props.globalState.selectedControls;\r\n        return (\r\n            <>\r\n                {controls.map((control) =>\r\n                    control.getClassName() === \"Line\" ? (\r\n                        <GizmoLine globalState={this.props.globalState} control={control as Line} key={control.uniqueId} />\r\n                    ) : (\r\n                        <GizmoGeneric globalState={this.props.globalState} control={control} key={control.uniqueId} />\r\n                    )\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n}\r\n"]}
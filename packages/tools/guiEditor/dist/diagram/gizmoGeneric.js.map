{"version":3,"file":"gizmoGeneric.js","sourceRoot":"","sources":["../../src/diagram/gizmoGeneric.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Control } from \"gui/2D/controls/control\";\r\nimport { Vector2 } from \"core/Maths/math.vector\";\r\nimport * as React from \"react\";\r\nimport type { GlobalState } from \"../globalState\";\r\nimport type { Image } from \"gui/2D/controls/image\";\r\nimport type { TextBlock } from \"gui/2D/controls/textBlock\";\r\nimport type { DimensionProperties } from \"./coordinateHelper\";\r\nimport { CoordinateHelper, Rect } from \"./coordinateHelper\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { ValueAndUnit } from \"gui/2D/valueAndUnit\";\r\nimport type { IScalePoint } from \"./gizmoScalePoint\";\r\nimport { GizmoScalePoint, ScalePointPosition } from \"./gizmoScalePoint\";\r\nimport { MathTools } from \"gui/2D/math2D\";\r\n\r\nexport interface IGuiGizmoProps {\r\n    globalState: GlobalState;\r\n    control: Control;\r\n}\r\n\r\ninterface IGuiGizmoState {\r\n    canvasBounds: Rect;\r\n    scalePoints: IScalePoint[];\r\n    scalePointDragging: number;\r\n    isRotating: boolean;\r\n}\r\n\r\nconst roundFactor = 100;\r\nconst round = (value: number) => Math.round(value * roundFactor) / roundFactor;\r\n\r\nconst modulo = (dividend: number, divisor: number) => ((dividend % divisor) + divisor) % divisor;\r\n\r\n// this defines the lines that link the corners, making up the bounding box\r\nconst lines = [\r\n    [0, 2],\r\n    [0, 6],\r\n    [2, 8],\r\n    [6, 8],\r\n];\r\n\r\n// used to calculate which cursor icon we should display for the scalepoints\r\nconst defaultScalePointRotations = [315, 0, 45, 270, 0, 90, 225, 180, 135];\r\n\r\nexport class GizmoGeneric extends React.Component<IGuiGizmoProps, IGuiGizmoState> {\r\n    // used for scaling computations\r\n    private _storedValues: Rect;\r\n    private _localBounds: Rect;\r\n\r\n    private _rotation: {\r\n        pivot: Vector2;\r\n        initialAngleToPivot: number;\r\n    };\r\n\r\n    private _gizmoUpdateObserver: Nullable<Observer<void>>;\r\n    private _pointerUpObserver: Nullable<Observer<Nullable<React.PointerEvent<HTMLCanvasElement> | PointerEvent>>>;\r\n    private _pointerMoveObserver: Nullable<Observer<React.PointerEvent<HTMLCanvasElement>>>;\r\n\r\n    constructor(props: IGuiGizmoProps) {\r\n        super(props);\r\n\r\n        const scalePoints: IScalePoint[] = [];\r\n        for (let vertical = ScalePointPosition.Top; vertical <= ScalePointPosition.Bottom; vertical++) {\r\n            for (let horizontal = ScalePointPosition.Left; horizontal <= ScalePointPosition.Right; horizontal++) {\r\n                const isPivot = horizontal === ScalePointPosition.Center && vertical === ScalePointPosition.Center;\r\n                scalePoints.push({\r\n                    position: new Vector2(),\r\n                    horizontalPosition: horizontal,\r\n                    verticalPosition: vertical,\r\n                    rotation: 0,\r\n                    isPivot,\r\n                    defaultRotation: defaultScalePointRotations[scalePoints.length],\r\n                });\r\n            }\r\n        }\r\n\r\n        this._localBounds = new Rect(0, 0, 0, 0);\r\n\r\n        this.state = {\r\n            canvasBounds: new Rect(0, 0, 0, 0),\r\n            scalePoints,\r\n            scalePointDragging: -1,\r\n            isRotating: false,\r\n        };\r\n\r\n        this._gizmoUpdateObserver = this.props.globalState.onGizmoUpdateRequireObservable.add(() => {\r\n            this.updateGizmo();\r\n        });\r\n\r\n        this._pointerUpObserver = this.props.globalState.onPointerUpObservable.add((evt) => this._onUp(evt));\r\n        this._pointerMoveObserver = this.props.globalState.onPointerMoveObservable.add(() => this._onMove());\r\n    }\r\n\r\n    override componentDidMount() {\r\n        this.updateGizmo();\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        this.props.globalState.onGizmoUpdateRequireObservable.remove(this._gizmoUpdateObserver);\r\n        this.props.globalState.onPointerUpObservable.remove(this._pointerUpObserver);\r\n        this.props.globalState.onPointerMoveObservable.remove(this._pointerMoveObserver);\r\n    }\r\n\r\n    /**\r\n     * Update the gizmo's positions\r\n     */\r\n    updateGizmo() {\r\n        const node = this.props.control;\r\n        // Calculating the offsets for each scale point.\r\n        const canvasBounds = new Rect(Number.MAX_VALUE, Number.MAX_VALUE, 0, 0);\r\n        const localBounds = CoordinateHelper.ComputeLocalBounds(node);\r\n\r\n        const totalPadding = {\r\n            left: 0,\r\n            right: 0,\r\n            top: 0,\r\n            bottom: 0,\r\n        };\r\n        let current = node.parent;\r\n        while (current !== null && current !== undefined) {\r\n            totalPadding.left += current.paddingLeftInPixels;\r\n            totalPadding.right += current.paddingRightInPixels;\r\n            totalPadding.top += current.paddingTopInPixels;\r\n            totalPadding.bottom += current.paddingBottomInPixels;\r\n\r\n            current = current.parent;\r\n        }\r\n\r\n        const horizontalAdjustment = (totalPadding.left - totalPadding.right) * 0.5;\r\n        localBounds.left += horizontalAdjustment;\r\n        localBounds.right += horizontalAdjustment;\r\n\r\n        const verticalAdjustment = (totalPadding.top - totalPadding.bottom) * 0.5;\r\n        localBounds.top += verticalAdjustment;\r\n        localBounds.bottom += verticalAdjustment;\r\n\r\n        const updatedPoints = this.state.scalePoints.map((scalePoint) => {\r\n            const nodeSpace = new Vector2();\r\n            switch (scalePoint.horizontalPosition) {\r\n                case ScalePointPosition.Left:\r\n                    nodeSpace.x = localBounds.left;\r\n                    break;\r\n                case ScalePointPosition.Center:\r\n                    nodeSpace.x = localBounds.center.x;\r\n                    break;\r\n                case ScalePointPosition.Right:\r\n                    nodeSpace.x = localBounds.right;\r\n                    break;\r\n            }\r\n            switch (scalePoint.verticalPosition) {\r\n                case ScalePointPosition.Top:\r\n                    nodeSpace.y = localBounds.top;\r\n                    break;\r\n                case ScalePointPosition.Center:\r\n                    nodeSpace.y = localBounds.center.y;\r\n                    break;\r\n                case ScalePointPosition.Bottom:\r\n                    nodeSpace.y = localBounds.bottom;\r\n                    break;\r\n            }\r\n            if (scalePoint.isPivot) {\r\n                // Calculate the pivot point\r\n                const pivotX = node.transformCenterX - 0.5;\r\n                const pivotY = node.transformCenterY - 0.5;\r\n                nodeSpace.x = node.widthInPixels * pivotX;\r\n                nodeSpace.y = node.heightInPixels * pivotY;\r\n            }\r\n            const rtt = CoordinateHelper.NodeToRTTSpace(node, nodeSpace.x, nodeSpace.y, undefined);\r\n            const canvas = CoordinateHelper.RttToCanvasSpace(rtt.x, rtt.y);\r\n            if (canvas.x < canvasBounds.left) {\r\n                canvasBounds.left = canvas.x;\r\n            }\r\n            if (canvas.x > canvasBounds.right) {\r\n                canvasBounds.right = canvas.x;\r\n            }\r\n            if (canvas.y < canvasBounds.top) {\r\n                canvasBounds.top = canvas.y;\r\n            }\r\n            if (canvas.y > canvasBounds.bottom) {\r\n                canvasBounds.bottom = canvas.y;\r\n            }\r\n            // edges, and rotate based on the rotation of the control\r\n            scalePoint.position.x = canvas.x;\r\n            scalePoint.position.y = canvas.y;\r\n            scalePoint.rotation = CoordinateHelper.GetRotation(node) * (180 / Math.PI);\r\n            return scalePoint;\r\n        });\r\n        this.setState({\r\n            canvasBounds,\r\n            scalePoints: [...updatedPoints],\r\n        });\r\n    }\r\n\r\n    private _onUp = (evt?: React.PointerEvent | PointerEvent | null) => {\r\n        // if left is still pressed, don't release\r\n        if (evt && evt.buttons & 1) {\r\n            return;\r\n        }\r\n        // cleanup on pointer up\r\n        this.setState({ scalePointDragging: -1, isRotating: false });\r\n    };\r\n\r\n    private _onMove = () => {\r\n        const scene = this.props.globalState.workbench._scene;\r\n        if (this.state.scalePointDragging !== -1) {\r\n            const node = this.props.control;\r\n            const inRTT = CoordinateHelper.MousePointerToRTTSpace(node, scene.pointerX, scene.pointerY);\r\n            const inNodeSpace = CoordinateHelper.RttToLocalNodeSpace(node, inRTT.x, inRTT.y, undefined, this._storedValues);\r\n            this._dragLocalBounds(inNodeSpace, this.props.globalState.shiftKeyPressed);\r\n            this._updateNodeFromLocalBounds();\r\n            this.props.globalState.onPropertyGridUpdateRequiredObservable.notifyObservers();\r\n        }\r\n        if (this.state.isRotating) {\r\n            const angle = Math.atan2(scene.pointerY - this._rotation.pivot.y, scene.pointerX - this._rotation.pivot.x);\r\n            for (const control of this.props.globalState.selectedControls) {\r\n                control.rotation += angle - this._rotation.initialAngleToPivot;\r\n            }\r\n            this._rotation.initialAngleToPivot = angle;\r\n            this.props.globalState.onPropertyGridUpdateRequiredObservable.notifyObservers();\r\n        }\r\n    };\r\n\r\n    private _rotate(x: number, y: number, centerX: number, centerY: number, angle: number) {\r\n        return {\r\n            x: (x - centerX) * Math.cos(angle) - (y - centerY) * Math.sin(angle) + centerX,\r\n            y: (x - centerX) * Math.sin(angle) + (y - centerY) * Math.cos(angle) + centerY,\r\n        };\r\n    }\r\n\r\n    private _dragLocalBounds(toPosition: Vector2, preserveAspectRatio = false) {\r\n        const scalePoint = this.state.scalePoints[this.state.scalePointDragging];\r\n        const newBounds = this._localBounds.clone();\r\n        const currentAspectRatio = MathTools.Round(this._localBounds.width / this._localBounds.height);\r\n\r\n        if (scalePoint.horizontalPosition === ScalePointPosition.Left) {\r\n            newBounds.left = Math.min(this._localBounds.right - 1, toPosition.x);\r\n        }\r\n        if (scalePoint.verticalPosition === ScalePointPosition.Top) {\r\n            newBounds.top = Math.min(this._localBounds.bottom - 1, toPosition.y);\r\n        }\r\n        if (scalePoint.horizontalPosition === ScalePointPosition.Right) {\r\n            newBounds.right = Math.max(this._localBounds.left + 1, toPosition.x);\r\n        }\r\n        if (scalePoint.verticalPosition === ScalePointPosition.Bottom) {\r\n            newBounds.bottom = Math.max(this._localBounds.top + 1, toPosition.y);\r\n        }\r\n\r\n        if (preserveAspectRatio) {\r\n            const deltaWidth = newBounds.width - this._localBounds.width;\r\n            const deltaHeight = newBounds.height - this._localBounds.height;\r\n\r\n            const signInverted = scalePoint.horizontalPosition === ScalePointPosition.Center || scalePoint.verticalPosition === ScalePointPosition.Center;\r\n            const comparison = Math.abs(deltaWidth) > Math.abs(deltaHeight);\r\n            if (signInverted ? comparison : !comparison) {\r\n                const aspectRatioDeltaHeight = deltaWidth / currentAspectRatio;\r\n                if (scalePoint.verticalPosition === ScalePointPosition.Top) {\r\n                    newBounds.top = this._localBounds.top - aspectRatioDeltaHeight;\r\n                } else if (scalePoint.verticalPosition === ScalePointPosition.Bottom) {\r\n                    newBounds.bottom = this._localBounds.bottom + aspectRatioDeltaHeight;\r\n                } else {\r\n                    newBounds.top = this._localBounds.top - aspectRatioDeltaHeight / 2;\r\n                    newBounds.bottom = this._localBounds.bottom + aspectRatioDeltaHeight / 2;\r\n                }\r\n            } else {\r\n                const aspectRatioDeltaWidth = deltaHeight * currentAspectRatio;\r\n                if (scalePoint.horizontalPosition === ScalePointPosition.Left) {\r\n                    newBounds.left = this._localBounds.left - aspectRatioDeltaWidth;\r\n                } else if (scalePoint.horizontalPosition === ScalePointPosition.Right) {\r\n                    newBounds.right = this._localBounds.right + aspectRatioDeltaWidth;\r\n                } else {\r\n                    newBounds.left = this._localBounds.left - aspectRatioDeltaWidth / 2;\r\n                    newBounds.right = this._localBounds.right + aspectRatioDeltaWidth / 2;\r\n                }\r\n            }\r\n        }\r\n\r\n        // apply bounds changes to all controls\r\n        const edges: [\"left\", \"top\", \"right\", \"bottom\"] = [\"left\", \"top\", \"right\", \"bottom\"];\r\n        for (const node of this.props.globalState.selectedControls) {\r\n            const initialBounds = node.metadata.localBounds as Rect;\r\n            const nb = initialBounds.clone();\r\n            // account for rotation: if other control is rotated 90 degrees\r\n            // relative to primary control, we should modify top instead of left\r\n            const rotationModifier = (modulo(this.props.control.rotation - node.rotation, Math.PI * 2) / Math.PI) * 2;\r\n            edges.forEach((edge, index) => {\r\n                const modifiedIndex = Math.round(index + rotationModifier) % 4;\r\n                const flipSign = index < 2 === modifiedIndex < 2 ? 1 : -1;\r\n                nb[edges[modifiedIndex]] += (newBounds[edge] - this._localBounds[edge]) * flipSign;\r\n            });\r\n            nb.left = Math.min(initialBounds.right - 1, nb.left);\r\n            nb.top = Math.min(initialBounds.bottom - 1, nb.top);\r\n            nb.right = Math.max(initialBounds.left + 1, nb.right);\r\n            nb.bottom = Math.max(initialBounds.top + 1, nb.bottom);\r\n            node.metadata.localBounds = nb;\r\n        }\r\n        this._localBounds = newBounds;\r\n    }\r\n\r\n    private _updateNodeFromLocalBounds() {\r\n        const scalePoint = this.state.scalePoints[this.state.scalePointDragging];\r\n        const left = scalePoint.horizontalPosition === ScalePointPosition.Left && scalePoint.verticalPosition !== ScalePointPosition.Center;\r\n        const top = scalePoint.verticalPosition === ScalePointPosition.Top && scalePoint.horizontalPosition !== ScalePointPosition.Center;\r\n        for (const selectedControl of this.props.globalState.selectedControls) {\r\n            const width = selectedControl.metadata.localBounds.right - selectedControl.metadata.localBounds.left;\r\n            const height = selectedControl.metadata.localBounds.bottom - selectedControl.metadata.localBounds.top;\r\n            // calculate the center point\r\n            const localRotation = CoordinateHelper.GetRotation(selectedControl, true);\r\n            const localScaling = CoordinateHelper.GetScale(selectedControl, true);\r\n            const absoluteCenter = (selectedControl.metadata.localBounds as Rect).center;\r\n            const center = absoluteCenter.clone();\r\n            // move to pivot\r\n            center.multiplyInPlace(localScaling);\r\n            const cosRotation = Math.cos(localRotation);\r\n            const sinRotation = Math.sin(localRotation);\r\n            const cosRotation180 = Math.cos(localRotation + Math.PI);\r\n            const sinRotation180 = Math.sin(localRotation + Math.PI);\r\n\r\n            const widthDelta = (selectedControl.metadata.storedValues.width - width) * 0.5;\r\n            const heightDelta = (selectedControl.metadata.storedValues.height - height) * 0.5;\r\n            // alignment compensation\r\n            switch (selectedControl.horizontalAlignment) {\r\n                case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                    center.x += (left ? widthDelta : -absoluteCenter.x) * cosRotation;\r\n                    center.y += (left ? -widthDelta : absoluteCenter.x) * sinRotation;\r\n                    break;\r\n                case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                    center.x += (left ? -widthDelta : absoluteCenter.x) * cosRotation;\r\n                    center.y += (left ? widthDelta : -absoluteCenter.x) * sinRotation;\r\n                    break;\r\n            }\r\n\r\n            switch (selectedControl.verticalAlignment) {\r\n                case Control.VERTICAL_ALIGNMENT_TOP:\r\n                    center.y += (top ? -heightDelta : absoluteCenter.y) * cosRotation180;\r\n                    center.x += (top ? -heightDelta : absoluteCenter.y) * sinRotation180;\r\n                    break;\r\n                case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                    center.y += (top ? heightDelta : -absoluteCenter.y) * cosRotation180;\r\n                    center.x += (top ? heightDelta : -absoluteCenter.y) * sinRotation180;\r\n                    break;\r\n            }\r\n\r\n            // rotate the center around 0,0\r\n            const rotatedCenter = this._rotate(center.x, center.y, 0, 0, localRotation);\r\n            const properties: DimensionProperties[] = [\"left\", \"top\", \"width\", \"height\"];\r\n            for (const property of properties) {\r\n                let newPixels = 0;\r\n                switch (property) {\r\n                    case \"left\":\r\n                        newPixels = round(selectedControl.metadata.storedValues.left + rotatedCenter.x);\r\n                        break;\r\n                    case \"top\":\r\n                        newPixels = round(selectedControl.metadata.storedValues.top + rotatedCenter.y);\r\n                        break;\r\n                    case \"width\":\r\n                        newPixels = round(width);\r\n                        break;\r\n                    case \"height\":\r\n                        newPixels = round(height);\r\n                        break;\r\n                }\r\n                // compute real change in property\r\n                const initialUnit = (selectedControl as any)[`_${property}`].unit;\r\n                (selectedControl as any)[`${property}InPixels`] = newPixels;\r\n                if (initialUnit === ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n                    CoordinateHelper.ConvertToPercentage(selectedControl, [property]);\r\n                }\r\n            }\r\n\r\n            if (selectedControl.typeName === \"Image\") {\r\n                (selectedControl as Image).autoScale = false;\r\n            } else if (selectedControl.typeName === \"TextBlock\") {\r\n                (selectedControl as TextBlock).resizeToFit = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _beginDraggingScalePoint = (scalePointIndex: number) => {\r\n        this.setState({ scalePointDragging: scalePointIndex });\r\n        const node = this.props.control;\r\n        this._localBounds = CoordinateHelper.ComputeLocalBounds(node);\r\n        this._storedValues = new Rect(node.leftInPixels, node.topInPixels, node.leftInPixels + node.widthInPixels, node.topInPixels + node.heightInPixels);\r\n        for (const node of this.props.globalState.selectedControls) {\r\n            node.metadata.localBounds = CoordinateHelper.ComputeLocalBounds(node);\r\n            node.metadata.storedValues = new Rect(node.leftInPixels, node.topInPixels, node.leftInPixels + node.widthInPixels, node.topInPixels + node.heightInPixels);\r\n        }\r\n    };\r\n\r\n    private _beginRotate = () => {\r\n        const scene = this.props.globalState.workbench._scene;\r\n        const node = this.props.control;\r\n        const nodeSpace = new Vector2(node.transformCenterX, node.transformCenterY);\r\n        const rtt = CoordinateHelper.NodeToRTTSpace(node, nodeSpace.x, nodeSpace.y, undefined);\r\n        const canvas = CoordinateHelper.RttToCanvasSpace(rtt.x, rtt.y);\r\n        const pivot = new Vector2(canvas.x, canvas.y);\r\n        const initialAngleToPivot = Math.atan2(scene.pointerY - pivot.y, scene.pointerX - pivot.x);\r\n        this._rotation = {\r\n            pivot,\r\n            initialAngleToPivot,\r\n        };\r\n        this.setState({ isRotating: true });\r\n    };\r\n\r\n    override render() {\r\n        return (\r\n            <div className=\"gizmo\">\r\n                {lines.map((line, index) => {\r\n                    const start = this.state.scalePoints[line[0]];\r\n                    const end = this.state.scalePoints[line[1]];\r\n                    // the vector between start and end\r\n                    const delta = end.position.subtract(start.position);\r\n                    const angle = Math.atan2(delta.y, delta.x);\r\n                    const length = delta.length();\r\n                    return (\r\n                        <div\r\n                            className=\"bounding-box-line\"\r\n                            key={index}\r\n                            style={{\r\n                                left: `${start.position.x + delta.x / 2}px`,\r\n                                top: `${start.position.y + delta.y / 2}px`,\r\n                                width: `${length}px`,\r\n                                transform: `translate(-50%, -50%) rotate(${angle}rad)`,\r\n                            }}\r\n                        ></div>\r\n                    );\r\n                })}\r\n                {this.state.scalePoints.map((scalePoint, index) => (\r\n                    <GizmoScalePoint\r\n                        clickable={this.state.scalePointDragging === -1 && !scalePoint.isPivot && !this.state.isRotating}\r\n                        scalePoint={scalePoint}\r\n                        key={index}\r\n                        onDrag={() => this._beginDraggingScalePoint(index)}\r\n                        onRotate={() => this._beginRotate()}\r\n                        onUp={() => this._onUp()}\r\n                        canRotate={true}\r\n                    />\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
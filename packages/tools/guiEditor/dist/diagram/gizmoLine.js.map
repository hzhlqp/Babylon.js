{"version":3,"file":"gizmoLine.js","sourceRoot":"","sources":["../../src/diagram/gizmoLine.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport type { GlobalState } from \"../globalState\";\r\nimport type { IScalePoint } from \"./gizmoScalePoint\";\r\nimport { GizmoScalePoint, ScalePointPosition } from \"./gizmoScalePoint\";\r\nimport { Vector2 } from \"core/Maths/math\";\r\nimport type { Line } from \"gui/2D/controls/line\";\r\nimport { CoordinateHelper } from \"./coordinateHelper\";\r\nimport { Matrix2D, MathTools } from \"gui/2D/math2D\";\r\nimport type { ValueAndUnit } from \"gui/2D/valueAndUnit\";\r\nimport type { AdvancedDynamicTexture } from \"gui/2D/advancedDynamicTexture\";\r\n\r\ninterface IGizmoLineProps {\r\n    globalState: GlobalState;\r\n    control: Line;\r\n}\r\n\r\nfunction getPivotToRef(x1: number, y1: number, x2: number, y2: number, centerX: number, centerY: number, ref: Vector2) {\r\n    const minX = Math.min(x1, x2);\r\n    const minY = Math.min(y1, y2);\r\n    const maxX = Math.max(x1, x2);\r\n    const maxY = Math.max(y1, y2);\r\n    const width = maxX - minX;\r\n    const height = maxY - minY;\r\n\r\n    // Get pivot\r\n    const xm = minX + width * centerX;\r\n    const ym = minY + height * centerY;\r\n\r\n    ref.x = xm;\r\n    ref.y = ym;\r\n}\r\n\r\nconst TmpVectors = [new Vector2(), new Vector2(), new Vector2()];\r\n\r\n/**\r\n * This class represents the gizmo drawn on a line Control.\r\n * It is used to scale and rotate the control around a pivot point\r\n * @param props the properties of the gizmo\r\n * @returns a gizmo line\r\n */\r\nexport function GizmoLine(props: IGizmoLineProps) {\r\n    const { control, globalState } = props;\r\n    const isPivotMoving = React.useRef(false);\r\n    const isDragging = React.useRef(false);\r\n    const isRotating = React.useRef(false);\r\n    const movedScalePoint = React.useRef<number>();\r\n    const lastCursor = React.useRef(new Vector2());\r\n    const pivot = React.useRef(new Vector2());\r\n\r\n    const [scalePoints, setScalePoints] = React.useState<IScalePoint[]>([\r\n        {\r\n            position: new Vector2(),\r\n            horizontalPosition: ScalePointPosition.Left,\r\n            verticalPosition: ScalePointPosition.Top,\r\n            rotation: 0,\r\n            isPivot: false,\r\n            defaultRotation: 0,\r\n            id: 0,\r\n        },\r\n        {\r\n            position: new Vector2(),\r\n            horizontalPosition: ScalePointPosition.Center,\r\n            verticalPosition: ScalePointPosition.Center,\r\n            rotation: 0,\r\n            isPivot: true,\r\n            defaultRotation: 0,\r\n            id: 1,\r\n        },\r\n        {\r\n            position: new Vector2(),\r\n            horizontalPosition: ScalePointPosition.Right,\r\n            verticalPosition: ScalePointPosition.Bottom,\r\n            rotation: 0,\r\n            isPivot: false,\r\n            defaultRotation: 0,\r\n            id: 2,\r\n        },\r\n    ]);\r\n\r\n    React.useEffect(() => {\r\n        // setup\r\n        const gizmoUpdateObserver = globalState.onGizmoUpdateRequireObservable.add(() => {\r\n            update();\r\n        });\r\n        return () => {\r\n            // cleanup\r\n            globalState.onGizmoUpdateRequireObservable.remove(gizmoUpdateObserver);\r\n        };\r\n    }, []);\r\n\r\n    const update = () => {\r\n        const line = control as Line;\r\n        const x1 = line._cachedParentMeasure.left + line._x1.getValue(line._host);\r\n        const y1 = line._cachedParentMeasure.top + line._y1.getValue(line._host);\r\n        const x2 = line._cachedParentMeasure.left + line._effectiveX2;\r\n        const y2 = line._cachedParentMeasure.top + line._effectiveY2;\r\n\r\n        const v1 = TmpVectors[0].set(x1, y1);\r\n        const v2 = TmpVectors[1].set(x2, y2);\r\n        const vm = TmpVectors[2];\r\n        getPivotToRef(x1, y1, x2, y2, line.transformCenterX, line.transformCenterY, vm);\r\n\r\n        const matrix = line._transformMatrix;\r\n\r\n        matrix.transformCoordinates(v1.x, v1.y, v1);\r\n        matrix.transformCoordinates(v2.x, v2.y, v2);\r\n        matrix.transformCoordinates(vm.x, vm.y, vm);\r\n\r\n        pivot.current = vm;\r\n\r\n        const positions = [v1, vm, v2];\r\n\r\n        setScalePoints(\r\n            scalePoints.map((point, index) => {\r\n                const position = positions[index];\r\n                return {\r\n                    ...point,\r\n                    position,\r\n                    rotation: line.rotation,\r\n                };\r\n            })\r\n        );\r\n    };\r\n\r\n    const _getAddAndRound = (value: ValueAndUnit, host: AdvancedDynamicTexture, delta: number) => {\r\n        return MathTools.Round(value.getValue(host) + delta);\r\n    };\r\n\r\n    const _getDeltasToRef = (currentPointer: Vector2, ref: Vector2) => {\r\n        // We have to compute the difference in movement in the local node\r\n        // coordintes, so that it accounts for zoom\r\n        const rttClientCoords = CoordinateHelper.MousePointerToRTTSpace(control, currentPointer.x, currentPointer.y);\r\n        const localClientCoords = CoordinateHelper.RttToLocalNodeSpace(control, rttClientCoords.x, rttClientCoords.y);\r\n\r\n        const rttLastCoordinates = CoordinateHelper.MousePointerToRTTSpace(control, lastCursor.current.x, lastCursor.current.y);\r\n        const localLastCoordinates = CoordinateHelper.RttToLocalNodeSpace(control, rttLastCoordinates.x, rttLastCoordinates.y);\r\n\r\n        const delta = TmpVectors[0];\r\n        localClientCoords.subtractToRef(localLastCoordinates, delta);\r\n\r\n        const rotatedDelta = TmpVectors[1];\r\n        delta.rotateToRef(control.rotation, rotatedDelta);\r\n\r\n        ref.x = rotatedDelta.x;\r\n        ref.y = rotatedDelta.y;\r\n    };\r\n\r\n    const _dragPivot = (currentPointer: Vector2) => {\r\n        const deltas = TmpVectors[0];\r\n        _getDeltasToRef(currentPointer, deltas);\r\n\r\n        control.x1 = _getAddAndRound(control._x1, control._host, deltas.x);\r\n        control.y1 = _getAddAndRound(control._y1, control._host, deltas.y);\r\n        control.x2 = _getAddAndRound(control._x2, control._host, deltas.x);\r\n        control.y2 = _getAddAndRound(control._y2, control._host, deltas.y);\r\n\r\n        globalState.onPropertyGridUpdateRequiredObservable.notifyObservers();\r\n    };\r\n\r\n    const _dragEndpoint = (currentPointer: Vector2) => {\r\n        const deltas = TmpVectors[0];\r\n        _getDeltasToRef(currentPointer, deltas);\r\n\r\n        // Move only the scale point that was touched\r\n        const movedPointIndex = movedScalePoint.current;\r\n\r\n        if (movedPointIndex === 0) {\r\n            // Moved first point, (x1, y1)\r\n            control.x1 = _getAddAndRound(control._x1, control._host, deltas.x);\r\n            control.y1 = _getAddAndRound(control._y1, control._host, deltas.y);\r\n        } else if (movedPointIndex === 2) {\r\n            // Moved second point, (x2, y2)\r\n            control.x2 = _getAddAndRound(control._x2, control._host, deltas.x);\r\n            control.y2 = _getAddAndRound(control._y2, control._host, deltas.y);\r\n        }\r\n        globalState.onPropertyGridUpdateRequiredObservable.notifyObservers();\r\n    };\r\n\r\n    const _rotateEndpoint = (currentPointer: Vector2) => {\r\n        const currentToPivot = currentPointer.subtract(pivot.current);\r\n        currentToPivot.normalize();\r\n        const lastToPivot = lastCursor.current.subtract(pivot.current);\r\n        lastToPivot.normalize();\r\n\r\n        const dotProd = Vector2.Dot(currentToPivot, lastToPivot);\r\n        const angle = Math.acos(dotProd);\r\n\r\n        const direction = -Math.sign(currentToPivot.x * lastToPivot.y - currentToPivot.y * lastToPivot.x);\r\n\r\n        if (!isNaN(angle)) {\r\n            control.rotation += direction * angle;\r\n            control.rotation = MathTools.Round(control.rotation);\r\n            globalState.onPropertyGridUpdateRequiredObservable.notifyObservers();\r\n        }\r\n    };\r\n\r\n    const onMove = () => {\r\n        const scene = globalState.workbench._scene;\r\n        const currentPointer = new Vector2(scene.pointerX, scene.pointerY);\r\n        if (isDragging.current && isPivotMoving.current) {\r\n            _dragPivot(currentPointer);\r\n        } else if (isDragging.current) {\r\n            _dragEndpoint(currentPointer);\r\n        } else if (isRotating.current) {\r\n            _rotateEndpoint(currentPointer);\r\n        }\r\n        lastCursor.current = currentPointer;\r\n    };\r\n\r\n    const onUp = () => {\r\n        isDragging.current = false;\r\n        isRotating.current = false;\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        const pointerMoveObserver = props.globalState.onPointerMoveObservable.add(onMove);\r\n        const pointerUpObserver = props.globalState.onPointerUpObservable.add(onUp);\r\n        return () => {\r\n            props.globalState.onPointerMoveObservable.remove(pointerMoveObserver);\r\n            props.globalState.onPointerUpObservable.remove(pointerUpObserver);\r\n        };\r\n    }, []);\r\n\r\n    const onDrag = (event?: React.PointerEvent<HTMLDivElement>, scalePoint?: IScalePoint) => {\r\n        if (event && scalePoint) {\r\n            const scene = globalState.workbench._scene;\r\n            lastCursor.current = new Vector2(scene.pointerX, scene.pointerY);\r\n            isPivotMoving.current = scalePoint.isPivot;\r\n            // If the control has any rotation, reset the\r\n            // rotation, modifying the so the scale behave as expected\r\n            if (!scalePoint.isPivot && control.rotation) {\r\n                const line = control as Line;\r\n                const x1 = line._x1.getValue(line._host);\r\n                const y1 = line._y1.getValue(line._host);\r\n                const x2 = line._x2.getValue(line._host);\r\n                const y2 = line._y2.getValue(line._host);\r\n\r\n                const v1 = TmpVectors[0].set(x1, y1);\r\n                const v2 = TmpVectors[1].set(x2, y2);\r\n                const vm = TmpVectors[2];\r\n\r\n                getPivotToRef(x1, y1, x2, y2, line.transformCenterX, line.transformCenterY, vm);\r\n\r\n                const finalTransform = Matrix2D.Identity();\r\n                const currentTransform = Matrix2D.Identity();\r\n                Matrix2D.TranslationToRef(-vm.x, -vm.y, currentTransform);\r\n                finalTransform.multiplyToRef(currentTransform, finalTransform);\r\n                Matrix2D.RotationToRef(control.rotation, currentTransform);\r\n                finalTransform.multiplyToRef(currentTransform, finalTransform);\r\n                Matrix2D.TranslationToRef(vm.x, vm.y, currentTransform);\r\n                finalTransform.multiplyToRef(currentTransform, finalTransform);\r\n\r\n                finalTransform.transformCoordinates(v1.x, v1.y, v1);\r\n                finalTransform.transformCoordinates(v2.x, v2.y, v2);\r\n\r\n                control.rotation = 0;\r\n                control.x1 = MathTools.Round(v1.x);\r\n                control.y1 = MathTools.Round(v1.y);\r\n                control.x2 = MathTools.Round(v2.x);\r\n                control.y2 = MathTools.Round(v2.y);\r\n                globalState.onPropertyGridUpdateRequiredObservable.notifyObservers();\r\n            }\r\n            isDragging.current = true;\r\n            isRotating.current = false;\r\n            movedScalePoint.current = scalePoint.id!;\r\n        }\r\n    };\r\n\r\n    const onRotate = (event?: React.PointerEvent<HTMLDivElement>) => {\r\n        if (event) {\r\n            isRotating.current = true;\r\n            isDragging.current = false;\r\n\r\n            const scene = globalState.workbench._scene;\r\n            lastCursor.current = new Vector2(scene.pointerX, scene.pointerY);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"gizmo\">\r\n            {scalePoints.map((point, index) => (\r\n                <GizmoScalePoint scalePoint={point} allowClickOnPivot={true} clickable={true} onDrag={onDrag} onRotate={onRotate} onUp={onUp} key={index} canRotate={true} />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n"]}
{"version":3,"file":"workbench.js","sourceRoot":"","sources":["../../src/diagram/workbench.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport * as React from \"react\";\r\nimport type { GlobalState } from \"../globalState\";\r\nimport { DragOverLocation, GUIEditorTool } from \"../globalState\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { Control } from \"gui/2D/controls/control\";\r\nimport { AdvancedDynamicTexture } from \"gui/2D/advancedDynamicTexture\";\r\nimport { Vector2, Vector3 } from \"core/Maths/math.vector\";\r\nimport { Engine } from \"core/Engines/engine\";\r\nimport { Scene } from \"core/scene\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { ArcRotateCamera } from \"core/Cameras/arcRotateCamera\";\r\nimport { HemisphericLight } from \"core/Lights/hemisphericLight\";\r\nimport { Axis } from \"core/Maths/math.axis\";\r\nimport { Epsilon } from \"core/Maths/math.constants\";\r\nimport { Container } from \"gui/2D/controls/container\";\r\nimport type { KeyboardInfo } from \"core/Events/keyboardEvents\";\r\nimport { KeyboardEventTypes } from \"core/Events/keyboardEvents\";\r\nimport type { Line } from \"gui/2D/controls/line\";\r\nimport type { Grid } from \"gui/2D/controls/grid\";\r\nimport { Tools } from \"../tools\";\r\nimport type { Observable, Observer } from \"core/Misc/observable\";\r\nimport type { ISize } from \"core/Maths/math\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport type { DimensionProperties } from \"./coordinateHelper\";\r\nimport { CoordinateHelper } from \"./coordinateHelper\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport \"./workbenchCanvas.scss\";\r\nimport { ValueAndUnit } from \"gui/2D/valueAndUnit\";\r\nimport type { StackPanel } from \"gui/2D/controls/stackPanel\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { RandomGUID } from \"core/Misc/guid\";\r\nimport { DataStorage } from \"core/Misc/dataStorage\";\r\nimport type { Vector2WithInfo } from \"gui/2D/math2D\";\r\n\r\nexport interface IWorkbenchComponentProps {\r\n    globalState: GlobalState;\r\n}\r\n\r\nexport enum ConstraintDirection {\r\n    NONE = 0,\r\n    X = 2, // Horizontal constraint\r\n    Y = 3, // Vertical constraint\r\n}\r\n\r\n/**\r\n * This function will throttle calls to functions.\r\n *\r\n * @param callback callback to call.\r\n * @param time time to wait between calls in ms.\r\n * @returns callback function.\r\n */\r\nfunction throttle(callback: (...args: any[]) => void, time: number) {\r\n    let lastCalledTime: number = 0;\r\n    return function (...args: any[]) {\r\n        const now = Date.now();\r\n        if (now - lastCalledTime < time) {\r\n            return;\r\n        }\r\n        lastCalledTime = now;\r\n        callback(...args);\r\n    };\r\n}\r\n\r\nconst ARROW_KEY_MOVEMENT_SMALL = 1; // px\r\nconst ARROW_KEY_MOVEMENT_LARGE = 5; // px\r\n\r\nconst MAX_POINTER_TRAVEL_DISTANCE = 5; //px^2. determines how far the pointer can move to be treated as a drag vs. a click\r\nconst CONTROL_OFFSET = 10; //offset in pixels for when a control is added to editor\r\n\r\nexport class WorkbenchComponent extends React.Component<IWorkbenchComponentProps> {\r\n    private _mouseDown: boolean;\r\n    private _rootContainer: React.RefObject<HTMLCanvasElement>;\r\n    private _setConstraintDirection: boolean = false;\r\n    private _mouseStartPoint: Nullable<Vector2> = null;\r\n    public _scene: Scene;\r\n    private _constraintDirection = ConstraintDirection.NONE;\r\n    private _panning: boolean;\r\n    private _isOverGUINode: Control[] = [];\r\n    private _engine: Engine;\r\n    private _guiRenderObserver: Nullable<Observer<AdvancedDynamicTexture>>;\r\n    private _doubleClick: Nullable<Control> = null;\r\n    private _currLeft: number = 0;\r\n    private _currTop: number = 0;\r\n    private _controlsHit: Control[] = [];\r\n    private _pointerTravelDistance = 0;\r\n    private _processSelectionOnUp = false;\r\n    private _visibleRegionContainer: Container;\r\n    private _centerZoomMousePosition: Vector2 = new Vector2(0, 0);\r\n    private _hasPerformedDragZoom: boolean = false;\r\n\r\n    private static _addedFonts: string[] = [];\r\n    public static get addedFonts() {\r\n        return this._addedFonts;\r\n    }\r\n\r\n    public get visibleRegionContainer() {\r\n        return this._visibleRegionContainer;\r\n    }\r\n\r\n    private _panAndZoomContainer: Container;\r\n    public get panAndZoomContainer() {\r\n        return this._panAndZoomContainer;\r\n    }\r\n    private _trueRootContainer: Container;\r\n    public set trueRootContainer(value: Container) {\r\n        if (value === this._trueRootContainer) return;\r\n        this._visibleRegionContainer.children.forEach((child) => this._visibleRegionContainer.removeControl(child));\r\n        this._visibleRegionContainer.addControl(value);\r\n        this._trueRootContainer = value;\r\n        value._host = this.props.globalState.guiTexture;\r\n    }\r\n    public get trueRootContainer() {\r\n        return this._trueRootContainer;\r\n    }\r\n\r\n    private _defaultGUISize: ISize = { width: 1024, height: 1024 };\r\n    private _initialPanningOffset: Vector2 = new Vector2(0, 0);\r\n    private _panningOffset = new Vector2(0, 0);\r\n    private _zoomFactor = 1;\r\n    private _zoomModeIncrement = 0.2;\r\n    private _guiSize = this._defaultGUISize;\r\n    private _pasteDisabled = true;\r\n\r\n    public get guiSize() {\r\n        return this._guiSize;\r\n    }\r\n    public get pasteDisabled(): boolean {\r\n        return this._pasteDisabled;\r\n    }\r\n    // sets the size of the GUI and makes all necessary adjustments\r\n    public set guiSize(value: ISize) {\r\n        this._guiSize = { ...value };\r\n        this._visibleRegionContainer.widthInPixels = this._guiSize.width;\r\n        this._visibleRegionContainer.heightInPixels = this._guiSize.height;\r\n        this.props.globalState.onResizeObservable.notifyObservers(this._guiSize);\r\n        this.props.globalState.onReframeWindowObservable.notifyObservers();\r\n        this.props.globalState.onWindowResizeObservable.notifyObservers();\r\n    }\r\n\r\n    public applyEditorTransformation() {\r\n        const adt = this.props.globalState.guiTexture;\r\n        if (adt._rootContainer != this._panAndZoomContainer) {\r\n            adt._rootContainer = this._panAndZoomContainer;\r\n            this._visibleRegionContainer.addControl(this._trueRootContainer);\r\n            this.props.globalState.guiTexture.markAsDirty();\r\n        }\r\n        if (adt.getSize().width !== this._engine.getRenderWidth() || adt.getSize().height !== this._engine.getRenderHeight()) {\r\n            adt.scaleTo(this._engine.getRenderWidth(), this._engine.getRenderHeight());\r\n        }\r\n        if (adt.getSize().width !== this._engine.getRenderWidth() || adt.getSize().height !== this._engine.getRenderHeight()) {\r\n            adt.scaleTo(this._engine.getRenderWidth(), this._engine.getRenderHeight());\r\n        }\r\n        this._trueRootContainer.clipContent = false;\r\n        this._trueRootContainer.clipChildren = false;\r\n    }\r\n\r\n    public removeEditorTransformation() {\r\n        const adt = this.props.globalState.guiTexture;\r\n        if (adt._rootContainer != this._trueRootContainer) {\r\n            this._visibleRegionContainer.removeControl(this._trueRootContainer);\r\n            adt._rootContainer = this._trueRootContainer;\r\n        }\r\n        this._trueRootContainer.clipContent = true;\r\n        this._trueRootContainer.clipChildren = true;\r\n    }\r\n\r\n    private _reframeWindow() {\r\n        this._panningOffset = new Vector2(0, 0);\r\n        const xFactor = this._engine.getRenderWidth() / this.guiSize.width;\r\n        const yFactor = this._engine.getRenderHeight() / this.guiSize.height;\r\n        this._zoomFactor = Math.min(xFactor, yFactor) * 0.9;\r\n    }\r\n\r\n    constructor(props: IWorkbenchComponentProps) {\r\n        super(props);\r\n        const { globalState } = props;\r\n        this._rootContainer = React.createRef();\r\n\r\n        globalState.onSelectionChangedObservable.add(() => this.updateNodeOutlines());\r\n\r\n        globalState.onToolChangeObservable.add(() => {\r\n            this.forceUpdate();\r\n        });\r\n        // Get the canvas element from the DOM.\r\n\r\n        globalState.onFitControlsToWindowObservable.add(() => {\r\n            if (globalState.selectedControls.length) {\r\n                let minX = Number.MAX_SAFE_INTEGER;\r\n                let minY = Number.MAX_SAFE_INTEGER;\r\n\r\n                let maxX = -Number.MAX_SAFE_INTEGER;\r\n                let maxY = -Number.MAX_SAFE_INTEGER;\r\n\r\n                // Find bounding box of selected controls\r\n                for (const selectedControl of globalState.selectedControls) {\r\n                    const left = -selectedControl.widthInPixels / 2;\r\n                    const top = -selectedControl.heightInPixels / 2;\r\n\r\n                    const right = left! + selectedControl.widthInPixels;\r\n                    const bottom = top! + selectedControl.heightInPixels;\r\n\r\n                    // Compute all four corners of the control in root space\r\n                    const leftTopRS = CoordinateHelper.NodeToRTTSpace(selectedControl, left, top, new Vector2(), undefined, this.trueRootContainer);\r\n                    const rightBottomRS = CoordinateHelper.NodeToRTTSpace(selectedControl, right, bottom, new Vector2(), undefined, this.trueRootContainer);\r\n                    const leftBottomRS = CoordinateHelper.NodeToRTTSpace(selectedControl, left, bottom, new Vector2(), undefined, this.trueRootContainer);\r\n                    const rightTopRS = CoordinateHelper.NodeToRTTSpace(selectedControl, right, top, new Vector2(), undefined, this.trueRootContainer);\r\n\r\n                    minX = Math.min(minX, leftTopRS.x, rightBottomRS.x, leftBottomRS.x, rightTopRS.x);\r\n                    minY = Math.min(minY, leftTopRS.y, rightBottomRS.y, leftBottomRS.y, rightTopRS.y);\r\n\r\n                    maxX = Math.max(maxX, leftTopRS.x, rightBottomRS.x, leftBottomRS.x, rightTopRS.x);\r\n                    maxY = Math.max(maxY, leftTopRS.y, rightBottomRS.y, leftBottomRS.y, rightTopRS.y);\r\n                }\r\n\r\n                // Find width and height of bounding box\r\n                const width = maxX - minX;\r\n                const height = maxY - minY;\r\n\r\n                // Calculate the offset on the center of the bounding box\r\n                const centerX = (minX + maxX) / 2;\r\n                const centerY = (minY + maxY) / 2;\r\n\r\n                this._panningOffset = new Vector2(-centerX, centerY);\r\n\r\n                // Calculate the zoom factors based on width and height\r\n                const xFactor = this._engine.getRenderWidth() / width;\r\n                const yFactor = this._engine.getRenderHeight() / height;\r\n                this._zoomFactor = Math.min(xFactor, yFactor) * 0.9;\r\n            } else {\r\n                this._reframeWindow();\r\n            }\r\n        });\r\n\r\n        globalState.onReframeWindowObservable.add(() => {\r\n            this._reframeWindow();\r\n        });\r\n\r\n        globalState.onOutlineChangedObservable.add(() => {\r\n            this.updateNodeOutlines();\r\n        });\r\n\r\n        globalState.onSelectionChangedObservable.add(() => {\r\n            this.updateNodeOutlines();\r\n        });\r\n\r\n        globalState.onParentingChangeObservable.add((control) => {\r\n            this.parent(control);\r\n        });\r\n\r\n        globalState.hostDocument!.addEventListener(\"keyup\", this.keyEvent, false);\r\n\r\n        // Hotkey shortcuts\r\n        globalState.hostDocument!.addEventListener(\"keydown\", this.keyEvent, false);\r\n        globalState.hostDocument!.defaultView!.addEventListener(\"blur\", this.blurEvent, false);\r\n        let framesToUpdate = 1;\r\n        globalState.onWindowResizeObservable.add(() => {\r\n            // update the size for the next 5 frames\r\n            framesToUpdate += 5;\r\n        });\r\n        globalState.onNewSceneObservable.add((scene) => {\r\n            scene &&\r\n                scene.onBeforeRenderObservable.add(() => {\r\n                    if (framesToUpdate > 0) {\r\n                        framesToUpdate--;\r\n                        globalState.onGizmoUpdateRequireObservable.notifyObservers();\r\n                        this._engine.resize();\r\n                        globalState.onArtBoardUpdateRequiredObservable.notifyObservers();\r\n                    }\r\n                });\r\n        });\r\n\r\n        globalState.onCopyObservable.add((copyFn) => this.copyToClipboard(copyFn));\r\n        globalState.onCutObservable.add((copyFn) => this.cutToClipboard(copyFn));\r\n        globalState.onPasteObservable.add((content) => this.pasteFromClipboard(content));\r\n\r\n        globalState.workbench = this;\r\n        globalState.onResizeObservable.notifyObservers(this._guiSize);\r\n\r\n        globalState.onPopupClosedObservable.add(() => {\r\n            this.dispose();\r\n        });\r\n    }\r\n\r\n    keyEvent = (evt: KeyboardEvent) => {\r\n        if ((evt.target as HTMLElement).nodeName === \"INPUT\") return;\r\n        if (evt.shiftKey) {\r\n            this._setConstraintDirection = this._constraintDirection === ConstraintDirection.NONE;\r\n        } else {\r\n            this._setConstraintDirection = false;\r\n            this._constraintDirection = ConstraintDirection.NONE;\r\n        }\r\n        this.props.globalState.shiftKeyPressed = evt.shiftKey && evt.type === \"keydown\";\r\n\r\n        if (evt.key === \"Delete\" || evt.key === \"Backspace\") {\r\n            if (!this.props.globalState.lockObject.lock) {\r\n                this.props.globalState.deleteSelectedNodes();\r\n            }\r\n        }\r\n\r\n        if (this.props.globalState.keys.isKeyDown(\"control\") && !this.props.globalState.lockObject.lock) {\r\n            if (evt.key === \"a\") {\r\n                evt.preventDefault();\r\n                this.props.globalState.setSelection(this.trueRootContainer.children);\r\n            }\r\n        }\r\n    };\r\n\r\n    public copyToClipboard(copyFn: (content: string) => void) {\r\n        this._pasteDisabled = false;\r\n        const controlList: any[] = [];\r\n        for (const control of this.props.globalState.selectedControls) {\r\n            // For grid controls, have to save current position in it\r\n            if (control.parent?.getClassName() === \"Grid\") {\r\n                const cellInfo = (control.parent as Grid).getChildCellInfo(control);\r\n                const [row, column] = cellInfo.split(\":\");\r\n                control.metadata = { ...control.metadata, _cellInfo: { row, column } };\r\n            }\r\n            const obj = {};\r\n            control.serialize(obj);\r\n\r\n            controlList.push(obj);\r\n            this._currLeft = control.leftInPixels;\r\n            this._currTop = control.topInPixels;\r\n        }\r\n\r\n        copyFn(\r\n            JSON.stringify({\r\n                GUIClipboard: true,\r\n                controls: controlList,\r\n            })\r\n        );\r\n    }\r\n\r\n    public cutToClipboard(copyFn: (content: string) => void) {\r\n        this.copyToClipboard(copyFn);\r\n        this.props.globalState.deleteSelectedNodes();\r\n    }\r\n\r\n    public pasteFromClipboard(clipboardContents: string) {\r\n        try {\r\n            const parsed = JSON.parse(clipboardContents);\r\n            if (parsed.GUIClipboard) {\r\n                const newSelection = [];\r\n                for (const control of parsed.controls) {\r\n                    newSelection.push(Control.Parse(control, this.props.globalState.guiTexture));\r\n                }\r\n\r\n                if (newSelection[0].parent?.typeName != \"StackPanel\") {\r\n                    this._currLeft += CONTROL_OFFSET;\r\n                    this._currTop += CONTROL_OFFSET;\r\n                }\r\n\r\n                newSelection[0].leftInPixels = this._currLeft;\r\n                newSelection[0].topInPixels = this._currTop;\r\n\r\n                const newGuiNode = this.props.globalState.workbench.appendBlock(newSelection[0]);\r\n                if (newGuiNode.parent?.typeName === \"Grid\" && newGuiNode.metadata?._cellInfo) {\r\n                    const { row, column } = newGuiNode.metadata._cellInfo;\r\n                    const gridParent = newGuiNode.parent as Grid;\r\n                    gridParent.removeControl(newGuiNode);\r\n                    gridParent.addControl(newGuiNode, parseInt(row), parseInt(column));\r\n                }\r\n                this.props.globalState.setSelection([newGuiNode]);\r\n\r\n                return true;\r\n            }\r\n        } catch {\r\n            // don't need an error message\r\n        }\r\n        Logger.Warn(\"Paste attempted, but clipboard content was invalid.\");\r\n        return false;\r\n    }\r\n\r\n    public CopyGUIControl(original: Control) {\r\n        const serializationObject = {};\r\n        original.serialize(serializationObject);\r\n        const newControl = Control.Parse(serializationObject, this.props.globalState.guiTexture);\r\n\r\n        if (newControl) {\r\n            //insert the new control into the adt or parent container\r\n            this.props.globalState.workbench.appendBlock(newControl);\r\n            this.props.globalState.guiTexture.removeControl(newControl);\r\n            if (original.parent?.typeName === \"Grid\") {\r\n                const cell = Tools.GetCellInfo(original.parent as Grid, original);\r\n                (original.parent as Grid).addControl(newControl, cell.x, cell.y);\r\n            } else {\r\n                original.parent?.addControl(newControl);\r\n            }\r\n            let index = 1;\r\n            while (\r\n                this.props.globalState.guiTexture.getDescendants(false).filter(\r\n                    //search if there are any copies\r\n                    (control) => control.name === `${newControl.name} Copy ${index}`\r\n                ).length\r\n            ) {\r\n                index++;\r\n            }\r\n            newControl.name = `${newControl.name} Copy ${index}`;\r\n            this.props.globalState.select(newControl);\r\n        }\r\n    }\r\n\r\n    blurEvent = () => {\r\n        this._constraintDirection = ConstraintDirection.NONE;\r\n        this.props.globalState.onPointerUpObservable.notifyObservers(null);\r\n    };\r\n\r\n    /**\r\n     * Adds editor observers to control and stores old data in metadata\r\n     * @param guiControl\r\n     */\r\n    addEditorBehavior(guiControl: Control) {\r\n        guiControl.onPointerUpObservable.add(() => {\r\n            this.clicked = false;\r\n        });\r\n\r\n        guiControl.onPointerDownObservable.add((evt) => {\r\n            if (evt.buttonIndex > 0 || this.props.globalState.tool !== GUIEditorTool.SELECT) return;\r\n            this._controlsHit.push(guiControl);\r\n        });\r\n\r\n        guiControl.onPointerEnterObservable.add(() => {\r\n            if (this._isOverGUINode.indexOf(guiControl) === -1) {\r\n                this._isOverGUINode.push(guiControl);\r\n            }\r\n        });\r\n\r\n        guiControl.onPointerOutObservable.add(() => {\r\n            const index = this._isOverGUINode.indexOf(guiControl);\r\n            if (index !== -1) {\r\n                this._isOverGUINode.splice(index, 1);\r\n            }\r\n        });\r\n\r\n        guiControl.onDisposeObservable.add(() => {\r\n            const index = this._isOverGUINode.indexOf(guiControl);\r\n            if (index !== -1) {\r\n                this._isOverGUINode.splice(index, 1);\r\n            }\r\n        });\r\n\r\n        guiControl.metadata = {\r\n            ...guiControl.metadata,\r\n            guiEditor: true,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Removes editor behavior (observables, metadata) from control\r\n     * @param control\r\n     */\r\n    removeEditorBehavior(control: Control) {\r\n        if (!control.metadata || !control.metadata.guiEditor) {\r\n            return;\r\n        }\r\n        delete control.metadata.guiEditor;\r\n        delete control.metadata.editorUniqueId;\r\n    }\r\n\r\n    dispose() {\r\n        this.props.globalState.hostDocument!.removeEventListener(\"keyup\", this.keyEvent);\r\n        this.props.globalState.hostDocument!.removeEventListener(\"keydown\", this.keyEvent);\r\n        this.props.globalState.hostDocument!.defaultView!.removeEventListener(\"blur\", this.blurEvent);\r\n        if (this._guiRenderObserver) {\r\n            this.props.globalState.guiTexture.onEndRenderObservable.remove(this._guiRenderObserver);\r\n        }\r\n        this._engine.dispose();\r\n    }\r\n\r\n    loadFromJson(serializationObject: any) {\r\n        this.removeEditorTransformation();\r\n        this.props.globalState.setSelection([]);\r\n        if (this.props.globalState.liveGuiTexture) {\r\n            this.props.globalState.liveGuiTexture?.parseContent(serializationObject, true);\r\n            this.synchronizeLiveGUI();\r\n        } else {\r\n            this.props.globalState.guiTexture.parseContent(serializationObject, true);\r\n        }\r\n        this.trueRootContainer = this.props.globalState.guiTexture._rootContainer;\r\n        this.guiSize = this.props.globalState.guiTexture.getSize();\r\n        this.loadToEditor();\r\n    }\r\n\r\n    /**\r\n     * Load Control from Json then select loaded Control\r\n     * @param serializationObject\r\n     */\r\n    loadControlFromJson(serializationObject: any) {\r\n        const newControls = [];\r\n        for (const control of serializationObject.controls) {\r\n            const newControl = Control.Parse(control, this.props.globalState.guiTexture);\r\n            newControls.push(newControl);\r\n            const newGuiNode = this.props.globalState.workbench.appendBlock(newControl);\r\n            if (newGuiNode.parent?.typeName === \"Grid\" && newGuiNode.metadata?._cellInfo) {\r\n                const { row, column } = newGuiNode.metadata._cellInfo;\r\n                const gridParent = newGuiNode.parent as Grid;\r\n                gridParent.removeControl(newGuiNode);\r\n                gridParent.addControl(newGuiNode, parseInt(row), parseInt(column));\r\n            }\r\n        }\r\n        this.props.globalState.setSelection(newControls);\r\n    }\r\n\r\n    async loadFromSnippet(snippetId: string) {\r\n        this.removeEditorTransformation();\r\n        this.props.globalState.setSelection([]);\r\n        if (this.props.globalState.liveGuiTexture) {\r\n            await this.props.globalState.liveGuiTexture?.parseFromSnippetAsync(snippetId, true);\r\n            this.synchronizeLiveGUI();\r\n        } else {\r\n            await this.props.globalState.guiTexture.parseFromSnippetAsync(snippetId, true);\r\n        }\r\n        this.trueRootContainer = this.props.globalState.guiTexture._rootContainer;\r\n        this.guiSize = this.props.globalState.guiTexture.getSize();\r\n        this.loadToEditor();\r\n        if (this.props.globalState.customLoad) {\r\n            this.props.globalState.customLoad.action(snippetId).catch(() => {\r\n                alert(\"Unable to load your GUI\");\r\n            });\r\n        }\r\n    }\r\n\r\n    loadToEditor() {\r\n        this.props.globalState.guiTexture.rootContainer.getDescendants().forEach((guiElement) => {\r\n            const fontName = guiElement.fontFamily.trim().toLowerCase();\r\n            if (WorkbenchComponent._addedFonts.indexOf(fontName) === -1) {\r\n                WorkbenchComponent._addedFonts.push(guiElement.fontFamily);\r\n            }\r\n            this.addEditorBehavior(guiElement);\r\n        });\r\n\r\n        this._isOverGUINode = [];\r\n        this.props.globalState.setSelection([]);\r\n        this.props.globalState.onFitControlsToWindowObservable.notifyObservers();\r\n        this.props.globalState.onFontsParsedObservable.notifyObservers();\r\n    }\r\n\r\n    public updateNodeOutlines() {\r\n        for (const guiControl of this._trueRootContainer.getDescendants()) {\r\n            guiControl.isHighlighted = guiControl.getClassName() === \"Grid\" && (this.props.globalState.outlines || this.props.globalState.selectedControls.includes(guiControl));\r\n            guiControl.highlightLineWidth = 5;\r\n        }\r\n    }\r\n\r\n    appendBlock(guiElement: Control) {\r\n        this.addEditorBehavior(guiElement);\r\n        guiElement.getDescendants(true).forEach((desc) => this.addEditorBehavior(desc));\r\n        if (this.props.globalState.selectedControls.length != 0) {\r\n            this.props.globalState.selectedControls[0].parent?.addControl(guiElement);\r\n        } else {\r\n            this.trueRootContainer.addControl(guiElement);\r\n        }\r\n        return guiElement;\r\n    }\r\n    private parent(dropLocationControl: Nullable<Control>) {\r\n        const draggedControl = this.props.globalState.draggedControl;\r\n        const draggedControlParent = draggedControl?.parent;\r\n        if (draggedControlParent && draggedControl) {\r\n            if (this._isNotChildInsert(dropLocationControl, draggedControl)) {\r\n                //checking to make sure the element is not being inserted into a child\r\n\r\n                if (dropLocationControl != null) {\r\n                    //the control you are dragging onto top\r\n                    if (\r\n                        dropLocationControl instanceof Container && //dropping inside a container control\r\n                        this.props.globalState.draggedControlDirection === DragOverLocation.CENTER\r\n                    ) {\r\n                        draggedControlParent.removeControl(draggedControl);\r\n                        (dropLocationControl as Container).addControl(draggedControl);\r\n                    } else if (dropLocationControl.parent) {\r\n                        //dropping inside the controls parent container\r\n                        if (dropLocationControl.parent.typeName !== \"Grid\") {\r\n                            draggedControlParent.removeControl(draggedControl);\r\n                            let index = dropLocationControl.parent.children.indexOf(dropLocationControl);\r\n                            const reverse = dropLocationControl.parent.typeName === \"StackPanel\" || dropLocationControl.parent.typeName === \"VirtualKeyboard\";\r\n\r\n                            index = this._adjustParentingIndex(index, reverse); //adjusting index to be before or after based on where the control is over\r\n\r\n                            dropLocationControl.parent.children.splice(index, 0, draggedControl);\r\n                            draggedControl.parent = dropLocationControl.parent;\r\n                        } else if (dropLocationControl.parent === draggedControlParent) {\r\n                            //special case for grid\r\n                            this._reorderGrid(dropLocationControl.parent as Grid, draggedControl, dropLocationControl);\r\n                        } else {\r\n                            draggedControlParent.removeControl(draggedControl);\r\n                            (dropLocationControl.parent as Container).addControl(draggedControl);\r\n                            this._reorderGrid(dropLocationControl.parent as Grid, draggedControl, dropLocationControl);\r\n                        }\r\n                    } else {\r\n                        draggedControlParent.removeControl(draggedControl);\r\n                        this.trueRootContainer.addControl(draggedControl);\r\n                    }\r\n                } else {\r\n                    draggedControlParent.removeControl(draggedControl);\r\n                    this.trueRootContainer.addControl(draggedControl);\r\n                    this.trueRootContainer.children.pop();\r\n                    this.trueRootContainer.children.splice(0, 0, draggedControl);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (draggedControl) {\r\n            const newParent = draggedControl.parent;\r\n            if (newParent) {\r\n                if (newParent.typeName === \"StackPanel\" || newParent.typeName === \"VirtualKeyboard\") {\r\n                    const isVertical = (newParent as StackPanel).isVertical;\r\n                    if (draggedControl._width.unit === ValueAndUnit.UNITMODE_PERCENTAGE && !isVertical) {\r\n                        CoordinateHelper.ConvertToPixels(draggedControl, [\"width\"]);\r\n                        this.props.globalState.hostWindow.alert(\"Warning: Parenting to horizontal stack panel converts width to pixel values\");\r\n                    }\r\n                    if (draggedControl._height.unit === ValueAndUnit.UNITMODE_PERCENTAGE && isVertical) {\r\n                        CoordinateHelper.ConvertToPixels(draggedControl, [\"height\"]);\r\n                        this.props.globalState.hostWindow.alert(\"Warning: Parenting to vertical stack panel converts height to pixel values\");\r\n                    }\r\n                }\r\n                // Force containers to re-render if we added a new child\r\n                newParent.markAsDirty();\r\n            }\r\n        }\r\n        this.props.globalState.draggedControl = null;\r\n    }\r\n\r\n    private _canClone() {\r\n        return this.props.globalState.liveGuiTexture && this.props.globalState.guiTexture && this.trueRootContainer;\r\n    }\r\n\r\n    private _controlToLinkedMeshMap = new Map<Control, TransformNode>();\r\n    private _observersMap = {\r\n        onPointerDownObservable: new Map<string, Observable<Vector2WithInfo>>(),\r\n        onPointerUpObservable: new Map<string, Observable<Vector2WithInfo>>(),\r\n        onPointerMoveObservable: new Map<string, Observable<Vector2WithInfo>>(),\r\n        onPointerEnterObservable: new Map<string, Observable<Vector2WithInfo>>(),\r\n        onPointerOutObservable: new Map<string, Observable<Vector2WithInfo>>(),\r\n        onPointerClickObservable: new Map<string, Observable<Vector2WithInfo>>(),\r\n        onDisposeObservable: new Map<string, Observable<Control>>(),\r\n        onIsVisibleChangedObservable: new Map<string, Observable<boolean>>(),\r\n        onBeforeDrawObservable: new Map<string, Observable<Control>>(),\r\n        onAfterDrawObservable: new Map<string, Observable<Control>>(),\r\n        onWheelObservable: new Map<string, Observable<WheelEvent>>(),\r\n    };\r\n\r\n    private _saveObservables(root: Container) {\r\n        root.getDescendants().forEach((control) => {\r\n            if (control.linkedMesh) {\r\n                this._controlToLinkedMeshMap.set(control.metadata.editorUniqueId, control.linkedMesh);\r\n            }\r\n\r\n            Object.keys(this._observersMap).forEach((key) => {\r\n                const observable = (control as any)[key];\r\n                if (observable.hasObservers()) {\r\n                    (this._observersMap as any)[key].set(control.metadata.editorUniqueId, observable);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private _restoreObservables(root: Container) {\r\n        root.getDescendants().forEach((control) => {\r\n            if (this._controlToLinkedMeshMap.has(control.metadata?.editorUniqueId)) {\r\n                const linkedMesh = this._controlToLinkedMeshMap.get(control.metadata.editorUniqueId);\r\n                if (linkedMesh) {\r\n                    control.linkWithMesh(linkedMesh);\r\n                }\r\n            }\r\n\r\n            Object.keys(this._observersMap).forEach((key) => {\r\n                const savedObservable = (this._observersMap as any)[key].get(control.metadata?.editorUniqueId);\r\n                if (savedObservable) {\r\n                    (control as any)[key] = savedObservable;\r\n                }\r\n            });\r\n        });\r\n\r\n        this._controlToLinkedMeshMap.clear();\r\n        Object.keys(this._observersMap).forEach((key) => {\r\n            (this._observersMap as any)[key].clear();\r\n        });\r\n    }\r\n\r\n    private _copyEditorGUIToLiveGUI() {\r\n        if (this._canClone()) {\r\n            // Before cloning, save all of the live GUI controls that have a linked mesh\r\n            const liveRoot = this.props.globalState.liveGuiTexture!.rootContainer;\r\n            this._saveObservables(liveRoot);\r\n            liveRoot.clearControls();\r\n\r\n            const originalToCloneMap = new Map<Control, Control>();\r\n            const updatedRootChildren = this.trueRootContainer.children.slice(0);\r\n            for (const child of updatedRootChildren) {\r\n                const clone = child.clone(this.props.globalState.liveGuiTexture!);\r\n                originalToCloneMap.set(child, clone);\r\n                liveRoot.addControl(clone);\r\n            }\r\n\r\n            // Relink all meshes\r\n            this._restoreObservables(liveRoot);\r\n            this._syncConnectedLines(updatedRootChildren, originalToCloneMap);\r\n        }\r\n    }\r\n\r\n    private _reorderGrid(grid: Grid, draggedControl: Control, dropLocationControl: Control) {\r\n        const cellInfo = Tools.GetCellInfo(grid, draggedControl);\r\n        grid.removeControl(draggedControl);\r\n\r\n        let index = grid.children.indexOf(dropLocationControl);\r\n        index = this._adjustParentingIndex(index);\r\n\r\n        Tools.ReorderGrid(grid, index, draggedControl, cellInfo);\r\n    }\r\n\r\n    private _isNotChildInsert(control: Nullable<Control>, draggedControl: Nullable<Control>) {\r\n        while (control?.parent) {\r\n            if (control.parent == draggedControl) {\r\n                return false;\r\n            }\r\n            control = control.parent;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private _adjustParentingIndex(index: number, reversed: boolean = false) {\r\n        switch (this.props.globalState.draggedControlDirection) {\r\n            case DragOverLocation.ABOVE:\r\n                return reversed ? index : index + 1;\r\n            case DragOverLocation.BELOW:\r\n            case DragOverLocation.CENTER:\r\n                return reversed ? index + 1 : index;\r\n        }\r\n        return index;\r\n    }\r\n\r\n    public isSelected(value: boolean, guiNode: Control) {\r\n        this.props.globalState.select(guiNode);\r\n    }\r\n\r\n    public clicked: boolean;\r\n\r\n    public _onMove(guiControl: Control, evt: Vector2, startPos: Vector2) {\r\n        const toConvert: DimensionProperties[] = [];\r\n        if (guiControl._top.unit === ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            toConvert.push(\"top\");\r\n        }\r\n        if (guiControl._left.unit === ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            toConvert.push(\"left\");\r\n        }\r\n        let newX = evt.x - startPos.x;\r\n        let newY = evt.y - startPos.y;\r\n\r\n        if (this._setConstraintDirection) {\r\n            this._setConstraintDirection = false;\r\n            this._constraintDirection = Math.abs(newX) >= Math.abs(newY) ? ConstraintDirection.X : ConstraintDirection.Y;\r\n        }\r\n\r\n        if (this._constraintDirection === ConstraintDirection.X) {\r\n            newY = 0;\r\n        } else if (this._constraintDirection === ConstraintDirection.Y) {\r\n            newX = 0;\r\n        }\r\n        const referenceAxis = new Vector2(newX, newY);\r\n\r\n        if (guiControl.typeName === \"Line\") {\r\n            const line = guiControl as Line;\r\n            const x1 = (line.x1 as string).substring(0, (line.x1 as string).length - 2); //removing the 'px'\r\n            const x2 = (line.x2 as string).substring(0, (line.x2 as string).length - 2);\r\n            const y1 = (line.y1 as string).substring(0, (line.y1 as string).length - 2);\r\n            const y2 = (line.y2 as string).substring(0, (line.y2 as string).length - 2);\r\n            line.x1 = (Number(x1) + newX).toFixed(2);\r\n            line.x2 = (Number(x2) + newX).toFixed(2);\r\n            line.y1 = (Number(y1) + newY).toFixed(2);\r\n            line.y2 = (Number(y2) + newY).toFixed(2);\r\n            this.props.globalState.onPropertyGridUpdateRequiredObservable.notifyObservers();\r\n            return;\r\n        }\r\n\r\n        let totalRotation = 0;\r\n        let currentControl: Nullable<Control> = guiControl.parent;\r\n        while (currentControl) {\r\n            totalRotation += currentControl.rotation;\r\n\r\n            currentControl = currentControl.parent;\r\n        }\r\n        const rotatedReferenceAxis = new Vector2(0, 0);\r\n\r\n        // Rotate the reference axis by the total rotation of the control\r\n        const sinR = Math.sin(-totalRotation);\r\n        const cosR = Math.cos(-totalRotation);\r\n        rotatedReferenceAxis.x = cosR * referenceAxis.x - sinR * referenceAxis.y;\r\n        rotatedReferenceAxis.y = sinR * referenceAxis.x + cosR * referenceAxis.y;\r\n\r\n        // Apply the amount of change\r\n        guiControl.leftInPixels += rotatedReferenceAxis.x;\r\n        guiControl.topInPixels += rotatedReferenceAxis.y;\r\n\r\n        CoordinateHelper.ConvertToPercentage(guiControl, toConvert);\r\n        this.props.globalState.onPropertyGridUpdateRequiredObservable.notifyObservers();\r\n    }\r\n\r\n    onMove(evt: React.PointerEvent) {\r\n        const pos = this.getScaledPointerPosition();\r\n        // Move or guiNodes\r\n        if (this._mouseStartPoint != null && !this._panning) {\r\n            this.props.globalState.selectedControls.forEach((element) => {\r\n                if (pos) {\r\n                    this._onMove(element, pos, this._mouseStartPoint!);\r\n                }\r\n            });\r\n\r\n            this._mouseStartPoint = pos ? pos : this._mouseStartPoint;\r\n        }\r\n        this._pointerTravelDistance += evt.movementX * evt.movementX + evt.movementY * evt.movementY;\r\n        if (this._panning) {\r\n            this.panning();\r\n        }\r\n    }\r\n\r\n    private _screenToTexturePosition(screenPos: Vector2) {\r\n        const zoomVector = new Vector2(this._zoomFactor, this._zoomFactor);\r\n        return screenPos.divideInPlace(zoomVector).add(this._panningOffset);\r\n    }\r\n\r\n    private getScaledPointerPosition() {\r\n        return this._screenToTexturePosition(new Vector2(this._scene.pointerX, this._scene.pointerY));\r\n    }\r\n\r\n    startPanning() {\r\n        this._panning = true;\r\n        this._initialPanningOffset = this.getScaledPointerPosition();\r\n    }\r\n\r\n    endPanning() {\r\n        this._panning = false;\r\n    }\r\n\r\n    processSelection() {\r\n        // if hit nothing, deselect all\r\n        if (this.props.globalState.usePrevSelected) {\r\n            this.props.globalState.usePrevSelected = false;\r\n            return;\r\n        }\r\n        if (this._controlsHit.length === 0) {\r\n            this.props.globalState.setSelection([]);\r\n            return;\r\n        }\r\n\r\n        // if child of selected control -> select on double click\r\n        for (const control of this._controlsHit) {\r\n            if (this.props.globalState.selectedControls.includes(control.parent!)) {\r\n                if (this._doubleClick === control) {\r\n                    this.props.globalState.select(control);\r\n                    return;\r\n                } else {\r\n                    this._doubleClick = control;\r\n                    window.setTimeout(() => {\r\n                        this._doubleClick = null;\r\n                    }, 300);\r\n                }\r\n            }\r\n        }\r\n\r\n        // if control or sibling of control already selected -> select\r\n        for (const control of this._controlsHit) {\r\n            for (const selected of this.props.globalState.selectedControls) {\r\n                if (selected.parent === control.parent) {\r\n                    this.props.globalState.select(control);\r\n                    return;\r\n                }\r\n                break; // we don't need to check any more since it's guaranteed that all selected controls have same parent\r\n            }\r\n        }\r\n        // if control is child of root -> select\r\n        for (const control of this._controlsHit) {\r\n            if (control.parent === this._trueRootContainer) {\r\n                this.props.globalState.select(control);\r\n            }\r\n        }\r\n    }\r\n\r\n    onDown(evt: React.PointerEvent<HTMLElement>) {\r\n        this._pointerTravelDistance = 0;\r\n        this._rootContainer.current?.setPointerCapture(evt.pointerId);\r\n\r\n        if (this.props.globalState.tool === GUIEditorTool.SELECT) {\r\n            this._mouseStartPoint = this.getScaledPointerPosition();\r\n        }\r\n        if (this.props.globalState.tool === GUIEditorTool.ZOOM) {\r\n            this._centerZoomMousePosition.set(this._scene.pointerX, this._scene.pointerY);\r\n        }\r\n        if (evt.buttons & 4 || this.props.globalState.tool === GUIEditorTool.PAN) {\r\n            this.startPanning();\r\n        } else {\r\n            this.endPanning();\r\n            // process selection\r\n            if (this.props.globalState.selectedControls.length !== 0) {\r\n                this._processSelectionOnUp = true;\r\n            }\r\n            this._scene.onAfterRenderObservable.addOnce(() => {\r\n                // if we didn't hit any selected controls, immediately process new selection\r\n                if (!this._processSelectionOnUp || this._controlsHit.filter((control) => this.props.globalState.selectedControls.includes(control)).length === 0) {\r\n                    this.processSelection();\r\n                    this._controlsHit = [];\r\n                    this._processSelectionOnUp = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    onUp(evt: React.PointerEvent) {\r\n        if (this.props.globalState.tool === GUIEditorTool.ZOOM && !this._hasPerformedDragZoom) {\r\n            this._panZoomToCenter(1000 * this._zoomModeIncrement, new Vector2(this._scene.pointerX, this._scene.pointerY));\r\n            this.zooming(1.0 + (this.props.globalState.keys.isKeyDown(\"alt\") ? -this._zoomModeIncrement : this._zoomModeIncrement));\r\n        }\r\n        this._hasPerformedDragZoom = false;\r\n        this._mouseStartPoint = null;\r\n        this._centerZoomMousePosition.set(0, 0);\r\n        this._constraintDirection = ConstraintDirection.NONE;\r\n        this._rootContainer.current?.releasePointerCapture(evt.pointerId);\r\n        this._panning = false;\r\n        if (this._processSelectionOnUp) {\r\n            if (Math.sqrt(this._pointerTravelDistance) <= MAX_POINTER_TRAVEL_DISTANCE) {\r\n                this.processSelection();\r\n            }\r\n            this._controlsHit = [];\r\n            this._processSelectionOnUp = false;\r\n        }\r\n    }\r\n\r\n    private _syncConnectedLines(controlList: Control[], originalToCloneMap: Map<Control, Control>) {\r\n        for (const control of controlList) {\r\n            if (control.getClassName() === \"Line\") {\r\n                const lineControl = control as Line;\r\n                if (lineControl.connectedControl) {\r\n                    const connectedControl = lineControl.connectedControl;\r\n                    const clonedLine = originalToCloneMap.get(lineControl) as Line;\r\n                    const clonedConnectedControl = originalToCloneMap.get(connectedControl);\r\n                    if (clonedLine && clonedConnectedControl) {\r\n                        clonedLine.connectedControl = clonedConnectedControl;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _copyLiveGUIToEditorGUI() {\r\n        if (this.props.globalState.liveGuiTexture && this.trueRootContainer) {\r\n            // Create special IDs that will allow us to know which cloned control corresponds to its original\r\n            this.props.globalState.liveGuiTexture.rootContainer.getDescendants().forEach((control) => {\r\n                control.metadata = { ...(control.metadata ?? {}), editorUniqueId: RandomGUID() };\r\n            });\r\n            this.trueRootContainer.clearControls();\r\n            const originalToCloneMap = new Map<Control, Control>();\r\n            for (const control of this.props.globalState.liveGuiTexture.rootContainer.children) {\r\n                const cloned = control.clone(this.props.globalState.guiTexture);\r\n                originalToCloneMap.set(control, cloned);\r\n                this.appendBlock(cloned);\r\n            }\r\n            // Synchronize existing connectedControls\r\n            this._syncConnectedLines(this.props.globalState.liveGuiTexture.rootContainer.children, originalToCloneMap);\r\n        }\r\n    }\r\n\r\n    public createGUICanvas(embed?: boolean) {\r\n        // Get the canvas element from the DOM.\r\n\r\n        const canvas = this._rootContainer.current as HTMLCanvasElement;\r\n        // Associate a Babylon Engine to it.\r\n        this._engine = new Engine(canvas);\r\n\r\n        // Create our first scene.\r\n        this._scene = new Scene(this._engine);\r\n\r\n        this._scene.clearColor = new Color4(0, 0, 0, 0);\r\n        const light = new HemisphericLight(\"light1\", Axis.Y, this._scene);\r\n        light.intensity = 0.9;\r\n\r\n        if (this.props.globalState.liveGuiTexture) {\r\n            this._guiSize.width = this.props.globalState.liveGuiTexture.getSize().width;\r\n            this._guiSize.height = this.props.globalState.liveGuiTexture.getSize().height;\r\n\r\n            canvas.width = this._guiSize.width;\r\n            canvas.height = this._guiSize.height;\r\n        } else {\r\n            this._guiSize.width = DataStorage.ReadNumber(\"GUIEditorWidth\", 1024);\r\n            this._guiSize.height = DataStorage.ReadNumber(\"GUIEditorHeight\", 1024);\r\n        }\r\n\r\n        this._panAndZoomContainer = new Container(\"panAndZoom\");\r\n        this._panAndZoomContainer.clipContent = false;\r\n        this._panAndZoomContainer.clipChildren = false;\r\n\r\n        this._visibleRegionContainer = new Container(\"visibleRegion\");\r\n        this._visibleRegionContainer.clipChildren = false;\r\n        this._visibleRegionContainer.clipContent = false;\r\n        this._visibleRegionContainer.widthInPixels = this.guiSize.width;\r\n        this._visibleRegionContainer.heightInPixels = this.guiSize.height;\r\n        this._panAndZoomContainer.addControl(this._visibleRegionContainer);\r\n\r\n        const adt =\r\n            (this.props.globalState.guiTexture =\r\n            this._visibleRegionContainer._host =\r\n            this._panAndZoomContainer._host =\r\n                AdvancedDynamicTexture.CreateFullscreenUI(\"guiTexture\", true, this._scene, Texture.NEAREST_NEAREST_MIPNEAREST, false));\r\n\r\n        adt.useInvalidateRectOptimization = false;\r\n        this.trueRootContainer = adt.rootContainer;\r\n        adt.onEndRenderObservable.add(() => this.props.globalState.onGizmoUpdateRequireObservable.notifyObservers());\r\n\r\n        this._copyLiveGUIToEditorGUI();\r\n\r\n        new ArcRotateCamera(\"Camera\", 0, 0, 0, Vector3.Zero(), this._scene);\r\n\r\n        // This attaches the mouse controls\r\n        this.addControls(this._scene);\r\n\r\n        this._scene.getEngine().onCanvasPointerOutObservable.clear();\r\n        this._scene.doNotHandleCursors = true;\r\n\r\n        // Watch for browser/canvas resize events\r\n        this.props.globalState.hostWindow.addEventListener(\"resize\", () => {\r\n            this.props.globalState.onWindowResizeObservable.notifyObservers();\r\n            this._scene.onBeforeRenderObservable.addOnce(() => {\r\n                this.props.globalState.onWindowResizeObservable.notifyObservers();\r\n            });\r\n        });\r\n        this.props.globalState.onWindowResizeObservable.notifyObservers();\r\n\r\n        this.props.globalState.guiTexture.onBeginRenderObservable.add(() => {\r\n            this.applyEditorTransformation();\r\n        });\r\n\r\n        this.props.globalState.onPropertyChangedObservable.add((ev) => {\r\n            (ev.object as Control).markAsDirty(false);\r\n            this.props.globalState.onWindowResizeObservable.notifyObservers();\r\n        });\r\n\r\n        const throttledSynchronization = throttle(() => {\r\n            this._copyEditorGUIToLiveGUI();\r\n        }, 33);\r\n\r\n        if (this.props.globalState.liveGuiTexture) {\r\n            this._guiRenderObserver = this.props.globalState.guiTexture.onEndRenderObservable.add(throttledSynchronization);\r\n        }\r\n\r\n        this._engine.runRenderLoop(() => {\r\n            this._scene.render();\r\n        });\r\n        this.props.globalState.onNewSceneObservable.notifyObservers(this.props.globalState.guiTexture.getScene());\r\n        this.props.globalState.onPropertyGridUpdateRequiredObservable.notifyObservers();\r\n        this.props.globalState.onFitControlsToWindowObservable.notifyObservers();\r\n    }\r\n\r\n    // removes all controls from both GUIs, and re-adds the controls from the original to the GUI editor\r\n    synchronizeLiveGUI() {\r\n        if (this.props.globalState.liveGuiTexture) {\r\n            this._trueRootContainer.getDescendants().forEach((desc) => desc.dispose());\r\n            this.props.globalState.liveGuiTexture.rootContainer.getDescendants(true).forEach((desc) => {\r\n                this.props.globalState.liveGuiTexture?.removeControl(desc);\r\n                this.appendBlock(desc);\r\n            });\r\n            this.props.globalState.guiTexture.snippetId = this.props.globalState.liveGuiTexture.snippetId;\r\n        }\r\n    }\r\n\r\n    //Add zoom and pan controls\r\n    addControls(scene: Scene) {\r\n        scene.onKeyboardObservable.add((k: KeyboardInfo) => {\r\n            switch (k.event.key) {\r\n                case \"ArrowUp\": // move up\r\n                    this.moveControls(false, k.event.shiftKey ? -ARROW_KEY_MOVEMENT_LARGE : -ARROW_KEY_MOVEMENT_SMALL);\r\n                    break;\r\n                case \"ArrowDown\": // move down\r\n                    this.moveControls(false, k.event.shiftKey ? ARROW_KEY_MOVEMENT_LARGE : ARROW_KEY_MOVEMENT_SMALL);\r\n                    break;\r\n                case \"ArrowLeft\": // move left\r\n                    this.moveControls(true, k.event.shiftKey ? -ARROW_KEY_MOVEMENT_LARGE : -ARROW_KEY_MOVEMENT_SMALL);\r\n                    break;\r\n                case \"ArrowRight\": // move right\r\n                    this.moveControls(true, k.event.shiftKey ? ARROW_KEY_MOVEMENT_LARGE : ARROW_KEY_MOVEMENT_SMALL);\r\n                    break;\r\n            }\r\n        }, KeyboardEventTypes.KEYDOWN);\r\n\r\n        scene.onBeforeRenderObservable.add(() => {\r\n            if (this._panAndZoomContainer.scaleX !== this._zoomFactor) {\r\n                this._panAndZoomContainer.scaleX = this._zoomFactor;\r\n                this._panAndZoomContainer.scaleY = this._zoomFactor;\r\n                this.props.globalState.onArtBoardUpdateRequiredObservable.notifyObservers();\r\n                this.props.globalState.onGizmoUpdateRequireObservable.notifyObservers();\r\n            }\r\n            const left = this._zoomFactor * this._panningOffset.x;\r\n            const top = this._zoomFactor * -this._panningOffset.y;\r\n            if (this._panAndZoomContainer.leftInPixels !== left || this._panAndZoomContainer.topInPixels !== top) {\r\n                this._panAndZoomContainer.leftInPixels = left;\r\n                this._panAndZoomContainer.topInPixels = top;\r\n                this.props.globalState.onArtBoardUpdateRequiredObservable.notifyObservers();\r\n                this.props.globalState.onGizmoUpdateRequireObservable.notifyObservers();\r\n            }\r\n        });\r\n    }\r\n\r\n    //Return offsets for inertial panning given initial and current pointer positions\r\n    panning() {\r\n        const panningDelta = this.getScaledPointerPosition().subtract(this._initialPanningOffset).multiplyByFloats(1, -1);\r\n        this._panningOffset = this._panningOffset.add(panningDelta);\r\n        this._initialPanningOffset = this.getScaledPointerPosition();\r\n        this.props.globalState.onWindowResizeObservable.notifyObservers();\r\n    }\r\n\r\n    // Move the selected controls. Can be either on horizontal (leftInPixels) or\r\n    // vertical (topInPixels) direction\r\n    moveControls(moveHorizontal: boolean, amount: number) {\r\n        for (const selectedControl of this.props.globalState.selectedControls) {\r\n            if (moveHorizontal) {\r\n                // move horizontal\r\n                const prevValue = selectedControl.leftInPixels;\r\n                selectedControl.leftInPixels += amount;\r\n                this.props.globalState.onPropertyChangedObservable.notifyObservers({\r\n                    object: selectedControl,\r\n                    property: \"leftInPixels\",\r\n                    value: selectedControl.leftInPixels,\r\n                    initialValue: prevValue,\r\n                });\r\n                this.props.globalState.onPropertyGridUpdateRequiredObservable.notifyObservers();\r\n            } else {\r\n                // move vertical\r\n                const prevValue = selectedControl.topInPixels;\r\n                selectedControl.topInPixels += amount;\r\n                this.props.globalState.onPropertyChangedObservable.notifyObservers({\r\n                    object: selectedControl,\r\n                    property: \"topInPixels\",\r\n                    value: selectedControl.topInPixels,\r\n                    initialValue: prevValue,\r\n                });\r\n                this.props.globalState.onPropertyGridUpdateRequiredObservable.notifyObservers();\r\n            }\r\n        }\r\n    }\r\n\r\n    //Get the wheel delta\r\n    zoomWheel(event: React.WheelEvent) {\r\n        let delta = 0;\r\n        if (event.deltaY) {\r\n            delta = -event.deltaY;\r\n        } else if (event.detail) {\r\n            delta = -event.detail;\r\n        }\r\n        const mouseCenter = new Vector2(this._scene.pointerX, this._scene.pointerY);\r\n        this._panZoomToCenter(delta, mouseCenter);\r\n        this.zooming(1 + delta / 1000);\r\n    }\r\n\r\n    private _panZoomToCenter(delta: number, mouseCenter: Vector2) {\r\n        const mouseToRtt = CoordinateHelper.MousePointerToRTTSpace(this.trueRootContainer, mouseCenter.x, mouseCenter.y);\r\n        const rttToLocal = CoordinateHelper.RttToLocalNodeSpace(this.trueRootContainer, mouseToRtt.x, mouseToRtt.y);\r\n\r\n        const centerToRtt = CoordinateHelper.MousePointerToRTTSpace(this.trueRootContainer, this._engine.getRenderWidth() / 2, this._engine.getRenderHeight() / 2);\r\n        const centerToLocal = CoordinateHelper.RttToLocalNodeSpace(this.trueRootContainer, centerToRtt.x, centerToRtt.y);\r\n        const panScale = -delta / 1000;\r\n\r\n        const deltaCenter = rttToLocal.subtract(centerToLocal).scale(panScale).multiplyByFloats(1, -1);\r\n\r\n        this._panningOffset.addInPlace(deltaCenter);\r\n    }\r\n\r\n    zoomDrag(event: React.MouseEvent) {\r\n        let delta = 0;\r\n        if (event.movementY !== 0) {\r\n            delta = -event.movementY;\r\n        }\r\n        this._hasPerformedDragZoom = true;\r\n        this._panZoomToCenter(delta, this._centerZoomMousePosition);\r\n        this.zooming(1 + delta / 1000);\r\n    }\r\n\r\n    //Zoom to pointer position. Zoom amount determined by delta\r\n    zooming(delta: number) {\r\n        this._zoomFactor *= delta;\r\n    }\r\n\r\n    //Sets x y or z of passed in vector to zero if less than Epsilon\r\n    zeroIfClose(vec: Vector3) {\r\n        if (Math.abs(vec.x) < Epsilon) {\r\n            vec.x = 0;\r\n        }\r\n        if (Math.abs(vec.y) < Epsilon) {\r\n            vec.y = 0;\r\n        }\r\n        if (Math.abs(vec.z) < Epsilon) {\r\n            vec.z = 0;\r\n        }\r\n    }\r\n\r\n    override render() {\r\n        let cursor = \"default\";\r\n        if (this.props.globalState.tool === GUIEditorTool.PAN) {\r\n            cursor = \"grab\";\r\n        } else if (this.props.globalState.tool === GUIEditorTool.ZOOM) {\r\n            cursor = this.props.globalState.keys.isKeyDown(\"alt\") ? \"zoom-out\" : \"zoom-in\";\r\n        }\r\n        return (\r\n            <canvas\r\n                id=\"workbench-canvas\"\r\n                onPointerMove={(evt) => {\r\n                    if (this._mouseDown && this.props.globalState.tool === GUIEditorTool.ZOOM) {\r\n                        this.zoomDrag(evt);\r\n                    }\r\n\r\n                    if (this.props.globalState.guiTexture) {\r\n                        this.onMove(evt);\r\n                    }\r\n\r\n                    this.props.globalState.onPointerMoveObservable.notifyObservers(evt);\r\n                }}\r\n                onPointerDown={(evt) => {\r\n                    this.onDown(evt);\r\n                    if (this._controlsHit.length === 0) {\r\n                        this._mouseDown = true;\r\n                    } else {\r\n                        this._mouseDown = false;\r\n                    }\r\n                }}\r\n                onPointerUp={(evt) => {\r\n                    this.onUp(evt);\r\n                    this.props.globalState.onPointerUpObservable.notifyObservers(evt);\r\n                    this._mouseDown = false;\r\n                }}\r\n                onWheel={(evt) => this.zoomWheel(evt)}\r\n                onContextMenu={(evt) => evt.preventDefault()}\r\n                ref={this._rootContainer}\r\n                style={{ cursor }}\r\n            ></canvas>\r\n        );\r\n    }\r\n}\r\n"]}
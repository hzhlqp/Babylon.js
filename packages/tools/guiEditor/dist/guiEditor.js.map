{"version":3,"file":"guiEditor.js","sourceRoot":"","sources":["../src/guiEditor.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { GlobalState } from \"./globalState\";\r\nimport { WorkbenchEditor } from \"./workbenchEditor\";\r\nimport { Popup } from \"shared-ui-components/lines/popup\";\r\nimport type { Observable } from \"core/Misc/observable\";\r\nimport type { AdvancedDynamicTexture } from \"gui/2D/advancedDynamicTexture\";\r\n\r\n/**\r\n * Interface used to specify creation options for the gui editor\r\n */\r\nexport interface IGUIEditorOptions {\r\n    liveGuiTexture?: AdvancedDynamicTexture;\r\n    customLoad?: { label: string; action: (data: string) => Promise<string> } | undefined;\r\n    hostElement?: HTMLElement;\r\n    customSave?: { label: string; action: (data: string) => Promise<string> };\r\n    currentSnippetToken?: string;\r\n    customLoadObservable?: Observable<any>;\r\n}\r\n\r\n/**\r\n * Class used to create a gui editor\r\n */\r\nexport class GUIEditor {\r\n    private static _CurrentState: GlobalState;\r\n    /**\r\n     * Show the gui editor\r\n     * @param options defines the options to use to configure the gui editor\r\n     * @param embed defines whether editor is being opened from the Playground\r\n     */\r\n    public static async Show(options: IGUIEditorOptions, embed?: boolean) {\r\n        let hostElement = options.hostElement;\r\n\r\n        // if we are in a standalone window and we have some current state, just load the GUI from the snippet server, don't do anything else\r\n        if (this._CurrentState && hostElement) {\r\n            if (options.currentSnippetToken) {\r\n                try {\r\n                    this._CurrentState.workbench.loadFromSnippet(options.currentSnippetToken);\r\n                } catch (error) {\r\n                    //swallow and continue\r\n                }\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (!hostElement) {\r\n            const popupWindow = (Popup as any)[\"gui-editor\"];\r\n            if (popupWindow) {\r\n                popupWindow.close();\r\n            }\r\n            hostElement = Popup.CreatePopup(\"BABYLON.JS GUI EDITOR\", \"gui-editor\", 1200, 800)!;\r\n        }\r\n\r\n        const globalState = new GlobalState();\r\n        if (options.liveGuiTexture) {\r\n            globalState.liveGuiTexture = options.liveGuiTexture;\r\n        }\r\n        globalState.hostElement = hostElement;\r\n        globalState.hostDocument = hostElement.ownerDocument!;\r\n        globalState.customSave = options.customSave;\r\n        globalState.customLoad = options.customLoad;\r\n        globalState.hostWindow = hostElement.ownerDocument!.defaultView!;\r\n        globalState.registerEventListeners();\r\n\r\n        const graphEditor = React.createElement(WorkbenchEditor, {\r\n            globalState: globalState,\r\n        });\r\n\r\n        ReactDOM.render(graphEditor, hostElement);\r\n        // create the middle workbench canvas\r\n        if (!globalState.guiTexture) {\r\n            globalState.workbench.createGUICanvas(embed);\r\n            if (options.currentSnippetToken) {\r\n                try {\r\n                    await globalState.workbench.loadFromSnippet(options.currentSnippetToken);\r\n                } catch (error) {\r\n                    //swallow and continue\r\n                }\r\n            }\r\n        }\r\n\r\n        if (options.customLoadObservable) {\r\n            options.customLoadObservable.add(() => {\r\n                globalState.onResetRequiredObservable.notifyObservers();\r\n                globalState.onBuiltObservable.notifyObservers();\r\n            });\r\n        }\r\n\r\n        this._CurrentState = globalState;\r\n\r\n        // Close the popup window when the page is refreshed or scene is disposed\r\n        const popupWindow = (Popup as any)[\"gui-editor\"];\r\n        if (popupWindow) {\r\n            window.onbeforeunload = () => {\r\n                const popupWindow = (Popup as any)[\"gui-editor\"];\r\n                if (popupWindow) {\r\n                    popupWindow.close();\r\n                }\r\n            };\r\n        }\r\n        globalState.hostWindow.addEventListener(\"beforeunload\", () => {\r\n            globalState.onPopupClosedObservable.notifyObservers();\r\n            globalState.dispose();\r\n        });\r\n    }\r\n}\r\n"]}
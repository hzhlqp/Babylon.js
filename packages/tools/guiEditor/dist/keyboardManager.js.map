{"version":3,"file":"keyboardManager.js","sourceRoot":"","sources":["../src/keyboardManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from \"core/Misc/observable\";\r\n\r\ntype Key = \"control\" | \"shift\" | \"alt\" | \"space\" | \"meta\";\r\n\r\nexport class KeyboardManager {\r\n    private _hostElement: HTMLElement | HTMLDocument;\r\n    private _kdListener = (evt: Event) => this._keyEvent(evt as KeyboardEvent, true);\r\n    private _kuListener = (evt: Event) => this._keyEvent(evt as KeyboardEvent, false);\r\n    private _moveListener = (evt: Event) => this._updateModifierKeys(evt as MouseEvent);\r\n    private _focusOutListener = () => this._clearKeys();\r\n    private _keys = new Set<Key>();\r\n    public onKeyPressedObservable: Observable<Key>;\r\n    constructor(hostElement: HTMLElement | HTMLDocument) {\r\n        this._hostElement = hostElement;\r\n        hostElement.addEventListener(\"keydown\", this._kdListener);\r\n        hostElement.addEventListener(\"keypress\", this._kdListener);\r\n        hostElement.addEventListener(\"keyup\", this._kuListener);\r\n        hostElement.addEventListener(\"mousemove\", this._moveListener);\r\n        hostElement.addEventListener(\"focusout\", this._focusOutListener);\r\n        this.onKeyPressedObservable = new Observable<Key>();\r\n    }\r\n\r\n    private _keyEvent(event: KeyboardEvent, isDown: boolean) {\r\n        this._updateModifierKeys(event);\r\n        switch (event.key) {\r\n            case \" \":\r\n                this._setKeyDown(\"space\", isDown);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _updateModifierKeys(event: KeyboardEvent | MouseEvent) {\r\n        this._setKeyDown(\"control\", event.ctrlKey);\r\n        this._setKeyDown(\"alt\", event.altKey);\r\n        this._setKeyDown(\"shift\", event.shiftKey);\r\n        this._setKeyDown(\"meta\", event.metaKey);\r\n    }\r\n\r\n    private _setKeyDown(key: Key, down: boolean) {\r\n        const isDown = this._keys.has(key);\r\n        if (isDown !== down) {\r\n            if (!down) {\r\n                this._keys.delete(key);\r\n            } else {\r\n                this._keys.add(key);\r\n            }\r\n            this.onKeyPressedObservable.notifyObservers(key);\r\n        }\r\n    }\r\n\r\n    private _clearKeys() {\r\n        for (const key of this._keys) {\r\n            this._keys.delete(key);\r\n            this.onKeyPressedObservable.notifyObservers(key);\r\n        }\r\n    }\r\n\r\n    public isKeyDown(key: Key) {\r\n        return this._keys.has(key);\r\n    }\r\n\r\n    public dispose() {\r\n        this._hostElement.removeEventListener(\"keydown\", this._kdListener);\r\n        this._hostElement.removeEventListener(\"keypress\", this._kdListener);\r\n        this._hostElement.removeEventListener(\"keyup\", this._kuListener);\r\n        this._hostElement.removeEventListener(\"mousemove\", this._moveListener);\r\n        this._hostElement.removeEventListener(\"focusout\", this._focusOutListener);\r\n    }\r\n}\r\n"]}
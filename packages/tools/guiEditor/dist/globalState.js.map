{"version":3,"file":"globalState.js","sourceRoot":"","sources":["../src/globalState.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { LogEntry } from \"./components/log/logComponent\";\r\nimport { DataStorage } from \"core/Misc/dataStorage\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { WorkbenchComponent } from \"./diagram/workbench\";\r\nimport type { AdvancedDynamicTexture } from \"gui/2D/advancedDynamicTexture\";\r\nimport type { PropertyChangedEvent } from \"shared-ui-components/propertyChangedEvent\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Control } from \"gui/2D/controls/control\";\r\nimport { LockObject } from \"shared-ui-components/tabs/propertyGrids/lockObject\";\r\nimport type { ISize } from \"core/Maths/math\";\r\nimport { CoordinateHelper } from \"./diagram/coordinateHelper\";\r\nimport { Container } from \"gui/2D/controls/container\";\r\nimport { KeyboardManager } from \"./keyboardManager\";\r\n\r\nexport enum DragOverLocation {\r\n    ABOVE = 0,\r\n    BELOW = 1,\r\n    CENTER = 2,\r\n    NONE = 3,\r\n}\r\n\r\nexport enum GUIEditorTool {\r\n    SELECT = 0,\r\n    PAN = 1,\r\n    ZOOM = 2,\r\n}\r\n\r\nexport class GlobalState {\r\n    liveGuiTexture: Nullable<AdvancedDynamicTexture>;\r\n    guiTexture: AdvancedDynamicTexture;\r\n    hostElement: HTMLElement;\r\n    hostDocument: HTMLDocument;\r\n    hostWindow: Window;\r\n    selectedControls: Control[] = [];\r\n    onSelectionChangedObservable = new Observable<void>();\r\n    onResizeObservable = new Observable<ISize>();\r\n    onBuiltObservable = new Observable<void>();\r\n    onResetRequiredObservable = new Observable<void>();\r\n    onUpdateRequiredObservable = new Observable<void>();\r\n    onLogRequiredObservable = new Observable<LogEntry>();\r\n    onErrorMessageDialogRequiredObservable = new Observable<string>();\r\n    onIsLoadingChanged = new Observable<boolean>();\r\n    onSelectionBoxMoved = new Observable<ClientRect | DOMRect>();\r\n    onNewSceneObservable = new Observable<Nullable<Scene>>();\r\n    onGuiNodeRemovalObservable = new Observable<Control>();\r\n    onPopupClosedObservable = new Observable<void>();\r\n    private _backgroundColor: Color3;\r\n    private _outlines: boolean = false;\r\n    public keys: KeyboardManager;\r\n    private _fromPG: boolean;\r\n    /** DO NOT USE: in the process of removing */\r\n    public blockKeyboardEvents = false;\r\n    onOutlineChangedObservable = new Observable<void>();\r\n    controlCamera: boolean;\r\n    selectionLock: boolean;\r\n    workbench: WorkbenchComponent;\r\n    onPropertyChangedObservable = new Observable<PropertyChangedEvent>();\r\n\r\n    private _tool: GUIEditorTool = GUIEditorTool.SELECT;\r\n    private _usePrevSelected: boolean;\r\n\r\n    private _prevTool: GUIEditorTool = this._tool;\r\n    onToolChangeObservable = new Observable<void>();\r\n    public get tool(): GUIEditorTool {\r\n        if (this._tool === GUIEditorTool.ZOOM) {\r\n            return GUIEditorTool.ZOOM;\r\n        } else if (this._tool === GUIEditorTool.PAN) {\r\n            return GUIEditorTool.PAN;\r\n        } else {\r\n            return GUIEditorTool.SELECT;\r\n        }\r\n    }\r\n    public set tool(newTool: GUIEditorTool) {\r\n        if (this._tool === newTool) return;\r\n        this._prevTool = this._tool;\r\n        this._tool = newTool;\r\n        this.onToolChangeObservable.notifyObservers();\r\n    }\r\n    public get usePrevSelected() {\r\n        return this._usePrevSelected;\r\n    }\r\n    public set usePrevSelected(val: boolean) {\r\n        this._usePrevSelected = val;\r\n    }\r\n\r\n    public restorePreviousTool() {\r\n        if (this._tool !== this._prevTool) {\r\n            this._tool = this._prevTool;\r\n            this.onToolChangeObservable.notifyObservers();\r\n        }\r\n    }\r\n    onFitControlsToWindowObservable = new Observable<void>();\r\n    onReframeWindowObservable = new Observable<void>();\r\n    onLoadObservable = new Observable<File>();\r\n    onSaveObservable = new Observable<void>();\r\n    onSaveSelectedControl = new Observable<void>();\r\n    onSnippetLoadObservable = new Observable<void>();\r\n    onSnippetSaveObservable = new Observable<void>();\r\n    onControlLoadObservable = new Observable<File>();\r\n    onResponsiveChangeObservable = new Observable<boolean>();\r\n    onParentingChangeObservable = new Observable<Nullable<Control>>();\r\n    onDropObservable = new Observable<void>();\r\n    onPropertyGridUpdateRequiredObservable = new Observable<void>();\r\n    onDraggingEndObservable = new Observable<void>();\r\n    onDraggingStartObservable = new Observable<void>();\r\n    onWindowResizeObservable = new Observable<void>();\r\n    onGizmoUpdateRequireObservable = new Observable<void>();\r\n    onArtBoardUpdateRequiredObservable = new Observable<void>();\r\n    onBackgroundColorChangeObservable = new Observable<void>();\r\n    onFontsParsedObservable = new Observable<void>();\r\n    onPointerMoveObservable = new Observable<React.PointerEvent<HTMLCanvasElement>>();\r\n\r\n    onPointerUpObservable = new Observable<Nullable<React.PointerEvent<HTMLCanvasElement> | PointerEvent>>();\r\n    draggedControl: Nullable<Control> = null;\r\n    draggedControlDirection: DragOverLocation;\r\n    onCopyObservable = new Observable<(content: string) => void>();\r\n    onCutObservable = new Observable<(content: string) => void>();\r\n    onPasteObservable = new Observable<string>();\r\n    isSaving = false;\r\n    public lockObject = new LockObject();\r\n    storeEditorData: (serializationObject: any) => void;\r\n    shiftKeyPressed: boolean = false;\r\n\r\n    customSave?: { label: string; action: (data: string) => Promise<string> };\r\n    customLoad?: { label: string; action: (data: string) => Promise<string> };\r\n    public constructor() {\r\n        this.controlCamera = DataStorage.ReadBoolean(\"ControlCamera\", true);\r\n\r\n        const defaultBrightness = 204 / 255.0;\r\n        const r = DataStorage.ReadNumber(\"BackgroundColorR\", defaultBrightness);\r\n        const g = DataStorage.ReadNumber(\"BackgroundColorG\", defaultBrightness);\r\n        const b = DataStorage.ReadNumber(\"BackgroundColorB\", defaultBrightness);\r\n        this.backgroundColor = new Color3(r, g, b);\r\n        this.onBackgroundColorChangeObservable.notifyObservers();\r\n\r\n        CoordinateHelper.GlobalState = this;\r\n    }\r\n\r\n    /** adds copy, cut and paste listeners to the host window */\r\n    public registerEventListeners() {\r\n        const isElementEditable = (element: HTMLElement) => {\r\n            return element.isContentEditable || element.tagName === \"INPUT\" || element.tagName === \"TEXTAREA\";\r\n        };\r\n        this.hostDocument.addEventListener(\"copy\", (event) => {\r\n            if (!isElementEditable(event.target as HTMLElement)) {\r\n                this.onCopyObservable.notifyObservers((content) => event.clipboardData?.setData(\"text/plain\", content));\r\n                event.preventDefault();\r\n            }\r\n        });\r\n        this.hostDocument.addEventListener(\"cut\", (event) => {\r\n            if (!isElementEditable(event.target as HTMLElement)) {\r\n                this.onCutObservable.notifyObservers((content) => event.clipboardData?.setData(\"text/plain\", content));\r\n                event.preventDefault();\r\n            }\r\n        });\r\n        this.hostDocument.addEventListener(\"paste\", (event) => {\r\n            if (!isElementEditable(event.target as HTMLElement)) {\r\n                this.onPasteObservable.notifyObservers(event.clipboardData?.getData(\"text\") || \"\");\r\n                event.preventDefault();\r\n            }\r\n        });\r\n        this.keys = new KeyboardManager(this.hostDocument);\r\n        this.keys.onKeyPressedObservable.add(() => {\r\n            // trigger a tool update (in case space is now pressed)\r\n            // we should really have a state management system to handle this for us\r\n            this.onToolChangeObservable.notifyObservers();\r\n        });\r\n    }\r\n\r\n    public get backgroundColor() {\r\n        return this._backgroundColor;\r\n    }\r\n    public get fromPG() {\r\n        return this._fromPG;\r\n    }\r\n    public set fromPG(value: boolean) {\r\n        this._fromPG = value;\r\n    }\r\n\r\n    public set backgroundColor(value: Color3) {\r\n        this._backgroundColor = value;\r\n        this.onBackgroundColorChangeObservable.notifyObservers();\r\n        DataStorage.WriteNumber(\"BackgroundColorR\", value.r);\r\n        DataStorage.WriteNumber(\"BackgroundColorG\", value.g);\r\n        DataStorage.WriteNumber(\"BackgroundColorB\", value.b);\r\n    }\r\n\r\n    public get outlines() {\r\n        return this._outlines;\r\n    }\r\n\r\n    public set outlines(value: boolean) {\r\n        this._outlines = value;\r\n        this.onOutlineChangedObservable.notifyObservers();\r\n    }\r\n\r\n    public select(control: Control) {\r\n        if (this.keys.isKeyDown(\"control\") && this.isMultiSelectable(control)) {\r\n            const index = this.selectedControls.indexOf(control);\r\n            if (index === -1) {\r\n                this.setSelection([...this.selectedControls, control]);\r\n            } else {\r\n                this.setSelection(this.selectedControls.filter((node) => node !== control));\r\n            }\r\n        } else {\r\n            this.setSelection([control]);\r\n        }\r\n    }\r\n\r\n    public setSelection(controls: Control[]) {\r\n        this.selectedControls = [...controls];\r\n\r\n        this.onSelectionChangedObservable.notifyObservers();\r\n    }\r\n\r\n    private _findParentControlInTexture(texture: AdvancedDynamicTexture, searchedControl: Control) {\r\n        const searchList = [texture.rootContainer];\r\n        while (searchList.length > 0) {\r\n            const current = searchList.splice(0, 1)[0];\r\n            const children = current.children;\r\n            if (children.indexOf(searchedControl) !== -1) {\r\n                return current;\r\n            }\r\n            for (const child of children) {\r\n                if (child instanceof Container) {\r\n                    searchList.push(child);\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public deleteSelectedNodes() {\r\n        for (const control of this.selectedControls) {\r\n            const guiTextureParent = this._findParentControlInTexture(this.guiTexture, control);\r\n            guiTextureParent?.removeControl(control);\r\n            if (this.liveGuiTexture) {\r\n                const allDescendants = control.getDescendants();\r\n                for (const descendant of allDescendants) {\r\n                    const liveGuiTextureDescendantParent = this._findParentControlInTexture(this.liveGuiTexture, descendant);\r\n                    liveGuiTextureDescendantParent?.removeControl(descendant);\r\n                    descendant.dispose();\r\n                }\r\n                const liveGuiTextureParent = this._findParentControlInTexture(this.liveGuiTexture, control);\r\n                liveGuiTextureParent?.removeControl(control);\r\n            }\r\n            control.dispose();\r\n        }\r\n        this.setSelection([]);\r\n    }\r\n\r\n    public isMultiSelectable(control: Control): boolean {\r\n        if (this.selectedControls.length === 0) return true;\r\n        if (this.selectedControls[0].parent === control.parent) return true;\r\n        return false;\r\n    }\r\n\r\n    public dispose() {\r\n        this.keys.dispose();\r\n    }\r\n}\r\n"]}
{"version":3,"file":"htmlTwinItem.js","sourceRoot":"","sources":["../../src/HtmlTwin/htmlTwinItem.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,iCAAiC,CAAC;AACnE,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AACxD,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AAEjC,OAAO,EAAE,sBAAsB,EAAE,MAAM,+BAA+B,CAAC;AACvE,OAAO,EAAE,MAAM,EAAE,MAAM,wBAAwB,CAAC;AAChD,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAC;AACtD,OAAO,EAAE,OAAO,EAAE,MAAM,yBAAyB,CAAC;AAQlD;;;;GAIG;AACH,MAAM,UAAU,oBAAoB,CAAC,IAAyB;IAC1D,IAAI,IAAI,YAAY,YAAY,IAAI,IAAI,CAAC,QAAQ,YAAY,gBAAgB,EAAE;QAC3E,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,IAAI,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC;QACjF,IAAI,UAAU,EAAE;YACZ,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,IAAI,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC;YAC9E,IAAI,OAAO,YAAY,sBAAsB,EAAE;gBAC3C,OAAO,OAAO,CAAC;aAClB;SACJ;KACJ;IACD,OAAO,SAAS,CAAC;AACrB,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,mBAAmB,CAAC,IAAyB;IACzD,IAAI,IAAI,YAAY,IAAI,EAAE;QACtB,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;KACpC;SAAM,IAAI,IAAI,YAAY,SAAS,IAAI,CAAC,CAAC,IAAI,YAAY,MAAM,CAAC,EAAE;QAC/D,OAAO,IAAI,CAAC,QAAQ,CAAC;KACxB;IACD,OAAO,EAAE,CAAC;AACd,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,SAAS,CAAC,IAAyB;IAC/C,IAAI,IAAI,YAAY,IAAI,EAAE;QACtB,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC;KAC3B;SAAM,IAAI,IAAI,YAAY,OAAO,EAAE;QAChC,OAAO,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC;KAC3C;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AAED;;GAEG;AACH,MAAM,OAAO,YAAY;IAWrB;;;;OAIG;IACH,YAAY,MAA2B,EAAE,KAAY;QACjD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAED;;;;;OAKG;IACI,cAAc,CAAC,QAAkC;QACpD,OAAO,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,WAAW,IAAI,EAAE,CAAC;IAC3D,CAAC;IAED;;;OAGG;IACH,IAAW,YAAY;QACnB,OAAO,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IAED;;;OAGG;IACH,IAAW,WAAW;QAClB,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAED;;;OAGG;IACI,KAAK,KAAU,CAAC;IAEvB;;;OAGG;IACI,IAAI,KAAU,CAAC;IAEtB;;;;OAIG;IACI,YAAY,CAAC,UAAkB,IAAS,CAAC;CAInD","sourcesContent":["import { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { Node } from \"core/node\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { AdvancedDynamicTexture } from \"gui/2D/advancedDynamicTexture\";\r\nimport { Button } from \"gui/2D/controls/button\";\r\nimport { Container } from \"gui/2D/controls/container\";\r\nimport { Control } from \"gui/2D/controls/control\";\r\nimport type { IHTMLTwinRendererOptions } from \"./htmlTwinRenderer\";\r\n\r\n/**\r\n * The BabylonJS entities that can be accessible. It can be a Node or a Control.\r\n */\r\nexport type AccessibilityEntity = Node | Control;\r\n\r\n/**\r\n * Retrieve an instance of texture with accessible elements (AdvancedDynamicTexture)\r\n * @param item the item to retrieve the texture from\r\n * @returns an accessible texture if found, undefined otherwise\r\n */\r\nexport function getAccessibleTexture(item: AccessibilityEntity): AdvancedDynamicTexture | undefined {\r\n    if (item instanceof AbstractMesh && item.material instanceof StandardMaterial) {\r\n        const hasTexture = item.material.emissiveTexture || item.material.diffuseTexture;\r\n        if (hasTexture) {\r\n            const texture = item.material.emissiveTexture ?? item.material.diffuseTexture;\r\n            if (texture instanceof AdvancedDynamicTexture) {\r\n                return texture;\r\n            }\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Get the direct children of an accessible item.\r\n * @param item an accessible item\r\n * @returns a list of accessible items\r\n */\r\nexport function getDirectChildrenOf(item: AccessibilityEntity): AccessibilityEntity[] {\r\n    if (item instanceof Node) {\r\n        return item.getDescendants(true);\r\n    } else if (item instanceof Container && !(item instanceof Button)) {\r\n        return item.children;\r\n    }\r\n    return [];\r\n}\r\n\r\n/**\r\n * Given an accessible item, return if it's visible or not.\r\n * @param item an accessible item\r\n * @returns its visibility status\r\n */\r\nexport function isVisible(item: AccessibilityEntity): boolean {\r\n    if (item instanceof Node) {\r\n        return item.isEnabled();\r\n    } else if (item instanceof Control) {\r\n        return item.isEnabled && item.isVisible;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * A abstract layer to store the html twin tree structure. It is constructed from the BabylonJS scene entities that need to be accessible. It informs the parent-children relationship of html twin tree, and informs how to render: description, isActionable, onclick/onrightclick/onfocus/onblur.\r\n */\r\nexport class HTMLTwinItem {\r\n    /**\r\n     * The corresponding BabylonJS entity. Can be a Node or a Control.\r\n     */\r\n    public entity: AccessibilityEntity;\r\n\r\n    /**\r\n     * The BabylonJS scene that the corresponding BabylonJS entity is in.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Constructor of HTMLTwinItem.\r\n     * @param entity - The corresponding BabylonJS entity. Can be a Node or a Control.\r\n     * @param scene - The BabylonJS scene that the corresponding BabylonJS entity is in.\r\n     */\r\n    constructor(entity: AccessibilityEntity, scene: Scene) {\r\n        this.entity = entity;\r\n        this.scene = scene;\r\n    }\r\n\r\n    /**\r\n     * The text content displayed in HTML element.\r\n     * Returns the description in accessibilityTag, if defined (returns \"\" by default).\r\n     * @param _options - The options to render the HTML twin tree where this item is contained. Not used in this class, but in its children.\r\n     * @returns the text content displayed in HTML element\r\n     */\r\n    public getDescription(_options: IHTMLTwinRendererOptions): string {\r\n        return this.entity.accessibilityTag?.description ?? \"\";\r\n    }\r\n\r\n    /**\r\n     * If this entity is actionable (can be clicked).\r\n     * Implemented by child classes\r\n     */\r\n    public get isActionable(): boolean {\r\n        return this._isActionable;\r\n    }\r\n\r\n    /**\r\n     * If this entity is focusable (can be focused by tab key pressing).\r\n     * Implemented by child classes\r\n     */\r\n    public get isFocusable(): boolean {\r\n        return this._isFocusable;\r\n    }\r\n\r\n    /**\r\n     * Callback when the HTML element is focused. Show visual indication on BabylonJS entity.\r\n     * Implemented by child classes\r\n     */\r\n    public focus(): void {}\r\n\r\n    /**\r\n     * Callback when the HTML element is blured. Dismiss visual indication on BabylonJS entity.\r\n     * Implemented by child classes\r\n     */\r\n    public blur(): void {}\r\n\r\n    /**\r\n     * Callback when an event (e.g. click/right click) happens on the HTML element.\r\n     * Implemented by child classes\r\n     * @param _eventType - Which event is triggered. E.g. \"click\", \"contextmenu\"\r\n     */\r\n    public triggerEvent(_eventType: string): void {}\r\n\r\n    protected _isActionable: boolean;\r\n    protected _isFocusable: boolean;\r\n}\r\n"]}
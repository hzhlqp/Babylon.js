{"version":3,"file":"htmlTwinNodeItem.js","sourceRoot":"","sources":["../../src/HtmlTwin/htmlTwinNodeItem.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IAction } from \"core/Actions/action\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Node } from \"core/node\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { HTMLTwinItem } from \"./htmlTwinItem\";\r\n\r\n/**\r\n * A abstract layer to store the html twin tree structure. It is constructed from the BabylonJS scene entities that need to be accessible. It informs the parent-children relationship of html twin tree, and informs how to render: description, isActionable, onclick/onrightclick/onfocus/onblur.\r\n */\r\nexport class HTMLTwinNodeItem extends HTMLTwinItem {\r\n    /**\r\n     * The corresponding BabylonJS entity. Can be a Node or a Control.\r\n     */\r\n    public override entity: Node;\r\n\r\n    constructor(entity: Node, scene: Scene) {\r\n        super(entity, scene);\r\n    }\r\n\r\n    /**\r\n     * If this entity is actionable (can be clicked).\r\n     */\r\n    public override get isActionable(): boolean {\r\n        if (this._isActionable) {\r\n            return this._isActionable;\r\n        }\r\n\r\n        // If defined onclick, override default.\r\n        const eventHandler = (this.entity as Node).accessibilityTag?.eventHandler;\r\n        if (eventHandler?.click || eventHandler?.contextmenu) {\r\n            this._isActionable = true;\r\n        } else {\r\n            this._isActionable = (this.entity as Node)._getActionManagerForTrigger()?.hasPickTriggers!!;\r\n        }\r\n\r\n        return this._isActionable;\r\n    }\r\n\r\n    /**\r\n     * If this entity is focusable (can be focused by tab key pressing).\r\n     */\r\n    public override get isFocusable(): boolean {\r\n        if (this._isFocusable) {\r\n            return this._isFocusable;\r\n        } else {\r\n            this._isFocusable = this.isActionable;\r\n        }\r\n        return this._isFocusable;\r\n    }\r\n\r\n    /**\r\n     * Callback when the HTML element is focused. Show visual indication on BabylonJS entity.\r\n     */\r\n    public override focus(): void {\r\n        // If defined eventHandler, override default.\r\n        const eventHandler = (this.entity as Node).accessibilityTag?.eventHandler;\r\n        if (eventHandler?.focus) {\r\n            eventHandler.focus();\r\n            return;\r\n        }\r\n\r\n        if (this.entity instanceof Mesh) {\r\n            const mesh = this.entity as Mesh;\r\n            mesh.enableEdgesRendering(0.999);\r\n            mesh.edgesWidth = 5;\r\n            mesh.edgesColor = new Color4(0.25, 0.5, 1, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback when the HTML element is blured. Dismiss visual indication on BabylonJS entity.\r\n     */\r\n    public override blur(): void {\r\n        // If defined eventHandler, override default.\r\n        const eventHandler = (this.entity as Node).accessibilityTag?.eventHandler;\r\n        if (eventHandler?.blur) {\r\n            eventHandler.blur();\r\n            return;\r\n        }\r\n\r\n        if (this.entity instanceof Mesh) {\r\n            const mesh = this.entity as Mesh;\r\n            mesh.disableEdgesRendering();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback when an event (e.g. click/right click) happens on the HTML element.\r\n     * Implemented by child classes\r\n     * @param eventType - Which event is triggered. E.g. \"click\", \"contextmenu\"\r\n     */\r\n    public override triggerEvent(eventType: string): void {\r\n        const eventHandler = (this.entity as Node).accessibilityTag?.eventHandler;\r\n        const actions: IAction[] = [];\r\n\r\n        switch (eventType) {\r\n            case \"click\":\r\n                if (eventHandler?.click) {\r\n                    eventHandler.click();\r\n                    return;\r\n                }\r\n                actions.push(...this._getTriggerActions(this.entity, Constants.ACTION_OnLeftPickTrigger));\r\n                actions.push(...this._getTriggerActions(this.entity, Constants.ACTION_OnPickTrigger));\r\n                break;\r\n\r\n            case \"contextmenu\":\r\n                if (eventHandler?.contextmenu) {\r\n                    eventHandler.contextmenu();\r\n                    return;\r\n                }\r\n                actions.push(...this._getTriggerActions(this.entity, Constants.ACTION_OnRightPickTrigger));\r\n                actions.push(...this._getTriggerActions(this.entity, Constants.ACTION_OnPickTrigger));\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        actions.forEach((action) => {\r\n            action._executeCurrent();\r\n        });\r\n    }\r\n\r\n    private _getTriggerActions(node: Node, trigger: number): IAction[] {\r\n        const triggerActions = node._getActionManagerForTrigger(trigger)?.actions.filter((action) => action.trigger == trigger);\r\n        return triggerActions ?? [];\r\n    }\r\n}\r\n"]}
{"version":3,"file":"htmlTwinRenderer.js","sourceRoot":"","sources":["../../src/HtmlTwin/htmlTwinRenderer.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,QAAQ,MAAM,WAAW,CAAC;AACtC,OAAO,EAAE,qBAAqB,EAAE,MAAM,yBAAyB,CAAC;AAchE;;;GAGG;AACH,MAAM,OAAO,gBAAgB;IACzB;;;;OAIG;IACI,MAAM,CAAC,MAAM,CAAC,KAAY,EAAE,OAAkC;QACjE,MAAM,YAAY,GAAG,KAAK,CAAC,aAAa,CAAC,qBAAqB,EAAE;YAC5D,KAAK;YACL,OAAO;SACV,CAAC,CAAC;QACH,QAAQ,CAAC,MAAM,CAAC,YAAY,EAAE,KAAK,CAAC,SAAS,EAAE,CAAC,kBAAkB,EAAE,CAAC,CAAC;IAC1E,CAAC;CACJ","sourcesContent":["import type { Scene } from \"core/scene\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { HTMLTwinHostComponent } from \"./htmlTwinHostComponent\";\r\n\r\n/**\r\n * Options for the HTMLTwinRenderer.\r\n */\r\nexport interface IHTMLTwinRendererOptions {\r\n    /**\r\n     * If this is true, all GUI controls will be added to the twin tree, regardless if they have\r\n     * a defined accessibility tag or not. If it's false, only controls with an accessibility tag\r\n     * will be added. True by default.\r\n     */\r\n    addAllControls: boolean;\r\n}\r\n\r\n/**\r\n * This class is the main entry point for the HTML twin renderer. To render a twin for a scene,\r\n * simply call HTMLTwinRenderer.Render(scene).\r\n */\r\nexport class HTMLTwinRenderer {\r\n    /**\r\n     * Render the HTML twin for the given scene.\r\n     * @param scene the scene to render the twin for\r\n     * @param options options for the renderer\r\n     */\r\n    public static Render(scene: Scene, options?: IHTMLTwinRendererOptions) {\r\n        const htmlTwinHost = React.createElement(HTMLTwinHostComponent, {\r\n            scene,\r\n            options,\r\n        });\r\n        ReactDOM.render(htmlTwinHost, scene.getEngine().getRenderingCanvas());\r\n    }\r\n}\r\n"]}
{"version":3,"file":"htmlTwinItemAdapter.js","sourceRoot":"","sources":["../../src/HtmlTwin/htmlTwinItemAdapter.tsx"],"names":[],"mappings":"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","sourcesContent":["import { getAccessibleTexture, isVisible, getDirectChildrenOf } from \"./htmlTwinItem\";\r\nimport type { AccessibilityEntity, HTMLTwinItem } from \"./htmlTwinItem\";\r\nimport { useContext, useEffect, useReducer, useState } from \"react\";\r\nimport { SceneContext } from \"./htmlTwinSceneContext\";\r\nimport { HTMLTwinAccessibilityItem } from \"./htmlTwinAccessibilityItem\";\r\nimport { Container } from \"gui/2D/controls/container\";\r\nimport { Control } from \"gui/2D/controls/control\";\r\nimport { Node } from \"core/node\";\r\nimport { HTMLTwinNodeItem } from \"./htmlTwinNodeItem\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { HTMLTwinGUIItem } from \"./htmlTwinGUIItem\";\r\nimport type { IHTMLTwinRendererOptions } from \"./htmlTwinRenderer\";\r\nimport type { Observable, Observer } from \"core/Misc/observable\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\nfunction getTwinItemFromNode(node: AccessibilityEntity, scene: Scene) {\r\n    if (node instanceof Node) {\r\n        return new HTMLTwinNodeItem(node, scene);\r\n    } else {\r\n        return new HTMLTwinGUIItem(node, scene);\r\n    }\r\n}\r\n\r\n/**\r\n * An adapter that transforms a Accessible entity in a React element. Contains observables for the events that can\r\n * change the state of the entity or the accesible tree.\r\n * @param props the props of the adapter\r\n * @returns\r\n */\r\nexport function HTMLTwinItemAdapter(props: { node: AccessibilityEntity; scene: Scene; options: IHTMLTwinRendererOptions }): JSX.Element | null {\r\n    const { node, scene, options } = props;\r\n    if (!node) {\r\n        return null;\r\n    }\r\n    const [twinItem, setTwinItem] = useState<HTMLTwinItem>(getTwinItemFromNode(node, scene));\r\n    useEffect(() => {\r\n        setTwinItem(getTwinItemFromNode(node, scene));\r\n    }, [node]);\r\n\r\n    const [isVisibleState, setIsVisibleState] = useState(isVisible(props.node));\r\n    const sceneContext = useContext(SceneContext);\r\n    const [description, setDescription] = useState(twinItem?.getDescription(options));\r\n    // From https://legacy.reactjs.org/docs/hooks-faq.html#is-there-something-like-forceupdate\r\n    const [, forceUpdate] = useReducer((x) => x + 1, 0);\r\n    const children = getDirectChildrenOf(props.node);\r\n\r\n    useEffect(() => {\r\n        setDescription(twinItem?.getDescription(options));\r\n    }, [twinItem]);\r\n\r\n    useEffect(() => {\r\n        // General observers for all the entities\r\n        const enabledObservable = node.onEnabledStateChangedObservable;\r\n        const enabledObserver = enabledObservable.add((value: boolean) => {\r\n            setIsVisibleState(value);\r\n        });\r\n\r\n        const disposeObservable = (node as any).onDisposeObservable;\r\n        const disposeObserver = disposeObservable.add(() => {\r\n            sceneContext.updateScene();\r\n        });\r\n\r\n        const accessibilityTagObservable = node.onAccessibilityTagChangedObservable;\r\n        const accessibilityTagObserver = accessibilityTagObservable.add(() => {\r\n            setDescription(twinItem?.getDescription(options));\r\n        });\r\n\r\n        // Specific observer for control only\r\n        let isVisibleChangedObservable: Observable<boolean>;\r\n        let isVisibleChangedObserver: Nullable<Observer<boolean>>;\r\n        if (node instanceof Control) {\r\n            isVisibleChangedObservable = node.onIsVisibleChangedObservable;\r\n            isVisibleChangedObserver = isVisibleChangedObservable.add(() => {\r\n                setIsVisibleState(isVisible(props.node));\r\n            });\r\n        }\r\n\r\n        // specific observers for container only\r\n        let controlAddedObservable: Observable<Nullable<Control>>;\r\n        let controlAddedObserver: Nullable<Observer<Nullable<Control>>>;\r\n        let controlRemovedObservable: Observable<Nullable<Control>>;\r\n        let controlRemovedObserver: Nullable<Observer<Nullable<Control>>>;\r\n        if (node instanceof Container) {\r\n            controlAddedObservable = node.onControlAddedObservable;\r\n            controlAddedObserver = controlAddedObservable.add(() => {\r\n                forceUpdate();\r\n            });\r\n\r\n            controlRemovedObservable = node.onControlRemovedObservable;\r\n            controlRemovedObserver = controlRemovedObservable.add(() => {\r\n                forceUpdate();\r\n            });\r\n        }\r\n        return () => {\r\n            enabledObservable.remove(enabledObserver);\r\n            disposeObservable.remove(disposeObserver);\r\n            accessibilityTagObservable.remove(accessibilityTagObserver);\r\n            if (node instanceof Control) {\r\n                isVisibleChangedObservable.remove(isVisibleChangedObserver!);\r\n            }\r\n            if (node instanceof Container) {\r\n                controlAddedObservable.remove(controlAddedObserver);\r\n                controlRemovedObservable.remove(controlRemovedObserver);\r\n            }\r\n        };\r\n    }, [node]);\r\n\r\n    if (isVisibleState) {\r\n        const accessibleTexture = getAccessibleTexture(props.node);\r\n        return (\r\n            <>\r\n                {accessibleTexture && <HTMLTwinItemAdapter node={accessibleTexture.rootContainer} scene={scene} options={options} />}\r\n                {(!!description || children.length > 0) && (\r\n                    <HTMLTwinAccessibilityItem description={description} a11yItem={twinItem}>\r\n                        {children.map((child: AccessibilityEntity) => (\r\n                            <HTMLTwinItemAdapter node={child} key={child.uniqueId} scene={scene} options={options} />\r\n                        ))}\r\n                    </HTMLTwinAccessibilityItem>\r\n                )}\r\n            </>\r\n        );\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n"]}
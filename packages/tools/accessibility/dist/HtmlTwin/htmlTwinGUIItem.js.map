{"version":3,"file":"htmlTwinGUIItem.js","sourceRoot":"","sources":["../../src/HtmlTwin/htmlTwinGUIItem.ts"],"names":[],"mappings":"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","sourcesContent":["import { Vector2 } from \"core/Maths/math\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { Button } from \"gui/2D/controls/button\";\r\nimport type { Control } from \"gui/2D/controls/control\";\r\nimport { Image } from \"gui/2D/controls/image\";\r\nimport { TextBlock } from \"gui/2D/controls/textBlock\";\r\nimport { Vector2WithInfo } from \"gui/2D/math2D\";\r\nimport { HTMLTwinItem } from \"./htmlTwinItem\";\r\nimport type { IHTMLTwinRendererOptions } from \"./htmlTwinRenderer\";\r\n\r\n/**\r\n * A abstract layer to store the html twin tree structure. It is constructed from the BabylonJS scene entities that need to be accessible. It informs the parent-children relationship of html twin tree, and informs how to render: description, isActionable, onclick/onrightclick/onfocus/onblur.\r\n */\r\nexport class HTMLTwinGUIItem extends HTMLTwinItem {\r\n    /**\r\n     * The corresponding BabylonJS entity. Can be a Node or a Control.\r\n     */\r\n    public override entity: Control;\r\n\r\n    constructor(entity: Control, scene: Scene) {\r\n        super(entity, scene);\r\n    }\r\n\r\n    /**\r\n     * The text content displayed in HTML element.\r\n     * @param options - Options to render HTML twin tree where this element is contained.\r\n     * @returns The text content displayed in HTML element.\r\n     */\r\n    public override getDescription(options: IHTMLTwinRendererOptions): string {\r\n        let description = \"\";\r\n        if (this.entity?.accessibilityTag?.description) {\r\n            description = this.entity.accessibilityTag.description;\r\n        } else if (options.addAllControls && this.entity instanceof TextBlock) {\r\n            description = (this.entity as TextBlock).text;\r\n        } else if (options.addAllControls && this.entity instanceof Button) {\r\n            description = (this.entity as Button).textBlock?.text ?? \"\";\r\n        } else if (options.addAllControls && this.entity instanceof Image) {\r\n            description = (this.entity as Image).alt ?? \"\";\r\n        }\r\n        return description;\r\n    }\r\n\r\n    /**\r\n     * If this entity is actionable (can be clicked).\r\n     */\r\n    public override get isActionable(): boolean {\r\n        if (this._isActionable) {\r\n            return this._isActionable;\r\n        }\r\n\r\n        // If defined onclick, override default.\r\n        const eventHandler = (this.entity as Control).accessibilityTag?.eventHandler;\r\n        if (eventHandler?.click || eventHandler?.contextmenu) {\r\n            this._isActionable = true;\r\n        } else {\r\n            if (this.entity instanceof Button) {\r\n                this._isActionable = true;\r\n            } else {\r\n                this._isActionable = false;\r\n            }\r\n        }\r\n\r\n        return this._isActionable;\r\n    }\r\n\r\n    /**\r\n     * If this entity is focusable (can be focused by tab key pressing).\r\n     */\r\n    public override get isFocusable(): boolean {\r\n        if (this._isFocusable) {\r\n            return this._isFocusable;\r\n        }\r\n\r\n        if (this.entity instanceof Button) {\r\n            this._isFocusable = true;\r\n        } else {\r\n            this._isFocusable = false;\r\n        }\r\n        return this._isFocusable;\r\n    }\r\n\r\n    /**\r\n     * Callback when the HTML element is focused. Show visual indication on BabylonJS entity.\r\n     */\r\n    public override focus(): void {\r\n        // If defined eventHandler, override default.\r\n        const eventHandler = (this.entity as Control).accessibilityTag?.eventHandler;\r\n        if (eventHandler?.focus) {\r\n            eventHandler.focus();\r\n            return;\r\n        }\r\n\r\n        const control = this.entity as Control;\r\n        control.highlightLineWidth = 10;\r\n        control.isHighlighted = true;\r\n    }\r\n\r\n    /**\r\n     * Callback when the HTML element is blured. Dismiss visual indication on BabylonJS entity.\r\n     */\r\n    public override blur(): void {\r\n        // If defined eventHandler, override default.\r\n        const eventHandler = (this.entity as Control).accessibilityTag?.eventHandler;\r\n        if (eventHandler?.blur) {\r\n            eventHandler.blur();\r\n            return;\r\n        }\r\n\r\n        const control = this.entity as Control;\r\n        control.isHighlighted = false;\r\n    }\r\n\r\n    /**\r\n     * Callback when an event (e.g. click/right click) happens on the HTML element.\r\n     * Implemented by child classes\r\n     * @param eventType - Which event is triggered. E.g. \"click\", \"contextmenu\"\r\n     */\r\n    public override triggerEvent(eventType: string): void {\r\n        const eventHandler = (this.entity as Control).accessibilityTag?.eventHandler;\r\n\r\n        switch (eventType) {\r\n            case \"click\":\r\n                if (eventHandler?.click) {\r\n                    eventHandler.click();\r\n                    return;\r\n                }\r\n\r\n                if (!this.isActionable) return;\r\n                this.entity.onPointerClickObservable.notifyObservers(new Vector2WithInfo(new Vector2(this.scene.pointerX, this.scene.pointerY)));\r\n                break;\r\n\r\n            case \"contextmenu\":\r\n                if (eventHandler?.contextmenu) {\r\n                    eventHandler.contextmenu();\r\n                    return;\r\n                }\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n"]}
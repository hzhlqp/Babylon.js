{"version":3,"file":"htmlTwinSceneTree.js","sourceRoot":"","sources":["../../src/HtmlTwin/htmlTwinSceneTree.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { Scene } from \"core/scene\";\r\nimport { useCallback, useContext, useEffect, useRef, useState } from \"react\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { SceneContext } from \"./htmlTwinSceneContext\";\r\nimport { HTMLTwinItemAdapter } from \"./htmlTwinItemAdapter\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { AdvancedDynamicTexture } from \"gui/2D/advancedDynamicTexture\";\r\nimport type { IHTMLTwinRendererOptions } from \"./htmlTwinRenderer\";\r\n\r\nfunction getSceneIds(scene: Scene) {\r\n    const newSet = new Set<number>();\r\n    scene.rootNodes.forEach((node) => newSet.add(node.uniqueId));\r\n    return newSet;\r\n}\r\n\r\nfunction getFullscreenGuiTextures(scene: Scene) {\r\n    const textures = [];\r\n    for (const texture of scene.textures) {\r\n        if (texture instanceof AdvancedDynamicTexture && texture._isFullscreen) {\r\n            textures.push(texture);\r\n        }\r\n    }\r\n    return textures;\r\n}\r\n\r\n/**\r\n * The scene tree of the HTML twin. It contain all the top level nodes\r\n * @param props\r\n * @returns\r\n */\r\nexport function HTMLTwinSceneTree(props: { scene: Scene; options: IHTMLTwinRendererOptions }): JSX.Element {\r\n    const { scene, options } = props;\r\n\r\n    const [, setMeshIds] = useState(new Set<number>());\r\n    const [sceneGuiTextures, setSceneGuiTextures] = useState<AdvancedDynamicTexture[]>(getFullscreenGuiTextures(scene));\r\n    const nextFrameObserver = useRef<Nullable<Observer<Scene>>>(null);\r\n    const sceneContext = useContext(SceneContext);\r\n\r\n    const getChildren = useCallback(() => {\r\n        return (\r\n            <>\r\n                {scene.rootNodes.map((node) => (\r\n                    <HTMLTwinItemAdapter key={node.uniqueId} node={node} scene={scene} options={options} />\r\n                ))}\r\n                {sceneGuiTextures.map((texture) => (\r\n                    <HTMLTwinItemAdapter key={texture.uniqueId} node={texture.rootContainer} scene={scene} options={options} />\r\n                ))}\r\n            </>\r\n        );\r\n    }, [scene, sceneGuiTextures, options]);\r\n\r\n    useEffect(() => {\r\n        const newMeshAddedObserver = scene.onNewMeshAddedObservable.add(() => {\r\n            if (!nextFrameObserver.current) {\r\n                nextFrameObserver.current = props.scene.onBeforeRenderObservable.addOnce(() => {\r\n                    nextFrameObserver.current = null;\r\n                    setMeshIds(getSceneIds(props.scene));\r\n                });\r\n            }\r\n        });\r\n        const newTextureAddedObserver = scene.onNewTextureAddedObservable.add((texture: BaseTexture) => {\r\n            if (texture instanceof AdvancedDynamicTexture) {\r\n                setSceneGuiTextures((current) => [...current, texture]);\r\n            }\r\n        });\r\n        return () => {\r\n            scene.onNewMeshAddedObservable.remove(newMeshAddedObserver);\r\n            scene.onNewTextureAddedObservable.remove(newTextureAddedObserver);\r\n        };\r\n    }, [scene]);\r\n\r\n    useEffect(() => {\r\n        if (sceneContext) {\r\n            sceneContext.updateScene = () => {\r\n                setMeshIds(getSceneIds(props.scene));\r\n            };\r\n        }\r\n    }, [sceneContext]);\r\n\r\n    return getChildren();\r\n}\r\n"]}
{"version":3,"file":"seleniumTestUtils.js","sourceRoot":"","sources":["../src/seleniumTestUtils.ts"],"names":[],"mappings":";;;AACA,qCAAmC;AACnC,6DAA2K;AAE9J,QAAA,uBAAuB,GAAG;IACnC,gEAAgE;IAChE,gBAAgB,EAAE;QACd,EAAE,EAAE,MAAM;QACV,SAAS,EAAE,UAAU;QACrB,KAAK,EAAE,OAAO;QACd,eAAe,EAAE,OAAO;QACxB,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC;QAC9C,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC;KACpD;IACD,WAAW,EAAE,QAAQ;IACrB,cAAc,EAAE,QAAQ;CAC3B,CAAC;AAEF,iFAAiF;AAC1E,MAAM,cAAc,GAAG,KAAK,EAC/B,MAAyB,EACzB,IAAY,EACZ,YAAmF,EACnF,iBAAyB,GAAG,EACf,EAAE;IACf,MAAM,MAAM,CAAC,aAAa,CACtB;;+BAEuB,YAAY,CAAC,IAAI;kCACd,YAAY,CAAC,OAAO;qCACjB,YAAY,CAAC,UAAU;iCAC3B,YAAY,CAAC,MAAM;;;6DAGS,uDAAkC,CAAC,QAAQ,EAAE;+CAC3D,yCAAoB,CAAC,QAAQ,EAAE;8DAChB,wDAAmC,CAAC,QAAQ,EAAE;;;;oFAIxB,YAAY,CAAC,OAAO;6DAC3C,IAAI;sDACX,cAAc;aACvD,CACR,CAAC;AACN,CAAC,CAAC;AA1BW,QAAA,cAAc,kBA0BzB;AAEF,yFAAyF;AAClF,MAAM,sBAAsB,GAAG,KAAK,EAAE,MAAyB,EAAoB,EAAE;IACxF,OAAO,CAAC,MAAM,MAAM,CAAC,aAAa,CAAC;2DACoB,yDAAoC,CAAC,QAAQ,EAAE;;;;SAIjG,CAAC,CAAY,CAAC;AACvB,CAAC,CAAC;AAPW,QAAA,sBAAsB,0BAOjC","sourcesContent":["import type { ThenableWebDriver } from \"selenium-webdriver\";\r\nimport \"selenium-webdriver/safari\";\r\nimport { evaluateDisposeSceneForVisualization, evaluateInitEngineForVisualization, evaluatePrepareScene, evaluateRenderSceneForVisualization } from \"./visualizationUtils\";\r\n\r\nexport const macOSSafariCapabilities = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    \"bstack:options\": {\r\n        os: \"OS X\",\r\n        osVersion: \"Monterey\",\r\n        local: \"false\",\r\n        seleniumVersion: \"4.3.0\",\r\n        userName: process.env[\"BROWSERSTACK_USERNAME\"],\r\n        accessKey: process.env[\"BROWSERSTACK_ACCESS_KEY\"],\r\n    },\r\n    browserName: \"Safari\",\r\n    browserVersion: \"latest\",\r\n};\r\n\r\n// Take Playgorund Id and Selenium webdriver and load snippet info into test page\r\nexport const LoadPlayground = async (\r\n    driver: ThenableWebDriver,\r\n    pgId: string,\r\n    globalConfig: { root: string; baseUrl: string; snippetUrl: string; pgRoot: string },\r\n    framesToRender: number = 500\r\n): Promise<void> => {\r\n    await driver.executeScript(\r\n        `\r\n                var _globalConfig = {\r\n                    'root': '${globalConfig.root}',\r\n                    'baseUrl': '${globalConfig.baseUrl}',\r\n                    'snippetUrl': '${globalConfig.snippetUrl}',\r\n                    'pgRoot': '${globalConfig.pgRoot}}',\r\n                };\r\n\r\n                const evaluateInitEngineForVisualization = ${evaluateInitEngineForVisualization.toString()}\r\n                const evaluatePrepareScene = ${evaluatePrepareScene.toString()}\r\n                const evaluateRenderSceneForVisualization = ${evaluateRenderSceneForVisualization.toString()}\r\n\r\n                globalThis.testSuccessful = false;\r\n\r\n                await evaluateInitEngineForVisualization(\"webgl1\", false, false, \"${globalConfig.baseUrl}\");\r\n                await evaluatePrepareScene({playgroundId: \"${pgId}\"}, _globalConfig);\r\n                evaluateRenderSceneForVisualization(${framesToRender});\r\n            `\r\n    );\r\n};\r\n\r\n// Given a test page with snippet information, check if globalThis.testSuccessful is true\r\nexport const CheckTestSuccessStatus = async (driver: ThenableWebDriver): Promise<boolean> => {\r\n    return (await driver.executeScript(`\r\n            const evaluateDisposeSceneForVisualization = ${evaluateDisposeSceneForVisualization.toString()}\r\n            await evaluateDisposeSceneForVisualization({ forceUseReverseDepthBuffer: false, forceUseNonCompatibilityMode: false })\r\n\r\n            return globalThis.testSuccessful;\r\n        `)) as boolean;\r\n};\r\n"]}
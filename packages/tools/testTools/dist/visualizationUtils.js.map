{"version":3,"file":"visualizationUtils.js","sourceRoot":"","sources":["../src/visualizationUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\r\n/* eslint-disable @typescript-eslint/naming-convention */\r\ndeclare const BABYLON: typeof window.BABYLON;\r\n\r\nexport const evaluateInitEngineForVisualization = async (engineName: string, useReverseDepthBuffer: string | number, useNonCompatibilityMode: string | number, baseUrl: string) => {\r\n    engineName = engineName ? engineName.toLowerCase() : \"webgl2\";\r\n    if (window.engine) {\r\n        window.engine.dispose();\r\n        window.engine = null;\r\n    }\r\n    if (engineName === \"webgl\") {\r\n        engineName = \"webgl1\";\r\n    }\r\n\r\n    BABYLON.SceneLoader.ShowLoadingScreen = false;\r\n    BABYLON.SceneLoader.ForceFullSceneLoadingForIncremental = true;\r\n\r\n    BABYLON.Tools.ScriptBaseUrl = baseUrl;\r\n\r\n    window.forceUseReverseDepthBuffer = useReverseDepthBuffer === 1 || useReverseDepthBuffer === \"true\";\r\n    window.forceUseNonCompatibilityMode = useNonCompatibilityMode === 1 || useNonCompatibilityMode === \"true\";\r\n\r\n    window.canvas = document.getElementById(\"babylon-canvas\") as HTMLCanvasElement;\r\n    if (engineName === \"webgpu\") {\r\n        const options = {\r\n            enableAllFeatures: true,\r\n            setMaximumLimits: true,\r\n            antialias: false,\r\n        };\r\n\r\n        const engine = new BABYLON.WebGPUEngine(window.canvas, options);\r\n        engine.enableOfflineSupport = false;\r\n        engine.useReverseDepthBuffer = window.forceUseReverseDepthBuffer;\r\n        engine.compatibilityMode = !window.forceUseNonCompatibilityMode;\r\n        window.engine = engine;\r\n\r\n        await engine.initAsync();\r\n        await engine.prepareGlslangAndTintAsync();\r\n    } else {\r\n        const engine = new BABYLON.Engine(window.canvas, false, {\r\n            useHighPrecisionFloats: true,\r\n            disableWebGL2Support: engineName === \"webgl1\" ? true : false,\r\n            forceSRGBBufferSupportState: true,\r\n        });\r\n        engine.enableOfflineSupport = false;\r\n        engine.setDitheringState(false);\r\n        engine.useReverseDepthBuffer = window.forceUseReverseDepthBuffer;\r\n        engine.compatibilityMode = !window.forceUseNonCompatibilityMode;\r\n        window.engine = engine;\r\n    }\r\n    window.engine!.renderEvenInBackground = true;\r\n    window.engine.getCaps().parallelShaderCompile = undefined;\r\n    return {\r\n        forceUseReverseDepthBuffer: window.forceUseReverseDepthBuffer,\r\n        forceUseNonCompatibilityMode: window.forceUseNonCompatibilityMode,\r\n        engineName,\r\n        renderer: (window.engine as any)._glRenderer,\r\n    };\r\n};\r\n\r\nexport const evaluatePrepareScene = async (\r\n    sceneMetadata: {\r\n        sceneFolder?: string;\r\n        sceneFilename?: string;\r\n        scriptToRun?: string;\r\n        specificRoot?: string;\r\n        replaceUrl?: string;\r\n        rootPath?: string;\r\n        functionToCall?: string;\r\n        replace?: string;\r\n        playgroundId?: string;\r\n    },\r\n    globalConfig: { root: string; snippetUrl: any; pgRoot: string }\r\n) => {\r\n    window.seed = 1;\r\n    window.Math.random = function () {\r\n        const x = Math.sin(window.seed++) * 10000;\r\n        return x - Math.floor(x);\r\n    };\r\n    BABYLON.SceneLoader.OnPluginActivatedObservable.clear();\r\n    BABYLON.SceneLoader.ShowLoadingScreen = false;\r\n    BABYLON.SceneLoader.ForceFullSceneLoadingForIncremental = true;\r\n    if (sceneMetadata.sceneFolder) {\r\n        window.scene = await BABYLON.SceneLoader.LoadAsync(globalConfig.root + sceneMetadata.sceneFolder, sceneMetadata.sceneFilename, window.engine);\r\n    } else if (sceneMetadata.playgroundId) {\r\n        if (sceneMetadata.playgroundId[0] !== \"#\" || sceneMetadata.playgroundId.indexOf(\"#\", 1) === -1) {\r\n            sceneMetadata.playgroundId += \"#0\";\r\n        }\r\n\r\n        const retryTime = 500;\r\n        const maxRetry = 5;\r\n        let retry = 0;\r\n\r\n        const runSnippet = async function () {\r\n            const data = await fetch(globalConfig.snippetUrl + sceneMetadata.playgroundId!.replace(/#/g, \"/\"));\r\n            const snippet = await data.json();\r\n            let code = JSON.parse(snippet.jsonPayload).code.toString();\r\n            code = code\r\n                .replace(/\"\\/textures\\//g, '\"' + globalConfig.pgRoot + \"/textures/\")\r\n                .replace(/\"textures\\//g, '\"' + globalConfig.pgRoot + \"/textures/\")\r\n                .replace(/\\/scenes\\//g, globalConfig.pgRoot + \"/scenes/\")\r\n                .replace(/\"scenes\\//g, '\"' + globalConfig.pgRoot + \"/scenes/\")\r\n                .replace(/\"\\.\\.\\/\\.\\.https/g, '\"' + \"https\")\r\n                .replace(\"http://\", \"https://\");\r\n\r\n            if (sceneMetadata.replace) {\r\n                const split = sceneMetadata.replace.split(\",\");\r\n                for (let i = 0; i < split.length; i += 2) {\r\n                    const source = split[i].trim();\r\n                    const destination = split[i + 1].trim();\r\n                    code = code.replace(source, destination);\r\n                }\r\n            }\r\n\r\n            const loadedScene = eval(code + \"\\r\\ncreateScene(engine)\");\r\n\r\n            if (loadedScene.then) {\r\n                // Handle if createScene returns a promise\r\n                window.scene = await loadedScene;\r\n            } else {\r\n                window.scene = loadedScene;\r\n            }\r\n        };\r\n\r\n        const run = async () => {\r\n            try {\r\n                await runSnippet();\r\n            } catch (e) {\r\n                if (retry < maxRetry) {\r\n                    retry++;\r\n                    // wait for retryTime\r\n                    await new Promise((resolve) => setTimeout(resolve, retryTime));\r\n                    await run();\r\n                } else {\r\n                    console.error(e);\r\n                    throw e;\r\n                }\r\n            }\r\n        };\r\n\r\n        await run();\r\n    } else if (sceneMetadata.scriptToRun) {\r\n        if (sceneMetadata.specificRoot) {\r\n            BABYLON.Tools.BaseUrl = globalConfig.root + sceneMetadata.specificRoot;\r\n        }\r\n\r\n        const scriptContent = await (await fetch(globalConfig.root + sceneMetadata.scriptToRun)).text();\r\n        let scriptToRun = scriptContent.replace(/..\\/..\\/assets\\//g, globalConfig.root + \"/Assets/\");\r\n        scriptToRun = scriptToRun.replace(/..\\/..\\/Assets\\//g, globalConfig.root + \"/Assets/\");\r\n        scriptToRun = scriptToRun.replace(/\\/assets\\//g, globalConfig.root + \"/Assets/\");\r\n\r\n        if (sceneMetadata.replace) {\r\n            const split = sceneMetadata.replace.split(\",\");\r\n            for (let i = 0; i < split.length; i += 2) {\r\n                const source = split[i].trim();\r\n                const destination = split[i + 1].trim();\r\n                scriptToRun = scriptToRun.replace(source, destination);\r\n            }\r\n        }\r\n\r\n        if (sceneMetadata.replaceUrl) {\r\n            const split = sceneMetadata.replaceUrl.split(\",\");\r\n            for (let i = 0; i < split.length; i++) {\r\n                const source = split[i].trim();\r\n                const regex = new RegExp(source, \"g\");\r\n                scriptToRun = scriptToRun.replace(regex, globalConfig.root + sceneMetadata.rootPath + source);\r\n            }\r\n        }\r\n\r\n        window.scene = eval(scriptToRun + \"\\n\" + sceneMetadata.functionToCall + \"(engine)\");\r\n    }\r\n    return true;\r\n};\r\n\r\nexport const evaluateRenderSceneForVisualization = async (renderCount: number) => {\r\n    return new Promise((resolve) => {\r\n        if (!window.scene || !window.engine) {\r\n            return resolve(false);\r\n        }\r\n        BABYLON.SceneLoader.ShowLoadingScreen = false;\r\n        window.scene.useConstantAnimationDeltaTime = true;\r\n\r\n        window.scene.executeWhenReady(function () {\r\n            if (!window.scene || !window.engine) {\r\n                return resolve(false);\r\n            }\r\n            if (window.scene.activeCamera && (window.scene.activeCamera as any).useAutoRotationBehavior) {\r\n                (window.scene.activeCamera as any).useAutoRotationBehavior = false;\r\n            }\r\n            const sceneAdts: any[] = window.scene!.textures.filter((t: any) => t.getClassName() === \"AdvancedDynamicTexture\");\r\n            const adtsAreReady = () => {\r\n                return sceneAdts.every((adt: any) => adt.guiIsReady());\r\n            };\r\n            let renderAfterGuiIsReadyCount = 1;\r\n            window.engine.runRenderLoop(function () {\r\n                try {\r\n                    if (renderCount <= 0 && renderAfterGuiIsReadyCount <= 0) {\r\n                        if (window.scene!.isReady()) {\r\n                            window.engine && window.engine.stopRenderLoop();\r\n                            return resolve(true);\r\n                        } else {\r\n                            console.error(\"Scene is not ready after rendering is done\");\r\n                            return resolve(false);\r\n                        }\r\n                    } else {\r\n                        window.scene && window.scene.render();\r\n                        renderCount--;\r\n                        if (adtsAreReady()) {\r\n                            renderAfterGuiIsReadyCount--;\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    window.engine && window.engine.stopRenderLoop();\r\n                    console.error(e);\r\n                    return resolve(false);\r\n                }\r\n            });\r\n        }, true);\r\n    });\r\n};\r\n\r\nexport const evaluateDisposeSceneForVisualization = async (engineFlags: { forceUseReverseDepthBuffer: boolean; forceUseNonCompatibilityMode: any }) => {\r\n    window.scene && window.scene.dispose();\r\n    window.scene = null;\r\n    if (window.engine) {\r\n        window.engine.setHardwareScalingLevel(1);\r\n        window.engine.useReverseDepthBuffer = engineFlags.forceUseReverseDepthBuffer;\r\n        window.engine.compatibilityMode = !engineFlags.forceUseNonCompatibilityMode;\r\n        if (engineFlags.forceUseReverseDepthBuffer) {\r\n            window.engine.setDepthFunction(BABYLON.Constants.GEQUAL);\r\n        } else {\r\n            window.engine.setDepthFunction(BABYLON.Constants.LEQUAL);\r\n        }\r\n\r\n        window.engine.applyStates();\r\n    }\r\n\r\n    // engine._deltaTime = 0;\r\n    // engine._fps = 60;\r\n    // engine._performanceMonitor = new BABYLON.PerformanceMonitor();\r\n\r\n    BABYLON.UnregisterAllMaterialPlugins();\r\n    return true;\r\n};\r\n\r\nexport const evaluateIsGLError = async () => {\r\n    try {\r\n        const gl = (window.engine! as any)._gl,\r\n            glError = gl ? gl.getError() : 0;\r\n        if (gl && glError !== 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    } catch (e) {\r\n        return true;\r\n    }\r\n};\r\n"]}
{"version":3,"file":"viewerModel.js","sourceRoot":"","sources":["../../src/model/viewerModel.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable import/no-internal-modules */\r\nimport type { IDisposable } from \"core/scene\";\r\nimport type { ISceneLoaderPlugin, ISceneLoaderPluginAsync, ISceneLoaderProgressEvent } from \"core/Loading/sceneLoader\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { IParticleSystem } from \"core/Particles/IParticleSystem\";\r\nimport type { Skeleton } from \"core/Bones/skeleton\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport \"core/Misc/observable.extensions\";\r\nimport { AnimationGroup } from \"core/Animations/animationGroup\";\r\nimport type { Animatable } from \"core/Animations/index\";\r\nimport {\r\n    Animation,\r\n    CircleEase,\r\n    BackEase,\r\n    BounceEase,\r\n    CubicEase,\r\n    ElasticEase,\r\n    ExponentialEase,\r\n    PowerEase,\r\n    QuadraticEase,\r\n    QuarticEase,\r\n    QuinticEase,\r\n    SineEase,\r\n} from \"core/Animations/index\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { Quaternion, Vector3 } from \"core/Maths/math.vector\";\r\nimport { Tags } from \"core/Misc/tags\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport { MultiMaterial } from \"core/Materials/multiMaterial\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { GLTFFileLoader } from \"loaders/glTF/index\";\r\nimport type { IAsset } from \"babylonjs-gltf2interface\";\r\nimport type { IModelConfiguration } from \"../configuration/interfaces/modelConfiguration\";\r\nimport type { IModelAnimationConfiguration } from \"../configuration/interfaces/modelAnimationConfiguration\";\r\nimport type { IModelAnimation, ModelAnimationConfiguration } from \"./modelAnimation\";\r\nimport { GroupModelAnimation, AnimationPlayMode, EasingFunction, AnimationState } from \"./modelAnimation\";\r\nimport { deepmerge, extendClassWithConfig } from \"../helper/index\";\r\nimport type { ObservablesManager } from \"../managers/observablesManager\";\r\nimport type { ConfigurationContainer } from \"../configuration/configurationContainer\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\n\r\n/**\r\n * The current state of the model\r\n */\r\nexport enum ModelState {\r\n    INIT,\r\n    LOADING,\r\n    LOADED,\r\n    ENTRY,\r\n    ENTRYDONE,\r\n    COMPLETE,\r\n    CANCELED,\r\n    ERROR,\r\n}\r\n\r\n/**\r\n * The viewer model is a container for all assets representing a sngle loaded model.\r\n */\r\nexport class ViewerModel implements IDisposable {\r\n    /**\r\n     * The loader used to load this model.\r\n     */\r\n    public loader: ISceneLoaderPlugin | ISceneLoaderPluginAsync;\r\n\r\n    private _animations: Array<IModelAnimation>;\r\n\r\n    /**\r\n     * the list of meshes that are a part of this model\r\n     */\r\n    private _meshes: Array<AbstractMesh> = [];\r\n    /**\r\n     * This model's root mesh (the parent of all other meshes).\r\n     * This mesh does not(!) exist in the meshes array.\r\n     */\r\n    public rootMesh: AbstractMesh;\r\n\r\n    private _pivotMesh: TransformNode;\r\n    /**\r\n     * ParticleSystems connected to this model\r\n     */\r\n    public particleSystems: Array<IParticleSystem> = [];\r\n    /**\r\n     * Skeletons defined in this model\r\n     */\r\n    public skeletons: Array<Skeleton> = [];\r\n    /**\r\n     * The current model animation.\r\n     * On init, this will be undefined.\r\n     */\r\n    public currentAnimation: IModelAnimation;\r\n\r\n    /**\r\n     * Observers registered here will be executed when the model is done loading\r\n     */\r\n    public onLoadedObservable: Observable<ViewerModel>;\r\n    /**\r\n     * Observers registered here will be executed when the loader notified of a progress event\r\n     */\r\n    public onLoadProgressObservable: Observable<ISceneLoaderProgressEvent>;\r\n    /**\r\n     * Observers registered here will be executed when the loader notified of an error.\r\n     */\r\n    public onLoadErrorObservable: Observable<{ message: string; exception: any }>;\r\n\r\n    /**\r\n     * Will be executed after the model finished loading and complete, including entry animation and lod\r\n     */\r\n    public onCompleteObservable: Observable<ViewerModel>;\r\n    /**\r\n     * Observers registered here will be executed every time the model is being configured.\r\n     * This can be used to extend the model's configuration without extending the class itself\r\n     */\r\n    public onAfterConfigure: Observable<ViewerModel>;\r\n\r\n    /**\r\n     * The current model state (loaded, error, etc)\r\n     */\r\n    public state: ModelState;\r\n    /**\r\n     * A loadID provided by the modelLoader, unique to ths (Abstract)Viewer instance.\r\n     */\r\n    public loadId: number;\r\n\r\n    public loadInfo: IAsset;\r\n    private _modelConfiguration: IModelConfiguration;\r\n\r\n    private _loaderDone: boolean = false;\r\n\r\n    private _entryAnimation: ModelAnimationConfiguration;\r\n    private _scaleTransition: Animation;\r\n    private _animatables: Array<Animatable> = [];\r\n    private _frameRate: number = 60;\r\n\r\n    private _shadowsRenderedAfterLoad: boolean = false;\r\n\r\n    constructor(\r\n        private _observablesManager: ObservablesManager,\r\n        modelConfiguration: IModelConfiguration,\r\n        private _configurationContainer?: ConfigurationContainer\r\n    ) {\r\n        this.onLoadedObservable = new Observable();\r\n        this.onLoadErrorObservable = new Observable();\r\n        this.onLoadProgressObservable = new Observable();\r\n        this.onCompleteObservable = new Observable();\r\n        this.onAfterConfigure = new Observable();\r\n\r\n        this.state = ModelState.INIT;\r\n\r\n        const scene = this._configurationContainer && this._configurationContainer.scene;\r\n\r\n        this.rootMesh = new Mesh(\"modelRootMesh\", scene);\r\n        this._pivotMesh = new TransformNode(\"pivotMesh\", scene);\r\n        this._pivotMesh.parent = this.rootMesh;\r\n        // rotate 180, gltf fun\r\n        this._pivotMesh.rotation.y += Math.PI;\r\n\r\n        this._scaleTransition = new Animation(\"scaleAnimation\", \"scaling\", this._frameRate, Animation.ANIMATIONTYPE_VECTOR3, Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n\r\n        this._animations = [];\r\n        //create a copy of the configuration to make sure it doesn't change even after it is changed in the viewer\r\n        this._modelConfiguration = deepmerge((this._configurationContainer && this._configurationContainer.configuration.model) || {}, modelConfiguration);\r\n\r\n        if (this._observablesManager) {\r\n            this._observablesManager.onModelAddedObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (this._modelConfiguration.entryAnimation) {\r\n            this.rootMesh.setEnabled(false);\r\n        }\r\n\r\n        this.onLoadedObservable.add(() => {\r\n            this.updateConfiguration(this._modelConfiguration);\r\n            if (this._observablesManager) {\r\n                this._observablesManager.onModelLoadedObservable.notifyObservers(this);\r\n            }\r\n            this._initAnimations();\r\n        });\r\n\r\n        this.onCompleteObservable.add(() => {\r\n            this.state = ModelState.COMPLETE;\r\n        });\r\n    }\r\n\r\n    public get shadowsRenderedAfterLoad() {\r\n        return this._shadowsRenderedAfterLoad;\r\n    }\r\n\r\n    public set shadowsRenderedAfterLoad(rendered: boolean) {\r\n        if (!rendered) {\r\n            throw new Error(\"can only be enabled\");\r\n        } else {\r\n            this._shadowsRenderedAfterLoad = rendered;\r\n        }\r\n    }\r\n\r\n    public getViewerId() {\r\n        return this._configurationContainer && this._configurationContainer.viewerId;\r\n    }\r\n\r\n    /**\r\n     * Is this model enabled?\r\n     */\r\n    public get enabled() {\r\n        return this.rootMesh.isEnabled();\r\n    }\r\n\r\n    /**\r\n     * Set whether this model is enabled or not.\r\n     */\r\n    public set enabled(enable: boolean) {\r\n        this.rootMesh.setEnabled(enable);\r\n    }\r\n\r\n    public set loaderDone(done: boolean) {\r\n        this._loaderDone = done;\r\n        this._checkCompleteState();\r\n    }\r\n\r\n    private _checkCompleteState() {\r\n        if (this._loaderDone && this.state === ModelState.ENTRYDONE) {\r\n            this._modelComplete();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a mesh to this model.\r\n     * Any mesh that has no parent will be provided with the root mesh as its new parent.\r\n     *\r\n     * @param mesh the new mesh to add\r\n     * @param triggerLoaded should this mesh trigger the onLoaded observable. Used when adding meshes manually.\r\n     * @returns a promise that will resolve when the model is done loading\r\n     */\r\n    public addMesh(mesh: AbstractMesh, triggerLoaded?: boolean) {\r\n        if (!mesh.parent) {\r\n            mesh.parent = this._pivotMesh;\r\n        }\r\n\r\n        if (mesh.getClassName() !== \"InstancedMesh\") {\r\n            mesh.receiveShadows = !!this.configuration.receiveShadows;\r\n        }\r\n\r\n        this._meshes.push(mesh);\r\n        if (triggerLoaded) {\r\n            return this.onLoadedObservable.notifyObserversWithPromise(this);\r\n        }\r\n        return Promise.resolve(this);\r\n    }\r\n\r\n    /**\r\n     * get the list of meshes (excluding the root mesh)\r\n     */\r\n    public get meshes() {\r\n        return this._meshes;\r\n    }\r\n\r\n    /**\r\n     * Get the model's configuration\r\n     */\r\n    public get configuration(): IModelConfiguration {\r\n        return this._modelConfiguration;\r\n    }\r\n\r\n    /**\r\n     * (Re-)set the model's entire configuration\r\n     * @param newConfiguration the new configuration to replace the new one\r\n     */\r\n    public set configuration(newConfiguration: IModelConfiguration) {\r\n        this._modelConfiguration = newConfiguration;\r\n        this._configureModel();\r\n    }\r\n\r\n    /**\r\n     * Update the current configuration with new values.\r\n     * Configuration will not be overwritten, but merged with the new configuration.\r\n     * Priority is to the new configuration\r\n     * @param newConfiguration the configuration to be merged into the current configuration;\r\n     */\r\n    public updateConfiguration(newConfiguration: Partial<IModelConfiguration>) {\r\n        this._modelConfiguration = deepmerge(this._modelConfiguration, newConfiguration);\r\n        this._configureModel();\r\n    }\r\n\r\n    private _initAnimations() {\r\n        // check if this is not a gltf loader and init the animations\r\n        if (this.skeletons.length) {\r\n            this.skeletons.forEach((skeleton, idx) => {\r\n                const ag = new AnimationGroup(\"animation-\" + idx, this._configurationContainer && this._configurationContainer.scene);\r\n                let add = false;\r\n                skeleton.getAnimatables().forEach((a) => {\r\n                    if (a.animations && a.animations[0]) {\r\n                        ag.addTargetedAnimation(a.animations[0], a);\r\n                        add = true;\r\n                    }\r\n                });\r\n                if (add) {\r\n                    this.addAnimationGroup(ag);\r\n                }\r\n            });\r\n        }\r\n\r\n        let completeCallback = () => {};\r\n\r\n        if (this._modelConfiguration.animation) {\r\n            if (this._modelConfiguration.animation.playOnce) {\r\n                this._animations.forEach((a) => {\r\n                    a.playMode = AnimationPlayMode.ONCE;\r\n                });\r\n            }\r\n            if (this._modelConfiguration.animation.autoStart && this._animations.length) {\r\n                const animationName = this._modelConfiguration.animation.autoStart === true ? this._animations[0].name : this._modelConfiguration.animation.autoStart;\r\n\r\n                completeCallback = () => {\r\n                    this.playAnimation(animationName);\r\n                };\r\n            }\r\n        }\r\n\r\n        this._enterScene(completeCallback);\r\n    }\r\n\r\n    /**\r\n     * Animates the model from the current position to the default position\r\n     * @param completeCallback A function to call when the animation has completed\r\n     */\r\n    private _enterScene(completeCallback?: () => void): void {\r\n        const scene = this.rootMesh.getScene();\r\n        const previousValue = scene.animationPropertiesOverride!.enableBlending;\r\n        const callback = () => {\r\n            this.state = ModelState.ENTRYDONE;\r\n            scene.animationPropertiesOverride!.enableBlending = previousValue;\r\n            this._checkCompleteState();\r\n            if (completeCallback) {\r\n                completeCallback();\r\n            }\r\n        };\r\n        if (!this._entryAnimation) {\r\n            callback();\r\n            return;\r\n        }\r\n        this.rootMesh.setEnabled(true);\r\n        // disable blending for the sake of the entry animation;\r\n        scene.animationPropertiesOverride!.enableBlending = false;\r\n        this._applyAnimation(this._entryAnimation, true, callback);\r\n    }\r\n\r\n    // /**\r\n    //  * Animates the model from the current position to the exit-screen position\r\n    //  * @param completeCallback A function to call when the animation has completed\r\n    //  */\r\n    // private _exitScene(completeCallback: () => void): void {\r\n    //     if (!this._exitAnimation) {\r\n    //         completeCallback();\r\n    //         return;\r\n    //     }\r\n\r\n    //     this._applyAnimation(this._exitAnimation, false, completeCallback);\r\n    // }\r\n\r\n    private _modelComplete() {\r\n        //reapply material defines to be sure:\r\n        const meshes = this._pivotMesh.getChildMeshes(false);\r\n        meshes\r\n            .filter((m) => m.material)\r\n            .forEach((mesh) => {\r\n                this._applyModelMaterialConfiguration(mesh.material!);\r\n            });\r\n        this.state = ModelState.COMPLETE;\r\n        this.onCompleteObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Add a new animation group to this model.\r\n     * @param animationGroup the new animation group to be added\r\n     */\r\n    public addAnimationGroup(animationGroup: AnimationGroup) {\r\n        this._animations.push(new GroupModelAnimation(animationGroup));\r\n    }\r\n\r\n    /**\r\n     * Get the ModelAnimation array\r\n     * @returns the array of ModelAnimations\r\n     */\r\n    public getAnimations(): Array<IModelAnimation> {\r\n        return this._animations;\r\n    }\r\n\r\n    /**\r\n     * Get the animations' names. Using the names you can play a specific animation.\r\n     * @returns the array of ModelAnimations\r\n     */\r\n    public getAnimationNames(): Array<string> {\r\n        return this._animations.map((a) => a.name);\r\n    }\r\n\r\n    /**\r\n     * Get an animation by the provided name. Used mainly when playing n animation.\r\n     * @param name the name of the animation to find\r\n     * @returns the ModelAnimation object\r\n     */\r\n    protected _getAnimationByName(name: string): Nullable<IModelAnimation> {\r\n        // can't use .find, noe available on IE\r\n        const filtered = this._animations.filter((a) => a.name === name.trim());\r\n        if (filtered.length >= 1) {\r\n            return filtered[0];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Choose an initialized animation using its name and start playing it\r\n     * @param name the name of the animation to play\r\n     * @returns The model aniamtion to be played.\r\n     */\r\n    public playAnimation(name: string): IModelAnimation {\r\n        const animation = this.setCurrentAnimationByName(name);\r\n        if (animation) {\r\n            animation.start();\r\n        }\r\n        return animation;\r\n    }\r\n\r\n    public setCurrentAnimationByName(name: string) {\r\n        const animation = this._getAnimationByName(name.trim());\r\n        if (animation) {\r\n            if (this.currentAnimation && this.currentAnimation.state !== AnimationState.STOPPED) {\r\n                this.currentAnimation.stop();\r\n            }\r\n            this.currentAnimation = animation;\r\n            return animation;\r\n        } else {\r\n            throw new Error(\"animation not found - \" + name);\r\n        }\r\n    }\r\n\r\n    private _configureModel() {\r\n        // this can be changed to the meshes that have rootMesh a parent without breaking anything.\r\n        const meshesWithNoParent: Array<TransformNode> = [this.rootMesh]; //this._meshes.filter(m => m.parent === this.rootMesh);\r\n        const updateMeshesWithNoParent = (variable: string, value: any, param?: string) => {\r\n            meshesWithNoParent.forEach((mesh) => {\r\n                if (param) {\r\n                    mesh[variable as keyof TransformNode][param] = value;\r\n                } else {\r\n                    (mesh as any)[variable] = value;\r\n                }\r\n            });\r\n        };\r\n        const updateXYZ = (variable: string, configValues: { x: number; y: number; z: number; w?: number }) => {\r\n            if (configValues.x !== undefined) {\r\n                updateMeshesWithNoParent(variable, configValues.x, \"x\");\r\n            }\r\n            if (configValues.y !== undefined) {\r\n                updateMeshesWithNoParent(variable, configValues.y, \"y\");\r\n            }\r\n            if (configValues.z !== undefined) {\r\n                updateMeshesWithNoParent(variable, configValues.z, \"z\");\r\n            }\r\n            if (configValues.w !== undefined) {\r\n                updateMeshesWithNoParent(variable, configValues.w, \"w\");\r\n            }\r\n        };\r\n\r\n        if (this._modelConfiguration.normalize) {\r\n            let center = false;\r\n            let unitSize = false;\r\n            let parentIndex;\r\n            if (this._modelConfiguration.normalize === true) {\r\n                center = true;\r\n                unitSize = true;\r\n            } else {\r\n                center = !!this._modelConfiguration.normalize.center;\r\n                unitSize = !!this._modelConfiguration.normalize.unitSize;\r\n                parentIndex = this._modelConfiguration.normalize.parentIndex;\r\n            }\r\n\r\n            let meshesToNormalize: Array<TransformNode> = [];\r\n            if (parentIndex !== undefined) {\r\n                meshesToNormalize.push(this._meshes[parentIndex]);\r\n            } else {\r\n                meshesToNormalize = this._pivotMesh.getChildMeshes(true).length === 1 ? [this._pivotMesh] : meshesWithNoParent;\r\n            }\r\n\r\n            if (unitSize) {\r\n                meshesToNormalize.forEach((mesh) => {\r\n                    mesh.normalizeToUnitCube(true);\r\n                    mesh.computeWorldMatrix(true);\r\n                });\r\n            }\r\n            if (center) {\r\n                meshesToNormalize.forEach((mesh) => {\r\n                    const boundingInfo = mesh.getHierarchyBoundingVectors(true);\r\n                    const sizeVec = boundingInfo.max.subtract(boundingInfo.min);\r\n                    const halfSizeVec = sizeVec.scale(0.5);\r\n                    const center = boundingInfo.min.add(halfSizeVec);\r\n                    mesh.position = center.scale(-1);\r\n\r\n                    mesh.position.y += halfSizeVec.y;\r\n\r\n                    // Recompute Info.\r\n                    mesh.computeWorldMatrix(true);\r\n                });\r\n            }\r\n        } else {\r\n            // if centered, should be done here\r\n        }\r\n\r\n        // position?\r\n        if (this._modelConfiguration.position) {\r\n            updateXYZ(\"position\", this._modelConfiguration.position);\r\n        }\r\n        if (this._modelConfiguration.rotation) {\r\n            //quaternion?\r\n            if (this._modelConfiguration.rotation.w) {\r\n                meshesWithNoParent.forEach((mesh) => {\r\n                    if (!mesh.rotationQuaternion) {\r\n                        mesh.rotationQuaternion = new Quaternion();\r\n                    }\r\n                });\r\n                updateXYZ(\"rotationQuaternion\", this._modelConfiguration.rotation);\r\n            } else {\r\n                updateXYZ(\"rotation\", this._modelConfiguration.rotation);\r\n            }\r\n        }\r\n\r\n        if (this._modelConfiguration.rotationOffsetAxis) {\r\n            const rotationAxis = new Vector3(\r\n                this._modelConfiguration.rotationOffsetAxis.x,\r\n                this._modelConfiguration.rotationOffsetAxis.y,\r\n                this._modelConfiguration.rotationOffsetAxis.z\r\n            );\r\n\r\n            meshesWithNoParent.forEach((m) => {\r\n                if (this._modelConfiguration.rotationOffsetAngle) {\r\n                    m.rotate(rotationAxis, this._modelConfiguration.rotationOffsetAngle);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (this._modelConfiguration.scaling) {\r\n            updateXYZ(\"scaling\", this._modelConfiguration.scaling);\r\n        }\r\n\r\n        if (this._modelConfiguration.castShadow) {\r\n            this._meshes.forEach((mesh) => {\r\n                Tags.AddTagsTo(mesh, \"castShadow\");\r\n            });\r\n        }\r\n\r\n        const meshes = this._pivotMesh.getChildMeshes(false);\r\n        meshes\r\n            .filter((m) => m.material)\r\n            .forEach((mesh) => {\r\n                this._applyModelMaterialConfiguration(mesh.material!);\r\n            });\r\n\r\n        if (this._modelConfiguration.entryAnimation) {\r\n            this._entryAnimation = this._modelAnimationConfigurationToObject(this._modelConfiguration.entryAnimation);\r\n        }\r\n\r\n        // if (this._modelConfiguration.exitAnimation) {\r\n        //     this._exitAnimation = this._modelAnimationConfigurationToObject(this._modelConfiguration.exitAnimation);\r\n        // }\r\n\r\n        this.onAfterConfigure.notifyObservers(this);\r\n    }\r\n\r\n    private _modelAnimationConfigurationToObject(animConfig: IModelAnimationConfiguration): ModelAnimationConfiguration {\r\n        const anim: ModelAnimationConfiguration = {\r\n            time: 0.5,\r\n        };\r\n        if (animConfig.scaling) {\r\n            anim.scaling = Vector3.Zero();\r\n        }\r\n        if (animConfig.easingFunction !== undefined) {\r\n            anim.easingFunction = animConfig.easingFunction;\r\n        }\r\n        if (animConfig.easingMode !== undefined) {\r\n            anim.easingMode = animConfig.easingMode;\r\n        }\r\n        extendClassWithConfig(anim, animConfig);\r\n        return anim;\r\n    }\r\n\r\n    /**\r\n     * Apply a material configuration to a material\r\n     * @param material Material to apply configuration to\r\n     * @internal\r\n     */\r\n    public _applyModelMaterialConfiguration(material: Material) {\r\n        if (!this._modelConfiguration.material) {\r\n            return;\r\n        }\r\n\r\n        extendClassWithConfig(material, this._modelConfiguration.material);\r\n\r\n        if (material instanceof PBRMaterial) {\r\n            if (this._modelConfiguration.material.directIntensity !== undefined) {\r\n                material.directIntensity = this._modelConfiguration.material.directIntensity;\r\n            }\r\n\r\n            if (this._modelConfiguration.material.emissiveIntensity !== undefined) {\r\n                material.emissiveIntensity = this._modelConfiguration.material.emissiveIntensity;\r\n            }\r\n\r\n            if (this._modelConfiguration.material.environmentIntensity !== undefined) {\r\n                material.environmentIntensity = this._modelConfiguration.material.environmentIntensity;\r\n            }\r\n\r\n            if (this._modelConfiguration.material.directEnabled !== undefined) {\r\n                material.disableLighting = !this._modelConfiguration.material.directEnabled;\r\n            }\r\n            if (this._configurationContainer && this._configurationContainer.reflectionColor) {\r\n                material.reflectionColor = this._configurationContainer.reflectionColor.clone();\r\n            }\r\n        } else if (material instanceof MultiMaterial) {\r\n            for (let i = 0; i < material.subMaterials.length; i++) {\r\n                const subMaterial = material.subMaterials[i];\r\n                if (subMaterial) {\r\n                    this._applyModelMaterialConfiguration(subMaterial);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start entry/exit animation given an animation configuration\r\n     * @param animationConfiguration Entry/Exit animation configuration\r\n     * @param isEntry Pass true if the animation is an entry animation\r\n     * @param completeCallback Callback to execute when the animation completes\r\n     */\r\n    private _applyAnimation(animationConfiguration: ModelAnimationConfiguration, isEntry: boolean, completeCallback?: () => void) {\r\n        const animations: Animation[] = [];\r\n\r\n        //scale\r\n        if (animationConfiguration.scaling) {\r\n            const scaleStart: Vector3 = isEntry ? animationConfiguration.scaling : new Vector3(1, 1, 1);\r\n            const scaleEnd: Vector3 = isEntry ? new Vector3(1, 1, 1) : animationConfiguration.scaling;\r\n\r\n            if (!scaleStart.equals(scaleEnd)) {\r\n                this.rootMesh.scaling = scaleStart;\r\n                this._setLinearKeys(this._scaleTransition, this.rootMesh.scaling, scaleEnd, animationConfiguration.time);\r\n                animations.push(this._scaleTransition);\r\n            }\r\n        }\r\n\r\n        //Start the animation(s)\r\n        this.transitionTo(animations, animationConfiguration.time, this._createEasingFunction(animationConfiguration.easingFunction), animationConfiguration.easingMode, () => {\r\n            if (completeCallback) {\r\n                completeCallback();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Begin @animations with the specified @easingFunction\r\n     * @param animations The BABYLON Animations to begin\r\n     * @param duration of transition, in seconds\r\n     * @param easingFunction An easing function to apply\r\n     * @param easingMode A easing mode to apply to the easingFunction\r\n     * @param onAnimationEnd Call back trigger at the end of the animation.\r\n     */\r\n    public transitionTo(\r\n        animations: Animation[],\r\n        duration: number,\r\n        easingFunction: any,\r\n        easingMode: number = 2, // BABYLON.EasingFunction.EASINGMODE_EASEINOUT,\r\n        onAnimationEnd: () => void\r\n    ): void {\r\n        if (easingFunction) {\r\n            for (const animation of animations) {\r\n                easingFunction.setEasingMode(easingMode);\r\n                animation.setEasingFunction(easingFunction);\r\n            }\r\n        }\r\n\r\n        //Stop any current animations before starting the new one - merging not yet supported.\r\n        this.stopAllAnimations();\r\n\r\n        this.rootMesh.animations = animations;\r\n\r\n        if (this.rootMesh.getScene().beginAnimation !== undefined) {\r\n            const animatable: Animatable = this.rootMesh.getScene().beginAnimation(this.rootMesh, 0, this._frameRate * duration, false, 1, () => {\r\n                if (onAnimationEnd) {\r\n                    onAnimationEnd();\r\n                }\r\n            });\r\n            this._animatables.push(animatable);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets key values on an Animation from first to last frame.\r\n     * @param animation The Babylon animation object to set keys on\r\n     * @param startValue The value of the first key\r\n     * @param endValue The value of the last key\r\n     * @param duration The duration of the animation, used to determine the end frame\r\n     */\r\n    private _setLinearKeys(animation: Animation, startValue: any, endValue: any, duration: number) {\r\n        animation.setKeys([\r\n            {\r\n                frame: 0,\r\n                value: startValue,\r\n            },\r\n            {\r\n                frame: this._frameRate * duration,\r\n                value: endValue,\r\n            },\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * Creates and returns a Babylon easing funtion object based on a string representing the Easing function\r\n     * @param easingFunctionID The enum of the easing funtion to create\r\n     * @returns The newly created Babylon easing function object\r\n     */\r\n    private _createEasingFunction(easingFunctionID?: number): any {\r\n        let easingFunction;\r\n\r\n        switch (easingFunctionID) {\r\n            case EasingFunction.CircleEase:\r\n                easingFunction = new CircleEase();\r\n                break;\r\n            case EasingFunction.BackEase:\r\n                easingFunction = new BackEase(0.3);\r\n                break;\r\n            case EasingFunction.BounceEase:\r\n                easingFunction = new BounceEase();\r\n                break;\r\n            case EasingFunction.CubicEase:\r\n                easingFunction = new CubicEase();\r\n                break;\r\n            case EasingFunction.ElasticEase:\r\n                easingFunction = new ElasticEase();\r\n                break;\r\n            case EasingFunction.ExponentialEase:\r\n                easingFunction = new ExponentialEase();\r\n                break;\r\n            case EasingFunction.PowerEase:\r\n                easingFunction = new PowerEase();\r\n                break;\r\n            case EasingFunction.QuadraticEase:\r\n                easingFunction = new QuadraticEase();\r\n                break;\r\n            case EasingFunction.QuarticEase:\r\n                easingFunction = new QuarticEase();\r\n                break;\r\n            case EasingFunction.QuinticEase:\r\n                easingFunction = new QuinticEase();\r\n                break;\r\n            case EasingFunction.SineEase:\r\n                easingFunction = new SineEase();\r\n                break;\r\n            default:\r\n                Tools.Log(\"No ease function found\");\r\n                break;\r\n        }\r\n\r\n        return easingFunction;\r\n    }\r\n\r\n    /**\r\n     * Stops and removes all animations that have been applied to the model\r\n     */\r\n    public stopAllAnimations(): void {\r\n        if (this.rootMesh) {\r\n            this.rootMesh.animations = [];\r\n        }\r\n        if (this.currentAnimation) {\r\n            this.currentAnimation.stop();\r\n        }\r\n        while (this._animatables.length) {\r\n            this._animatables[0].onAnimationEnd = null;\r\n            this._animatables[0].stop();\r\n            this._animatables.shift();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Will remove this model from the viewer (but NOT dispose it).\r\n     */\r\n    public remove() {\r\n        this.stopAllAnimations();\r\n\r\n        if (this._observablesManager) {\r\n            this._observablesManager.onModelRemovedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose this model, including all of its associated assets.\r\n     */\r\n    public dispose() {\r\n        this.remove();\r\n        this.onAfterConfigure.clear();\r\n        this.onLoadedObservable.clear();\r\n        this.onLoadErrorObservable.clear();\r\n        this.onLoadProgressObservable.clear();\r\n        if (this.loader && this.loader.name === \"gltf\") {\r\n            (<GLTFFileLoader>this.loader).dispose();\r\n        }\r\n        this.particleSystems.forEach((ps) => ps.dispose());\r\n        this.particleSystems.length = 0;\r\n        this.skeletons.forEach((s) => s.dispose());\r\n        this.skeletons.length = 0;\r\n        this._animations.forEach((ag) => ag.dispose());\r\n        this._animations.length = 0;\r\n        this.rootMesh.dispose(false, true);\r\n    }\r\n}\r\n"]}
{"version":3,"file":"viewerManager.js","sourceRoot":"","sources":["../../src/viewer/viewerManager.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAGlD;;;GAGG;AACH,MAAM,OAAO,aAAa;IAgBtB;QACI,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,uBAAuB,GAAG,IAAI,UAAU,EAAE,CAAC;QAChD,IAAI,CAAC,yBAAyB,GAAG,IAAI,UAAU,EAAE,CAAC;IACtD,CAAC;IAED;;;OAGG;IACI,SAAS,CAAC,MAAsB;QACnC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,GAAG,MAAM,CAAC;QAC3C,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED;;;OAGG;IACI,YAAY,CAAC,MAAsB;QACtC,MAAM,EAAE,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;QAC9B,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACzB,IAAI,CAAC,yBAAyB,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;IACvD,CAAC;IAED;;;;OAIG;IACI,aAAa,CAAC,EAAU;QAC3B,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACI,sBAAsB,CAAC,OAAoB;QAC9C,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,QAAQ,EAAE;YAC5B,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,gBAAgB,KAAK,OAAO,EAAE;gBAChD,OAAO,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;aACjC;SACJ;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;;;OAMG;IACI,oBAAoB,CAAC,EAAU;QAClC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC3B,MAAM,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;YAC3C,IAAI,WAAW,EAAE;gBACb,OAAO,OAAO,CAAC,WAAW,CAAC,CAAC;aAC/B;YACD,MAAM,cAAc,GAAG,CAAC,MAAsB,EAAE,EAAE;gBAC9C,IAAI,MAAM,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE;oBAC3B,OAAO,CAAC,MAAM,CAAC,CAAC;oBAChB,IAAI,CAAC,uBAAuB,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;iBAC/D;YACL,CAAC,CAAC;YACF,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,cAAc,CAAC,MAAsB;QACzC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACjD,IAAI,CAAC,uBAAuB,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;IACzD,CAAC;IAED;;OAEG;IACI,OAAO;QACV,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,QAAQ,EAAE;YAC5B,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;SAC/B;QAED,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,CAAC;QACrC,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,CAAC;IAC3C,CAAC;CACJ;AAED,MAAM,CAAC,MAAM,aAAa,GAAG,IAAI,aAAa,EAAE,CAAC","sourcesContent":["import { Observable } from \"core/Misc/observable\";\r\nimport type { AbstractViewer } from \"./viewer\";\r\n\r\n/**\r\n * The viewer manager is the container for all viewers currently registered on this page.\r\n * It is possible to have more than one viewer on a single page.\r\n */\r\nexport class ViewerManager {\r\n    private _viewers: { [key: string]: AbstractViewer };\r\n\r\n    /**\r\n     * A callback that will be triggered when a new viewer was added\r\n     */\r\n    public onViewerAdded: (viewer: AbstractViewer) => void;\r\n    /**\r\n     * Will notify when a new viewer was added\r\n     */\r\n    public onViewerAddedObservable: Observable<AbstractViewer>;\r\n    /**\r\n     * Will notify when a viewer was removed (disposed)\r\n     */\r\n    public onViewerRemovedObservable: Observable<string>;\r\n\r\n    constructor() {\r\n        this._viewers = {};\r\n        this.onViewerAddedObservable = new Observable();\r\n        this.onViewerRemovedObservable = new Observable();\r\n    }\r\n\r\n    /**\r\n     * Adding a new viewer to the viewer manager and start tracking it.\r\n     * @param viewer the viewer to add\r\n     */\r\n    public addViewer(viewer: AbstractViewer) {\r\n        this._viewers[viewer.getBaseId()] = viewer;\r\n        this._onViewerAdded(viewer);\r\n    }\r\n\r\n    /**\r\n     * remove a viewer from the viewer manager\r\n     * @param viewer the viewer to remove\r\n     */\r\n    public removeViewer(viewer: AbstractViewer) {\r\n        const id = viewer.getBaseId();\r\n        delete this._viewers[id];\r\n        this.onViewerRemovedObservable.notifyObservers(id);\r\n    }\r\n\r\n    /**\r\n     * Get a viewer by its baseId (if the container element has an ID, it is the this is. if not, a random id was assigned)\r\n     * @param id the id of the HTMl element (or the viewer's, if none provided)\r\n     * @returns the viewer associated with the given id (if found)\r\n     */\r\n    public getViewerById(id: string): AbstractViewer {\r\n        return this._viewers[id];\r\n    }\r\n\r\n    /**\r\n     * Get a viewer using a container element\r\n     * @param element the HTML element to search viewers associated with\r\n     * @returns the viewer associated with the given element (if found)\r\n     */\r\n    public getViewerByHTMLElement(element: HTMLElement) {\r\n        for (const id in this._viewers) {\r\n            if (this._viewers[id].containerElement === element) {\r\n                return this.getViewerById(id);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get a promise that will fulfill when this viewer was initialized.\r\n     * Since viewer initialization and template injection is asynchronous, using the promise will guaranty that\r\n     * you will get the viewer after everything was already configured.\r\n     * @param id the viewer id to find\r\n     * @returns a promise that will resolve to the viewer\r\n     */\r\n    public getViewerPromiseById(id: string): Promise<AbstractViewer> {\r\n        return new Promise((resolve) => {\r\n            const localViewer = this.getViewerById(id);\r\n            if (localViewer) {\r\n                return resolve(localViewer);\r\n            }\r\n            const viewerFunction = (viewer: AbstractViewer) => {\r\n                if (viewer.getBaseId() === id) {\r\n                    resolve(viewer);\r\n                    this.onViewerAddedObservable.removeCallback(viewerFunction);\r\n                }\r\n            };\r\n            this.onViewerAddedObservable.add(viewerFunction);\r\n        });\r\n    }\r\n\r\n    private _onViewerAdded(viewer: AbstractViewer) {\r\n        this.onViewerAdded && this.onViewerAdded(viewer);\r\n        this.onViewerAddedObservable.notifyObservers(viewer);\r\n    }\r\n\r\n    /**\r\n     * dispose the manager and all of its associated viewers\r\n     */\r\n    public dispose() {\r\n        for (const id in this._viewers) {\r\n            this._viewers[id].dispose();\r\n        }\r\n\r\n        this.onViewerAddedObservable.clear();\r\n        this.onViewerRemovedObservable.clear();\r\n    }\r\n}\r\n\r\nexport const viewerManager = new ViewerManager();\r\n"]}
{"version":3,"file":"renderOnlyViewer.js","sourceRoot":"","sources":["../../src/viewer/renderOnlyViewer.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,MAAM,UAAU,CAAC;AAC1C,OAAO,iCAAiC,CAAC;AACzC,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAE1C,MAAM,OAAO,gBAAiB,SAAQ,cAAc;IAChD,YACoB,gBAAyB,EACzC,uBAA4C,EAAE;QAE9C,KAAK,CAAC,gBAAgB,EAAE,oBAAoB,CAAC,CAAC;QAH9B,qBAAgB,GAAhB,gBAAgB,CAAS;QAIzC,IAAI,CAAC,OAAO,GAAG,gBAAqC,CAAC;IACzD,CAAC;IACM,UAAU;QACb,MAAM,QAAQ,GAAG,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,KAAK,QAAQ,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC5H,OAAO,IAAI,CAAC,WAAW,EAAE;aACpB,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YACb,OAAO,IAAI,CAAC,sBAAsB,CAAC,0BAA0B,CAAC,MAAM,CAAC,CAAC;QAC1E,CAAC,CAAC;aACD,IAAI,CAAC,GAAG,EAAE;YACP,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC5B,IAAI,QAAQ,EAAE;gBACV,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,KAAM,CAAC;qBAC3C,KAAK,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC;qBACf,IAAI,CAAC,GAAG,EAAE;oBACP,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;gBACnC,CAAC,CAAC,CAAC;aACV;iBAAM;gBACH,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;aAC3F;QACL,CAAC,CAAC;aACD,IAAI,CAAC,GAAG,EAAE;YACP,OAAO,IAAI,CAAC,oBAAoB,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAC;QACtE,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE;YACT,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;YACzB,OAAO,IAAI,CAAC;QAChB,CAAC,CAAC,CAAC;IACX,CAAC;IACS,wBAAwB,KAAI,CAAC;CAC1C","sourcesContent":["import type { ViewerConfiguration } from \"../configuration/configuration\";\r\nimport { AbstractViewer } from \"./viewer\";\r\nimport \"core/Misc/observable.extensions\";\r\nimport { Logger } from \"core/Misc/logger\";\r\n\r\nexport class RenderOnlyViewer extends AbstractViewer {\r\n    constructor(\r\n        public override containerElement: Element,\r\n        initialConfiguration: ViewerConfiguration = {}\r\n    ) {\r\n        super(containerElement, initialConfiguration);\r\n        this._canvas = containerElement as HTMLCanvasElement;\r\n    }\r\n    public initialize() {\r\n        const autoLoad = typeof this.configuration.model === \"string\" || (this.configuration.model && this.configuration.model.url);\r\n        return this._initEngine()\r\n            .then((engine) => {\r\n                return this.onEngineInitObservable.notifyObserversWithPromise(engine);\r\n            })\r\n            .then(() => {\r\n                this._initTelemetryEvents();\r\n                if (autoLoad) {\r\n                    return this.loadModel(this.configuration.model!)\r\n                        .catch(() => {})\r\n                        .then(() => {\r\n                            return this.sceneManager.scene;\r\n                        });\r\n                } else {\r\n                    return this.sceneManager.scene || this.sceneManager.initScene(this.configuration.scene);\r\n                }\r\n            })\r\n            .then(() => {\r\n                return this.onInitDoneObservable.notifyObserversWithPromise(this);\r\n            })\r\n            .catch((e) => {\r\n                Logger.Log(e.toString());\r\n                return this;\r\n            });\r\n    }\r\n    protected _prepareContainerElement() {}\r\n}\r\n"]}
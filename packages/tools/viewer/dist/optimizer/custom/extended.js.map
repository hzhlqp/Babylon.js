{"version":3,"file":"extended.js","sourceRoot":"","sources":["../../../src/optimizer/custom/extended.ts"],"names":[],"mappings":"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","sourcesContent":["import type { DefaultRenderingPipeline } from \"core/PostProcesses/RenderPipeline/Pipelines/defaultRenderingPipeline\";\r\nimport { Scalar } from \"core/Maths/math.scalar\";\r\nimport type { SceneManager } from \"../../managers/sceneManager\";\r\n\r\n/**\r\n * A custom upgrade-oriented function configuration for the scene optimizer.\r\n * @param sceneManager\r\n * @returns true if the scene is fully upgraded\r\n */\r\nexport function extendedUpgrade(sceneManager: SceneManager): boolean {\r\n    const defaultPipeline = <DefaultRenderingPipeline>sceneManager.defaultRenderingPipeline;\r\n    // if (!this.Scene.BackgroundHelper) {\r\n    // \tthis.Scene.EngineScene.autoClear = false;\r\n    // this.Scene.BackgroundHelper = true;\r\n    // Would require a dedicated clear color;\r\n    // return false;\r\n    // }\r\n    if (sceneManager.scene.getEngine().getHardwareScalingLevel() > 1) {\r\n        const scaling = Scalar.Clamp(sceneManager.scene.getEngine().getHardwareScalingLevel() - 0.25, 0, 1);\r\n        sceneManager.scene.getEngine().setHardwareScalingLevel(scaling);\r\n        return false;\r\n    }\r\n    if (!sceneManager.scene.postProcessesEnabled) {\r\n        sceneManager.scene.postProcessesEnabled = true;\r\n        return false;\r\n    }\r\n    if (!sceneManager.groundEnabled) {\r\n        sceneManager.groundEnabled = true;\r\n        return false;\r\n    }\r\n    if (defaultPipeline && !sceneManager.fxaaEnabled) {\r\n        sceneManager.fxaaEnabled = true;\r\n        return false;\r\n    }\r\n    const hardwareScalingLevel = Math.max(1 / 2, 1 / (window.devicePixelRatio || 2));\r\n    if (sceneManager.scene.getEngine().getHardwareScalingLevel() > hardwareScalingLevel) {\r\n        const scaling = Scalar.Clamp(sceneManager.scene.getEngine().getHardwareScalingLevel() - 0.25, 0, hardwareScalingLevel);\r\n        sceneManager.scene.getEngine().setHardwareScalingLevel(scaling);\r\n        return false;\r\n    }\r\n    if (!sceneManager.processShadows) {\r\n        sceneManager.processShadows = true;\r\n        return false;\r\n    }\r\n    if (defaultPipeline && !sceneManager.bloomEnabled) {\r\n        sceneManager.bloomEnabled = true;\r\n        return false;\r\n    }\r\n    if (!sceneManager.groundMirrorEnabled) {\r\n        sceneManager.groundMirrorEnabled = true;\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * A custom degrade-oriented function configuration for the scene optimizer.\r\n * @param sceneManager\r\n * @returns true if the scene is fully degraded\r\n */\r\nexport function extendedDegrade(sceneManager: SceneManager): boolean {\r\n    const defaultPipeline = <DefaultRenderingPipeline>sceneManager.defaultRenderingPipeline;\r\n\r\n    if (sceneManager.groundMirrorEnabled) {\r\n        sceneManager.groundMirrorEnabled = false;\r\n        return false;\r\n    }\r\n    if (defaultPipeline && sceneManager.bloomEnabled) {\r\n        sceneManager.bloomEnabled = false;\r\n        return false;\r\n    }\r\n    if (sceneManager.processShadows) {\r\n        sceneManager.processShadows = false;\r\n        return false;\r\n    }\r\n    if (sceneManager.scene.getEngine().getHardwareScalingLevel() < 1) {\r\n        const scaling = Scalar.Clamp(sceneManager.scene.getEngine().getHardwareScalingLevel() + 0.25, 0, 1);\r\n        sceneManager.scene.getEngine().setHardwareScalingLevel(scaling);\r\n        return false;\r\n    }\r\n    if (defaultPipeline && sceneManager.fxaaEnabled) {\r\n        sceneManager.fxaaEnabled = false;\r\n        return false;\r\n    }\r\n    if (sceneManager.groundEnabled) {\r\n        sceneManager.groundEnabled = false;\r\n        return false;\r\n    }\r\n    if (sceneManager.scene.postProcessesEnabled) {\r\n        sceneManager.scene.postProcessesEnabled = false;\r\n        return false;\r\n    }\r\n    if (sceneManager.scene.getEngine().getHardwareScalingLevel() < 1.25) {\r\n        const scaling = Scalar.Clamp(sceneManager.scene.getEngine().getHardwareScalingLevel() + 0.25, 0, 1.25);\r\n        sceneManager.scene.getEngine().setHardwareScalingLevel(scaling);\r\n        return false;\r\n    }\r\n    // if (this.Scene.BackgroundHelper) {\r\n    // \tthis.Scene.EngineScene.autoClear = true;\r\n    // this.Scene.BackgroundHelper = false;\r\n    // Would require a dedicated clear color;\r\n    // return false;\r\n    // }\r\n    return true;\r\n}\r\n"]}
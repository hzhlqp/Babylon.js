{"version":3,"file":"templateManager.js","sourceRoot":"","sources":["../../src/templating/templateManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from \"core/Misc/observable\";\r\nimport { Tools } from \"core/Misc/tools\";\r\n// eslint-disable-next-line import/no-internal-modules\r\nimport { isUrl, camelToKebab, kebabToCamel, deepmerge } from \"../helper/index\";\r\n\r\nimport * as Handlebars from \"handlebars\";\r\nimport { EventManager } from \"./eventManager\";\r\nimport type { ITemplateConfiguration } from \"../configuration/interfaces/templateConfiguration\";\r\nimport type { IFileRequest } from \"core/Misc/fileRequest\";\r\n\r\n/**\r\n * The object sent when an event is triggered\r\n */\r\nexport interface EventCallback {\r\n    event: Event;\r\n    template: Template;\r\n    selector: string;\r\n    payload?: any;\r\n}\r\n\r\n/**\r\n * The template manager, a member of the viewer class, will manage the viewer's templates and generate the HTML.\r\n * The template manager managers a single viewer and can be seen as the collection of all sub-templates of the viewer.\r\n */\r\nexport class TemplateManager {\r\n    /**\r\n     * Will be triggered when any template is initialized\r\n     */\r\n    public onTemplateInit: Observable<Template>;\r\n    /**\r\n     * Will be triggered when any template is fully loaded\r\n     */\r\n    public onTemplateLoaded: Observable<Template>;\r\n    /**\r\n     * Will be triggered when a template state changes\r\n     */\r\n    public onTemplateStateChange: Observable<Template>;\r\n    /**\r\n     * Will be triggered when all templates finished loading\r\n     */\r\n    public onAllLoaded: Observable<TemplateManager>;\r\n    /**\r\n     * Will be triggered when any event on any template is triggered.\r\n     */\r\n    public onEventTriggered: Observable<EventCallback>;\r\n\r\n    /**\r\n     * This template manager's event manager. In charge of callback registrations to native event types\r\n     */\r\n    public eventManager: EventManager;\r\n\r\n    private _templates: { [name: string]: Template };\r\n\r\n    constructor(public containerElement: Element) {\r\n        this._templates = {};\r\n\r\n        this.onTemplateInit = new Observable<Template>();\r\n        this.onTemplateLoaded = new Observable<Template>();\r\n        this.onTemplateStateChange = new Observable<Template>();\r\n        this.onAllLoaded = new Observable<TemplateManager>();\r\n        this.onEventTriggered = new Observable<EventCallback>();\r\n\r\n        this.eventManager = new EventManager(this);\r\n    }\r\n\r\n    /**\r\n     * Initialize the template(s) for the viewer. Called bay the Viewer class\r\n     * @param templates the templates to be used to initialize the main template\r\n     * @returns a promise that will be fulfilled when the template is loaded\r\n     */\r\n    public initTemplate(templates: { [key: string]: ITemplateConfiguration }) {\r\n        const internalInit = (dependencyMap: any, name: string, parentTemplate?: Template) => {\r\n            //init template\r\n            const template = this._templates[name];\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n            Object.keys(dependencyMap).map((childName) => {\r\n                return internalInit(dependencyMap[childName], childName, template);\r\n            });\r\n\r\n            // register the observers\r\n            //template.onLoaded.add(() => {\r\n            const addToParent = () => {\r\n                const lastElements = parentTemplate && parentTemplate.parent.querySelectorAll(camelToKebab(name) as keyof HTMLElementTagNameMap);\r\n                const containingElement = (lastElements && lastElements.length && lastElements.item(lastElements.length - 1)) || this.containerElement;\r\n                template.appendTo(<HTMLElement>containingElement);\r\n                this._checkLoadedState();\r\n            };\r\n\r\n            if (parentTemplate && !parentTemplate.parent) {\r\n                parentTemplate.onAppended.add(() => {\r\n                    addToParent();\r\n                });\r\n            } else {\r\n                addToParent();\r\n            }\r\n            //});\r\n\r\n            return template;\r\n        };\r\n\r\n        //build the html tree\r\n        return this._buildHTMLTree(templates).then((htmlTree) => {\r\n            if (this._templates[\"main\"]) {\r\n                internalInit(htmlTree, \"main\");\r\n            } else {\r\n                this._checkLoadedState();\r\n            }\r\n            return;\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * This function will create a simple map with child-dependencies of the template html tree.\r\n     * It will compile each template, check if its children exist in the configuration and will add them if they do.\r\n     * It is expected that the main template will be called main!\r\n     *\r\n     * @param templates the templates to be used to initialize the main template\r\n     * @returns a promise that will be fulfilled when the template is loaded\r\n     */\r\n    private _buildHTMLTree(templates: { [key: string]: ITemplateConfiguration }): Promise<object> {\r\n        const promises: Array<Promise<Template | boolean>> = Object.keys(templates).map((name) => {\r\n            // if the template was overridden\r\n            if (!templates[name]) {\r\n                return Promise.resolve(false);\r\n            }\r\n            // else - we have a template, let's do our job!\r\n            const template = new Template(name, templates[name]);\r\n            template.onLoaded.add(() => {\r\n                this.onTemplateLoaded.notifyObservers(template);\r\n            });\r\n            template.onStateChange.add(() => {\r\n                this.onTemplateStateChange.notifyObservers(template);\r\n            });\r\n            this.onTemplateInit.notifyObservers(template);\r\n            // make sure the global onEventTriggered is called as well\r\n            template.onEventTriggered.add((eventData) => this.onEventTriggered.notifyObservers(eventData));\r\n            this._templates[name] = template;\r\n            return template.initPromise;\r\n        });\r\n\r\n        return Promise.all(promises).then(() => {\r\n            const templateStructure = {};\r\n            // now iterate through all templates and check for children:\r\n            const buildTree = (parentObject: any, name: string) => {\r\n                this._templates[name].isInHtmlTree = true;\r\n                const childNodes = this._templates[name].getChildElements().filter((n) => !!this._templates[n]);\r\n                childNodes.forEach((element) => {\r\n                    parentObject[element] = {};\r\n                    buildTree(parentObject[element], element);\r\n                });\r\n            };\r\n            if (this._templates[\"main\"]) {\r\n                buildTree(templateStructure, \"main\");\r\n            }\r\n            return templateStructure;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the canvas in the template tree.\r\n     * There must be one and only one canvas inthe template.\r\n     * @returns the canvas element or null if not found\r\n     */\r\n    public getCanvas(): HTMLCanvasElement | null {\r\n        return this.containerElement.querySelector(\"canvas\");\r\n    }\r\n\r\n    /**\r\n     * Get a specific template from the template tree\r\n     * @param name the name of the template to load\r\n     * @returns the template or undefined if not found\r\n     */\r\n    public getTemplate(name: string): Template | undefined {\r\n        return this._templates[name];\r\n    }\r\n\r\n    private _checkLoadedState() {\r\n        const done =\r\n            Object.keys(this._templates).length === 0 ||\r\n            Object.keys(this._templates).every((key) => {\r\n                return (this._templates[key].isLoaded && !!this._templates[key].parent) || !this._templates[key].isInHtmlTree;\r\n            });\r\n\r\n        if (done) {\r\n            this.onAllLoaded.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose the template manager\r\n     */\r\n    public dispose() {\r\n        // dispose all templates\r\n        Object.keys(this._templates).forEach((template) => {\r\n            this._templates[template].dispose();\r\n        });\r\n        this._templates = {};\r\n        this.eventManager.dispose();\r\n\r\n        this.onTemplateInit.clear();\r\n        this.onAllLoaded.clear();\r\n        this.onEventTriggered.clear();\r\n        this.onTemplateLoaded.clear();\r\n        this.onTemplateStateChange.clear();\r\n    }\r\n}\r\n\r\n// register a new helper. modified https://stackoverflow.com/questions/9838925/is-there-any-method-to-iterate-a-map-with-handlebars-js\r\nHandlebars.registerHelper(\"eachInMap\", function (map, block) {\r\n    let out = \"\";\r\n    Object.keys(map).map(function (prop) {\r\n        const data = map[prop];\r\n        if (typeof data === \"object\") {\r\n            data.id = data.id || prop;\r\n            out += block.fn(data);\r\n        } else {\r\n            out += block.fn({ id: prop, value: data });\r\n        }\r\n    });\r\n    return out;\r\n});\r\n\r\nHandlebars.registerHelper(\"add\", function (a, b) {\r\n    const out = a + b;\r\n    return out;\r\n});\r\n\r\nHandlebars.registerHelper(\"eq\", function (a, b) {\r\n    const out = a == b;\r\n    return out;\r\n});\r\n\r\nHandlebars.registerHelper(\"or\", function (a, b) {\r\n    const out = a || b;\r\n    return out;\r\n});\r\n\r\nHandlebars.registerHelper(\"not\", function (a) {\r\n    const out = !a;\r\n    return out;\r\n});\r\n\r\nHandlebars.registerHelper(\"count\", function (map) {\r\n    return map.length;\r\n});\r\n\r\nHandlebars.registerHelper(\"gt\", function (a, b) {\r\n    const out = a > b;\r\n    return out;\r\n});\r\n\r\n/**\r\n * This class represents a single template in the viewer's template tree.\r\n * An example for a template is a single canvas, an overlay (containing sub-templates) or the navigation bar.\r\n * A template is injected using the template manager in the correct position.\r\n * The template is rendered using Handlebars and can use Handlebars' features (such as parameter injection)\r\n *\r\n * For further information please refer to the documentation page, https://doc.babylonjs.com\r\n */\r\nexport class Template {\r\n    /**\r\n     * Will be triggered when the template is loaded\r\n     */\r\n    public onLoaded: Observable<Template>;\r\n    /**\r\n     * will be triggered when the template is appended to the tree\r\n     */\r\n    public onAppended: Observable<Template>;\r\n    /**\r\n     * Will be triggered when the template's state changed (shown, hidden)\r\n     */\r\n    public onStateChange: Observable<Template>;\r\n    /**\r\n     * Will be triggered when an event is triggered on ths template.\r\n     * The event is a native browser event (like mouse or pointer events)\r\n     */\r\n    public onEventTriggered: Observable<EventCallback>;\r\n\r\n    public onParamsUpdated: Observable<Template>;\r\n\r\n    public onHTMLRendered: Observable<Template>;\r\n\r\n    /**\r\n     * is the template loaded?\r\n     */\r\n    public isLoaded: boolean;\r\n    /**\r\n     * This is meant to be used to track the show and hide functions.\r\n     * This is NOT (!!) a flag to check if the element is actually visible to the user.\r\n     */\r\n    public isShown: boolean;\r\n\r\n    /**\r\n     * Is this template a part of the HTML tree (the template manager injected it)\r\n     */\r\n    public isInHtmlTree: boolean;\r\n\r\n    /**\r\n     * The HTML element containing this template\r\n     */\r\n    public parent: HTMLElement;\r\n\r\n    /**\r\n     * A promise that is fulfilled when the template finished loading.\r\n     */\r\n    public initPromise: Promise<Template>;\r\n\r\n    private _fragment: DocumentFragment | Element;\r\n    private _addedFragment: DocumentFragment | Element;\r\n    private _htmlTemplate: string;\r\n    private _rawHtml: string;\r\n\r\n    private _loadRequests: Array<IFileRequest>;\r\n\r\n    constructor(\r\n        public name: string,\r\n        private _configuration: ITemplateConfiguration\r\n    ) {\r\n        this.onLoaded = new Observable<Template>();\r\n        this.onAppended = new Observable<Template>();\r\n        this.onStateChange = new Observable<Template>();\r\n        this.onEventTriggered = new Observable<EventCallback>();\r\n        this.onParamsUpdated = new Observable<Template>();\r\n        this.onHTMLRendered = new Observable<Template>();\r\n\r\n        this._loadRequests = [];\r\n\r\n        this.isLoaded = false;\r\n        this.isShown = false;\r\n        this.isInHtmlTree = false;\r\n\r\n        const htmlContentPromise = this._getTemplateAsHtml(_configuration);\r\n\r\n        this.initPromise = htmlContentPromise.then((htmlTemplate) => {\r\n            if (htmlTemplate) {\r\n                this._htmlTemplate = htmlTemplate;\r\n                const compiledTemplate = Handlebars.compile(htmlTemplate, { noEscape: this._configuration.params && !!this._configuration.params.noEscape });\r\n                const config = this._configuration.params || {};\r\n                this._rawHtml = compiledTemplate(config);\r\n                try {\r\n                    this._fragment = document.createRange().createContextualFragment(this._rawHtml);\r\n                } catch (e) {\r\n                    const test = document.createElement(this.name);\r\n                    test.innerHTML = this._rawHtml;\r\n                    this._fragment = test;\r\n                }\r\n                this.isLoaded = true;\r\n                this.isShown = true;\r\n                this.onLoaded.notifyObservers(this);\r\n            }\r\n            return this;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Some templates have parameters (like background color for example).\r\n     * The parameters are provided to Handlebars which in turn generates the template.\r\n     * This function will update the template with the new parameters\r\n     *\r\n     * Note that when updating parameters the events will be registered again (after being cleared).\r\n     *\r\n     * @param params the new template parameters\r\n     * @param append\r\n     */\r\n    public updateParams(params: { [key: string]: string | number | boolean | object }, append: boolean = true) {\r\n        if (append) {\r\n            this._configuration.params = deepmerge(this._configuration.params, params);\r\n        } else {\r\n            this._configuration.params = params;\r\n        }\r\n        // update the template\r\n        if (this.isLoaded) {\r\n            // this.dispose();\r\n        }\r\n        const compiledTemplate = Handlebars.compile(this._htmlTemplate);\r\n        const config = this._configuration.params || {};\r\n        this._rawHtml = compiledTemplate(config);\r\n        try {\r\n            this._fragment = document.createRange().createContextualFragment(this._rawHtml);\r\n        } catch (e) {\r\n            const test = document.createElement(this.name);\r\n            test.innerHTML = this._rawHtml;\r\n            this._fragment = test;\r\n        }\r\n        if (this.parent) {\r\n            this.appendTo(this.parent, true);\r\n        }\r\n    }\r\n\r\n    public redraw() {\r\n        this.updateParams({});\r\n    }\r\n\r\n    /**\r\n     * Get the template'S configuration\r\n     */\r\n    public get configuration(): ITemplateConfiguration {\r\n        return this._configuration;\r\n    }\r\n\r\n    /**\r\n     * A template can be a parent element for other templates or HTML elements.\r\n     * This function will deliver all child HTML elements of this template.\r\n     * @returns an array of strings, each string is the name of the child element\r\n     */\r\n    public getChildElements(): Array<string> {\r\n        const childrenArray: string[] = [];\r\n        //Edge and IE don't support frage,ent.children\r\n        let children: HTMLCollection | NodeListOf<Element> = this._fragment && this._fragment.children;\r\n        if (!this._fragment) {\r\n            const fragment = this.parent.querySelector(this.name);\r\n            if (fragment) {\r\n                children = fragment.querySelectorAll(\"*\");\r\n            }\r\n        }\r\n        if (!children) {\r\n            // casting to HTMLCollection, as both NodeListOf and HTMLCollection have 'item()' and 'length'.\r\n            children = this._fragment.querySelectorAll(\"*\");\r\n        }\r\n        for (let i = 0; i < children.length; ++i) {\r\n            const child = children.item(i);\r\n            if (child) {\r\n                childrenArray.push(kebabToCamel(child.nodeName.toLowerCase()));\r\n            }\r\n        }\r\n        return childrenArray;\r\n    }\r\n\r\n    /**\r\n     * Appending the template to a parent HTML element.\r\n     * If a parent is already set and you wish to replace the old HTML with new one, forceRemove should be true.\r\n     * @param parent the parent to which the template is added\r\n     * @param forceRemove if the parent already exists, shoud the template be removed from it?\r\n     */\r\n    public appendTo(parent: HTMLElement, forceRemove?: boolean) {\r\n        if (this.parent) {\r\n            if (forceRemove && this._addedFragment) {\r\n                /*let fragement = this.parent.querySelector(this.name)\r\n                if (fragement)\r\n                    this.parent.removeChild(fragement);*/\r\n                this.parent.innerHTML = \"\";\r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n        this.parent = parent;\r\n\r\n        if (this._configuration.id) {\r\n            this.parent.id = this._configuration.id;\r\n        }\r\n        if (this._fragment) {\r\n            this.parent.appendChild(this._fragment);\r\n            this._addedFragment = this._fragment;\r\n        } else {\r\n            this.parent.insertAdjacentHTML(\"beforeend\", this._rawHtml);\r\n        }\r\n\r\n        this.onHTMLRendered.notifyObservers(this);\r\n\r\n        // appended only one frame after.\r\n        setTimeout(() => {\r\n            this._registerEvents();\r\n            this.onAppended.notifyObservers(this);\r\n        });\r\n    }\r\n\r\n    private _isShowing: boolean;\r\n    private _isHiding: boolean;\r\n\r\n    /**\r\n     * Show the template using the provided visibilityFunction, or natively using display: flex.\r\n     * The provided function returns a promise that should be fulfilled when the element is shown.\r\n     * Since it is a promise async operations are more than possible.\r\n     * See the default viewer for an opacity example.\r\n     * @param visibilityFunction The function to execute to show the template.\r\n     * @returns a promise that will be fulfilled when the template is shown\r\n     */\r\n    public show(visibilityFunction?: (template: Template) => Promise<Template>): Promise<Template> {\r\n        if (this._isHiding) {\r\n            return Promise.resolve(this);\r\n        }\r\n        return Promise.resolve()\r\n            .then(() => {\r\n                this._isShowing = true;\r\n                if (visibilityFunction) {\r\n                    return visibilityFunction(this);\r\n                } else {\r\n                    // flex? box? should this be configurable easier than the visibilityFunction?\r\n                    this.parent.style.display = \"flex\";\r\n                    // support old browsers with no flex:\r\n                    if (this.parent.style.display !== \"flex\") {\r\n                        this.parent.style.display = \"\";\r\n                    }\r\n                    return this;\r\n                }\r\n            })\r\n            .then(() => {\r\n                this.isShown = true;\r\n                this._isShowing = false;\r\n                this.onStateChange.notifyObservers(this);\r\n                return this;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Hide the template using the provided visibilityFunction, or natively using display: none.\r\n     * The provided function returns a promise that should be fulfilled when the element is hidden.\r\n     * Since it is a promise async operations are more than possible.\r\n     * See the default viewer for an opacity example.\r\n     * @param visibilityFunction The function to execute to show the template.\r\n     * @returns a promise that will be fulfilled when the template is hidden\r\n     */\r\n    public hide(visibilityFunction?: (template: Template) => Promise<Template>): Promise<Template> {\r\n        if (this._isShowing) {\r\n            return Promise.resolve(this);\r\n        }\r\n        return Promise.resolve()\r\n            .then(() => {\r\n                this._isHiding = true;\r\n                if (visibilityFunction) {\r\n                    return visibilityFunction(this);\r\n                } else {\r\n                    // flex? box? should this be configurable easier than the visibilityFunction?\r\n                    this.parent.style.display = \"none\";\r\n                    return this;\r\n                }\r\n            })\r\n            .then(() => {\r\n                this.isShown = false;\r\n                this._isHiding = false;\r\n                this.onStateChange.notifyObservers(this);\r\n                return this;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Dispose this template\r\n     */\r\n    public dispose() {\r\n        this.onAppended.clear();\r\n        this.onEventTriggered.clear();\r\n        this.onLoaded.clear();\r\n        this.onStateChange.clear();\r\n        this.isLoaded = false;\r\n        // remove from parent\r\n        try {\r\n            this.parent.removeChild(this._fragment);\r\n        } catch (e) {\r\n            //noop\r\n        }\r\n\r\n        this._loadRequests.forEach((request) => {\r\n            request.abort();\r\n        });\r\n\r\n        if (this._registeredEvents) {\r\n            this._registeredEvents.forEach((evt) => {\r\n                evt.htmlElement.removeEventListener(evt.eventName, evt.function);\r\n            });\r\n        }\r\n    }\r\n\r\n    private _getTemplateAsHtml(templateConfig: ITemplateConfiguration): Promise<string> {\r\n        if (!templateConfig) {\r\n            return Promise.reject(\"No templateConfig provided\");\r\n        } else if (templateConfig.html && !templateConfig.location) {\r\n            return Promise.resolve(templateConfig.html);\r\n        } else {\r\n            let location = this._getTemplateLocation(templateConfig);\r\n            if (isUrl(location)) {\r\n                return new Promise((resolve, reject) => {\r\n                    const fileRequest = Tools.LoadFile(\r\n                        location,\r\n                        (data: string | ArrayBuffer) => {\r\n                            resolve(data as string);\r\n                        },\r\n                        undefined,\r\n                        undefined,\r\n                        false,\r\n                        (request, error: any) => {\r\n                            reject(error);\r\n                        }\r\n                    );\r\n                    this._loadRequests.push(fileRequest);\r\n                });\r\n            } else {\r\n                location = location.replace(\"#\", \"\");\r\n                const element = document.getElementById(location);\r\n                if (element) {\r\n                    return Promise.resolve(element.innerHTML);\r\n                } else {\r\n                    return Promise.reject(\"Template ID not found\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _registeredEvents: Array<{ htmlElement: HTMLElement; eventName: string; function: EventListenerOrEventListenerObject }>;\r\n\r\n    private _registerEvents() {\r\n        this._registeredEvents = this._registeredEvents || [];\r\n        if (this._registeredEvents.length) {\r\n            // first remove the registered events\r\n            this._registeredEvents.forEach((evt) => {\r\n                evt.htmlElement.removeEventListener(evt.eventName, evt.function);\r\n            });\r\n        }\r\n        if (this._configuration.events) {\r\n            for (const eventName in this._configuration.events) {\r\n                if (this._configuration.events && this._configuration.events[eventName]) {\r\n                    const functionToFire = (selector: string, event: Event) => {\r\n                        this.onEventTriggered.notifyObservers({ event, template: this, selector });\r\n                    };\r\n\r\n                    // if boolean, set the parent as the event listener\r\n                    if (typeof this._configuration.events[eventName] === \"boolean\") {\r\n                        let selector = this.parent.id;\r\n                        if (selector) {\r\n                            selector = \"#\" + selector;\r\n                        } else {\r\n                            selector = this.parent.tagName;\r\n                        }\r\n                        const binding = functionToFire.bind(this, selector);\r\n                        this.parent.addEventListener(eventName, binding, false);\r\n                        this._registeredEvents.push({\r\n                            htmlElement: this.parent,\r\n                            eventName: eventName,\r\n                            function: binding,\r\n                        });\r\n                    } else if (typeof this._configuration.events[eventName] === \"object\") {\r\n                        const selectorsArray: Array<string> = Object.keys((this._configuration.events[eventName] as object) || {});\r\n                        // strict null check is working incorrectly, must override:\r\n                        const event = this._configuration.events[eventName] || {};\r\n                        selectorsArray\r\n                            .filter((selector) => typeof event !== \"boolean\" && event[selector])\r\n                            .forEach((selector) => {\r\n                                let htmlElement = <HTMLElement>this.parent.querySelector(selector);\r\n                                if (!htmlElement) {\r\n                                    // backcompat, fallback to id\r\n                                    if (selector && selector.indexOf(\"#\") !== 0) {\r\n                                        selector = \"#\" + selector;\r\n                                    }\r\n                                    try {\r\n                                        htmlElement = <HTMLElement>this.parent.querySelector(selector);\r\n                                    } catch (e) {}\r\n                                }\r\n                                if (htmlElement) {\r\n                                    const binding = functionToFire.bind(this, selector);\r\n                                    htmlElement.addEventListener(eventName, binding, false);\r\n                                    this._registeredEvents.push({\r\n                                        htmlElement: htmlElement,\r\n                                        eventName: eventName,\r\n                                        function: binding,\r\n                                    });\r\n                                }\r\n                            });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _getTemplateLocation(templateConfig: ITemplateConfiguration): string {\r\n        if (!templateConfig || typeof templateConfig === \"string\") {\r\n            return templateConfig;\r\n        } else {\r\n            return templateConfig.location!;\r\n        }\r\n    }\r\n}\r\n"]}
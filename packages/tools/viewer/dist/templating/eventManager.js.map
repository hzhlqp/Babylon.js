{"version":3,"file":"eventManager.js","sourceRoot":"","sources":["../../src/templating/eventManager.ts"],"names":[],"mappings":"AAEA;;;GAGG;AACH,MAAM,OAAO,YAAY;IAGrB,YAAoB,gBAAiC;QAAjC,qBAAgB,GAAhB,gBAAgB,CAAiB;QACjD,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;QAC9B,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE;YACrD,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;;OAQG;IACI,gBAAgB,CAAC,YAAoB,EAAE,QAA4C,EAAE,SAAkB,EAAE,QAAiB;QAC7H,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,EAAE;YACzC,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC;SAC/C;QACD,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC;YACxC,SAAS;YACT,QAAQ;YACR,QAAQ;SACX,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;;OAQG;IACI,kBAAkB,CAAC,YAAoB,EAAE,QAA4C,EAAE,SAAkB,EAAE,QAAiB;QAC/H,MAAM,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;QAClE,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,GAAG,YAAY,CAAC,MAAM,CACxD,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,SAAS,IAAI,WAAW,CAAC,SAAS,KAAK,SAAS,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,QAAQ,IAAI,WAAW,CAAC,QAAQ,KAAK,QAAQ,CAAC,CACnJ,CAAC;IACN,CAAC;IAEO,eAAe,CAAC,IAAmB;QACvC,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;QACxC,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;QAClC,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAE/B,MAAM,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;QAClE,YAAY;aACP,MAAM,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,SAAS,IAAI,WAAW,CAAC,SAAS,KAAK,SAAS,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,QAAQ,IAAI,WAAW,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC;aACxJ,OAAO,CAAC,CAAC,WAAW,EAAE,EAAE;YACrB,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;IACX,CAAC;IAED;;OAEG;IACI,OAAO;QACV,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;IAClC,CAAC;CACJ","sourcesContent":["import type { EventCallback, TemplateManager } from \"./templateManager\";\r\n\r\n/**\r\n * The EventManager is in charge of registering user interctions with the viewer.\r\n * It is used in the TemplateManager\r\n */\r\nexport class EventManager {\r\n    private _callbacksContainer: { [key: string]: Array<{ eventType?: string; selector?: string; callback: (eventData: EventCallback) => void }> };\r\n\r\n    constructor(private _templateManager: TemplateManager) {\r\n        this._callbacksContainer = {};\r\n        this._templateManager.onEventTriggered.add((eventData) => {\r\n            this._eventTriggered(eventData);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Register a new callback to a specific template.\r\n     * The best example for the usage can be found in the DefaultViewer\r\n     *\r\n     * @param templateName the templateName to register the event to\r\n     * @param callback The callback to be executed\r\n     * @param eventType the type of event to register\r\n     * @param selector an optional selector. if not defined the parent object in the template will be selected\r\n     */\r\n    public registerCallback(templateName: string, callback: (eventData: EventCallback) => void, eventType?: string, selector?: string) {\r\n        if (!this._callbacksContainer[templateName]) {\r\n            this._callbacksContainer[templateName] = [];\r\n        }\r\n        this._callbacksContainer[templateName].push({\r\n            eventType,\r\n            callback,\r\n            selector,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This will remove a registered event from the defined template.\r\n     * Each one of the variables apart from the template name are optional, but one must be provided.\r\n     *\r\n     * @param templateName the templateName\r\n     * @param callback the callback to remove (optional)\r\n     * @param eventType the event type to remove (optional)\r\n     * @param selector the selector from which to remove the event (optional)\r\n     */\r\n    public unregisterCallback(templateName: string, callback: (eventData: EventCallback) => void, eventType?: string, selector?: string) {\r\n        const callbackDefs = this._callbacksContainer[templateName] || [];\r\n        this._callbacksContainer[templateName] = callbackDefs.filter(\r\n            (callbackDef) => (!callbackDef.eventType || callbackDef.eventType === eventType) && (!callbackDef.selector || callbackDef.selector === selector)\r\n        );\r\n    }\r\n\r\n    private _eventTriggered(data: EventCallback) {\r\n        const templateName = data.template.name;\r\n        const eventType = data.event.type;\r\n        const selector = data.selector;\r\n\r\n        const callbackDefs = this._callbacksContainer[templateName] || [];\r\n        callbackDefs\r\n            .filter((callbackDef) => (!callbackDef.eventType || callbackDef.eventType === eventType) && (!callbackDef.selector || callbackDef.selector === selector))\r\n            .forEach((callbackDef) => {\r\n                callbackDef.callback(data);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Dispose the event manager\r\n     */\r\n    public dispose() {\r\n        this._callbacksContainer = {};\r\n    }\r\n}\r\n"]}
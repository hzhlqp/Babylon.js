{"version":3,"file":"environmentSerializer.js","sourceRoot":"","sources":["../../src/labs/environmentSerializer.ts"],"names":[],"mappings":"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Q,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QAChI,wBAAwB,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QAChI,wBAAwB,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QAEhI,wBAAwB,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QAChI,wBAAwB,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QAChI,wBAAwB,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QAEhI,wBAAwB,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QAClG,wBAAwB,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QAClG,wBAAwB,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QAElG,IAAI;QACJ,wBAAwB,CAAC,EAAE,CAAC,CAAC,GAAG,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QACnE,wBAAwB,CAAC,EAAE,CAAC,CAAC,GAAG,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QACnE,wBAAwB,CAAC,EAAE,CAAC,CAAC,GAAG,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QAEnE,wBAAwB,CAAC,EAAE,CAAC,CAAC,GAAG,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QAClE,wBAAwB,CAAC,EAAE,CAAC,CAAC,GAAG,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QAClE,wBAAwB,CAAC,EAAE,CAAC,CAAC,GAAG,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QAElE,wBAAwB,CAAC,EAAE,CAAC,CAAC,GAAG,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QACnE,wBAAwB,CAAC,EAAE,CAAC,CAAC,GAAG,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QACnE,wBAAwB,CAAC,EAAE,CAAC,CAAC,GAAG,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;IACvE,CAAC;IAED;;;;OAIG;IACK,MAAM,CAAC,QAAQ,CAAC,SAAc,EAAE,WAAmB;QACvD,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QAChC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QAChC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QAChC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QACjC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QACjC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QACjC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QAChC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QAChC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QAChC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QAChC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QAChC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QAChC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QACjC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QACjC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QACjC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QACjC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QACjC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QACjC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QAChC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QAChC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QAChC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QAChC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QAChC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QAChC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QAChC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QAChC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;IACpC,CAAC;CACJ","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { Vector3 } from \"core/Maths/math\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { TextureCube, PixelFormat, PixelType } from \"./texture\";\r\n\r\n/**\r\n * Spherical polynomial coefficients (counter part to spherical harmonic coefficients used in shader irradiance calculation)\r\n * @ignoreChildren\r\n */\r\nexport interface SphericalPolynomalCoefficients {\r\n    x: Vector3;\r\n    y: Vector3;\r\n    z: Vector3;\r\n    xx: Vector3;\r\n    yy: Vector3;\r\n    zz: Vector3;\r\n    yz: Vector3;\r\n    zx: Vector3;\r\n    xy: Vector3;\r\n}\r\n\r\n/**\r\n * Wraps data and maps required for environments with physically based rendering\r\n */\r\nexport interface PBREnvironment {\r\n    /**\r\n     * Spherical Polynomial Coefficients representing an irradiance map\r\n     */\r\n    irradiancePolynomialCoefficients: SphericalPolynomalCoefficients;\r\n\r\n    /**\r\n     * Specular cubemap\r\n     */\r\n    specularTexture?: TextureCube;\r\n    /**\r\n     * A scale factor applied to RGB values after reading from environment maps\r\n     */\r\n    textureIntensityScale: number;\r\n}\r\n\r\n/**\r\n * Environment map representations: layouts, projections and approximations\r\n */\r\nexport type MapType = \"irradiance_sh_coefficients_9\" | \"cubemap_faces\";\r\n\r\n/**\r\n * Image type used for environment map\r\n */\r\nexport type ImageType = \"png\";\r\n\r\n//Payload Descriptor\r\n\r\n/**\r\n * A generic field in JSON that report's its type\r\n */\r\nexport interface TypedObject<T> {\r\n    type: T;\r\n}\r\n\r\n/**\r\n * Describes a range of bytes starting at byte pos (inclusive) and finishing at byte pos + length - 1\r\n */\r\nexport interface ByteRange {\r\n    pos: number;\r\n    length: number;\r\n}\r\n\r\n/**\r\n * Complete Spectre Environment JSON Descriptor\r\n */\r\nexport interface EnvJsonDescriptor {\r\n    radiance: TypedObject<MapType>;\r\n    irradiance: TypedObject<MapType>;\r\n    specular: TypedObject<MapType>;\r\n}\r\n\r\n/**\r\n * Spherical harmonic coefficients to provide an irradiance map\r\n */\r\nexport interface IrradianceSHCoefficients9 extends TypedObject<MapType> {\r\n    l00: Array<number>;\r\n\r\n    l1_1: Array<number>;\r\n    l10: Array<number>;\r\n    l11: Array<number>;\r\n\r\n    l2_2: Array<number>;\r\n    l2_1: Array<number>;\r\n    l20: Array<number>;\r\n    l21: Array<number>;\r\n    l22: Array<number>;\r\n}\r\n\r\n/**\r\n * A generic set of images, where the image content is specified by byte ranges in the mipmaps field\r\n */\r\nexport interface ImageSet<T> extends TypedObject<MapType> {\r\n    imageType: ImageType;\r\n    width: number;\r\n    height: number;\r\n    mipmaps: Array<T>;\r\n    multiplier: number;\r\n}\r\n\r\n/**\r\n * A set of cubemap faces\r\n */\r\nexport type CubemapFaces = ImageSet<Array<ByteRange>>;\r\n\r\n/**\r\n * A single image containing an atlas of equirectangular-projection maps across all mip levels\r\n */\r\nexport type EquirectangularMipmapAtlas = ImageSet<ByteRange>;\r\n\r\n/**\r\n * A static class proving methods to aid parsing Spectre environment files\r\n */\r\nexport class EnvironmentDeserializer {\r\n    /**\r\n     * Parses an arraybuffer into a new PBREnvironment object\r\n     * @param arrayBuffer The arraybuffer of the Spectre environment file\r\n     * @returns a PBREnvironment object\r\n     */\r\n    public static Parse(arrayBuffer: ArrayBuffer): PBREnvironment {\r\n        const environment: PBREnvironment = {\r\n            //irradiance\r\n            irradiancePolynomialCoefficients: {\r\n                x: new Vector3(0, 0, 0),\r\n                y: new Vector3(0, 0, 0),\r\n                z: new Vector3(0, 0, 0),\r\n                xx: new Vector3(0, 0, 0),\r\n                yy: new Vector3(0, 0, 0),\r\n                zz: new Vector3(0, 0, 0),\r\n                yz: new Vector3(0, 0, 0),\r\n                zx: new Vector3(0, 0, 0),\r\n                xy: new Vector3(0, 0, 0),\r\n            },\r\n\r\n            //specular\r\n            textureIntensityScale: 1.0,\r\n        };\r\n\r\n        //read .env\r\n        const littleEndian = false;\r\n\r\n        const magicBytes = [0x86, 0x16, 0x87, 0x96, 0xf6, 0xd6, 0x96, 0x36];\r\n\r\n        const dataView = new DataView(arrayBuffer);\r\n        let pos = 0;\r\n\r\n        for (let i = 0; i < magicBytes.length; i++) {\r\n            if (dataView.getUint8(pos++) !== magicBytes[i]) {\r\n                Tools.Error(\"Not a Spectre environment map\");\r\n            }\r\n        }\r\n\r\n        const version = dataView.getUint16(pos, littleEndian);\r\n        pos += 2;\r\n\r\n        if (version !== 1) {\r\n            Tools.Warn('Unsupported Spectre environment map version \"' + version + '\"');\r\n        }\r\n\r\n        //read json descriptor - collect characters up to null terminator\r\n        let descriptorString = \"\";\r\n        let charCode = 0x00;\r\n        while ((charCode = dataView.getUint8(pos++))) {\r\n            descriptorString += String.fromCharCode(charCode);\r\n        }\r\n\r\n        const descriptor: EnvJsonDescriptor = JSON.parse(descriptorString);\r\n\r\n        const payloadPos = pos;\r\n\r\n        //irradiance\r\n        switch (descriptor.irradiance.type) {\r\n            case \"irradiance_sh_coefficients_9\": {\r\n                //irradiance\r\n                const harmonics = <IrradianceSHCoefficients9>descriptor.irradiance;\r\n\r\n                EnvironmentDeserializer._ConvertSHIrradianceToLambertianRadiance(harmonics);\r\n\r\n                //harmonics now represent radiance\r\n                EnvironmentDeserializer._ConvertSHToSP(harmonics, environment.irradiancePolynomialCoefficients);\r\n                break;\r\n            }\r\n            default:\r\n                Tools.Error(\"Unhandled MapType descriptor.irradiance.type (\" + descriptor.irradiance.type + \")\");\r\n        }\r\n\r\n        //specular\r\n        switch (descriptor.specular.type) {\r\n            case \"cubemap_faces\": {\r\n                const specularDescriptor = <CubemapFaces>descriptor.specular;\r\n\r\n                const specularTexture = (environment.specularTexture = new TextureCube(PixelFormat.RGBA, PixelType.UNSIGNED_BYTE));\r\n                environment.textureIntensityScale = specularDescriptor.multiplier != null ? specularDescriptor.multiplier : 1.0;\r\n\r\n                const mipmaps = specularDescriptor.mipmaps;\r\n                const imageType = specularDescriptor.imageType;\r\n\r\n                for (let l = 0; l < mipmaps.length; l++) {\r\n                    const faceRanges = mipmaps[l];\r\n\r\n                    specularTexture.source[l] = [];\r\n\r\n                    for (let i = 0; i < 6; i++) {\r\n                        const range = faceRanges[i];\r\n                        const bytes = new Uint8Array(arrayBuffer, payloadPos + range.pos, range.length);\r\n\r\n                        switch (imageType) {\r\n                            case \"png\": {\r\n                                //construct image element from bytes\r\n                                const image = new Image();\r\n                                const src = URL.createObjectURL(new Blob([bytes], { type: \"image/png\" }));\r\n                                image.src = src;\r\n                                specularTexture.source[l][i] = image;\r\n\r\n                                break;\r\n                            }\r\n                            default:\r\n                                Tools.Error(\"Unhandled ImageType descriptor.specular.imageType (\" + imageType + \")\");\r\n                        }\r\n                    }\r\n                }\r\n\r\n                break;\r\n            }\r\n            default:\r\n                Tools.Error(\"Unhandled MapType descriptor.specular.type (\" + descriptor.specular.type + \")\");\r\n        }\r\n\r\n        return environment;\r\n    }\r\n\r\n    /**\r\n     * Convert from irradiance to outgoing radiance for Lambertian BDRF, suitable for efficient shader evaluation.\r\n     *\t  L = (1/pi) * E * rho\r\n     *\r\n     * This is done by an additional scale by 1/pi, so is a fairly trivial operation but important conceptually.\r\n     * @param harmonics Spherical harmonic coefficients (9)\r\n     */\r\n    private static _ConvertSHIrradianceToLambertianRadiance(harmonics: any): void {\r\n        EnvironmentDeserializer._ScaleSH(harmonics, 1 / Math.PI);\r\n        // The resultant SH now represents outgoing radiance, so includes the Lambert 1/pi normalisation factor but without albedo (rho) applied\r\n        // (The pixel shader must apply albedo after texture fetches, etc).\r\n    }\r\n\r\n    /**\r\n     * Convert spherical harmonics to spherical polynomial coefficients\r\n     * @param harmonics Spherical harmonic coefficients (9)\r\n     * @param outPolynomialCoefficents Polynomial coefficients (9) object to store result\r\n     */\r\n    private static _ConvertSHToSP(harmonics: any, outPolynomialCoefficents: SphericalPolynomalCoefficients) {\r\n        const rPi = 1 / Math.PI;\r\n\r\n        //x\r\n        outPolynomialCoefficents.x.x = 1.02333 * harmonics.l11[0] * rPi;\r\n        outPolynomialCoefficents.x.y = 1.02333 * harmonics.l11[1] * rPi;\r\n        outPolynomialCoefficents.x.z = 1.02333 * harmonics.l11[2] * rPi;\r\n\r\n        outPolynomialCoefficents.y.x = 1.02333 * harmonics.l1_1[0] * rPi;\r\n        outPolynomialCoefficents.y.y = 1.02333 * harmonics.l1_1[1] * rPi;\r\n        outPolynomialCoefficents.y.z = 1.02333 * harmonics.l1_1[2] * rPi;\r\n\r\n        outPolynomialCoefficents.z.x = 1.02333 * harmonics.l10[0] * rPi;\r\n        outPolynomialCoefficents.z.y = 1.02333 * harmonics.l10[1] * rPi;\r\n        outPolynomialCoefficents.z.z = 1.02333 * harmonics.l10[2] * rPi;\r\n\r\n        //xx\r\n        outPolynomialCoefficents.xx.x = (0.886277 * harmonics.l00[0] - 0.247708 * harmonics.l20[0] + 0.429043 * harmonics.l22[0]) * rPi;\r\n        outPolynomialCoefficents.xx.y = (0.886277 * harmonics.l00[1] - 0.247708 * harmonics.l20[1] + 0.429043 * harmonics.l22[1]) * rPi;\r\n        outPolynomialCoefficents.xx.z = (0.886277 * harmonics.l00[2] - 0.247708 * harmonics.l20[2] + 0.429043 * harmonics.l22[2]) * rPi;\r\n\r\n        outPolynomialCoefficents.yy.x = (0.886277 * harmonics.l00[0] - 0.247708 * harmonics.l20[0] - 0.429043 * harmonics.l22[0]) * rPi;\r\n        outPolynomialCoefficents.yy.y = (0.886277 * harmonics.l00[1] - 0.247708 * harmonics.l20[1] - 0.429043 * harmonics.l22[1]) * rPi;\r\n        outPolynomialCoefficents.yy.z = (0.886277 * harmonics.l00[2] - 0.247708 * harmonics.l20[2] - 0.429043 * harmonics.l22[2]) * rPi;\r\n\r\n        outPolynomialCoefficents.zz.x = (0.886277 * harmonics.l00[0] + 0.495417 * harmonics.l20[0]) * rPi;\r\n        outPolynomialCoefficents.zz.y = (0.886277 * harmonics.l00[1] + 0.495417 * harmonics.l20[1]) * rPi;\r\n        outPolynomialCoefficents.zz.z = (0.886277 * harmonics.l00[2] + 0.495417 * harmonics.l20[2]) * rPi;\r\n\r\n        //yz\r\n        outPolynomialCoefficents.yz.x = 0.858086 * harmonics.l2_1[0] * rPi;\r\n        outPolynomialCoefficents.yz.y = 0.858086 * harmonics.l2_1[1] * rPi;\r\n        outPolynomialCoefficents.yz.z = 0.858086 * harmonics.l2_1[2] * rPi;\r\n\r\n        outPolynomialCoefficents.zx.x = 0.858086 * harmonics.l21[0] * rPi;\r\n        outPolynomialCoefficents.zx.y = 0.858086 * harmonics.l21[1] * rPi;\r\n        outPolynomialCoefficents.zx.z = 0.858086 * harmonics.l21[2] * rPi;\r\n\r\n        outPolynomialCoefficents.xy.x = 0.858086 * harmonics.l2_2[0] * rPi;\r\n        outPolynomialCoefficents.xy.y = 0.858086 * harmonics.l2_2[1] * rPi;\r\n        outPolynomialCoefficents.xy.z = 0.858086 * harmonics.l2_2[2] * rPi;\r\n    }\r\n\r\n    /**\r\n     * Multiplies harmonic coefficients in place\r\n     * @param harmonics Spherical harmonic coefficients (9)\r\n     * @param scaleFactor Value to multiply by\r\n     */\r\n    private static _ScaleSH(harmonics: any, scaleFactor: number) {\r\n        harmonics.l00[0] *= scaleFactor;\r\n        harmonics.l00[1] *= scaleFactor;\r\n        harmonics.l00[2] *= scaleFactor;\r\n        harmonics.l1_1[0] *= scaleFactor;\r\n        harmonics.l1_1[1] *= scaleFactor;\r\n        harmonics.l1_1[2] *= scaleFactor;\r\n        harmonics.l10[0] *= scaleFactor;\r\n        harmonics.l10[1] *= scaleFactor;\r\n        harmonics.l10[2] *= scaleFactor;\r\n        harmonics.l11[0] *= scaleFactor;\r\n        harmonics.l11[1] *= scaleFactor;\r\n        harmonics.l11[2] *= scaleFactor;\r\n        harmonics.l2_2[0] *= scaleFactor;\r\n        harmonics.l2_2[1] *= scaleFactor;\r\n        harmonics.l2_2[2] *= scaleFactor;\r\n        harmonics.l2_1[0] *= scaleFactor;\r\n        harmonics.l2_1[1] *= scaleFactor;\r\n        harmonics.l2_1[2] *= scaleFactor;\r\n        harmonics.l20[0] *= scaleFactor;\r\n        harmonics.l20[1] *= scaleFactor;\r\n        harmonics.l20[2] *= scaleFactor;\r\n        harmonics.l21[0] *= scaleFactor;\r\n        harmonics.l21[1] *= scaleFactor;\r\n        harmonics.l21[2] *= scaleFactor;\r\n        harmonics.l22[0] *= scaleFactor;\r\n        harmonics.l22[1] *= scaleFactor;\r\n        harmonics.l22[2] *= scaleFactor;\r\n    }\r\n}\r\n"]}
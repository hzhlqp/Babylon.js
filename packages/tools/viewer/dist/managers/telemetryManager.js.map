{"version":3,"file":"telemetryManager.js","sourceRoot":"","sources":["../../src/managers/telemetryManager.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAiClD;;GAEG;AACH,MAAM,OAAO,gBAAgB;IAA7B;QACI;;WAEG;QACI,iCAA4B,GAA8B,IAAI,UAAU,EAAE,CAAC;QAI1E,WAAM,GAA8D,IAAI,CAAC,aAAa,CAAC;IAgGnG,CAAC;IA9FG;;OAEG;IACH,IAAW,SAAS;QAChB,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACI,gBAAgB,CAAC,MAAsB,EAAE,QAAiB;QAC7D,IAAI,CAAC,MAAM,EAAE;YACT,OAAO;SACV;QACD,IAAI,SAAS,GAAG,IAAI,CAAC;QAErB,OAAO,SAAS,EAAE;YACd,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YAChC,IAAI,KAAK,KAAK,CAAC,EAAE;gBACb,SAAS,GAAG,KAAK,CAAC;aACrB;iBAAM;gBACH,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;aAC7D;SACJ;IACL,CAAC;IAED;;;OAGG;IACH,IAAW,MAAM,CAAC,OAAgB;QAC9B,IAAI,OAAO,EAAE;YACT,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC;SACpC;aAAM;YACH,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC;SACrC;IACL,CAAC;IAED;;OAEG;IACK,cAAc;QAClB,gBAAgB;IACpB,CAAC;IAED;;;;;OAKG;IACK,aAAa,CAAC,KAAa,EAAE,QAAiB,EAAE,OAAa;QACjE,MAAM,aAAa,GAAkB;YACjC,QAAQ;YACR,KAAK,EAAE,KAAK;YACZ,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,IAAI,EAAE,IAAI,IAAI,EAAE;YAChB,GAAG,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;YAC/D,MAAM,EAAE,IAAI;SACf,CAAC;QAEF,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC7B,KAAK,MAAM,IAAI,IAAI,OAAO,EAAE;gBACxB,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE;oBACpD,aAAqB,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;iBAChD;aACJ;SACJ;aAAM,IAAI,OAAO,EAAE;YAChB,aAAa,CAAC,MAAM,GAAG,OAAO,CAAC;SAClC;QAED,IAAI,CAAC,4BAA4B,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;IACrE,CAAC;IAED;;;OAGG;IACH,IAAW,OAAO;QACd,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;YACzB,qCAAqC;YACrC,IAAI,CAAC,iBAAiB,GAAG,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,OAAO,CAAC,CAAC;SAC1F;QACD,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAClC,CAAC;IAED;;OAEG;IACI,OAAO;QACV,IAAI,CAAC,4BAA4B,CAAC,KAAK,EAAE,CAAC;IAC9C,CAAC;CACJ;AAED,MAAM,CAAC,MAAM,gBAAgB,GAAG,IAAI,gBAAgB,EAAE,CAAC","sourcesContent":["import { Observable } from \"core/Misc/observable\";\r\nimport type { AbstractEngine } from \"core/Engines/abstractEngine\";\r\n\r\n/**\r\n * The data structure of a telemetry event.\r\n */\r\nexport interface TelemetryData {\r\n    /**\r\n     *\r\n     */\r\n    event: string;\r\n    /**\r\n     *\r\n     */\r\n    session: string;\r\n    /**\r\n     *\r\n     */\r\n    date: Date;\r\n    /**\r\n     *\r\n     */\r\n    now: number;\r\n    /**\r\n     *\r\n     */\r\n    viewerId?: string;\r\n    /**\r\n     *\r\n     */\r\n    detail: any;\r\n}\r\n\r\n/**\r\n * Receives Telemetry events and raises events to the API\r\n */\r\nexport class TelemetryManager {\r\n    /**\r\n     *\r\n     */\r\n    public onEventBroadcastedObservable: Observable<TelemetryData> = new Observable();\r\n\r\n    private _currentSessionId: string;\r\n\r\n    private _event: (event: string, viewerId?: string, details?: any) => void = this._eventEnabled;\r\n\r\n    /**\r\n     * Receives a telemetry event\r\n     */\r\n    public get broadcast() {\r\n        return this._event;\r\n    }\r\n\r\n    /**\r\n     * Log a Telemetry event for errors raised on the WebGL context.\r\n     * @param engine The Babylon engine with the WebGL context.\r\n     * @param viewerId\r\n     */\r\n    public flushWebGLErrors(engine: AbstractEngine, viewerId?: string) {\r\n        if (!engine) {\r\n            return;\r\n        }\r\n        let logErrors = true;\r\n\r\n        while (logErrors) {\r\n            const error = engine.getError();\r\n            if (error === 0) {\r\n                logErrors = false;\r\n            } else {\r\n                this.broadcast(\"WebGL Error\", viewerId, { error: error });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable or disable telemetry events\r\n     * @param enabled Boolean, true if events are enabled\r\n     */\r\n    public set enable(enabled: boolean) {\r\n        if (enabled) {\r\n            this._event = this._eventEnabled;\r\n        } else {\r\n            this._event = this._eventDisabled;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called on event when disabled, typically do nothing here\r\n     */\r\n    private _eventDisabled(): void {\r\n        // nothing to do\r\n    }\r\n\r\n    /**\r\n     * Called on event when enabled\r\n     * @param event - The name of the Telemetry event\r\n     * @param viewerId\r\n     * @param details An additional value, or an object containing a list of property/value pairs\r\n     */\r\n    private _eventEnabled(event: string, viewerId?: string, details?: any): void {\r\n        const telemetryData: TelemetryData = {\r\n            viewerId,\r\n            event: event,\r\n            session: this.session,\r\n            date: new Date(),\r\n            now: window.performance ? window.performance.now() : Date.now(),\r\n            detail: null,\r\n        };\r\n\r\n        if (typeof details === \"object\") {\r\n            for (const attr in details) {\r\n                if (Object.prototype.hasOwnProperty.call(details, attr)) {\r\n                    (telemetryData as any)[attr] = details[attr];\r\n                }\r\n            }\r\n        } else if (details) {\r\n            telemetryData.detail = details;\r\n        }\r\n\r\n        this.onEventBroadcastedObservable.notifyObservers(telemetryData);\r\n    }\r\n\r\n    /**\r\n     * Returns the current session ID or creates one if it doesn't exist\r\n     * @returns The current session ID\r\n     */\r\n    public get session(): string {\r\n        if (!this._currentSessionId) {\r\n            //String + Timestamp + Random Integer\r\n            this._currentSessionId = \"SESSION_\" + Date.now() + Math.floor(Math.random() * 0x10000);\r\n        }\r\n        return this._currentSessionId;\r\n    }\r\n\r\n    /**\r\n     * Disposes the telemetry manager\r\n     */\r\n    public dispose() {\r\n        this.onEventBroadcastedObservable.clear();\r\n    }\r\n}\r\n\r\nexport const telemetryManager = new TelemetryManager();\r\n"]}
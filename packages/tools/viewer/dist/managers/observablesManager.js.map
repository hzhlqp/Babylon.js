{"version":3,"file":"observablesManager.js","sourceRoot":"","sources":["../../src/managers/observablesManager.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAOlD,MAAM,OAAO,kBAAkB;IA4D3B;QACI,IAAI,CAAC,qBAAqB,GAAG,IAAI,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QAC7D,IAAI,CAAC,sBAAsB,GAAG,IAAI,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QAC9D,IAAI,CAAC,uBAAuB,GAAG,IAAI,UAAU,EAAE,CAAC;QAChD,IAAI,CAAC,6BAA6B,GAAG,IAAI,UAAU,EAAE,CAAC;QACtD,IAAI,CAAC,0BAA0B,GAAG,IAAI,UAAU,EAAE,CAAC;QACnD,IAAI,CAAC,sBAAsB,GAAG,IAAI,UAAU,EAAE,CAAC;QAC/C,IAAI,CAAC,wBAAwB,GAAG,IAAI,UAAU,EAAE,CAAC;QACjD,IAAI,CAAC,0BAA0B,GAAG,IAAI,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QAClE,IAAI,CAAC,6BAA6B,GAAG,IAAI,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACrE,IAAI,CAAC,sBAAsB,GAAG,IAAI,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QAC9D,IAAI,CAAC,yBAAyB,GAAG,IAAI,UAAU,EAAE,CAAC;QAClD,IAAI,CAAC,sBAAsB,GAAG,IAAI,UAAU,EAAE,CAAC;QAC/C,IAAI,CAAC,qBAAqB,GAAG,IAAI,UAAU,EAAE,CAAC;IAClD,CAAC;IAED,OAAO;QACH,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,CAAC;QACnC,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,CAAC;QACpC,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,CAAC;QACrC,IAAI,CAAC,6BAA6B,CAAC,KAAK,EAAE,CAAC;QAC3C,IAAI,CAAC,0BAA0B,CAAC,KAAK,EAAE,CAAC;QACxC,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,CAAC;QACpC,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,CAAC;QACtC,IAAI,CAAC,0BAA0B,CAAC,KAAK,EAAE,CAAC;QACxC,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,CAAC;QACpC,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,CAAC;QACvC,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,CAAC;QACpC,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,CAAC;IACvC,CAAC;CACJ","sourcesContent":["import { Observable } from \"core/Misc/observable\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Engine } from \"core/Engines/engine\";\r\nimport type { ISceneLoaderProgressEvent, ISceneLoaderPlugin, ISceneLoaderPluginAsync } from \"core/Loading/sceneLoader\";\r\n\r\nimport type { ViewerModel } from \"../model/viewerModel\";\r\n\r\nexport class ObservablesManager {\r\n    /**\r\n     * Will notify when the scene was initialized\r\n     */\r\n    public onSceneInitObservable: Observable<Scene>;\r\n    /**\r\n     * will notify when the engine was initialized\r\n     */\r\n    public onEngineInitObservable: Observable<Engine>;\r\n\r\n    /**\r\n     * Will notify when a new model was added to the scene.\r\n     * Note that added does not necessarily mean loaded!\r\n     */\r\n    public onModelAddedObservable: Observable<ViewerModel>;\r\n    /**\r\n     * will notify after every model load\r\n     */\r\n    public onModelLoadedObservable: Observable<ViewerModel>;\r\n    /**\r\n     * will notify when any model notify of progress\r\n     */\r\n    public onModelLoadProgressObservable: Observable<ISceneLoaderProgressEvent>;\r\n    /**\r\n     * will notify when any model load failed.\r\n     */\r\n    public onModelLoadErrorObservable: Observable<{ message: string; exception: any }>;\r\n    /**\r\n     * Will notify when a model was removed from the scene;\r\n     */\r\n    public onModelRemovedObservable: Observable<ViewerModel>;\r\n    /**\r\n     * will notify when a new loader was initialized.\r\n     * Used mainly to know when a model starts loading.\r\n     */\r\n    public onLoaderInitObservable: Observable<ISceneLoaderPlugin | ISceneLoaderPluginAsync>;\r\n    /**\r\n     * Observers registered here will be executed when the entire load process has finished.\r\n     */\r\n    public onViewerInitDoneObservable: Observable<any>;\r\n\r\n    /**\r\n     * Will notify when the viewer init started (after configuration was loaded)\r\n     */\r\n    public onViewerInitStartedObservable: Observable<any>;\r\n\r\n    /**\r\n     * Functions added to this observable will be executed on each frame rendered.\r\n     */\r\n    public onFrameRenderedObservable: Observable<any>;\r\n\r\n    /**\r\n     * Will notify when VR mode is entered.\r\n     */\r\n    public onEnteringVRObservable: Observable<any>;\r\n    /**\r\n     * Will notify when VR mode is exited.\r\n     */\r\n    public onExitingVRObservable: Observable<any>;\r\n\r\n    constructor() {\r\n        this.onSceneInitObservable = new Observable(undefined, true);\r\n        this.onEngineInitObservable = new Observable(undefined, true);\r\n        this.onModelLoadedObservable = new Observable();\r\n        this.onModelLoadProgressObservable = new Observable();\r\n        this.onModelLoadErrorObservable = new Observable();\r\n        this.onModelAddedObservable = new Observable();\r\n        this.onModelRemovedObservable = new Observable();\r\n        this.onViewerInitDoneObservable = new Observable(undefined, true);\r\n        this.onViewerInitStartedObservable = new Observable(undefined, true);\r\n        this.onLoaderInitObservable = new Observable(undefined, true);\r\n        this.onFrameRenderedObservable = new Observable();\r\n        this.onEnteringVRObservable = new Observable();\r\n        this.onExitingVRObservable = new Observable();\r\n    }\r\n\r\n    dispose() {\r\n        this.onSceneInitObservable.clear();\r\n        this.onEngineInitObservable.clear();\r\n        this.onModelLoadedObservable.clear();\r\n        this.onModelLoadProgressObservable.clear();\r\n        this.onModelLoadErrorObservable.clear();\r\n        this.onModelAddedObservable.clear();\r\n        this.onModelRemovedObservable.clear();\r\n        this.onViewerInitDoneObservable.clear();\r\n        this.onLoaderInitObservable.clear();\r\n        this.onFrameRenderedObservable.clear();\r\n        this.onEnteringVRObservable.clear();\r\n        this.onExitingVRObservable.clear();\r\n    }\r\n}\r\n"]}
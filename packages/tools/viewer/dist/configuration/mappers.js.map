{"version":3,"file":"mappers.js","sourceRoot":"","sources":["../../src/configuration/mappers.ts"],"names":[],"mappings":"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","sourcesContent":["import { Tools } from \"core/Misc/tools\";\r\nimport type { ViewerConfiguration } from \"./configuration\";\r\n\r\n// eslint-disable-next-line import/no-internal-modules\r\nimport { kebabToCamel } from \"../helper/index\";\r\n\r\n/**\r\n * This is the mapper's interface. Implement this function to create your own mapper and register it at the mapper manager\r\n */\r\nexport interface IMapper {\r\n    map(rawSource: any): ViewerConfiguration;\r\n}\r\n\r\n/**\r\n * This is a simple HTML mapper.\r\n * This mapper parses a single HTML element and returns the configuration from its attributes.\r\n * it parses numbers and boolean values to the corresponding variable types.\r\n * The following HTML element:\r\n *  <div test=\"1\" random-flag=\"true\" a.string.object=\"test\"> will result in the following configuration:\r\n *\r\n *  {\r\n *      test: 1, //a number!\r\n *      randomFlag: boolean, //camelCase and boolean\r\n *      a: {\r\n *          string: {\r\n *              object: \"test\" //dot-separated object levels\r\n *          }\r\n *      }\r\n *  }\r\n */\r\nclass HTMLMapper implements IMapper {\r\n    /**\r\n     * Map a specific element and get configuration from it\r\n     * @param element the HTML element to analyze.\r\n     * @returns a ViewerConfiguration object from the provided HTML Element\r\n     */\r\n    map(element: HTMLElement): ViewerConfiguration {\r\n        const config = {};\r\n        for (let attrIdx = 0; attrIdx < element.attributes.length; ++attrIdx) {\r\n            const attr = element.attributes.item(attrIdx);\r\n            if (!attr) {\r\n                continue;\r\n            }\r\n            // map \"object.property\" to the right configuration place.\r\n            const split = attr.nodeName.split(\".\");\r\n            split.reduce((currentConfig: { [key: string]: any }, key, idx) => {\r\n                //convert html-style to json-style\r\n                const camelKey = kebabToCamel(key);\r\n                if (idx === split.length - 1) {\r\n                    let val: any = attr!.nodeValue; // firefox warns nodeValue is deprecated, but I found no sign of it anywhere.\r\n                    if (val === \"true\") {\r\n                        val = true;\r\n                    } else if (val === \"false\") {\r\n                        val = false;\r\n                    } else if (val === \"undefined\") {\r\n                        val = undefined;\r\n                    } else if (val === \"null\") {\r\n                        val = null;\r\n                    } else {\r\n                        const isnum = !isNaN(parseFloat(val)) && isFinite(val); ///^\\d+$/.test(val);\r\n                        if (isnum) {\r\n                            const number = parseFloat(val);\r\n                            if (!isNaN(number)) {\r\n                                val = number;\r\n                            }\r\n                        }\r\n                    }\r\n                    currentConfig[camelKey] = val;\r\n                } else {\r\n                    currentConfig[camelKey] = currentConfig[camelKey] || {};\r\n                }\r\n                return currentConfig[camelKey];\r\n            }, config);\r\n        }\r\n\r\n        return config;\r\n    }\r\n}\r\n\r\n/**\r\n * A simple string-to-JSON mapper.\r\n * This is the main mapper, used to analyze downloaded JSON-Configuration or JSON payload\r\n */\r\nclass JSONMapper implements IMapper {\r\n    map(rawSource: string) {\r\n        return JSON.parse(rawSource);\r\n    }\r\n}\r\n\r\n/**\r\n * The DOM Mapper will traverse an entire DOM Tree and will load the configuration from the\r\n * DOM elements and attributes.\r\n */\r\nclass DOMMapper implements IMapper {\r\n    /**\r\n     * The mapping function that will convert HTML data to a viewer configuration object\r\n     * @param baseElement the baseElement from which to start traversing\r\n     * @returns a ViewerConfiguration object from the provided HTML Element\r\n     */\r\n    map(baseElement: HTMLElement): ViewerConfiguration {\r\n        const htmlMapper = new HTMLMapper();\r\n        const config = htmlMapper.map(baseElement);\r\n\r\n        const traverseChildren = function (element: HTMLElement, partConfig: any) {\r\n            const children = element.children;\r\n            if (children.length) {\r\n                for (let i = 0; i < children.length; ++i) {\r\n                    const item = <HTMLElement>children.item(i);\r\n                    // use the HTML Mapper to read configuration from a single element\r\n                    const configMapped = htmlMapper.map(item);\r\n                    const key = kebabToCamel(item.nodeName.toLowerCase());\r\n                    if (item.attributes.getNamedItem(\"array\") && item.attributes.getNamedItem(\"array\")!.nodeValue === \"true\") {\r\n                        partConfig[key] = [];\r\n                    } else {\r\n                        if (element.attributes.getNamedItem(\"array\") && element.attributes.getNamedItem(\"array\")!.nodeValue === \"true\") {\r\n                            partConfig.push(configMapped);\r\n                        } else if (partConfig[key]) {\r\n                            //exists already! probably an array\r\n                            element.setAttribute(\"array\", \"true\");\r\n                            const oldItem = partConfig[key];\r\n                            partConfig = [oldItem, configMapped];\r\n                        } else {\r\n                            partConfig[key] = configMapped;\r\n                        }\r\n                    }\r\n                    traverseChildren(item, partConfig[key] || configMapped);\r\n                }\r\n            }\r\n            return partConfig;\r\n        };\r\n\r\n        traverseChildren(baseElement, config);\r\n\r\n        return config;\r\n    }\r\n}\r\n\r\n/**\r\n * The MapperManager manages the different implemented mappers.\r\n * It allows the user to register new mappers as well and use them to parse their own configuration data\r\n */\r\nexport class MapperManager {\r\n    private _mappers: { [key: string]: IMapper };\r\n    /**\r\n     * The default mapper is the JSON mapper.\r\n     */\r\n    public static DefaultMapper = \"json\";\r\n\r\n    constructor() {\r\n        this._mappers = {\r\n            html: new HTMLMapper(),\r\n            json: new JSONMapper(),\r\n            dom: new DOMMapper(),\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Get a specific configuration mapper.\r\n     *\r\n     * @param type the name of the mapper to load\r\n     * @returns the mapper\r\n     */\r\n    public getMapper(type: string) {\r\n        if (!this._mappers[type]) {\r\n            Tools.Error(\"No mapper defined for \" + type);\r\n        }\r\n        return this._mappers[type];\r\n    }\r\n\r\n    /**\r\n     * Use this function to register your own configuration mapper.\r\n     * After a mapper is registered, it can be used to parse the specific type fo configuration to the standard ViewerConfiguration.\r\n     * @param type the name of the mapper. This will be used to define the configuration type and/or to get the mapper\r\n     * @param mapper The implemented mapper\r\n     */\r\n    public registerMapper(type: string, mapper: IMapper) {\r\n        this._mappers[type] = mapper;\r\n    }\r\n\r\n    /**\r\n     * Dispose the mapper manager and all of its mappers.\r\n     */\r\n    public dispose() {\r\n        this._mappers = {};\r\n    }\r\n}\r\n\r\n/**\r\n * mapperManager is a singleton of the type MapperManager.\r\n * The mapperManager can be disposed directly with calling mapperManager.dispose()\r\n * or indirectly with using BabylonViewer.disposeAll()\r\n */\r\nexport const mapperManager = new MapperManager();\r\n"]}
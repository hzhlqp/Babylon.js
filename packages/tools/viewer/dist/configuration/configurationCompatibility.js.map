{"version":3,"file":"configurationCompatibility.js","sourceRoot":"","sources":["../../src/configuration/configurationCompatibility.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,mBAAmB,EAAE,MAAM,iBAAiB,CAAC;AACtD;;;;;GAKG;AACH,MAAM,UAAU,iCAAiC,CAAC,aAAkC;IAChF,IAAI,aAAa,CAAC,MAAM,EAAE;QACtB,+CAA+C;QAC/C,IAAI,aAAa,CAAC,MAAM,CAAC,QAAQ,KAAK,SAAS,EAAE;YAC7C,cAAc,CAAC,aAAa,EAAE,6CAA6C,EAAE,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;SAC/G;QAED,+CAA+C;QAC/C,IAAI,aAAa,CAAC,MAAM,CAAC,QAAQ,KAAK,SAAS,EAAE;YAC7C,cAAc,CAAC,aAAa,EAAE,6CAA6C,EAAE,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;SAC/G;KACJ;IAED,IAAI,aAAa,CAAC,KAAK,EAAE;QACrB,MAAM;QACN,IAAI,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE;YAC1B,cAAc,CAAC,aAAa,EAAE,gDAAgD,EAAE,IAAI,CAAC,CAAC;YACtF,MAAM,iBAAiB,GAAG,mBAAmB,CAAC,8CAA8C,EAAE,aAAa,CAAC,CAAC;YAC7G,IAAI,iBAAiB,KAAK,KAAK,EAAE;gBAC7B,cAAc,CAAC,aAAa,EAAE,8CAA8C,EAAE,IAAI,CAAC,CAAC;aACvF;SACJ;QAED,IAAI,aAAa,CAAC,KAAK,CAAC,SAAS,EAAE;YAC/B,cAAc,CAAC,aAAa,EAAE,0BAA0B,EAAE,aAAa,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;SAClG;KACJ;IAED,IAAI,aAAa,CAAC,KAAK,IAAI,OAAO,aAAa,CAAC,KAAK,KAAK,QAAQ,EAAE;QAChE,6BAA6B;QAC7B,IAAU,aAAa,CAAC,KAAM,CAAC,WAAW,KAAK,SAAS,IAAI,aAAa,CAAC,KAAK,CAAC,UAAU,KAAK,SAAS,EAAE;YACtG,aAAa,CAAC,KAAK,CAAC,UAAU,GAAS,aAAa,CAAC,KAAM,CAAC,WAAW,CAAC;SAC3E;KACJ;IAED,IAAI,aAAa,CAAC,GAAG,EAAE;QACnB,IAAI,aAAa,CAAC,GAAG,CAAC,aAAa,EAAE;YACjC,cAAc,CAAC,aAAa,EAAE,qBAAqB,EAAE,aAAa,CAAC,GAAG,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;SAC/F;QACD,IAAI,aAAa,CAAC,GAAG,CAAC,cAAc,EAAE;YAClC,cAAc,CAAC,aAAa,EAAE,gBAAgB,EAAE,aAAa,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;SAC3F;KACJ;AACL,CAAC;AAED,SAAS,cAAc,CAAC,MAAW,EAAE,IAAY,EAAE,KAAU,EAAE,eAAyB;IACpF,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACjC,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;QACvB,OAAO;KACV;IACD,MAAM,OAAO,GAAG,QAAQ,CAAC,GAAG,EAAE,CAAC;IAC/B,IAAI,CAAC,OAAO,EAAE;QACV,OAAO;KACV;IACD,IAAI,MAAM,GAAG,MAAM,CAAC;IACpB,QAAQ,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;QACrB,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;QAChC,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC;IACH,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,SAAS,IAAI,CAAC,eAAe,EAAE;QACnD,OAAO;KACV;IACD,MAAM,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;AAC5B,CAAC","sourcesContent":["import type { ViewerConfiguration } from \"./configuration\";\r\nimport { getConfigurationKey } from \"./configuration\";\r\n/**\r\n * This function will make sure the configuration file is taking deprecated fields into account\r\n * and is setting them to the correct keys and values.\r\n *\r\n * @param configuration The configuration to process. Mutable!\r\n */\r\nexport function processConfigurationCompatibility(configuration: ViewerConfiguration) {\r\n    if (configuration.camera) {\r\n        // camera contrast -> image processing contrast\r\n        if (configuration.camera.contrast !== undefined) {\r\n            setKeyInObject(configuration, \"scene.imageProcessingConfiguration.contrast\", configuration.camera.contrast);\r\n        }\r\n\r\n        // camera exposure -> image processing exposure\r\n        if (configuration.camera.exposure !== undefined) {\r\n            setKeyInObject(configuration, \"scene.imageProcessingConfiguration.exposure\", configuration.camera.exposure);\r\n        }\r\n    }\r\n\r\n    if (configuration.scene) {\r\n        //glow\r\n        if (configuration.scene.glow) {\r\n            setKeyInObject(configuration, \"lab.defaultRenderingPipelines.glowLayerEnabled\", true);\r\n            const enabledProcessing = getConfigurationKey(\"scene.imageProcessingConfiguration.isEnabled\", configuration);\r\n            if (enabledProcessing !== false) {\r\n                setKeyInObject(configuration, \"scene.imageProcessingConfiguration.isEnabled\", true);\r\n            }\r\n        }\r\n\r\n        if (configuration.scene.mainColor) {\r\n            setKeyInObject(configuration, \"environmentMap.mainColor\", configuration.scene.mainColor, true);\r\n        }\r\n    }\r\n\r\n    if (configuration.model && typeof configuration.model === \"object\") {\r\n        // castShadows === castShadow\r\n        if ((<any>configuration.model).castShadows !== undefined && configuration.model.castShadow === undefined) {\r\n            configuration.model.castShadow = (<any>configuration.model).castShadows;\r\n        }\r\n    }\r\n\r\n    if (configuration.lab) {\r\n        if (configuration.lab.assetsRootURL) {\r\n            setKeyInObject(configuration, \"scene.assetsRootURL\", configuration.lab.assetsRootURL, true);\r\n        }\r\n        if (configuration.lab.environmentMap) {\r\n            setKeyInObject(configuration, \"environmentMap\", configuration.lab.environmentMap, true);\r\n        }\r\n    }\r\n}\r\n\r\nfunction setKeyInObject(object: any, keys: string, value: any, shouldOverwrite?: boolean) {\r\n    const keySplit = keys.split(\".\");\r\n    if (keySplit.length === 0) {\r\n        return;\r\n    }\r\n    const lastKey = keySplit.pop();\r\n    if (!lastKey) {\r\n        return;\r\n    }\r\n    let curObj = object;\r\n    keySplit.forEach((key) => {\r\n        curObj[key] = curObj[key] || {};\r\n        curObj = curObj[key];\r\n    });\r\n    if (curObj[lastKey] !== undefined && !shouldOverwrite) {\r\n        return;\r\n    }\r\n    curObj[lastKey] = value;\r\n}\r\n"]}
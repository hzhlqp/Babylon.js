{"version":3,"file":"configuration.js","sourceRoot":"","sources":["../../src/configuration/configuration.ts"],"names":[],"mappings":"AAeA,MAAM,UAAU,mBAAmB,CAAC,GAAW,EAAE,YAAiB;IAC9D,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAE9B,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,YAAY,EAAE;QACtC,OAAO;KACV;SAAM,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;QAC5B,IAAI,YAAY,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;YACjC,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC;SAC5B;KACJ;SAAM;QACH,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;QAChC,OAAO,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,QAAS,CAAC,CAAC,CAAC;KACzE;AACL,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { IEnvironmentMapConfiguration } from \"./interfaces/environmentMapConfiguration\";\r\nimport type { EngineOptions } from \"core/Engines/thinEngine\";\r\nimport type { IObserversConfiguration } from \"./interfaces/observersConfiguration\";\r\nimport type { IModelConfiguration } from \"./interfaces/modelConfiguration\";\r\nimport type { ISceneConfiguration } from \"./interfaces/sceneConfiguration\";\r\nimport type { ISceneOptimizerConfiguration } from \"./interfaces/sceneOptimizerConfiguration\";\r\nimport type { ICameraConfiguration } from \"./interfaces/cameraConfiguration\";\r\nimport type { ISkyboxConfiguration } from \"./interfaces/skyboxConfiguration\";\r\nimport type { IGroundConfiguration } from \"./interfaces/groundConfiguration\";\r\nimport type { ILightConfiguration } from \"./interfaces/lightConfiguration\";\r\nimport type { ITemplateConfiguration } from \"./interfaces/templateConfiguration\";\r\nimport type { IVRConfiguration } from \"./interfaces/vrConfiguration\";\r\nimport type { IDefaultRenderingPipelineConfiguration } from \"./interfaces/defaultRenderingPipelineConfiguration\";\r\n\r\nexport function getConfigurationKey(key: string, configObject: any): any {\r\n    const splits = key.split(\".\");\r\n\r\n    if (splits.length === 0 || !configObject) {\r\n        return;\r\n    } else if (splits.length === 1) {\r\n        if (configObject[key] !== undefined) {\r\n            return configObject[key];\r\n        }\r\n    } else {\r\n        const firstKey = splits.shift();\r\n        return getConfigurationKey(splits.join(\".\"), configObject[firstKey!]);\r\n    }\r\n}\r\n\r\nexport interface ViewerConfiguration {\r\n    // configuration version\r\n    version?: string;\r\n    extends?: string; // is this configuration extending an existing configuration?\r\n\r\n    pageUrl?: string; // will be used for sharing and other fun stuff. This is the page showing the model (not the model's url!)\r\n\r\n    configuration?:\r\n        | string\r\n        | {\r\n              url?: string;\r\n              payload?: any;\r\n              mapper?: string; // json (default), html, yaml, xml, etc'. if not provided, file extension will be used.\r\n          };\r\n\r\n    // names of functions in the window context.\r\n    observers?: IObserversConfiguration;\r\n\r\n    canvasElement?: string; // if there is a need to override the standard implementation - ID of HTMLCanvasElement\r\n\r\n    model?: IModelConfiguration | string;\r\n\r\n    scene?: ISceneConfiguration;\r\n    optimizer?: ISceneOptimizerConfiguration | boolean;\r\n    // at the moment, support only a single camera.\r\n    camera?: ICameraConfiguration;\r\n    skybox?: boolean | ISkyboxConfiguration;\r\n\r\n    ground?: boolean | IGroundConfiguration;\r\n    lights?: {\r\n        //globalRotation: number,\r\n        [name: string]: number | boolean | ILightConfiguration;\r\n    };\r\n    // engine configuration. optional!\r\n    engine?: {\r\n        renderInBackground?: boolean;\r\n        antialiasing?: boolean;\r\n        disableResize?: boolean;\r\n        engineOptions?: EngineOptions;\r\n        adaptiveQuality?: boolean;\r\n        hdEnabled?: boolean;\r\n    };\r\n    //templateStructure?: ITemplateStructure,\r\n    templates?: {\r\n        main: ITemplateConfiguration;\r\n        [key: string]: ITemplateConfiguration;\r\n    };\r\n\r\n    customShaders?: {\r\n        shaders?: {\r\n            [key: string]: string;\r\n        };\r\n        includes?: {\r\n            [key: string]: string;\r\n        };\r\n    };\r\n\r\n    loaderPlugins?: {\r\n        extendedMaterial?: boolean;\r\n        msftLod?: boolean;\r\n        telemetry?: boolean;\r\n        minecraft?: boolean;\r\n\r\n        [propName: string]: boolean | undefined;\r\n    };\r\n\r\n    environmentMap?: IEnvironmentMapConfiguration;\r\n\r\n    vr?: IVRConfiguration;\r\n    \"3dCommerceCertified\"?: boolean;\r\n\r\n    // features that are being tested.\r\n    // those features' syntax will change and move out!\r\n    // Don't use in production (or be ready to make the changes :) )\r\n    lab?: {\r\n        flashlight?:\r\n            | boolean\r\n            | {\r\n                  exponent?: number;\r\n                  angle?: number;\r\n                  intensity?: number;\r\n                  diffuse?: { r: number; g: number; b: number };\r\n                  specular?: { r: number; g: number; b: number };\r\n              };\r\n        hideLoadingDelay?: number;\r\n        /** @deprecated */\r\n        assetsRootURL?: string;\r\n        environmentMainColor?: { r: number; g: number; b: number };\r\n        /** @deprecated */\r\n        environmentMap?: {\r\n            /**\r\n             * Environment map texture path in relative to the asset folder.\r\n             */\r\n            texture: string;\r\n\r\n            /**\r\n             * Default rotation to apply to the environment map.\r\n             */\r\n            rotationY: number;\r\n\r\n            /**\r\n             * Tint level of the main color on the environment map.\r\n             */\r\n            tintLevel: number;\r\n        };\r\n        defaultRenderingPipelines?: boolean | IDefaultRenderingPipelineConfiguration;\r\n        globalLightRotation?: number;\r\n    };\r\n}\r\n"]}
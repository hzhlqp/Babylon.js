{"version":3,"file":"templateConfiguration.js","sourceRoot":"","sources":["../../../src/configuration/interfaces/templateConfiguration.ts"],"names":[],"mappings":"","sourcesContent":["/**\r\n * A single template configuration object\r\n */\r\nexport interface ITemplateConfiguration {\r\n    /**\r\n     * can be either the id of the template's html element or a URL.\r\n     * See - https://doc.babylonjs.com/features/featuresDeepDive/babylonViewer/viewerTemplatingSystem#location-vs-html\r\n     */\r\n    location?: string; // #template-id OR http://example.com/loading.html\r\n    /**\r\n     * If no location is provided you can provide here the raw html of this template.\r\n     * See https://doc.babylonjs.com/features/featuresDeepDive/babylonViewer/viewerTemplatingSystem#location-vs-html\r\n     */\r\n    html?: string; // raw html string\r\n    id?: string;\r\n    /**\r\n     * Parameters that will be delivered to the template and will render it accordingly.\r\n     */\r\n    params?: { [key: string]: string | number | boolean | object };\r\n    /**\r\n     * Events to attach to this template.\r\n     * event name is the key. the value can either be a boolean (attach to the parent element)\r\n     * or a map of html id elements.\r\n     *\r\n     * See - https://doc.babylonjs.com/features/featuresDeepDive/babylonViewer/viewerTemplatingSystem#event-binding\r\n     */\r\n    events?: {\r\n        // pointer events\r\n        pointerdown?: boolean | { [id: string]: boolean };\r\n        pointerup?: boolean | { [id: string]: boolean };\r\n        pointermove?: boolean | { [id: string]: boolean };\r\n        pointerover?: boolean | { [id: string]: boolean };\r\n        pointerout?: boolean | { [id: string]: boolean };\r\n        pointerenter?: boolean | { [id: string]: boolean };\r\n        pointerleave?: boolean | { [id: string]: boolean };\r\n        pointercancel?: boolean | { [id: string]: boolean };\r\n        //click, just in case\r\n        click?: boolean | { [id: string]: boolean };\r\n        // drag and drop\r\n        dragstart?: boolean | { [id: string]: boolean };\r\n        drop?: boolean | { [id: string]: boolean };\r\n\r\n        [key: string]: boolean | { [id: string]: boolean } | undefined;\r\n    };\r\n}\r\n"]}
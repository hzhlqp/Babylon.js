{"version":3,"file":"renderOnlyLoader.js","sourceRoot":"","sources":["../../src/configuration/renderOnlyLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import { mapperManager } from \"./mappers\";\r\nimport type { ViewerConfiguration } from \"./configuration\";\r\nimport { processConfigurationCompatibility } from \"./configurationCompatibility\";\r\n\r\n// eslint-disable-next-line import/no-internal-modules\r\nimport { deepmerge } from \"../helper/index\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { extendedConfiguration } from \"./types/extended\";\r\nimport { renderOnlyDefaultConfiguration } from \"./types/renderOnlyDefault\";\r\nimport type { IFileRequest } from \"core/Misc/fileRequest\";\r\n\r\n/**\r\n * The configuration loader will load the configuration object from any source and will use the defined mapper to\r\n * parse the object and return a conform ViewerConfiguration.\r\n * It is a private member of the scene.\r\n */\r\nexport class RenderOnlyConfigurationLoader {\r\n    private _configurationCache: { [url: string]: any };\r\n\r\n    private _loadRequests: Array<IFileRequest>;\r\n\r\n    constructor(private _enableCache: boolean = false) {\r\n        this._configurationCache = {};\r\n        this._loadRequests = [];\r\n    }\r\n\r\n    private _getConfigurationTypeExcludeTemplate(types: string): ViewerConfiguration {\r\n        let config: ViewerConfiguration = {};\r\n        const typesSeparated = types.split(\",\");\r\n        typesSeparated.forEach((type) => {\r\n            switch (type.trim()) {\r\n                case \"default\":\r\n                    config = deepmerge(config, renderOnlyDefaultConfiguration);\r\n                    break;\r\n                case \"none\":\r\n                    break;\r\n                case \"extended\":\r\n                default:\r\n                    config = deepmerge(config, extendedConfiguration);\r\n                    break;\r\n            }\r\n            if (config.extends) {\r\n                config = deepmerge(config, this._getConfigurationTypeExcludeTemplate(config.extends));\r\n            }\r\n        });\r\n        return config;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected getExtendedConfig(type: string | undefined) {\r\n        return this._getConfigurationTypeExcludeTemplate(type || \"extended\");\r\n    }\r\n\r\n    /**\r\n     * load a configuration object that is defined in the initial configuration provided.\r\n     * The viewer configuration can extend different types of configuration objects and have an extra configuration defined.\r\n     *\r\n     * @param initConfig the initial configuration that has the definitions of further configuration to load.\r\n     * @param callback an optional callback that will be called sync, if noconfiguration needs to be loaded or configuration is payload-only\r\n     * @returns A promise that delivers the extended viewer configuration, when done.\r\n     */\r\n    public loadConfiguration(initConfig: ViewerConfiguration = {}, callback?: (config: ViewerConfiguration) => void): Promise<ViewerConfiguration> {\r\n        let loadedConfig: ViewerConfiguration = deepmerge({}, initConfig);\r\n        this._processInitialConfiguration(loadedConfig);\r\n\r\n        const extendedConfiguration = this.getExtendedConfig(loadedConfig.extends);\r\n\r\n        if (loadedConfig.configuration) {\r\n            let mapperType = \"json\";\r\n            return Promise.resolve()\r\n                .then(() => {\r\n                    if (typeof loadedConfig.configuration === \"string\" || (loadedConfig.configuration && loadedConfig.configuration.url)) {\r\n                        // a file to load\r\n\r\n                        let url: string = \"\";\r\n                        if (typeof loadedConfig.configuration === \"string\") {\r\n                            url = loadedConfig.configuration;\r\n                        }\r\n\r\n                        // if configuration is an object\r\n                        if (typeof loadedConfig.configuration === \"object\" && loadedConfig.configuration.url) {\r\n                            url = loadedConfig.configuration.url;\r\n                            let type = loadedConfig.configuration.mapper;\r\n                            // empty string?\r\n                            if (!type) {\r\n                                // load mapper type from filename / url\r\n                                type = loadedConfig.configuration.url.split(\".\").pop();\r\n                            }\r\n                            mapperType = type || mapperType;\r\n                        }\r\n                        return this._loadFile(url);\r\n                    } else {\r\n                        if (typeof loadedConfig.configuration === \"object\") {\r\n                            mapperType = loadedConfig.configuration.mapper || mapperType;\r\n                            return loadedConfig.configuration.payload || {};\r\n                        }\r\n                        return {};\r\n                    }\r\n                })\r\n                .then((data: any) => {\r\n                    const mapper = mapperManager.getMapper(mapperType);\r\n                    const parsed = deepmerge(mapper.map(data), loadedConfig);\r\n                    const merged = deepmerge(extendedConfiguration, parsed);\r\n                    processConfigurationCompatibility(merged);\r\n                    if (callback) {\r\n                        callback(merged);\r\n                    }\r\n                    return merged;\r\n                });\r\n        } else {\r\n            loadedConfig = deepmerge(extendedConfiguration, loadedConfig);\r\n            processConfigurationCompatibility(loadedConfig);\r\n            if (callback) {\r\n                callback(loadedConfig);\r\n            }\r\n            return Promise.resolve(loadedConfig);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose the configuration loader. This will cancel file requests, if active.\r\n     */\r\n    public dispose() {\r\n        this._loadRequests.forEach((request) => {\r\n            request.abort();\r\n        });\r\n        this._loadRequests.length = 0;\r\n    }\r\n\r\n    /**\r\n     * This function will process the initial configuration and make needed changes for the viewer to work.\r\n     * @param config the mutable(!) initial configuration to process\r\n     */\r\n    private _processInitialConfiguration(config: ViewerConfiguration) {\r\n        if (config.model) {\r\n            if (typeof config.model === \"string\") {\r\n                config.model = {\r\n                    url: config.model,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    private _loadFile(url: string): Promise<any> {\r\n        const cacheReference = this._configurationCache;\r\n        if (this._enableCache && cacheReference[url]) {\r\n            return Promise.resolve(cacheReference[url]);\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const fileRequest = Tools.LoadFile(\r\n                url,\r\n                (result) => {\r\n                    const idx = this._loadRequests.indexOf(fileRequest);\r\n                    if (idx !== -1) {\r\n                        this._loadRequests.splice(idx, 1);\r\n                    }\r\n                    if (this._enableCache) {\r\n                        cacheReference[url] = result;\r\n                    }\r\n                    resolve(result);\r\n                },\r\n                undefined,\r\n                undefined,\r\n                false,\r\n                (request, error: any) => {\r\n                    const idx = this._loadRequests.indexOf(fileRequest);\r\n                    if (idx !== -1) {\r\n                        this._loadRequests.splice(idx, 1);\r\n                    }\r\n                    reject(error);\r\n                }\r\n            );\r\n            this._loadRequests.push(fileRequest);\r\n        });\r\n    }\r\n}\r\n"]}
{"version":3,"file":"modelLoader.js","sourceRoot":"","sources":["../../src/loader/modelLoader.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable import/no-internal-modules */\r\nimport type { GLTFFileLoader } from \"loaders/glTF/glTFFileLoader\";\r\nimport { GLTFLoaderAnimationStartMode } from \"loaders/glTF/glTFFileLoader\";\r\nimport type { ISceneLoaderPlugin, ISceneLoaderPluginAsync } from \"core/Loading/sceneLoader\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { Tags } from \"core/Misc/tags\";\r\nimport \"core/Misc/observable.extensions\";\r\nimport type { ConfigurationContainer } from \"../configuration/configurationContainer\";\r\nimport type { IModelConfiguration } from \"../configuration/interfaces/modelConfiguration\";\r\nimport type { ObservablesManager } from \"../managers/observablesManager\";\r\nimport { ModelState, ViewerModel } from \"../model/viewerModel\";\r\nimport type { ILoaderPlugin } from \"./plugins/index\";\r\nimport { getLoaderPluginByName } from \"./plugins/index\";\r\nimport \"loaders/glTF/index\";\r\nimport \"core/Loading/Plugins/babylonFileLoader\";\r\n\r\n/**\r\n * An instance of the class is in charge of loading the model correctly.\r\n * This class will continuously be expended with tasks required from the specific loaders Babylon has.\r\n *\r\n * A Model loader is unique per (Abstract)Viewer. It is being generated by the viewer\r\n */\r\nexport class ModelLoader {\r\n    private _loadId: number;\r\n    private _disposed = false;\r\n\r\n    private _loaders: Array<ISceneLoaderPlugin | ISceneLoaderPluginAsync>;\r\n\r\n    private _plugins: Array<ILoaderPlugin>;\r\n\r\n    private _baseUrl: string;\r\n\r\n    /**\r\n     * @returns the base url of the model loader\r\n     */\r\n    public get baseUrl(): string {\r\n        return this._baseUrl;\r\n    }\r\n\r\n    /**\r\n     * Create a new Model loader\r\n     * @param _observablesManager\r\n     * @param _configurationContainer\r\n     */\r\n    constructor(\r\n        private _observablesManager: ObservablesManager,\r\n        private _configurationContainer?: ConfigurationContainer\r\n    ) {\r\n        this._loaders = [];\r\n        this._loadId = 0;\r\n        this._plugins = [];\r\n    }\r\n\r\n    /**\r\n     * Adds a new plugin to the loader process.\r\n     *\r\n     * @param plugin the plugin name or the plugin itself\r\n     */\r\n    public addPlugin(plugin: ILoaderPlugin | string) {\r\n        let actualPlugin: ILoaderPlugin = {};\r\n        if (typeof plugin === \"string\") {\r\n            const loadedPlugin = getLoaderPluginByName(plugin);\r\n            if (loadedPlugin) {\r\n                actualPlugin = loadedPlugin;\r\n            }\r\n        } else {\r\n            actualPlugin = plugin;\r\n        }\r\n        if (actualPlugin && this._plugins.indexOf(actualPlugin) === -1) {\r\n            this._plugins.push(actualPlugin);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Load a model using predefined configuration\r\n     * @param modelConfiguration the modelConfiguration to use to load the model\r\n     * @returns the loaded model\r\n     */\r\n    public load(modelConfiguration: IModelConfiguration): ViewerModel {\r\n        const model = new ViewerModel(this._observablesManager, modelConfiguration, this._configurationContainer);\r\n\r\n        model.loadId = this._loadId++;\r\n\r\n        let filename: any;\r\n        if (modelConfiguration.file) {\r\n            this._baseUrl = \"file:\";\r\n            filename = modelConfiguration.file;\r\n        } else if (modelConfiguration.url) {\r\n            filename = Tools.GetFilename(modelConfiguration.url) || modelConfiguration.url;\r\n            this._baseUrl = modelConfiguration.root || Tools.GetFolderPath(modelConfiguration.url);\r\n        }\r\n\r\n        if (!filename || !this._baseUrl) {\r\n            model.state = ModelState.ERROR;\r\n            Tools.Error(\"No URL provided\");\r\n            return model;\r\n        }\r\n\r\n        const plugin = modelConfiguration.loader;\r\n\r\n        const scene = model.rootMesh.getScene();\r\n\r\n        model.loader = SceneLoader.ImportMesh(\r\n            undefined,\r\n            this._baseUrl,\r\n            filename,\r\n            scene,\r\n            (meshes, particleSystems, skeletons, animationGroups) => {\r\n                meshes.forEach((mesh) => {\r\n                    Tags.AddTagsTo(mesh, \"viewerMesh\");\r\n                    model.addMesh(mesh);\r\n                });\r\n                model.particleSystems = particleSystems;\r\n                model.skeletons = skeletons;\r\n\r\n                for (const animationGroup of animationGroups) {\r\n                    model.addAnimationGroup(animationGroup);\r\n                }\r\n\r\n                this._checkAndRun(\"onLoaded\", model);\r\n                scene.executeWhenReady(() => {\r\n                    model.onLoadedObservable.notifyObservers(model);\r\n                });\r\n            },\r\n            (progressEvent) => {\r\n                this._checkAndRun(\"onProgress\", progressEvent);\r\n                model.onLoadProgressObservable.notifyObserversWithPromise(progressEvent);\r\n            },\r\n            (scene, m, exception) => {\r\n                model.state = ModelState.ERROR;\r\n                Tools.Error(\"Load Error: There was an error loading the model. \" + m);\r\n                this._checkAndRun(\"onError\", m, exception);\r\n                model.onLoadErrorObservable.notifyObserversWithPromise({ message: m, exception: exception });\r\n            },\r\n            plugin\r\n        )!;\r\n\r\n        if (model.loader.name === \"gltf\") {\r\n            const gltfLoader = <GLTFFileLoader>model.loader;\r\n            gltfLoader.animationStartMode = GLTFLoaderAnimationStartMode.NONE;\r\n            gltfLoader.compileMaterials = true;\r\n\r\n            if (!modelConfiguration.file) {\r\n                gltfLoader.rewriteRootURL = (rootURL, responseURL) => {\r\n                    return modelConfiguration.root || Tools.GetFolderPath(responseURL || modelConfiguration.url || \"\");\r\n                };\r\n            }\r\n            // if ground is set to \"mirror\":\r\n            if (\r\n                this._configurationContainer &&\r\n                this._configurationContainer.configuration &&\r\n                this._configurationContainer.configuration.ground &&\r\n                typeof this._configurationContainer.configuration.ground === \"object\" &&\r\n                this._configurationContainer.configuration.ground.mirror\r\n            ) {\r\n                gltfLoader.useClipPlane = true;\r\n            }\r\n            Object.keys(gltfLoader)\r\n                .filter((name) => name.indexOf(\"on\") === 0 && name.indexOf(\"Observable\") !== -1)\r\n                .forEach((functionName) => {\r\n                    (gltfLoader as any)[functionName].add((payload: any[]) => {\r\n                        this._checkAndRun(functionName.replace(\"Observable\", \"\"), payload);\r\n                    });\r\n                });\r\n\r\n            gltfLoader.onParsedObservable.add((data) => {\r\n                if (data && data.json && (data.json as any)[\"asset\"]) {\r\n                    model.loadInfo = (data.json as any)[\"asset\"];\r\n                }\r\n            });\r\n\r\n            gltfLoader.onCompleteObservable.add(() => {\r\n                model.loaderDone = true;\r\n            });\r\n        } else {\r\n            model.loaderDone = true;\r\n        }\r\n\r\n        this._checkAndRun(\"onInit\", model.loader, model);\r\n\r\n        this._loaders.push(model.loader);\r\n\r\n        return model;\r\n    }\r\n\r\n    /**\r\n     * Cancel the loading of a model.\r\n     * @param model the model to cancel the loading of\r\n     */\r\n    public cancelLoad(model: ViewerModel) {\r\n        const loader = model.loader || this._loaders[model.loadId];\r\n        // ATM only available in the GLTF Loader\r\n        if (loader && loader.name === \"gltf\") {\r\n            const gltfLoader = <GLTFFileLoader>loader;\r\n            gltfLoader.dispose();\r\n            model.state = ModelState.CANCELED;\r\n        } else {\r\n            Tools.Warn(\"This type of loader cannot cancel the request\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * dispose the model loader.\r\n     * If loaders are registered and are in the middle of loading, they will be disposed and the request(s) will be cancelled.\r\n     */\r\n    public dispose() {\r\n        this._loaders.forEach((loader) => {\r\n            if (loader.name === \"gltf\") {\r\n                (<GLTFFileLoader>loader).dispose();\r\n            }\r\n        });\r\n        this._loaders.length = 0;\r\n        this._disposed = true;\r\n    }\r\n\r\n    private _checkAndRun(functionName: string, ...payload: Array<any>) {\r\n        if (this._disposed) {\r\n            return;\r\n        }\r\n        this._plugins\r\n            .filter((p) => p[functionName as keyof ILoaderPlugin])\r\n            .forEach((plugin) => {\r\n                try {\r\n                    (plugin as any)[functionName as keyof ILoaderPlugin].apply(this, payload);\r\n                } catch (e) {}\r\n            });\r\n    }\r\n}\r\n"]}
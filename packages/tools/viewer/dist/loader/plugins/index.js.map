{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/loader/plugins/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,qBAAqB,EAAE,MAAM,yBAAyB,CAAC;AAEhE,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAC5D,OAAO,EAAE,yBAAyB,EAAE,MAAM,uBAAuB,CAAC;AAClE,OAAO,EAAE,4BAA4B,EAAE,MAAM,gCAAgC,CAAC;AAC9E,OAAO,EAAE,KAAK,EAAE,MAAM,iBAAiB,CAAC;AAExC,MAAM,WAAW,GAAqC,EAAE,CAAC;AAEzD,OAAO,EAAE,qBAAqB,EAAiB,mBAAmB,EAAE,yBAAyB,EAAE,4BAA4B,EAAE,CAAC;AAE9H;;;;;;GAMG;AACH,MAAM,UAAU,qBAAqB,CAAC,IAAY;IAC9C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;QACpB,QAAQ,IAAI,EAAE;YACV,KAAK,WAAW;gBACZ,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI,qBAAqB,EAAE,CAAC;gBAChD,MAAM;YACV,KAAK,SAAS;gBACV,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI,mBAAmB,EAAE,CAAC;gBAC9C,MAAM;YACV,KAAK,qBAAqB;gBACtB,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI,yBAAyB,EAAE,CAAC;gBACpD,MAAM;YACV,KAAK,kBAAkB;gBACnB,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI,4BAA4B,EAAE,CAAC;gBACvD,MAAM;SACb;KACJ;IAED,OAAO,WAAW,CAAC,IAAI,CAAC,CAAC;AAC7B,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,eAAe,CAAC,IAAY,EAAE,MAAqB;IAC/D,IAAI,WAAW,CAAC,IAAI,CAAC,EAAE;QACnB,KAAK,CAAC,IAAI,CAAC,0CAA0C,GAAG,IAAI,CAAC,CAAC;KACjE;IACD,WAAW,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AAC/B,CAAC","sourcesContent":["import { TelemetryLoaderPlugin } from \"./telemetryLoaderPlugin\";\r\nimport { ILoaderPlugin } from \"./loaderPlugin\";\r\nimport { MSFTLodLoaderPlugin } from \"./msftLodLoaderPlugin\";\r\nimport { ApplyMaterialConfigPlugin } from \"./applyMaterialConfig\";\r\nimport { ExtendedMaterialLoaderPlugin } from \"./extendedMaterialLoaderPlugin\";\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\nconst pluginCache: { [key: string]: ILoaderPlugin } = {};\r\n\r\nexport { TelemetryLoaderPlugin, ILoaderPlugin, MSFTLodLoaderPlugin, ApplyMaterialConfigPlugin, ExtendedMaterialLoaderPlugin };\r\n\r\n/**\r\n * Get a loader plugin according to its name.\r\n * The plugin will be cached and will be reused if called for again.\r\n *\r\n * @param name the name of the plugin\r\n * @returns the plugin\r\n */\r\nexport function getLoaderPluginByName(name: string) {\r\n    if (!pluginCache[name]) {\r\n        switch (name) {\r\n            case \"telemetry\":\r\n                pluginCache[name] = new TelemetryLoaderPlugin();\r\n                break;\r\n            case \"msftLod\":\r\n                pluginCache[name] = new MSFTLodLoaderPlugin();\r\n                break;\r\n            case \"applyMaterialConfig\":\r\n                pluginCache[name] = new ApplyMaterialConfigPlugin();\r\n                break;\r\n            case \"extendedMaterial\":\r\n                pluginCache[name] = new ExtendedMaterialLoaderPlugin();\r\n                break;\r\n        }\r\n    }\r\n\r\n    return pluginCache[name];\r\n}\r\n\r\n/**\r\n * @param name\r\n * @param plugin\r\n */\r\nexport function addLoaderPlugin(name: string, plugin: ILoaderPlugin) {\r\n    if (pluginCache[name]) {\r\n        Tools.Warn(\"Overwriting plugin with the same name - \" + name);\r\n    }\r\n    pluginCache[name] = plugin;\r\n}\r\n"]}
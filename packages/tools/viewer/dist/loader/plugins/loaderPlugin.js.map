{"version":3,"file":"loaderPlugin.js","sourceRoot":"","sources":["../../../src/loader/plugins/loaderPlugin.ts"],"names":[],"mappings":"","sourcesContent":["import type { ViewerModel } from \"../../model/viewerModel\";\r\nimport type { IGLTFLoaderExtension } from \"loaders/glTF/2.0/glTFLoaderExtension\";\r\nimport type { IGLTFLoaderData } from \"loaders/glTF/glTFFileLoader\";\r\nimport type { ISceneLoaderPlugin, ISceneLoaderPluginAsync, ISceneLoaderProgressEvent } from \"core/Loading/sceneLoader\";\r\n\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\n/**\r\n * This interface defines the structure of a loader plugin.\r\n * Any of those functions will be called if (!) the loader supports those callbacks.\r\n * Any loader supports onInit, onLoaded, onError and onProgress.\r\n */\r\nexport interface ILoaderPlugin {\r\n    onInit?: (loader: ISceneLoaderPlugin | ISceneLoaderPluginAsync, model: ViewerModel) => void;\r\n    onLoaded?: (model: ViewerModel) => void;\r\n    onError?: (message: string, exception?: any) => void;\r\n    onProgress?: (progressEvent: ISceneLoaderProgressEvent) => void;\r\n    onExtensionLoaded?: (extension: IGLTFLoaderExtension) => void;\r\n    onParsed?: (parsedData: IGLTFLoaderData) => void;\r\n    onMeshLoaded?: (mesh: AbstractMesh) => void;\r\n    onTextureLoaded?: (texture: BaseTexture) => void;\r\n    onMaterialLoaded?: (material: Material) => void;\r\n    onComplete?: () => void;\r\n}\r\n"]}
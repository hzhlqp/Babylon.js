{"version":3,"file":"frameGraphTextureManager.js","sourceRoot":"","sources":["../../src/FrameGraph/frameGraphTextureManager.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable import/no-internal-modules */\r\nimport type {\r\n    Scene,\r\n    AbstractEngine,\r\n    RenderTargetWrapper,\r\n    RenderTargetCreationOptions,\r\n    TextureSize,\r\n    Nullable,\r\n    FrameGraphTextureCreationOptions,\r\n    FrameGraphTextureHandle,\r\n} from \"core/index\";\r\nimport { getDimensionsFromTextureSize } from \"../Materials/Textures/textureCreationOptions\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { backbufferColorTextureHandle, backbufferDepthStencilTextureHandle } from \"./frameGraphTypes\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\ntype TextureEntry = {\r\n    texture: Nullable<RenderTargetWrapper>;\r\n    name: string;\r\n    creationOptions: FrameGraphTextureCreationOptions;\r\n    namespace: FrameGraphTextureNamespace;\r\n    debug?: Texture;\r\n    parentHandle?: FrameGraphTextureHandle;\r\n    parentTextureIndex?: number;\r\n    refHandle?: FrameGraphTextureHandle;\r\n};\r\n\r\nenum FrameGraphTextureNamespace {\r\n    Task,\r\n    Graph,\r\n    External,\r\n}\r\n\r\n/**\r\n * @experimental\r\n * @internal\r\n */\r\nexport class FrameGraphTextureManager {\r\n    private static _Counter = 2; // 0 and 1 are reserved for backbuffer textures\r\n\r\n    public _textures: Map<FrameGraphTextureHandle, TextureEntry> = new Map();\r\n\r\n    constructor(\r\n        private _engine: AbstractEngine,\r\n        private _debugTextures = false,\r\n        private _scene?: Scene\r\n    ) {\r\n        this._addSystemTextures();\r\n    }\r\n\r\n    public isBackbuffer(handle: FrameGraphTextureHandle): boolean {\r\n        if (handle === backbufferColorTextureHandle || handle === backbufferDepthStencilTextureHandle) {\r\n            return true;\r\n        }\r\n\r\n        const textureEntry = this._textures.get(handle);\r\n        if (!textureEntry) {\r\n            return false;\r\n        }\r\n\r\n        return textureEntry.refHandle === backbufferColorTextureHandle || textureEntry.refHandle === backbufferDepthStencilTextureHandle;\r\n    }\r\n\r\n    public isBackbufferColor(handle: FrameGraphTextureHandle): boolean {\r\n        if (handle === backbufferColorTextureHandle) {\r\n            return true;\r\n        }\r\n\r\n        const textureEntry = this._textures.get(handle);\r\n        if (!textureEntry) {\r\n            return false;\r\n        }\r\n\r\n        return textureEntry.refHandle === backbufferColorTextureHandle;\r\n    }\r\n\r\n    public isBackbufferDepthStencil(handle: FrameGraphTextureHandle): boolean {\r\n        if (handle === backbufferDepthStencilTextureHandle) {\r\n            return true;\r\n        }\r\n\r\n        const textureEntry = this._textures.get(handle);\r\n        if (!textureEntry) {\r\n            return false;\r\n        }\r\n\r\n        return textureEntry.refHandle === backbufferDepthStencilTextureHandle;\r\n    }\r\n\r\n    public getTextureCreationOptions(handle: FrameGraphTextureHandle): FrameGraphTextureCreationOptions {\r\n        return this._textures.get(handle)!.creationOptions;\r\n    }\r\n\r\n    public getTextureFromHandle(handle: FrameGraphTextureHandle): Nullable<RenderTargetWrapper> {\r\n        return this._textures.get(handle)!.texture;\r\n    }\r\n\r\n    public importTexture(name: string, texture: RenderTargetWrapper, handle?: FrameGraphTextureHandle): FrameGraphTextureHandle {\r\n        const internalTexture = texture.texture;\r\n\r\n        if (!internalTexture) {\r\n            throw new Error(\"Texture must have an internal texture to be imported\");\r\n        }\r\n\r\n        if (handle !== undefined) {\r\n            this._freeEntry(handle);\r\n        }\r\n\r\n        const creationOptions: FrameGraphTextureCreationOptions = {\r\n            size: { width: texture.width, height: texture.height },\r\n            options: {\r\n                generateMipMaps: internalTexture.generateMipMaps,\r\n                generateDepthBuffer: texture._generateDepthBuffer,\r\n                generateStencilBuffer: texture._generateStencilBuffer,\r\n                samples: internalTexture.samples,\r\n                label: internalTexture.label,\r\n                types: [internalTexture.type],\r\n                samplingModes: [internalTexture.samplingMode],\r\n                formats: [internalTexture.format],\r\n                targetTypes: [\r\n                    internalTexture.isCube\r\n                        ? Constants.TEXTURE_CUBE_MAP\r\n                        : internalTexture.is3D\r\n                          ? Constants.TEXTURE_3D\r\n                          : internalTexture.is2DArray\r\n                            ? Constants.TEXTURE_2D_ARRAY\r\n                            : Constants.TEXTURE_2D,\r\n                ],\r\n                useSRGBBuffers: [internalTexture._useSRGBBuffer],\r\n                labels: internalTexture.label ? [internalTexture.label] : undefined,\r\n            },\r\n            sizeIsPercentage: false,\r\n        };\r\n\r\n        return this._createHandleForTexture(name, texture, creationOptions, FrameGraphTextureNamespace.External, false, handle);\r\n    }\r\n\r\n    public createRenderTargetTexture(\r\n        name: string,\r\n        taskNamespace: boolean,\r\n        creationOptions: FrameGraphTextureCreationOptions,\r\n        multiTargetMode = false,\r\n        handle?: FrameGraphTextureHandle\r\n    ): FrameGraphTextureHandle {\r\n        return this._createHandleForTexture(\r\n            name,\r\n            null,\r\n            creationOptions,\r\n            taskNamespace ? FrameGraphTextureNamespace.Task : FrameGraphTextureNamespace.Graph,\r\n            multiTargetMode,\r\n            handle\r\n        );\r\n    }\r\n\r\n    public getAbsoluteDimensions(\r\n        size: TextureSize,\r\n        screenWidth = this._engine.getRenderWidth(true),\r\n        screenHeight = this._engine.getRenderHeight(true)\r\n    ): { width: number; height: number } {\r\n        const { width, height } = getDimensionsFromTextureSize(size);\r\n\r\n        return {\r\n            width: Math.floor((width * screenWidth) / 100),\r\n            height: Math.floor((height * screenHeight) / 100),\r\n        };\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.releaseTextures();\r\n    }\r\n\r\n    public allocateTextures() {\r\n        this._textures.forEach((entry) => {\r\n            if (!entry.texture) {\r\n                if (entry.refHandle !== undefined) {\r\n                    const refEntry = this._textures.get(entry.refHandle)!;\r\n\r\n                    entry.texture = refEntry.texture;\r\n                    entry.texture?.texture?.incrementReferences();\r\n\r\n                    if (refEntry.refHandle === backbufferColorTextureHandle) {\r\n                        entry.refHandle = backbufferColorTextureHandle;\r\n                    }\r\n                    if (refEntry.refHandle === backbufferDepthStencilTextureHandle) {\r\n                        entry.refHandle = backbufferDepthStencilTextureHandle;\r\n                    }\r\n                } else if (entry.namespace !== FrameGraphTextureNamespace.External) {\r\n                    if (entry.parentHandle !== undefined) {\r\n                        const creationOptions = entry.creationOptions;\r\n                        const size = creationOptions.sizeIsPercentage ? this.getAbsoluteDimensions(creationOptions.size) : creationOptions.size;\r\n\r\n                        const parentEntry = this._textures.get(entry.parentHandle)!;\r\n                        const parentInternalTexture = parentEntry.texture!.textures![entry.parentTextureIndex!];\r\n\r\n                        const creationOptionsForTexture: RenderTargetCreationOptions = {\r\n                            createMipMaps: creationOptions.options.createMipMaps,\r\n                            generateMipMaps: creationOptions.options.generateMipMaps,\r\n                            generateDepthBuffer: creationOptions.options.generateDepthBuffer,\r\n                            generateStencilBuffer: creationOptions.options.generateStencilBuffer,\r\n                            samples: creationOptions.options.samples,\r\n                            type: creationOptions.options.types![0],\r\n                            format: creationOptions.options.formats![0],\r\n                            useSRGBBuffer: creationOptions.options.useSRGBBuffers![0],\r\n                            colorAttachment: parentInternalTexture,\r\n                            label: creationOptions.options.label,\r\n                        };\r\n\r\n                        entry.texture = this._engine.createRenderTargetTexture(size, creationOptionsForTexture);\r\n                        parentInternalTexture.incrementReferences();\r\n                    } else {\r\n                        const creationOptions = entry.creationOptions;\r\n                        const size = creationOptions.sizeIsPercentage ? this.getAbsoluteDimensions(creationOptions.size) : creationOptions.size;\r\n\r\n                        entry.texture = this._engine.createMultipleRenderTarget(size, creationOptions.options, false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (entry.texture && entry.refHandle === undefined) {\r\n                entry.debug?.dispose();\r\n                entry.debug = this._createDebugTexture(entry.name, entry.texture);\r\n            }\r\n        });\r\n    }\r\n\r\n    public createDanglingHandle() {\r\n        return FrameGraphTextureManager._Counter++;\r\n    }\r\n\r\n    public resolveDanglingHandle(danglingHandle: FrameGraphTextureHandle, handle: FrameGraphTextureHandle) {\r\n        if (!this._textures.has(handle)) {\r\n            throw new Error(`resolveDanglingHandle: Handle ${handle} does not exist!`);\r\n        }\r\n\r\n        const textureEntry = this._textures.get(handle)!;\r\n\r\n        this._textures.set(danglingHandle, {\r\n            texture: textureEntry.texture,\r\n            refHandle: handle,\r\n            name: textureEntry.name,\r\n            creationOptions: {\r\n                size: { ...(textureEntry.creationOptions.size as { width: number; height: number; depth?: number; layers?: number }) },\r\n                options: { ...textureEntry.creationOptions.options, label: textureEntry.name },\r\n                sizeIsPercentage: textureEntry.creationOptions.sizeIsPercentage,\r\n            },\r\n            namespace: textureEntry.namespace,\r\n            parentHandle: textureEntry.parentHandle,\r\n            parentTextureIndex: textureEntry.parentTextureIndex,\r\n        });\r\n    }\r\n\r\n    public releaseTextures(releaseAll = true): void {\r\n        this._textures.forEach((entry, handle) => {\r\n            if (releaseAll || entry.namespace !== FrameGraphTextureNamespace.External) {\r\n                entry.debug?.dispose();\r\n                entry.debug = undefined;\r\n            }\r\n\r\n            if (entry.namespace === FrameGraphTextureNamespace.External) {\r\n                return;\r\n            }\r\n\r\n            entry.texture?.dispose();\r\n            entry.texture = null;\r\n\r\n            if (releaseAll || entry.namespace === FrameGraphTextureNamespace.Task) {\r\n                this._textures.delete(handle);\r\n            }\r\n        });\r\n\r\n        if (releaseAll) {\r\n            this._textures.clear();\r\n            this._addSystemTextures();\r\n        }\r\n    }\r\n\r\n    private _addSystemTextures() {\r\n        const size = { width: this._engine.getRenderWidth(true), height: this._engine.getRenderHeight(true) };\r\n\r\n        this._textures.set(backbufferColorTextureHandle, {\r\n            name: \"backbuffer color\",\r\n            texture: null,\r\n            creationOptions: {\r\n                size,\r\n                options: {},\r\n                sizeIsPercentage: false,\r\n            },\r\n            namespace: FrameGraphTextureNamespace.External,\r\n        });\r\n\r\n        this._textures.set(backbufferDepthStencilTextureHandle, {\r\n            name: \"backbuffer depth/stencil\",\r\n            texture: null,\r\n            creationOptions: {\r\n                size,\r\n                options: {},\r\n                sizeIsPercentage: false,\r\n            },\r\n            namespace: FrameGraphTextureNamespace.External,\r\n        });\r\n    }\r\n\r\n    private _createDebugTexture(name: string, texture: RenderTargetWrapper): Texture | undefined {\r\n        if (!this._debugTextures || !this._scene) {\r\n            return;\r\n        }\r\n\r\n        const textureDebug = new Texture(null, this._scene);\r\n\r\n        textureDebug.name = name;\r\n        textureDebug._texture = texture.texture || texture._depthStencilTexture!;\r\n        textureDebug._texture.incrementReferences();\r\n\r\n        return textureDebug;\r\n    }\r\n\r\n    private _freeEntry(handle: number): void {\r\n        const entry = this._textures.get(handle);\r\n\r\n        if (entry) {\r\n            entry.debug?.dispose();\r\n            this._textures.delete(handle);\r\n        }\r\n    }\r\n\r\n    private _createHandleForTexture(\r\n        name: string,\r\n        texture: Nullable<RenderTargetWrapper>,\r\n        creationOptions: FrameGraphTextureCreationOptions,\r\n        namespace: FrameGraphTextureNamespace,\r\n        multiTargetMode = false,\r\n        handle?: FrameGraphTextureHandle,\r\n        parentHandle?: FrameGraphTextureHandle,\r\n        parentTextureIndex?: number\r\n    ): FrameGraphTextureHandle {\r\n        handle = handle ?? FrameGraphTextureManager._Counter++;\r\n\r\n        this._textures.set(handle, {\r\n            texture,\r\n            name,\r\n            creationOptions: {\r\n                size: getDimensionsFromTextureSize(creationOptions.size),\r\n                options: { ...creationOptions.options, label: name },\r\n                sizeIsPercentage: creationOptions.sizeIsPercentage,\r\n            },\r\n            namespace,\r\n            parentHandle,\r\n            parentTextureIndex,\r\n        });\r\n\r\n        if (namespace === FrameGraphTextureNamespace.External) {\r\n            return handle;\r\n        }\r\n\r\n        if (multiTargetMode) {\r\n            const textureCount = creationOptions.options.textureCount ?? 1;\r\n            for (let i = 0; i < textureCount; i++) {\r\n                const label = creationOptions.options.labels?.[i] ?? `${i}`;\r\n                const textureName = `${name} - ${label}`;\r\n                const creationOptionsForTexture: FrameGraphTextureCreationOptions = {\r\n                    size: getDimensionsFromTextureSize(creationOptions.size),\r\n                    options: {\r\n                        ...creationOptions.options,\r\n                        formats: [creationOptions.options.formats![i]],\r\n                        types: [creationOptions.options.types![i]],\r\n                        textureCount: 1,\r\n                    },\r\n                    sizeIsPercentage: creationOptions.sizeIsPercentage,\r\n                };\r\n                this._createHandleForTexture(textureName, null, creationOptionsForTexture, namespace, false, handle + i + 1, handle, i);\r\n            }\r\n\r\n            FrameGraphTextureManager._Counter += textureCount;\r\n        }\r\n\r\n        return handle;\r\n    }\r\n}\r\n"]}
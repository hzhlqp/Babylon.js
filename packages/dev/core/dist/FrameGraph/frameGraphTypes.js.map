{"version":3,"file":"frameGraphTypes.js","sourceRoot":"","sources":["../../src/FrameGraph/frameGraphTypes.ts"],"names":[],"mappings":"AAQA;;GAEG;AACH,MAAM,CAAC,MAAM,4BAA4B,GAA4B,CAAC,CAAC;AAEvE;;GAEG;AACH,MAAM,CAAC,MAAM,mCAAmC,GAA4B,CAAC,CAAC","sourcesContent":["// eslint-disable-next-line import/no-internal-modules\r\nimport type { Nullable, TextureSize, FrameGraphContext, IMultiRenderTargetOptions } from \"core/index\";\r\n\r\n/**\r\n * Represents a texture handle in the frame graph.\r\n */\r\nexport type FrameGraphTextureHandle = number;\r\n\r\n/**\r\n * Represents a texture handle for the backbuffer color texture.\r\n */\r\nexport const backbufferColorTextureHandle: FrameGraphTextureHandle = 0;\r\n\r\n/**\r\n * Represents a texture handle for the backbuffer depth/stencil texture.\r\n */\r\nexport const backbufferDepthStencilTextureHandle: FrameGraphTextureHandle = 1;\r\n\r\n/**\r\n * Options used to create a texture in the frame graph.\r\n */\r\nexport type FrameGraphTextureCreationOptions = {\r\n    /** Size of the texture. If sizeIsPercentage is true, these are percentages relative to the screen size */\r\n    size: TextureSize;\r\n\r\n    /** Options used to create the (multi) render target texture */\r\n    options: IMultiRenderTargetOptions;\r\n\r\n    /** If true, indicates that \"size\" is percentages relative to the screen size */\r\n    sizeIsPercentage: boolean;\r\n};\r\n\r\n/**\r\n * Represents a texture description in the frame graph.\r\n * This is basically the same thing than FrameGraphTextureCreationOptions, but the size is never in percentage and always in pixels.\r\n */\r\nexport type FrameGraphTextureDescription = {\r\n    /**\r\n     * Size of the texture.\r\n     */\r\n    size: { width: number; height: number };\r\n\r\n    /**\r\n     * Options used when the (multi) render target texture had been created.\r\n     */\r\n    options: IMultiRenderTargetOptions;\r\n};\r\n\r\n/**\r\n * Defines a pass in the frame graph.\r\n */\r\nexport interface IFrameGraphPass {\r\n    /**\r\n     * The name of the pass.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Sets the function to execute when the pass is executed\r\n     * @param func The function to execute when the pass is executed\r\n     */\r\n    setExecuteFunc(func: (context: FrameGraphContext) => void): void;\r\n\r\n    /** @internal */\r\n    _execute(): void;\r\n\r\n    /** @internal */\r\n    _isValid(): Nullable<string>;\r\n}\r\n"]}
{"version":3,"file":"prepareEs6Build.js","sourceRoot":"","sources":["../src/prepareEs6Build.ts"],"names":[],"mappings":";;;AAAA,+BAA+B;AAC/B,6BAA6B;AAC7B,+BAAgC;AAChC,+BAA+B;AAC/B,yCAAuC;AAEhC,MAAM,eAAe,GAAG,KAAK,IAAI,EAAE;IACtC,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAClC,MAAM,SAAS,GAAG,IAAA,oBAAS,EAAC,CAAC,aAAa,EAAE,KAAK,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IACjE,IAAI;QACA,IAAI,SAAS,EAAE;YACX,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,SAAmB,CAAC,CAAC;YACjE,MAAM,gBAAgB,GAAG,EAAE,CAAC,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,wBAAwB,EAAE,oBAAoB,CAAC,CAAC;YACxH,gEAAgE;YAChE,MAAM,SAAS,GAAG,IAAI,CAAC,gBAAgB,GAAG,cAAc,CAAC,CAAC;YAC1D,MAAM,cAAc,GAAG,IAAA,eAAQ,EAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,EAAE;gBACjE,oBAAoB,EAAE,IAAI;aAC7B,CAAC,CAAC;YACH,cAAc,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;gBAC5B,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,aAAa,EAAE;oBACtC,OAAO;iBACV;gBACD,MAAM,WAAW,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;gBAClD,MAAM,WAAW,GAAG,gCAAgC,CAAC;gBACrD,IAAI,UAAU,GAAG,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;gBAEtD,MAAM,aAAa,GAAG,8CAA8C,CAAC;gBACrE,IAAI,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAC3C,MAAM,YAAY,GAAG,EAAE,CAAC;gBACxB,OAAO,KAAK,EAAE;oBACV,MAAM,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC9B,IAAI,YAAY,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;wBACzC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;qBACnC;oBACD,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;iBAC1C;gBAED,KAAK,MAAM,QAAQ,IAAI,YAAY,EAAE;oBACjC,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,+BAA+B,QAAQ,kBAAkB,EAAE,GAAG,CAAC,CAAC;oBACzF,MAAM,KAAK,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC;oBAClC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;wBAC3B,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,GAAG,KAAK,GAAG,GAAG,CAAC,CAAC;qBAC7D;yBAAM;wBACH,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;qBACjD;iBACJ;gBACD,EAAE,CAAC,aAAa,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC;SACN;KACJ;IAAC,OAAO,CAAC,EAAE;QACR,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACf,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACnB;AACL,CAAC,CAAC;AA/CW,QAAA,eAAe,mBA+C1B","sourcesContent":["/* eslint-disable no-console */\r\nimport * as path from \"path\";\r\nimport { globSync } from \"glob\";\r\nimport * as fs from \"fs-extra\";\r\nimport { checkArgs } from \"./utils.js\";\r\n\r\nexport const prepareES6Build = async () => {\r\n    const baseDir = path.resolve(\".\");\r\n    const constFile = checkArgs([\"--constFile\", \"-cf\"], false, true);\r\n    try {\r\n        if (constFile) {\r\n            const constFilePath = path.resolve(baseDir, constFile as string);\r\n            const constantsContent = fs.readFileSync(constFilePath, \"utf8\").replace(\"export class Constants\", \"const Constants = \");\r\n            // eslint-disable-next-line @typescript-eslint/naming-convention\r\n            const Constants = eval(constantsContent + \"\\nConstants;\");\r\n            const allSourceFiles = globSync(path.resolve(baseDir, \"**\", \"*.js\"), {\r\n                windowsPathsNoEscape: true,\r\n            });\r\n            allSourceFiles.forEach((file) => {\r\n                if (path.resolve(file) === constFilePath) {\r\n                    return;\r\n                }\r\n                const fileContent = fs.readFileSync(file, \"utf8\");\r\n                const regexImport = /import { Constants } from .*;/g;\r\n                let sourceCode = fileContent.replace(regexImport, \"\");\r\n\r\n                const regexConstant = /(?<![_0-9a-zA-Z])Constants\\.([_0-9a-zA-Z]*)/g;\r\n                let match = regexConstant.exec(sourceCode);\r\n                const constantList = [];\r\n                while (match) {\r\n                    const constantName = match[1];\r\n                    if (constantName && constantName.length > 1) {\r\n                        constantList.push(constantName);\r\n                    }\r\n                    match = regexConstant.exec(sourceCode);\r\n                }\r\n\r\n                for (const constant of constantList) {\r\n                    const regex = new RegExp(`(?<![_0-9a-zA-Z])Constants\\.${constant}(?![_0-9a-zA-Z])`, \"g\");\r\n                    const value = Constants[constant];\r\n                    if (typeof value === \"string\") {\r\n                        sourceCode = sourceCode.replace(regex, \"`\" + value + \"`\");\r\n                    } else {\r\n                        sourceCode = sourceCode.replace(regex, value);\r\n                    }\r\n                }\r\n                fs.writeFileSync(file, sourceCode);\r\n            });\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n        process.exit(1);\r\n    }\r\n};\r\n"]}
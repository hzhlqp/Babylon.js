{"version":3,"file":"generateDeclaration.js","sourceRoot":"","sources":["../src/generateDeclaration.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\r\nimport { globSync } from \"glob\";\r\nimport * as fs from \"fs\";\r\nimport * as path from \"path\";\r\nimport * as chokidar from \"chokidar\";\r\n\r\nimport { camelize, checkArgs, checkDirectorySync, debounce, findRootDirectory, getHashOfContent, getHashOfFile, kebabize } from \"./utils.js\";\r\nimport type { BuildType, DevPackageName } from \"./packageMapping.js\";\r\nimport { getAllPackageMappingsByDevNames, getPackageMappingByDevName, getPublicPackageName, isValidDevPackageName } from \"./packageMapping.js\";\r\n\r\nexport interface IGenerateDeclarationConfig {\r\n    devPackageName: DevPackageName;\r\n    outputDirectory?: string;\r\n    externals?: { [key: string]: string };\r\n    hiddenConsts?: string[];\r\n    namedExportPathsToExclude?: string;\r\n    filename?: string;\r\n    declarationLibs: string[];\r\n    buildType?: BuildType;\r\n    addToDocumentation?: boolean;\r\n    initDocumentation?: boolean;\r\n    fileFilterRegex?: string;\r\n}\r\n\r\nfunction getModuleDeclaration(\r\n    source: string,\r\n    filename: string,\r\n    config: IGenerateDeclarationConfig,\r\n    buildType: BuildType = \"umd\",\r\n    classesMappingArray: {\r\n        alias: string;\r\n        realClassName: string;\r\n        devPackageName?: DevPackageName;\r\n        externalName?: string;\r\n        fullPath: string;\r\n    }[]\r\n) {\r\n    const distPosition = filename.replace(/\\\\/g, \"/\").indexOf(\"/dist\");\r\n    const packageVariables = getPackageMappingByDevName(config.devPackageName);\r\n    const moduleName = getPublicPackageName(packageVariables[buildType], filename) + filename.substring(distPosition + 5).replace(\".d.ts\", \"\");\r\n    const sourceDir = path.dirname(moduleName);\r\n    const lines = source.split(\"\\n\");\r\n    const namedExportPathsToExcludeRegExp = config.namedExportPathsToExclude !== undefined ? new RegExp(`export {.*} from \".*${config.namedExportPathsToExclude}\"`) : undefined;\r\n    const mapping = getAllPackageMappingsByDevNames();\r\n    let processedLines = lines\r\n        .map((line: string) => {\r\n            line = line.replace(\"import type \", \"import \");\r\n            // Replace Type Imports\r\n            const regexTypeImport = /(.*)type ([A-Za-z0-9]*) = import\\(\"(.*)\"\\)\\.(.*);/g;\r\n            let match = regexTypeImport.exec(line);\r\n            if (match) {\r\n                // var spaces = match[1];\r\n                const module = match[3];\r\n                const type = match[4];\r\n                line = `import { ${type} } from \"${module}\";`;\r\n            }\r\n            // Checks if line is about external module\r\n            let externalModule = false;\r\n            if (config.externals) {\r\n                for (const ext in config.externals) {\r\n                    externalModule = line.indexOf(ext) > -1;\r\n                    if (externalModule) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            // If not Append Module Name\r\n            if (!externalModule) {\r\n                // SKIP known named exports that are for backwards compatibility\r\n                if (namedExportPathsToExcludeRegExp && namedExportPathsToExcludeRegExp.test(line)) {\r\n                    line = line.startsWith(\"    \") ? \"    //\" + line.substring(3) : \"// \" + line;\r\n                }\r\n\r\n                [\r\n                    // Declaration\r\n                    /declare module ['\"](.*)['\"]/,\r\n                    // From\r\n                    / from ['\"](.*)['\"]/,\r\n                    // Module augmentation\r\n                    / {4}module ['\"](.*)['\"]/,\r\n                    /^module ['\"](\\..*)['\"]/,\r\n                    // Inlined Import\r\n                    /import\\(['\"](.*)['\"]/,\r\n                    // Side Effect Import\r\n                    /import ['\"](.*)['\"]/,\r\n                ].forEach((regex) => {\r\n                    const match = line.match(regex);\r\n                    if (match) {\r\n                        if (match[1][0] === \".\") {\r\n                            const newLocation = path.join(sourceDir, match[1]).replace(/\\\\/g, \"/\");\r\n                            line = line.replace(match[1], newLocation);\r\n                        } else {\r\n                            let found = false;\r\n                            Object.keys(mapping).forEach((devPackageName) => {\r\n                                if (match[1].startsWith(devPackageName)) {\r\n                                    line = line.replace(\r\n                                        match[1],\r\n                                        getPublicPackageName(\r\n                                            mapping[(isValidDevPackageName(devPackageName, true) ? devPackageName : kebabize(config.devPackageName)) as DevPackageName][buildType],\r\n                                            match[1]\r\n                                        ) + match[1].substring(devPackageName.length)\r\n                                    );\r\n                                    found = true;\r\n                                }\r\n                            });\r\n                            if (!found) {\r\n                                // not a dev dependency\r\n                                // TODO - make a list of external dependencies per package\r\n                                // for now - we support react\r\n                                if (match[1] !== \"react\") {\r\n                                    // check what the line imports\r\n                                    line = \"\";\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    line = line.replace(\"declare \", \"\");\r\n                });\r\n            }\r\n\r\n            // Replace Static Readonly declaration for UMD/ES6 TS Version compat\r\n            const regexVar = /(.*)readonly (.*) = (.*);/g;\r\n            match = regexVar.exec(line);\r\n            if (match) {\r\n                const spaces = match[1];\r\n                const name = match[2];\r\n                const value = match[3];\r\n                if (value === \"true\" || value === \"false\") {\r\n                    line = `${spaces}readonly ${name}: boolean;`;\r\n                } else if (value.startsWith('\"')) {\r\n                    line = `${spaces}readonly ${name}: string;`;\r\n                } else {\r\n                    line = `${spaces}readonly ${name}: number;`;\r\n                }\r\n            }\r\n            return line;\r\n        })\r\n        .join(\"\\n\");\r\n    // Hide Exported Consts if needed\r\n    if (config.hiddenConsts) {\r\n        for (const toHide of config.hiddenConsts) {\r\n            const constStart = processedLines.indexOf(`export const ${toHide}`);\r\n            if (constStart > -1) {\r\n                for (let i = constStart; i < processedLines.length; i++) {\r\n                    if (processedLines[i] === \"}\") {\r\n                        // +1 to enroll the last }\r\n                        // +2 to enroll the trailing ;\r\n                        processedLines = processedLines.substring(0, constStart) + processedLines.substring(i + 2);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // replaces classes definitions with namespace definitions\r\n    classesMappingArray.forEach((classMapping: { alias: string; realClassName: string; devPackageName?: DevPackageName; externalName?: string; fullPath: string }) => {\r\n        const { alias, devPackageName, externalName } = classMapping;\r\n        // TODO - make a list of dependencies that are accepted by each package\r\n        if (!devPackageName) {\r\n            if (externalName) {\r\n                if (externalName === \"@fortawesome\" || externalName === \"react-contextmenu\") {\r\n                    // replace with any\r\n                    const matchRegex = new RegExp(`([ <])(${alias}[^;\\n ]*)([^\\\\w])`, \"g\");\r\n                    processedLines = processedLines.replace(matchRegex, `$1any$3`);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            return;\r\n        }\r\n    });\r\n    processedLines = processedLines.replace(/export declare /g, \"export \").replace(/export const enum/g, \"export enum\");\r\n\r\n    return `declare module \"${moduleName}\" {\r\n${processedLines}\r\n}\r\n`;\r\n}\r\n\r\n/**\r\n *\r\n * @param source - the source code of the file\r\n * @param originalDevPackageName - the dev package name of the file\r\n * @param originalSourcefilePath\r\n * @returns an array of objects with alias, realClassName and package\r\n */\r\nfunction getClassesMap(source: string, originalDevPackageName: string, originalSourcefilePath: string) {\r\n    const regex = /import .*{([^}]*)} from ['\"](.*)['\"];/g;\r\n    let matches = regex.exec(source);\r\n    const mappingArray: {\r\n        alias: string;\r\n        realClassName: string;\r\n        devPackageName?: DevPackageName;\r\n        externalName?: string;\r\n        fullPath: string;\r\n        exported?: boolean;\r\n    }[] = [];\r\n    while (matches !== null) {\r\n        const classes = matches[1].split(\",\"); //.map((className) => className.trim());\r\n        classes.forEach((className) => {\r\n            // just a typescript thing...\r\n            if (!matches) {\r\n                return;\r\n            }\r\n            const parts = className.split(\" as \");\r\n            if (parts.length === 2) {\r\n                console.log(`${parts[0]} as ${parts[1]}`);\r\n            }\r\n            const realClassName = parts[0].trim();\r\n            const alias = parts[1] ? parts[1].trim() : realClassName;\r\n            const firstSplit = matches[2]!.split(\"/\")[0];\r\n            const devPackageName = firstSplit[0] === \".\" ? originalDevPackageName : firstSplit;\r\n            // if (alias !== realClassName) {\r\n            //     console.log(\r\n            //         alias,\r\n            //         realClassName,\r\n            //         devPackageName,\r\n            //         matches[2],\r\n            //         isValidDevPackageName(devPackageName),\r\n            //         path.resolve(path.dirname(originalSourcefilePath), matches[2]!).replace(/\\\\/g, \"/\")\r\n            //     );\r\n            // }\r\n            // only internals\r\n            if (isValidDevPackageName(devPackageName)) {\r\n                mappingArray.push({\r\n                    alias,\r\n                    realClassName,\r\n                    devPackageName,\r\n                    fullPath: firstSplit[0] === \".\" ? path.resolve(path.dirname(originalSourcefilePath), matches[2]!).replace(/\\\\/g, \"/\") : matches[2]!,\r\n                });\r\n            } else {\r\n                if (!devPackageName.startsWith(\"babylonjs\")) {\r\n                    // console.log(`Not a Dev Package Name: ${devPackageName}`);\r\n                    mappingArray.push({\r\n                        alias,\r\n                        externalName: devPackageName,\r\n                        realClassName,\r\n                        fullPath: firstSplit[0] === \".\" ? path.resolve(path.dirname(originalSourcefilePath), matches[2]!).replace(/\\\\/g, \"/\") : matches[2]!,\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        matches = regex.exec(source);\r\n    }\r\n    // check if the index exports it as something else\r\n\r\n    // fist check if an index exists on the same directory\r\n    let indexFilePath = path.resolve(path.dirname(originalSourcefilePath), \"index.js\");\r\n    if (!fs.existsSync(indexFilePath)) {\r\n        indexFilePath = path.resolve(path.dirname(originalSourcefilePath), \"..\", \"index.js\");\r\n    }\r\n    if (fs.existsSync(indexFilePath)) {\r\n        const indexSource = fs.readFileSync(indexFilePath, \"utf-8\");\r\n        // get relative path\r\n        const relativePath = path\r\n            .relative(path.dirname(indexFilePath), originalSourcefilePath)\r\n            .replace(/\\\\/g, \"/\")\r\n            .replace(/\\.d\\.ts$/, \"\");\r\n        const indexRegex = new RegExp(`export {(.*)} from ['\"]./${relativePath}['\"];`, \"g\");\r\n        let indexMatches = indexRegex.exec(indexSource);\r\n        while (indexMatches !== null) {\r\n            const classes = indexMatches[1].split(\",\"); //.map((className) => className.trim());\r\n            classes.forEach((className) => {\r\n                // just a typescript thing...\r\n                if (!indexMatches) {\r\n                    return;\r\n                }\r\n                const parts = className.split(\" as \");\r\n                if (parts.length === 2) {\r\n                    console.log(`aliasing ${parts[0]} as ${parts[1]}`);\r\n                    const realClassName = parts[1].trim();\r\n                    const alias = parts[0] ? parts[0].trim() : realClassName;\r\n                    const devPackageName = originalDevPackageName;\r\n                    if (isValidDevPackageName(devPackageName)) {\r\n                        mappingArray.push({\r\n                            alias,\r\n                            realClassName,\r\n                            devPackageName,\r\n                            fullPath: path.resolve(path.dirname(originalSourcefilePath)).replace(/\\\\/g, \"/\"),\r\n                            exported: true,\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n            indexMatches = indexRegex.exec(indexSource);\r\n        }\r\n    }\r\n\r\n    return mappingArray;\r\n}\r\n\r\nfunction getPackageDeclaration(\r\n    source: string,\r\n    sourceFilePath: string,\r\n    classesMappingArray: {\r\n        alias: string;\r\n        realClassName: string;\r\n        devPackageName?: DevPackageName;\r\n        externalName?: string;\r\n        fullPath: string;\r\n        exported?: boolean;\r\n    }[],\r\n    devPackageName: DevPackageName\r\n) {\r\n    const lines = source.split(\"\\n\");\r\n    let i = 0;\r\n    let lastWhitespace = \"\";\r\n    let removeNext = false;\r\n    const packageMapping = getPackageMappingByDevName(devPackageName);\r\n    const defaultModuleName = getPublicPackageName(packageMapping.namespace);\r\n    const thisFileModuleName = getPublicPackageName(packageMapping.namespace, sourceFilePath);\r\n    const linesToDefaultNamespace: string[] = [];\r\n    let addToDefaultModule = false;\r\n    while (i < lines.length) {\r\n        let line = lines[i];\r\n\r\n        if (/import\\(\"\\.(.*)\\)./g.test(line) && !/^declare type (.*) import/g.test(line)) {\r\n            line = line.replace(/import\\((.*)\\)./, \"\");\r\n        }\r\n\r\n        if (!line.includes(\"const enum\") && !line.includes(\"=\")) {\r\n            line = line.replace(\"const \", \"var \");\r\n        }\r\n\r\n        //Exclude empty lines\r\n        let excludeLine /*:boolean */ = line === \"\";\r\n\r\n        //Exclude export statements\r\n        excludeLine = excludeLine || line.indexOf(\"export =\") !== -1;\r\n\r\n        //Exclude import statements\r\n        excludeLine = excludeLine || /^import[ (]/.test(line);\r\n        excludeLine = excludeLine || /export \\{/.test(line);\r\n        excludeLine = excludeLine || /export default/.test(line);\r\n        excludeLine = excludeLine || /export \\* from \"/.test(line);\r\n        excludeLine = excludeLine || /^declare type (.*) import/.test(line);\r\n\r\n        const match = line.match(/(\\s*)declare module \"(.*)\" \\{/);\r\n        if (match) {\r\n            // try to match namespace\r\n            const fileToCheck = path.resolve(path.dirname(sourceFilePath), match[2] + \".d.ts\");\r\n            const moduleName = getPublicPackageName(packageMapping.namespace, fileToCheck);\r\n            if (moduleName !== thisFileModuleName && moduleName === defaultModuleName) {\r\n                addToDefaultModule = true;\r\n            }\r\n\r\n            lastWhitespace = match[1];\r\n            removeNext = true;\r\n            excludeLine = true;\r\n        }\r\n\r\n        if (removeNext && line.indexOf(`${lastWhitespace}}`) === 0) {\r\n            removeNext = false;\r\n            excludeLine = true;\r\n            addToDefaultModule = false;\r\n        }\r\n\r\n        if (/namespace (.*) \\{/.test(line)) {\r\n            if (line.indexOf(\"export\") === -1) {\r\n                line = line.replace(\"namespace\", \"export namespace\");\r\n            }\r\n        }\r\n\r\n        if (excludeLine) {\r\n            lines[i] = \"\";\r\n        } else {\r\n            if (addToDefaultModule) {\r\n                linesToDefaultNamespace.push(line);\r\n                lines[i] = \"\";\r\n            } else {\r\n                if (line.indexOf(\"declare \") !== -1) {\r\n                    lines[i] = line.replace(\"declare \", \"\");\r\n                } else {\r\n                    lines[i] = line;\r\n                }\r\n                //Add tab\r\n                lines[i] = \"    \" + lines[i];\r\n            }\r\n        }\r\n        i++;\r\n    }\r\n\r\n    let processedSource = lines.join(\"\\n\").replace(/^(?:[\\t ]*(?:\\r?\\n|\\r))+/gm, \"\") + \"\\n\\n\";\r\n\r\n    // replaces classes definitions with namespace definitions\r\n    classesMappingArray.forEach(\r\n        (classMapping: { alias: string; realClassName: string; devPackageName?: DevPackageName; externalName?: string; fullPath: string; exported?: boolean }) => {\r\n            const { alias, realClassName, devPackageName: localDevPackageMap, fullPath, externalName, exported } = classMapping;\r\n            // TODO - make a list of dependencies that are accepted by each package\r\n            if (!localDevPackageMap) {\r\n                if (externalName) {\r\n                    if (externalName === \"@fortawesome\" || externalName === \"react-contextmenu\") {\r\n                        // replace with any\r\n                        const matchRegex = new RegExp(`([ <])(${alias}[^;\\n ]*)([^\\\\w])`, \"g\");\r\n                        processedSource = processedSource.replace(matchRegex, `$1any$3`);\r\n                        return;\r\n                    } else if (externalName === \"react\") {\r\n                        const matchRegex = new RegExp(`([ <])(${alias})([^\\\\w])`, \"g\");\r\n                        processedSource = processedSource.replace(matchRegex, `$1React.${realClassName}$3`);\r\n                    }\r\n                }\r\n\r\n                return;\r\n            }\r\n            const devPackageToUse = isValidDevPackageName(localDevPackageMap, true) ? localDevPackageMap : devPackageName;\r\n            const originalNamespace = getPublicPackageName(getPackageMappingByDevName(devPackageToUse).namespace);\r\n            const namespace = getPublicPackageName(getPackageMappingByDevName(devPackageToUse).namespace, fullPath /*, fullPath*/);\r\n            if (namespace !== defaultModuleName || originalNamespace !== namespace || alias !== realClassName) {\r\n                const matchRegex = new RegExp(`([ <])(${alias})([^\\\\w])`, \"g\");\r\n                if (exported) {\r\n                    processedSource = processedSource.replace(matchRegex, `$1${realClassName}$3`);\r\n                } else {\r\n                    processedSource = processedSource.replace(matchRegex, `$1${namespace}.${realClassName}$3`);\r\n                }\r\n            }\r\n        }\r\n    );\r\n\r\n    processedSource = processedSource.replace(/export const enum/g, \"export enum\");\r\n\r\n    processedSource = processedSource.replace(\r\n        / global {([^}]*)}/gm,\r\n        `\r\n}\r\n$1\r\ndeclare module ${thisFileModuleName} {\r\n    `\r\n    );\r\n\r\n    if (defaultModuleName !== thisFileModuleName) {\r\n        return `\r\n}\r\ndeclare module ${thisFileModuleName} {\r\n    ${processedSource}\r\n}\r\ndeclare module ${defaultModuleName} {\r\n${linesToDefaultNamespace.join(\"\\n\")}\r\n`;\r\n    }\r\n\r\n    return processedSource;\r\n}\r\n\r\n// export function generateDefaultModuleDeclaration(declarationFiles: string[], devPackageName: DevPackageName) {\r\n//     let declarations = \"\";\r\n//     for (const fileName in declarationFiles) {\r\n//         const declarationFile = declarationFiles[fileName];\r\n//         // The lines of the files now come as a Function inside declaration file.\r\n//         const data = fs.readFileSync(declarationFile, \"utf8\");\r\n//         declarations += getPackageDeclaration(data, declarationFile, getClassesMap(data), devPackageName);\r\n//     }\r\n//     const packageVariables = getPackageMappingByDevName(devPackageName);\r\n//     const defaultModuleName = getPublicPackageName(packageVariables.namespace);\r\n\r\n//     return `\r\n// declare module ${defaultModuleName} {\r\n//     ${declarations}\r\n// }\r\n// `;\r\n// }\r\n\r\nexport function generateCombinedDeclaration(declarationFiles: string[], config: IGenerateDeclarationConfig, looseDeclarations: string[] = [], buildType: BuildType = \"umd\") {\r\n    let declarations = \"\";\r\n    let moduleDeclaration = \"\";\r\n    const filterRegex = config.fileFilterRegex ? new RegExp(config.fileFilterRegex) : null;\r\n    declarationFiles.forEach((declarationFile) => {\r\n        // check if filter applies to this file\r\n        if (filterRegex && filterRegex.test(declarationFile)) {\r\n            return;\r\n        }\r\n        // The lines of the files now come as a Function inside declaration file.\r\n        const data = fs.readFileSync(declarationFile, \"utf8\");\r\n        const classMap = getClassesMap(data, config.devPackageName, declarationFile);\r\n        moduleDeclaration += getModuleDeclaration(data, declarationFile, config, config.buildType, classMap);\r\n        if (declarationFile.indexOf(\"legacy.d.ts\") !== -1) {\r\n            return;\r\n        }\r\n        // const packageMapping = getPackageMappingByDevName(config.devPackageName);\r\n        // const thisFileModuleName = getPublicPackageName(packageMapping.namespace, declarationFile);\r\n        declarations += getPackageDeclaration(data, declarationFile, classMap, config.devPackageName);\r\n    });\r\n    const looseDeclarationsString = looseDeclarations\r\n        .map((declarationFile) => {\r\n            const data = fs.readFileSync(declarationFile, \"utf8\");\r\n            return `\\n${data}`;\r\n        })\r\n        .join(\"\\n\");\r\n    const packageVariables = getPackageMappingByDevName(config.devPackageName);\r\n    const defaultModuleName = getPublicPackageName(packageVariables.namespace);\r\n    const packageName = getPublicPackageName(packageVariables[buildType]);\r\n    // search for legacy export\r\n    const legacyRegex = new RegExp(`${packageName}/(legacy/legacy)`, \"mi\");\r\n    const legacy = moduleDeclaration.match(legacyRegex);\r\n    const namespaceDeclaration =\r\n        buildType === \"umd\"\r\n            ? `\r\ndeclare module ${defaultModuleName} {\r\n${declarations}\r\n}\r\n`\r\n            : \"\";\r\n    const output = `\r\n${moduleDeclaration}\r\ndeclare module \"${packageName}\" {\r\n    export * from \"${packageName}/${legacy ? legacy[1] : \"index\"}\";\r\n}\r\n\r\n${namespaceDeclaration}\r\n${looseDeclarationsString}\r\n`;\r\n    return {\r\n        output,\r\n        namespaceDeclaration,\r\n        looseDeclarationsString,\r\n    };\r\n}\r\n\r\nexport function generateDeclaration() {\r\n    const configFilePath = checkArgs(\"--config\") as string;\r\n    if (!configFilePath) {\r\n        throw new Error(\"--config path to config file is required\");\r\n    }\r\n    const asJSON = checkArgs(\"--json\", true) as boolean;\r\n    const rootDir = findRootDirectory();\r\n    // import { createRequire } from \"module\";\r\n    // const requireRequest = createRequire(import.meta.url);\r\n    // // a hack to load JSON!\r\n    // const config = requireRequest(path.join(path.resolve(\".\"), configFilePath));\r\n    const config: IGenerateDeclarationConfig | IGenerateDeclarationConfig[] = JSON.parse(\r\n        asJSON ? configFilePath : fs.readFileSync(path.join(path.resolve(\".\"), configFilePath), \"utf8\")\r\n    );\r\n    if (!config) {\r\n        throw new Error(\"No config file found\");\r\n    }\r\n    const configArray = Array.isArray(config) ? config : [config];\r\n    const filter = checkArgs(\"--filter\") as string;\r\n    configArray.forEach((config: IGenerateDeclarationConfig) => {\r\n        if (filter) {\r\n            if (filter.indexOf(config.declarationLibs[0]) === -1) {\r\n                return;\r\n            }\r\n        }\r\n        const outputDir = config.outputDirectory || \"./dist\";\r\n        checkDirectorySync(outputDir);\r\n        const directoriesToWatch = config.declarationLibs.map((lib: string) => path.join(rootDir, \"packages\", `${camelize(lib).replace(/@/g, \"\")}/dist/**/*.d.ts`));\r\n        const looseDeclarations = config.declarationLibs.map((lib: string) => path.join(rootDir, \"packages\", `${camelize(lib).replace(/@/g, \"\")}/**/LibDeclarations/**/*.d.ts`));\r\n\r\n        const debounced = debounce(() => {\r\n            const { output, namespaceDeclaration, looseDeclarationsString } = generateCombinedDeclaration(\r\n                directoriesToWatch\r\n                    .map((dir) =>\r\n                        globSync(dir, {\r\n                            windowsPathsNoEscape: true,\r\n                        })\r\n                    )\r\n                    .flat(),\r\n                config,\r\n                looseDeclarations\r\n                    .map((dir) =>\r\n                        globSync(dir, {\r\n                            windowsPathsNoEscape: true,\r\n                        })\r\n                    )\r\n                    .flat(),\r\n                config.buildType\r\n            );\r\n            const filename = `${outputDir}/${config.filename || \"index.d.ts\"}`;\r\n            if (!checkArgs(\"--watch\") && namespaceDeclaration && config.filename?.includes(\".module.d.ts\")) {\r\n                fs.writeFileSync(\r\n                    filename.replace(\".module\", \"\"),\r\n                    `${namespaceDeclaration}\r\n${looseDeclarationsString || \"\"}\r\n                `\r\n                );\r\n                // check documentation flags\r\n                if (config.addToDocumentation) {\r\n                    // make sure snapshot directory exists\r\n                    checkDirectorySync(path.join(rootDir, \".snapshot\"));\r\n                    const documentationFile = path.join(rootDir, \".snapshot\", \"documentation.d.ts\");\r\n                    const originalFile =\r\n                        fs.existsSync(documentationFile) && !config.initDocumentation\r\n                            ? fs.readFileSync(documentationFile, \"utf8\")\r\n                            : fs.readFileSync(path.resolve(rootDir, \"packages/public/glTF2Interface\", \"babylon.glTF2Interface.d.ts\"), \"utf8\");\r\n                    fs.writeFileSync(\r\n                        documentationFile,\r\n                        `${originalFile}\r\n${namespaceDeclaration}\r\n${looseDeclarationsString || \"\"}`\r\n                    );\r\n                }\r\n            }\r\n            // check hash\r\n            if (fs.existsSync(filename)) {\r\n                const hash = getHashOfFile(filename);\r\n                const newHash = getHashOfContent(output);\r\n                if (hash === newHash) {\r\n                    return;\r\n                }\r\n            }\r\n            fs.writeFileSync(filename, output);\r\n            console.log(\"declaration file generated\", config.declarationLibs);\r\n        }, 250);\r\n\r\n        // debounced();\r\n        if (checkArgs(\"--watch\")) {\r\n            const watchSize: { [path: string]: number } = {};\r\n            chokidar\r\n                .watch(directoriesToWatch, {\r\n                    ignoreInitial: false,\r\n                    awaitWriteFinish: {\r\n                        stabilityThreshold: 300,\r\n                        pollInterval: 100,\r\n                    },\r\n                    alwaysStat: true,\r\n                })\r\n                .on(\"all\", (e, p, stats) => {\r\n                    if (stats) {\r\n                        if (watchSize[p] === stats.size) {\r\n                            return;\r\n                        }\r\n                        watchSize[p] = stats.size;\r\n                    }\r\n                    debounced();\r\n                });\r\n        } else {\r\n            debounced();\r\n        }\r\n    });\r\n}\r\n"]}
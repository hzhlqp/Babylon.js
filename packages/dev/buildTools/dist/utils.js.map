{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\r\nimport * as fs from \"fs\";\r\nimport * as path from \"path\";\r\nimport * as dotenv from \"dotenv\";\r\nimport * as crypto from \"crypto\";\r\nimport { globSync } from \"glob\";\r\n\r\nexport function populateEnvironment() {\r\n    dotenv.config({ path: path.resolve(findRootDirectory(), \"./.env\") });\r\n}\r\n\r\npopulateEnvironment();\r\n\r\nexport function checkDirectorySync(directory: string) {\r\n    try {\r\n        fs.statSync(directory);\r\n    } catch (e) {\r\n        fs.mkdirSync(directory, { recursive: true });\r\n    }\r\n}\r\n\r\nexport function removeDir(path: string) {\r\n    if (fs.existsSync(path)) {\r\n        const files = fs.readdirSync(path);\r\n\r\n        if (files.length > 0) {\r\n            files.forEach(function (filename: string) {\r\n                if (fs.statSync(path + \"/\" + filename).isDirectory()) {\r\n                    removeDir(path + \"/\" + filename);\r\n                } else {\r\n                    fs.unlinkSync(path + \"/\" + filename);\r\n                }\r\n            });\r\n        } else {\r\n            console.log(\"No files found in the directory.\");\r\n        }\r\n    } else {\r\n        console.log(\"Directory path not found.\");\r\n    }\r\n}\r\n\r\nconst filterDashes = (str: string) => {\r\n    let index = 0;\r\n    while (str[index] === \"-\") {\r\n        index++;\r\n    }\r\n    return str.substring(index);\r\n};\r\n\r\nexport const externalArgs: string[] = [];\r\n\r\nexport const checkArgs = (testArgument: string | string[], checkOnly: boolean = false, requiredIfSet = false): string | boolean => {\r\n    const args = externalArgs.length ? externalArgs : process.argv.slice(2);\r\n    const index = typeof testArgument === \"string\" ? args.indexOf(testArgument) : testArgument.map((arg) => args.indexOf(arg)).find((idx) => idx !== -1);\r\n    const envValue =\r\n        typeof testArgument === \"string\"\r\n            ? process.env[filterDashes(testArgument).toUpperCase().replace(/-/g, \"_\")]\r\n            : testArgument.map((arg) => process.env[filterDashes(arg).toUpperCase().replace(/-/g, \"_\")]).filter((str) => !!str)[0];\r\n    if (index === -1 || index === undefined) {\r\n        // is it defined in the .env file?\r\n        if (envValue) {\r\n            return envValue;\r\n        }\r\n        return checkOnly ? false : \"\";\r\n    } else {\r\n        if (!checkOnly) {\r\n            const returnValue = args[index + 1] && args[index + 1][0] !== \"-\" ? args[index + 1] : \"\";\r\n            if (requiredIfSet && !returnValue) {\r\n                return false;\r\n            } else {\r\n                return returnValue || true;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n};\r\n\r\nexport function copyFile(from: string, to: string, silent?: boolean, checkHash?: boolean) {\r\n    checkDirectorySync(path.dirname(to));\r\n    if (checkHash) {\r\n        // check if file exists\r\n        if (fs.existsSync(to)) {\r\n            const hash = getHashOfFile(to);\r\n            const newHash = getHashOfFile(from);\r\n            if (hash === newHash) {\r\n                if (!silent) {\r\n                    console.log(`${from} is up to date.`);\r\n                }\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    fs.copyFileSync(from, to);\r\n    if (!silent) {\r\n        console.log(\"File copied: \" + from);\r\n    }\r\n}\r\n\r\n/**\r\n * This function will copy a folder from one location to another, independent of the OS.\r\n * @param from directory to copy from\r\n * @param to directory to copy to\r\n * @param silent if true, will not log anything\r\n */\r\nexport function copyFolder(from: string, to: string, silent?: boolean) {\r\n    checkDirectorySync(to);\r\n    // check if from is a folder\r\n    let isDirectory = false;\r\n    try {\r\n        isDirectory = fs.lstatSync(from).isDirectory();\r\n    } catch (e) {}\r\n    const files = isDirectory\r\n        ? fs.readdirSync(from)\r\n        : globSync(from, {\r\n              windowsPathsNoEscape: true,\r\n          });\r\n    const baseDir = isDirectory ? from : \"\";\r\n    for (const file of files) {\r\n        const basename = isDirectory ? file : path.basename(file);\r\n        const current = fs.lstatSync(path.join(baseDir, file));\r\n        if (current.isDirectory()) {\r\n            copyFolder(path.join(baseDir, file), path.join(to, basename), silent);\r\n        } else if (current.isSymbolicLink()) {\r\n            const symlink = fs.readlinkSync(path.join(baseDir, file));\r\n            fs.symlinkSync(symlink, path.join(to, basename));\r\n        }\r\n        copyFile(path.join(baseDir, file), path.join(to, basename), silent);\r\n    }\r\n}\r\n\r\nexport const kebabize = (str: string) => str.replace(/[A-Z]+(?![a-z])|[A-Z]/g, ($, ofs) => (ofs ? \"-\" : \"\") + $.toLowerCase());\r\n\r\nexport const camelize = (s: string) => s.replace(/-./g, (x: string) => x[1].toUpperCase());\r\n\r\nexport const debounce = <T extends (...args: any[]) => any>(callback: T, waitFor: number) => {\r\n    let timeout: NodeJS.Timeout | number;\r\n    return (...args: Parameters<T>): ReturnType<T> => {\r\n        let result: any;\r\n        clearTimeout(timeout as number);\r\n        timeout = setTimeout(() => {\r\n            result = callback(...args);\r\n        }, waitFor);\r\n        return result;\r\n    };\r\n};\r\n\r\nexport function findRootDirectory(): string {\r\n    let localPackageJSON = { name: \"\" };\r\n    let basePath: string = process.cwd();\r\n    let currentRoot = basePath;\r\n    do {\r\n        try {\r\n            localPackageJSON = JSON.parse(fs.readFileSync(path.join(basePath, \"./package.json\")).toString());\r\n        } catch (e) {}\r\n        currentRoot = basePath;\r\n        // console.log(localPackageJSON);\r\n        basePath = path.resolve(basePath, \"..\");\r\n        // process.chdir(\"..\");\r\n        if (basePath === currentRoot) {\r\n            throw new Error(\"Could not find the root package.json\");\r\n        }\r\n    } while (localPackageJSON.name !== \"@babylonjs/root\");\r\n    return path.resolve(currentRoot);\r\n}\r\n\r\nexport const getHashOfFile = (filePath: string) => {\r\n    const content = fs.readFileSync(filePath, \"utf8\");\r\n    return getHashOfContent(content);\r\n};\r\n\r\nexport const getHashOfContent = (content: string) => {\r\n    const md5sum = crypto.createHash(\"md5\");\r\n    md5sum.update(content);\r\n    return md5sum.digest(\"hex\");\r\n};\r\n"]}
{"version":3,"file":"devWatcher.js","sourceRoot":"","sources":["../src/devWatcher.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\r\nimport { checkArgs, findRootDirectory } from \"./utils.js\";\r\nimport { spawn } from \"child_process\";\r\n\r\n// npx build-tools -c dw -p \"@lts/core,@lts/gui\" -wd --lts\r\n// npx build-tools -c dw -p \"core,gui\" -wd -wa\r\n// npx build-tools -c dw  -wd -wa --lts -s --https\r\n\r\nexport const devWatch = () => {\r\n    // read the options\r\n    const pkgArg = checkArgs([\"-p\", \"--packages\"], false, true);\r\n    const packages = pkgArg && typeof pkgArg === \"string\" ? pkgArg.split(\",\") : [\"all\"];\r\n    console.log(`Packages: ${packages.join(\", \")}`);\r\n    const watchDeclarations = checkArgs([\"-wd\", \"--watch-declarations\"], true);\r\n    const watchAssets = checkArgs([\"-ws\", \"--watch-shaders\", \"-wa\", \"--watch-assets\"], true);\r\n    const serve = checkArgs([\"-s\", \"--serve\"], true);\r\n    const https = checkArgs([\"-https\", \"--https\"], true);\r\n    const lts = checkArgs([\"-lts\", \"--lts\"], true);\r\n    const skipCompilation = checkArgs([\"-sc\", \"--skip-compilation\"], true);\r\n\r\n    const processes: { command: string; name: string; arguments: string[]; optional?: boolean }[] = [];\r\n    const processedPackages: string[] = [];\r\n    // start running the processes needed\r\n    if (packages[0] === \"all\") {\r\n        // global watchers\r\n        if (!skipCompilation) {\r\n            processes.push({\r\n                command: \"npm\",\r\n                arguments: [\"run\", \"watch:source:\" + (lts ? \"lts\" : \"dev\")],\r\n                name: \"typescript-all\",\r\n            });\r\n        }\r\n        // if (watchShaders) {\r\n        //     processes.push({\r\n        //         command: \"npm\",\r\n        //         arguments: [\"run\", \"watch:shaders\"],\r\n        //         name: \"shaders-all\",\r\n        //     });\r\n        // }\r\n        if (watchAssets) {\r\n            processes.push({\r\n                command: \"npm\",\r\n                arguments: [\"run\", \"watch:assets\"],\r\n                name: \"assets-all\",\r\n            });\r\n        }\r\n        if (lts) {\r\n            processes.push({\r\n                command: \"npm\",\r\n                arguments: [\"run\", \"watch:generated\"],\r\n                name: \"lts-all\",\r\n            });\r\n        }\r\n    } else {\r\n        packages.forEach((p) => {\r\n            if (p[0] !== \"@\") {\r\n                p = `@${lts ? \"lts\" : \"dev\"}/${p}`;\r\n            }\r\n            const devName = p.replace(\"lts\", \"dev\");\r\n            if (!skipCompilation) {\r\n                processes.push({\r\n                    command: \"npm\",\r\n                    arguments: [\"run\", `watch:source`, \"-w\", p],\r\n                    name: `typescript-${p}`,\r\n                });\r\n            }\r\n            if (watchAssets) {\r\n                processes.push({\r\n                    command: \"npm\",\r\n                    arguments: [\"run\", `watch:assets`, \"-w\", devName],\r\n                    name: `assets-${p}`,\r\n                    optional: true,\r\n                });\r\n            }\r\n            if (p.startsWith(\"@lts\")) {\r\n                processes.push({\r\n                    command: \"npm\",\r\n                    arguments: [\"run\", `watch:generated`, \"-w\", p],\r\n                    name: `lts-${p}`,\r\n                    optional: true,\r\n                });\r\n            }\r\n            processedPackages.push(p);\r\n        });\r\n    }\r\n\r\n    if (watchDeclarations) {\r\n        const filter = processedPackages.join(\",\");\r\n        const filterAddition = processedPackages.length === 0 ? [] : [\"--\", \"--filter\", filter];\r\n        processes.push({\r\n            // npm run watch:declaration -w @tools/babylon-server\r\n            command: \"npm\",\r\n            arguments: [\"run\", \"watch:declaration:\" + (lts ? \"lts\" : \"dev\"), \"-w\", \"@tools/babylon-server\", ...filterAddition],\r\n            name: \"declaration\",\r\n        });\r\n    }\r\n\r\n    if (serve) {\r\n        const ltsArgs = lts ? [\"--env=source=lts\"] : [];\r\n        const httpsArgs = https ? [\"--server-type\", \"https\", \"--host\", \"::\"] : [];\r\n        processes.push({\r\n            command: \"npm\",\r\n            arguments: [\"run\", \"serve\", \"-w\", \"@tools/babylon-server\", \"--\", ...ltsArgs, ...httpsArgs],\r\n            name: \"serve\",\r\n        });\r\n    }\r\n\r\n    // find the base path to run the commands. Should be the root!\r\n    // let localPackageJSON = JSON.parse(fs.readFileSync(path.join(process.cwd(), \"./package.json\")).toString());\r\n    // let basePath = process.cwd();\r\n    // while (localPackageJSON.name !== \"@babylonjs/root\") {\r\n    //     process.chdir(\"..\");\r\n    //     if (basePath === process.cwd()) {\r\n    //         throw new Error(\"Could not find the root package.json\");\r\n    //     }\r\n    //     basePath = process.cwd();\r\n    //     try {\r\n    //         localPackageJSON = JSON.parse(fs.readFileSync(path.join(process.cwd(), \"./package.json\")).toString());\r\n    //     } catch (e) {}\r\n    // }\r\n\r\n    const rootPath = findRootDirectory();\r\n\r\n    if (processes.length) {\r\n        processes.forEach((p) => {\r\n            console.log(`Starting ${p.name}`, p.command, p.arguments);\r\n            const child = spawn(p.command, p.arguments, { shell: true, cwd: rootPath });\r\n\r\n            if (!child || !child.stdout || !child.stderr) {\r\n                return;\r\n            }\r\n\r\n            child.stdout.setEncoding(\"utf8\");\r\n            child.stdout.on(\"data\", function (data) {\r\n                console.log(\"\\x1b[36m\", `[${p.name}]`, \"\\x1b[0m\", data);\r\n            });\r\n\r\n            child.stderr.setEncoding(\"utf8\");\r\n            child.stderr.on(\"data\", function (data) {\r\n                console.log(\"\\x1b[31m\", `[${p.name}]`, \"\\x1b[0m\", data);\r\n            });\r\n\r\n            child.on(\"close\", function (code) {\r\n                // callback(scriptOutput, code);\r\n                console.log(p.name, \"exit\", code);\r\n            });\r\n        });\r\n    }\r\n};\r\n"]}
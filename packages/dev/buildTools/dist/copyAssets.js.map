{"version":3,"file":"copyAssets.js","sourceRoot":"","sources":["../src/copyAssets.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\r\nimport { globSync } from \"glob\";\r\nimport * as path from \"path\";\r\nimport { copyFile, checkArgs } from \"./utils.js\";\r\nimport * as chokidar from \"chokidar\";\r\nimport type { DevPackageName } from \"./packageMapping.js\";\r\nimport { buildShader } from \"./buildShaders.js\";\r\n\r\nconst processFile = (file: string, options: { isCore?: boolean; basePackageName?: DevPackageName; pathPrefix?: string; outputDir?: string } = {}) => {\r\n    if (!options.outputDir) {\r\n        options.outputDir = \"dist\";\r\n    }\r\n    if (path.extname(file) === \".fx\") {\r\n        buildShader(file, options.basePackageName, options.isCore);\r\n    } else {\r\n        if (options.pathPrefix) {\r\n            const regex = new RegExp(`${options.pathPrefix.replace(/\\//g, \"\\\\/\")}src([/\\\\\\\\])`);\r\n            copyFile(file, file.replace(regex, `${options.outputDir}$1`), true, true);\r\n        } else {\r\n            copyFile(file, file.replace(/src([/\\\\])/, `${options.outputDir}$1`), true, true);\r\n        }\r\n    }\r\n};\r\n\r\nexport const processAssets = (options: { extensions: string[] } = { extensions: [\"png\", \"jpg\", \"jpeg\", \"gif\", \"svg\", \"scss\", \"css\", \"html\", \"json\", \"fx\"] }) => {\r\n    const global = checkArgs(\"--global\", true);\r\n    const fileTypes = checkArgs([\"--file-types\", \"-ft\"], false, true);\r\n    const extensions = fileTypes && typeof fileTypes === \"string\" ? fileTypes.split(\",\") : options.extensions;\r\n    const pathPrefix = (checkArgs(\"--path-prefix\", false, true) as string) || \"\";\r\n    const globDirectory = global ? `./packages/**/*/src/**/*.+(${extensions.join(\"|\")})` : pathPrefix + `src/**/*.+(${extensions.join(\"|\")})`;\r\n    const isCore = !!checkArgs(\"--isCore\", true);\r\n    const outputDir = checkArgs([\"--output-dir\"], false, true) as string;\r\n    const verbose = checkArgs(\"--verbose\", true);\r\n    let basePackageName: DevPackageName = \"core\";\r\n    if (!isCore) {\r\n        const cliPackage = checkArgs(\"--package\", false, true);\r\n        if (cliPackage) {\r\n            basePackageName = cliPackage as DevPackageName;\r\n        }\r\n    }\r\n    const processOptions = { isCore, basePackageName, pathPrefix, outputDir };\r\n    // this script copies all assets (anything other than .ts?x) from the \"src\" folder to the \"dist\" folder\r\n    console.log(`Processing assets from ${globDirectory}`);\r\n\r\n    if (checkArgs(\"--watch\", true)) {\r\n        // support windows path with \"\\\\\" instead of \"/\"\r\n        chokidar\r\n            .watch(globDirectory, {\r\n                ignoreInitial: false,\r\n                awaitWriteFinish: {\r\n                    stabilityThreshold: 1000,\r\n                    pollInterval: 300,\r\n                },\r\n                alwaysStat: true,\r\n                interval: 300,\r\n                binaryInterval: 600,\r\n            })\r\n            .on(\"all\", (event, file) => {\r\n                // don't track directory changes\r\n                if (event === \"addDir\" || event === \"unlinkDir\") {\r\n                    return;\r\n                }\r\n                let verb: string;\r\n                switch (event) {\r\n                    case \"add\":\r\n                        verb = \"Initializing\";\r\n                        break;\r\n                    case \"change\":\r\n                        verb = \"Changing\";\r\n                        break;\r\n                    case \"unlink\":\r\n                        verb = \"Removing\";\r\n                        break;\r\n                }\r\n                verbose && console.log(`${verb} asset: ${file}`);\r\n                processFile(file, processOptions);\r\n            });\r\n        console.log(\"watching for asset changes...\");\r\n    } else {\r\n        globSync(globDirectory, {\r\n            windowsPathsNoEscape: true,\r\n        }).forEach((file) => {\r\n            processFile(file.replace(/\\\\/g, \"/\"), processOptions);\r\n        });\r\n    }\r\n};\r\n"]}
{"version":3,"file":"prepareSnapshot.js","sourceRoot":"","sources":["../src/prepareSnapshot.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\r\nimport { globSync } from \"glob\";\r\nimport * as path from \"path\";\r\nimport type { UMDPackageName } from \"./packageMapping.js\";\r\nimport { umdPackageMapping } from \"./packageMapping.js\";\r\nimport { copyFile, findRootDirectory } from \"./utils.js\";\r\n\r\nexport const prepareSnapshot = () => {\r\n    const baseDirectory = findRootDirectory();\r\n    const snapshotDirectory = path.join(baseDirectory, \".snapshot\");\r\n    Object.keys(umdPackageMapping).forEach((packageName) => {\r\n        const metadata = umdPackageMapping[packageName as UMDPackageName];\r\n        const corePath = path.join(baseDirectory, \"packages\", \"public\", \"umd\", packageName);\r\n        const coreUmd = globSync(`${corePath}/*+(.js|.d.ts|.map)`);\r\n        for (const file of coreUmd) {\r\n            copyFile(file, path.join(snapshotDirectory, metadata.baseDir, path.basename(file)), true);\r\n        }\r\n    });\r\n\r\n    // copy gltf2interface\r\n    {\r\n        const baseLocation = path.join(baseDirectory, \"packages\", \"public\");\r\n        const staticFiles = globSync(`${baseLocation}/glTF2Interface/*.*`);\r\n        for (const file of staticFiles) {\r\n            // ignore package.json files\r\n            if (path.basename(file) === \"package.json\") {\r\n                continue;\r\n            }\r\n            const relative = path.relative(baseLocation, file);\r\n            copyFile(file, path.join(snapshotDirectory, relative), false);\r\n        }\r\n    }\r\n\r\n    // make sure the .d.ts files are also available, clone the .module.d.ts files\r\n    {\r\n        const baseLocation = path.join(baseDirectory, \".snapshot\");\r\n        const staticFiles = globSync(`${baseLocation}/**/*.module.d.ts`);\r\n        for (const file of staticFiles) {\r\n            // check if the file already exists. if it isn't, copy it\r\n            if (!fs.existsSync(file.replace(\".module\", \"\"))) {\r\n                copyFile(file, file.replace(\".module\", \"\"), false);\r\n            }\r\n        }\r\n    }\r\n\r\n    // copy all static files\r\n    const baseLocation = path.join(baseDirectory, \"packages\", \"tools\", \"babylonServer\", \"public\");\r\n    const staticFiles = globSync(`${baseLocation}/**/*.*`);\r\n    for (const file of staticFiles) {\r\n        // ignore package.json files\r\n        if (path.basename(file) === \"package.json\") {\r\n            continue;\r\n        }\r\n        const relative = path.relative(baseLocation, file);\r\n        copyFile(file, path.join(snapshotDirectory, relative), true);\r\n    }\r\n    // copy dist from babylon server\r\n    const baseLocationDist = path.join(baseDirectory, \"packages\", \"tools\", \"babylonServer\", \"dist\");\r\n    const staticFilesDist = globSync(`${baseLocationDist}/**/*.js`);\r\n    for (const file of staticFilesDist) {\r\n        const relative = path.relative(baseLocationDist, file);\r\n        copyFile(file, path.join(snapshotDirectory, relative), true);\r\n    }\r\n\r\n    // generate timestamp.js, which contains the current timestamp\r\n    const timestamp = Date.now();\r\n    const timestampFile = path.join(snapshotDirectory, \"timestamp.js\");\r\n    fs.writeFileSync(timestampFile, `if(typeof globalThis !== \"undefined\") globalThis.__babylonSnapshotTimestamp__ = ${timestamp};`);\r\n\r\n    // if fileSizes.json exists, copy it as well\r\n    const fileSizesPath = path.join(baseDirectory, \"packages\", \"tools\", \"tests\", \"dist\", \"fileSizes.json\");\r\n    if (fs.existsSync(fileSizesPath)) {\r\n        copyFile(fileSizesPath, path.join(snapshotDirectory, \"fileSizes.json\"), true);\r\n    }\r\n\r\n    // copy the es6 builds\r\n    // removed for now\r\n    // {\r\n    //     const baseLocationDist = path.join(baseDirectory, \"packages\", \"public\", \"@babylonjs\");\r\n    //     const staticFilesDist = glob.sync(`${baseLocationDist}/**/*.*`);\r\n    //     for (const file of staticFilesDist) {\r\n    //         // ignore directories\r\n    //         if (fs.lstatSync(file).isDirectory()) {\r\n    //             continue;\r\n    //         }\r\n    //         const relative = path.relative(baseLocationDist, file);\r\n    //         copyFile(file, path.join(snapshotDirectory, \"es6\", relative), true);\r\n    //     }\r\n    // }\r\n};\r\n"]}
{"version":3,"file":"declarationsEs6.js","sourceRoot":"","sources":["../src/declarationsEs6.ts"],"names":[],"mappings":";;;AAAA,yCAAuC;AACvC,yBAAyB;AACzB,6BAA6B;AAC7B,+BAAgC;AAEzB,MAAM,eAAe,GAAG,GAAG,EAAE;IAChC,MAAM,IAAI,GAAG,IAAA,oBAAS,EAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAW,CAAC;IACnD,MAAM,YAAY,GAAG,IAAA,oBAAS,EAAC,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAW,CAAC;IACvE,MAAM,eAAe,GAAG,IAAA,oBAAS,EAAC,CAAC,sBAAsB,EAAE,OAAO,CAAC,CAAY,CAAC;IAChF,sCAAsC;IACtC,OAAO,CAAC,GAAG,CAAC,2BAA2B,IAAI,EAAE,EAAE,YAAY,CAAC,CAAC,CAAC,mBAAmB,YAAY,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAEtG,MAAM,WAAW,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,YAAY,CAAC,EAAE,MAAM,CAAC,CAAC;IAC1E,MAAM,MAAM,GAAG,IAAA,eAAQ,EAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,WAAW,CAAC,EAAE;QAClD,oBAAoB,EAAE,IAAI;KAC7B,CAAC;SACG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QACV,OAAO,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACzC,CAAC,CAAC;SACD,IAAI,CAAC,IAAI,CAAC;SACV,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;IAC9B,MAAM,UAAU,GAAG;EACrB,WAAW;;;EAGX,MAAM;EACN,CAAC;IACC,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,YAAY,CAAC,EAAE,UAAU,CAAC,CAAC;IAE3D,IAAI,eAAe,EAAE;QACjB,gFAAgF;QAChF,kEAAkE;QAClE,MAAM,KAAK,GAAG,IAAA,eAAQ,EAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;YAC7C,oBAAoB,EAAE,IAAI;SAC7B,CAAC,CAAC;QAEH,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YACnB,IAAI,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAC5C,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;YACjD,EAAE,CAAC,aAAa,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;KACN;AACL,CAAC,CAAC;AArCW,QAAA,eAAe,mBAqC1B","sourcesContent":["import { checkArgs } from \"./utils.js\";\r\nimport * as fs from \"fs\";\r\nimport * as path from \"path\";\r\nimport { globSync } from \"glob\";\r\n\r\nexport const declarationsEs6 = () => {\r\n    const root = checkArgs([\"--root\", \"-r\"]) as string;\r\n    const appendToFile = checkArgs([\"--append-to-file\", \"-atf\"]) as string;\r\n    const constEnumToEnum = checkArgs([\"--const-enum-to-enum\", \"-cete\"]) as boolean;\r\n    // eslint-disable-next-line no-console\r\n    console.log(`Declarations ES6: root: ${root}`, appendToFile ? `append to file: ${appendToFile}` : \"\");\r\n\r\n    const fileContent = fs.readFileSync(path.join(\".\", appendToFile), \"utf8\");\r\n    const mixins = globSync(path.join(root, \"**/*.d.ts\"), {\r\n        windowsPathsNoEscape: true,\r\n    })\r\n        .map((file) => {\r\n            return fs.readFileSync(file, \"utf8\");\r\n        })\r\n        .join(\"\\n\")\r\n        .replace(/declare /g, \"\");\r\n    const newContent = `\r\n${fileContent}\r\n// Mixins\r\ndeclare global{\r\n${mixins}\r\n}`;\r\n    fs.writeFileSync(path.join(\".\", appendToFile), newContent);\r\n\r\n    if (constEnumToEnum) {\r\n        // iterate over all files in the current directory and change const enum to enum\r\n        // This can be done since we are exporting the enums to js as well\r\n        const files = globSync(path.join(\"./**/*.d.ts\"), {\r\n            windowsPathsNoEscape: true,\r\n        });\r\n\r\n        files.forEach((file) => {\r\n            let content = fs.readFileSync(file, \"utf8\");\r\n            content = content.replace(/const enum/g, \"enum\");\r\n            fs.writeFileSync(file, content);\r\n        });\r\n    }\r\n};\r\n"]}
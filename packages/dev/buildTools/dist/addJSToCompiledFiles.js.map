{"version":3,"file":"addJSToCompiledFiles.js","sourceRoot":"","sources":["../src/addJSToCompiledFiles.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\r\nimport * as fs from \"fs\";\r\nimport { globSync } from \"glob\";\r\nimport * as path from \"path\";\r\nimport { checkArgs } from \"./utils.js\";\r\n\r\nfunction processSource(sourceCode: string, forceMJS: boolean) {\r\n    const extension = forceMJS ? \".mjs\" : \".js\";\r\n    return sourceCode\r\n        .replace(/((import|export).*[\"'](@babylonjs\\/.*\\/|\\.{1,2}\\/)((?!\\.scss|\\.svg|\\.png|\\.jpg).)*?)(\"|');/g, `$1${extension}$5;`)\r\n        .replace(/((import|export)\\([\"']((@babylonjs\\/.*\\/|\\.{1,2}\\/)((?!\\.scss|\\.svg|\\.png|\\.jpg).)*?))([\"'])\\)/g, `$1${extension}$6)`)\r\n        .replace(new RegExp(`(${extension}){2,}`, \"g\"), extension);\r\n}\r\n\r\nexport function addJsExtensionsToCompiledFiles(files: string[], forceMJS: boolean) {\r\n    const isVerbose = checkArgs(\"--verbose\", true);\r\n    files.forEach((file: string) => {\r\n        isVerbose && console.log(`Processing ${file}`);\r\n        const sourceCode = fs.readFileSync(file, \"utf-8\");\r\n        const processed = processSource(sourceCode, forceMJS);\r\n\r\n        const regex = /^import .* from \"(\\..*)\";/g;\r\n        let match;\r\n        while ((match = regex.exec(processed)) !== null) {\r\n            if (!fs.existsSync(path.resolve(path.dirname(file), match[1]))) {\r\n                console.log(file, path.resolve(path.dirname(file), match[1]));\r\n                throw new Error(`File ${match[1]} does not exist. Are you importing from an index/directory?`);\r\n            }\r\n        }\r\n        const dynamicRegex = /import\\(\"(\\..*?)\"\\)/g;\r\n        while ((match = dynamicRegex.exec(processed)) !== null) {\r\n            if (!fs.existsSync(path.resolve(path.dirname(file), match[1]))) {\r\n                console.log(file, path.resolve(path.dirname(file), match[1]));\r\n                throw new Error(`File ${match[1]} does not exist. Are you dynamically importing from an index/directory?`);\r\n            }\r\n        }\r\n        fs.writeFileSync(file, processed);\r\n    });\r\n}\r\n\r\nexport const addJsExtensionsToCompiledFilesCommand = () => {\r\n    let pathForFiles = checkArgs([\"--path-of-sources\", \"-pos\"], false, true);\r\n    const forceMJS = !!checkArgs(\"--mjs\", true);\r\n    if (!pathForFiles) {\r\n        pathForFiles = \"./**/*.js\";\r\n        console.log(\"No path specified, using default: \" + pathForFiles);\r\n    }\r\n    if (typeof pathForFiles === \"string\") {\r\n        console.log(`Adding .js extensions to files in ${pathForFiles}`);\r\n        addJsExtensionsToCompiledFiles(globSync(pathForFiles), forceMJS);\r\n    }\r\n};\r\n"]}
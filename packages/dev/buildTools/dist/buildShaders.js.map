{"version":3,"file":"buildShaders.js","sourceRoot":"","sources":["../src/buildShaders.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\r\nimport * as fs from \"fs\";\r\nimport * as path from \"path\";\r\nimport { checkDirectorySync, checkArgs, getHashOfFile, getHashOfContent } from \"./utils.js\";\r\n// import * as glob from \"glob\";\r\n// import * as chokidar from \"chokidar\";\r\n// import { DevPackageName } from \"./packageMapping\";\r\n/**\r\n * This module is used to build shaders.\r\n * Arguments:\r\n * * --isCore - defines that the shaders are part of the core library\r\n * * --package Package name - from which package should the core shaders be loaded. Defaults to @dev/core\r\n */\r\n\r\n/**\r\n * Template creating hidden ts file containing the shaders.\r\n * When moving to pure es6 we will need to remove the Shader assignment\r\n */\r\nconst tsShaderTemplate = `// Do not edit.\r\nimport { ShaderStore } from \"##SHADERSTORELOCATION_PLACEHOLDER##\";\r\n##INCLUDES_PLACEHOLDER##\r\nconst name = \"##NAME_PLACEHOLDER##\";\r\nconst shader = \\`##SHADER_PLACEHOLDER##\\`;\r\n// Sideeffect\r\nShaderStore.##SHADERSTORE_PLACEHOLDER##[name] = shader;\r\n##EXPORT_PLACEHOLDER##\r\n`;\r\n\r\n/**\r\n * Get the shaders name from their path.\r\n * @param filename\r\n * @returns the shader name\r\n */\r\nfunction getShaderName(filename: string) {\r\n    const parts = filename.split(\".\");\r\n    if (parts[1] !== \"fx\") {\r\n        return parts[0] + (parts[1] === \"fragment\" ? \"Pixel\" : parts[1] === \"compute\" ? \"Compute\" : \"Vertex\") + \"Shader\";\r\n    } else {\r\n        return parts[0];\r\n    }\r\n}\r\n\r\n/**\r\n * Get the shaders included in the current one to generate to proper imports.\r\n * @param sourceCode\r\n * @returns the includes\r\n */\r\nfunction getIncludes(sourceCode: string) {\r\n    const regex = /#include<(.+)>(\\((.*)\\))*(\\[(.*)\\])*/g;\r\n    let match = regex.exec(sourceCode);\r\n\r\n    const includes = new Set();\r\n\r\n    while (match != null) {\r\n        let includeFile = match[1];\r\n\r\n        // Uniform declaration\r\n        if (includeFile.indexOf(\"__decl__\") !== -1) {\r\n            includeFile = includeFile.replace(/__decl__/, \"\");\r\n\r\n            // Add non UBO import\r\n            const noUBOFile = includeFile + \"Declaration\";\r\n            includes.add(noUBOFile);\r\n\r\n            includeFile = includeFile.replace(/Vertex/, \"Ubo\");\r\n            includeFile = includeFile.replace(/Fragment/, \"Ubo\");\r\n            const uBOFile = includeFile + \"Declaration\";\r\n            includes.add(uBOFile);\r\n        } else {\r\n            includes.add(includeFile);\r\n        }\r\n\r\n        match = regex.exec(sourceCode);\r\n    }\r\n\r\n    return includes;\r\n}\r\n\r\n/**\r\n * Generate a ts file per shader file.\r\n * @param filePath\r\n * @param basePackageName\r\n * @param isCore\r\n */\r\nexport function buildShader(filePath: string, basePackageName: string = \"core\", isCore?: boolean | string) {\r\n    const isVerbose = checkArgs(\"--verbose\", true);\r\n    isVerbose && console.log(\"Generating shaders for \" + filePath);\r\n    const content = fs.readFileSync(filePath, \"utf8\");\r\n    const filename = path.basename(filePath);\r\n    const normalized = path.normalize(filePath);\r\n    const directory = path.dirname(normalized);\r\n    const isWGSL = directory.indexOf(\"ShadersWGSL\") > -1;\r\n    const tsFilename = filename.replace(\".fx\", \".ts\").replace(\".wgsl\", \".ts\");\r\n    const shaderName = getShaderName(filename);\r\n    const appendDirName = isWGSL ? \"WGSL\" : \"\";\r\n    let fxData = content.toString();\r\n\r\n    if (checkArgs(\"--global\", true)) {\r\n        isCore = filePath.includes(path.sep + \"core\" + path.sep) || filePath.includes(\"/core/\");\r\n    }\r\n\r\n    // Remove Trailing whitespace...\r\n    fxData = fxData\r\n        .replace(/^\\uFEFF/, \"\")\r\n        .replace(/\\r\\n/g, \"\\n\")\r\n        .replace(/(\\/\\/)+.*$/gm, \"\")\r\n        .replace(/\\t+/gm, \" \")\r\n        .replace(/^\\s+/gm, \"\")\r\n        // eslint-disable-next-line no-useless-escape\r\n        .replace(/ ([\\*\\/\\=\\+\\-\\>\\<]+) /g, \"$1\")\r\n        .replace(/,[ ]/g, \",\")\r\n        .replace(/ {1,}/g, \" \")\r\n        // .replace(/;\\s*/g, \";\")\r\n        .replace(/^#(.*)/gm, \"#$1\\n\")\r\n        .replace(/\\{\\n([^#])/g, \"{$1\")\r\n        .replace(/\\n\\}/g, \"}\")\r\n        .replace(/^(?:[\\t ]*(?:\\r?\\n|\\r))+/gm, \"\")\r\n        .replace(/;\\n([^#])/g, \";$1\");\r\n\r\n    // Generate imports for includes.\r\n    let includeText = \"\";\r\n    const includes = getIncludes(fxData);\r\n    includes.forEach((entry) => {\r\n        if (isCore) {\r\n            includeText =\r\n                includeText +\r\n                `import \"./ShadersInclude/${entry}\";\r\n`;\r\n        } else {\r\n            includeText =\r\n                includeText +\r\n                `import \"${basePackageName}/Shaders/ShadersInclude/${entry}\";\r\n`;\r\n        }\r\n    });\r\n\r\n    // Chose shader store.\r\n    const isInclude = directory.indexOf(\"ShadersInclude\") > -1;\r\n    const shaderStore = isInclude ? `IncludesShadersStore${appendDirName}` : `ShadersStore${appendDirName}`;\r\n    let shaderStoreLocation;\r\n    if (isCore) {\r\n        if (isInclude) {\r\n            shaderStoreLocation = \"../../Engines/shaderStore\";\r\n            includeText = includeText.replace(/ShadersInclude\\//g, \"\");\r\n        } else {\r\n            shaderStoreLocation = \"../Engines/shaderStore\";\r\n        }\r\n    } else {\r\n        shaderStoreLocation = basePackageName + \"/Engines/shaderStore\";\r\n    }\r\n\r\n    // Fill template in.\r\n    let tsContent = tsShaderTemplate.replace(\"##SHADERSTORELOCATION_PLACEHOLDER##\", shaderStoreLocation);\r\n    tsContent = tsContent\r\n        .replace(\"##INCLUDES_PLACEHOLDER##\", includeText)\r\n        .replace(\"##NAME_PLACEHOLDER##\", shaderName)\r\n        .replace(\"##SHADER_PLACEHOLDER##\", fxData)\r\n        .replace(\"##SHADERSTORE_PLACEHOLDER##\", shaderStore)\r\n        .replace(\r\n            \"##EXPORT_PLACEHOLDER##\",\r\n            `/** @internal */\r\nexport const ${shaderName + (isWGSL ? \"WGSL\" : \"\")} = { name, shader };`\r\n        );\r\n\r\n    // Go to disk.\r\n    const tsShaderFilename = path.join(directory, tsFilename);\r\n    checkDirectorySync(path.dirname(tsShaderFilename));\r\n    // check hash\r\n    if (fs.existsSync(tsShaderFilename)) {\r\n        const hash = getHashOfFile(tsShaderFilename);\r\n        const newHash = getHashOfContent(tsContent);\r\n        if (hash === newHash) {\r\n            return;\r\n        }\r\n    }\r\n    fs.writeFileSync(tsShaderFilename, tsContent);\r\n    isVerbose && console.log(\"Generated \" + tsShaderFilename);\r\n}\r\n"]}
{"version":3,"file":"tools.js","sourceRoot":"","sources":["../src/tools.ts"],"names":[],"mappings":"AAAA,MAAM,OAAO,KAAK;IACP,MAAM,CAAC,WAAW,CAAC,IAAS,EAAE,cAAmB;QACpD,IAAI,IAAI,KAAK,cAAc,EAAE;YACzB,OAAO,IAAI,CAAC;SACf;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;QACvE,IAAI,QAAQ,IAAI,IAAI,CAAC,YAAY,EAAE,KAAK,eAAe,EAAE;YACrD,KAAK,MAAM,KAAK,IAAI,QAAQ,EAAE;gBAC1B,IAAI,KAAK,CAAC,WAAW,CAAC,KAAK,EAAE,cAAc,CAAC,EAAE;oBAC1C,OAAO,IAAI,CAAC;iBACf;aACJ;SACJ;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAEO,MAAM,CAAC,4CAA4C,CAAC,KAAiB;QACzE,MAAM,MAAM,GAAe,EAAE,CAAC;QAC9B,KAAK,MAAM,CAAC,IAAI,KAAK,EAAE;YACnB,2IAA2I;YAC3I,IAAI,CAAC,CAAC,iBAAiB,IAAI,CAAC,CAAC,iBAAiB,CAAC,MAAM,IAAI,CAAC,CAAC,cAAc,EAAE;gBACvE,KAAK,CAAC,4CAA4C,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;oBACjF,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACnB,CAAC,CAAC,CAAC;aACN;iBAAM,IAAI,CAAC,CAAC,CAAC,iBAAiB,IAAI,CAAC,CAAC,CAAC,iBAAiB,CAAC,MAAM,EAAE;gBAC5D,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aAClB;SACJ;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAEM,MAAM,CAAC,aAAa,CAAC,GAAQ;QAChC,IAAI,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE;YACrB,OAAO,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;SAC9B;QACD,OAAO,EAAE,CAAC;IACd,CAAC;IAEM,MAAM,CAAC,aAAa,CAAC,MAAW,EAAE,KAAY;QACjD,IAAI,CAAC,KAAK,EAAE;YACR,OAAO,EAAE,CAAC;SACb;QAED,MAAM,UAAU,GAAG,KAAK,CAAC,4CAA4C,CAAC,KAAK,CAAC,CAAC;QAE7E,IAAI,MAAM,IAAI,MAAM,CAAC,iBAAiB,IAAI,MAAM,CAAC,iBAAiB,CAAC,gBAAgB,EAAE;YACjF,UAAU,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC;SACjE;QAED,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC,CAAM,EAAE,CAAM,EAAE,EAAE;YACtC,MAAM,UAAU,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;YACxD,MAAM,UAAU,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;YAExD,IAAI,UAAU,KAAK,UAAU,EAAE;gBAC3B,OAAO,CAAC,CAAC;aACZ;YAED,IAAI,UAAU,GAAG,UAAU,EAAE;gBACzB,OAAO,CAAC,CAAC;aACZ;YAED,OAAO,CAAC,CAAC,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;CACJ","sourcesContent":["export class Tools {\r\n    public static LookForItem(item: any, selectedEntity: any): boolean {\r\n        if (item === selectedEntity) {\r\n            return true;\r\n        }\r\n\r\n        const children = item.getChildren ? item.getChildren() : item.children;\r\n        if (children && item.getClassName() !== \"MultiMaterial\") {\r\n            for (const child of children) {\r\n                if (Tools.LookForItem(child, selectedEntity)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private static _RecursiveRemoveHiddenMeshesAndHoistChildren(items: Array<any>) {\r\n        const result: Array<any> = [];\r\n        for (const i of items) {\r\n            // If the mesh is hidden, add it's children that are not hidden, this will handle the case of bounding box parenting for bounding box gizmo\r\n            if (i.reservedDataStore && i.reservedDataStore.hidden && i.getChildMeshes) {\r\n                Tools._RecursiveRemoveHiddenMeshesAndHoistChildren(i.getChildMeshes()).forEach((m) => {\r\n                    result.push(m);\r\n                });\r\n            } else if (!i.reservedDataStore || !i.reservedDataStore.hidden) {\r\n                result.push(i);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public static GetNameString(obj: any) {\r\n        if (obj?.name?.toString) {\r\n            return obj.name.toString();\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    public static SortAndFilter(parent: any, items: any[]): any[] {\r\n        if (!items) {\r\n            return [];\r\n        }\r\n\r\n        const finalArray = Tools._RecursiveRemoveHiddenMeshesAndHoistChildren(items);\r\n\r\n        if (parent && parent.reservedDataStore && parent.reservedDataStore.detachedChildren) {\r\n            finalArray.push(...parent.reservedDataStore.detachedChildren);\r\n        }\r\n\r\n        return finalArray.sort((a: any, b: any) => {\r\n            const lowerCaseA = Tools.GetNameString(a).toLowerCase();\r\n            const lowerCaseB = Tools.GetNameString(b).toLowerCase();\r\n\r\n            if (lowerCaseA === lowerCaseB) {\r\n                return 0;\r\n            }\r\n\r\n            if (lowerCaseA > lowerCaseB) {\r\n                return 1;\r\n            }\r\n\r\n            return -1;\r\n        });\r\n    }\r\n}\r\n"]}
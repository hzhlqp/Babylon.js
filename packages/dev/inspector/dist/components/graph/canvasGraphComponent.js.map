{"version":3,"file":"canvasGraphComponent.js","sourceRoot":"","sources":["../../../src/components/graph/canvasGraphComponent.tsx"],"names":[],"mappings":";AAGA,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAC1C,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAI1D,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAY1C,MAAM,CAAC,MAAM,oBAAoB,GAAyC,CAAC,KAAiC,EAAE,EAAE;IAC5G,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,gBAAgB,EAAE,0BAA0B,EAAE,+BAA+B,EAAE,gBAAgB,EAAE,GAAG,KAAK,CAAC;IACxI,MAAM,SAAS,GAAqD,MAAM,CAAC,IAAI,CAAC,CAAC;IAEjF,SAAS,CAAC,GAAG,EAAE;QACX,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE;YACpB,OAAO;SACV;QAED,IAAI,gBAAgB,EAAE;YAClB,SAAS,CAAC,OAAO,CAAC,KAAK,GAAG,gBAAgB,CAAC,KAAK,CAAC;YACjD,SAAS,CAAC,OAAO,CAAC,MAAM,GAAG,gBAAgB,CAAC,MAAM,CAAC;SACtD;QAED,IAAI,EAAkC,CAAC;QAEvC,IAAI;YACA,EAAE,GAAG,IAAI,kBAAkB,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,QAAQ,EAAE,SAAS,CAAC,QAAQ,EAAE,+BAA+B,EAAE,CAAC,CAAC;SACrH;QAAC,OAAO,KAAK,EAAE;YACZ,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACpB,OAAO;SACV;QAED,MAAM,aAAa,GAAG,CAAC,OAAwB,EAAE,EAAE;YAC/C,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE;gBACpB,OAAO;aACV;YACD,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,SAAS,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC;YAChE,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC;YACrC,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,GAAG,GAAG,CAAC;YACtC,EAAE,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;QACxB,CAAC,CAAC;QAEF,MAAM,WAAW,GAAG,GAAG,EAAE;YACrB,EAAE,EAAE,MAAM,EAAE,CAAC;QACjB,CAAC,CAAC;QAEF,MAAM,WAAW,GAAG,CAAC,IAAgC,EAAE,EAAE;YACrD,IAAI,CAAC,EAAE,EAAE;gBACL,OAAO;aACV;YACD,EAAE,CAAC,QAAQ,GAAG,IAAI,CAAC;YACnB,EAAE,CAAC,MAAM,EAAE,CAAC;QAChB,CAAC,CAAC;QAEF,MAAM,iBAAiB,GAAG,GAAG,EAAE;YAC3B,EAAE,EAAE,iBAAiB,EAAE,CAAC;QAC5B,CAAC,CAAC;QAEF,KAAK,CAAC,uBAAuB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC/C,SAAS,CAAC,kBAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAE9C,gBAAgB,EAAE,GAAG,CAAC,aAAa,CAAC,CAAC;QACrC,0BAA0B,EAAE,GAAG,CAAC,iBAAiB,CAAC,CAAC;QACnD,OAAO,GAAG,EAAE;YACR,EAAE,EAAE,OAAO,EAAE,CAAC;YACd,gBAAgB,EAAE,cAAc,CAAC,aAAa,CAAC,CAAC;YAChD,KAAK,CAAC,uBAAuB,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YAC1D,SAAS,CAAC,kBAAkB,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;QAC7D,CAAC,CAAC;IACN,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;IAEhB,OAAO,iBAAQ,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,SAAS,GAAW,CAAC;AACrD,CAAC,CAAC","sourcesContent":["import type { PerformanceViewerCollector } from \"core/Misc/PerformanceViewer/performanceViewerCollector\";\r\nimport type { Observable } from \"core/Misc/observable\";\r\nimport * as React from \"react\";\r\nimport { useEffect, useRef } from \"react\";\r\nimport { CanvasGraphService } from \"./canvasGraphService\";\r\nimport type { IPerfLayoutSize, IVisibleRangeChangedObservableProps } from \"./graphSupportingTypes\";\r\nimport type { IPerfMetadata } from \"core/Misc/interfaces/iPerfViewer\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { Logger } from \"core/Misc/logger\";\r\n\r\ninterface ICanvasGraphComponentProps {\r\n    id: string;\r\n    scene: Scene;\r\n    collector: PerformanceViewerCollector;\r\n    layoutObservable?: Observable<IPerfLayoutSize>;\r\n    returnToPlayheadObservable?: Observable<void>;\r\n    onVisibleRangeChangedObservable?: Observable<IVisibleRangeChangedObservableProps>;\r\n    initialGraphSize?: { width: number; height: number };\r\n}\r\n\r\nexport const CanvasGraphComponent: React.FC<ICanvasGraphComponentProps> = (props: ICanvasGraphComponentProps) => {\r\n    const { id, collector, scene, layoutObservable, returnToPlayheadObservable, onVisibleRangeChangedObservable, initialGraphSize } = props;\r\n    const canvasRef: React.MutableRefObject<HTMLCanvasElement | null> = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (!canvasRef.current) {\r\n            return;\r\n        }\r\n\r\n        if (initialGraphSize) {\r\n            canvasRef.current.width = initialGraphSize.width;\r\n            canvasRef.current.height = initialGraphSize.height;\r\n        }\r\n\r\n        let cs: CanvasGraphService | undefined;\r\n\r\n        try {\r\n            cs = new CanvasGraphService(canvasRef.current, { datasets: collector.datasets, onVisibleRangeChangedObservable });\r\n        } catch (error) {\r\n            Logger.Error(error);\r\n            return;\r\n        }\r\n\r\n        const layoutUpdated = (newSize: IPerfLayoutSize) => {\r\n            if (!canvasRef.current) {\r\n                return;\r\n            }\r\n            const { left, top } = canvasRef.current.getBoundingClientRect();\r\n            newSize.width = newSize.width - left;\r\n            newSize.height = newSize.height - top;\r\n            cs?.resize(newSize);\r\n        };\r\n\r\n        const dataUpdated = () => {\r\n            cs?.update();\r\n        };\r\n\r\n        const metaUpdated = (meta: Map<string, IPerfMetadata>) => {\r\n            if (!cs) {\r\n                return;\r\n            }\r\n            cs.metadata = meta;\r\n            cs.update();\r\n        };\r\n\r\n        const resetDataPosition = () => {\r\n            cs?.resetDataPosition();\r\n        };\r\n\r\n        scene.onAfterRenderObservable.add(dataUpdated);\r\n        collector.metadataObservable.add(metaUpdated);\r\n\r\n        layoutObservable?.add(layoutUpdated);\r\n        returnToPlayheadObservable?.add(resetDataPosition);\r\n        return () => {\r\n            cs?.destroy();\r\n            layoutObservable?.removeCallback(layoutUpdated);\r\n            scene.onAfterRenderObservable.removeCallback(dataUpdated);\r\n            collector.metadataObservable.removeCallback(metaUpdated);\r\n        };\r\n    }, [canvasRef]);\r\n\r\n    return <canvas id={id} ref={canvasRef}></canvas>;\r\n};\r\n"]}
{"version":3,"file":"treeItemComponent.js","sourceRoot":"","sources":["../../../src/components/sceneExplorer/treeItemComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\n\r\nimport type { Nullable } from \"core/types\";\r\nimport type { IInspectorContextMenuItem, IExplorerExtensibilityGroup } from \"core/Debug/debugLayer\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faMinus, faBan, faExpandArrowsAlt, faCompress } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { TreeItemSelectableComponent } from \"./treeItemSelectableComponent\";\r\nimport { Tools } from \"../../tools\";\r\nimport type { GlobalState } from \"../globalState\";\r\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\n\r\ninterface ITreeItemExpandableHeaderComponentProps {\r\n    isExpanded: boolean;\r\n    label: string;\r\n    onClick: () => void;\r\n    onExpandAll: (expand: boolean) => void;\r\n}\r\n\r\nclass TreeItemExpandableHeaderComponent extends React.Component<ITreeItemExpandableHeaderComponentProps> {\r\n    constructor(props: ITreeItemExpandableHeaderComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    expandAll() {\r\n        this.props.onExpandAll(!this.props.isExpanded);\r\n    }\r\n\r\n    override render() {\r\n        const chevron = this.props.isExpanded ? <FontAwesomeIcon icon={faMinus} /> : <FontAwesomeIcon icon={faPlus} />;\r\n        const expandAll = this.props.isExpanded ? <FontAwesomeIcon icon={faCompress} /> : <FontAwesomeIcon icon={faExpandArrowsAlt} />;\r\n\r\n        return (\r\n            <div className=\"expandableHeader\">\r\n                <div className=\"text\">\r\n                    <div className=\"arrow icon\" onClick={() => this.props.onClick()}>\r\n                        {chevron}\r\n                    </div>\r\n                    <div className=\"text-value\">{this.props.label}</div>\r\n                </div>\r\n                <div className=\"expandAll icon\" onClick={() => this.expandAll()} title={this.props.isExpanded ? \"Collapse all\" : \"Expand all\"}>\r\n                    {expandAll}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface ITreeItemRootHeaderComponentProps {\r\n    label: string;\r\n}\r\n\r\nclass TreeItemRootHeaderComponent extends React.Component<ITreeItemRootHeaderComponentProps> {\r\n    constructor(props: ITreeItemRootHeaderComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    override render() {\r\n        return (\r\n            <div className=\"expandableHeader\">\r\n                <div className=\"text\">\r\n                    <div className=\"arrow icon\">\r\n                        <FontAwesomeIcon icon={faBan} />\r\n                    </div>\r\n                    <div className=\"text-value\">{this.props.label}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport interface ITreeItemComponentProps {\r\n    items?: Nullable<any[]>;\r\n    label: string;\r\n    offset: number;\r\n    filter: Nullable<string>;\r\n    forceSubitems?: boolean;\r\n    globalState: GlobalState;\r\n    gizmoCamera?: Camera;\r\n    entity?: any;\r\n    selectedEntity: any;\r\n    extensibilityGroups?: IExplorerExtensibilityGroup[];\r\n    contextMenuItems?: IInspectorContextMenuItem[];\r\n}\r\n\r\nexport class TreeItemComponent extends React.Component<ITreeItemComponentProps, { isExpanded: boolean; mustExpand: boolean }> {\r\n    static _ContextMenuUniqueIdGenerator = 0;\r\n\r\n    constructor(props: ITreeItemComponentProps) {\r\n        super(props);\r\n\r\n        this.state = { isExpanded: false, mustExpand: false };\r\n    }\r\n\r\n    switchExpandedState(): void {\r\n        this.setState({ isExpanded: !this.state.isExpanded, mustExpand: false });\r\n    }\r\n\r\n    override shouldComponentUpdate(nextProps: ITreeItemComponentProps, nextState: { isExpanded: boolean }) {\r\n        if (!nextState.isExpanded && this.state.isExpanded) {\r\n            return true;\r\n        }\r\n\r\n        const items = nextProps.items;\r\n\r\n        if (items && items.length) {\r\n            if (nextProps.selectedEntity) {\r\n                for (const item of items) {\r\n                    if (Tools.LookForItem(item, nextProps.selectedEntity)) {\r\n                        nextState.isExpanded = true;\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    expandAll(expand: boolean) {\r\n        this.setState({ isExpanded: expand, mustExpand: expand });\r\n    }\r\n\r\n    renderContextMenu() {\r\n        if (!this.props.contextMenuItems) {\r\n            TreeItemComponent._ContextMenuUniqueIdGenerator++;\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <ContextMenu id={\"contextmenu#\" + TreeItemComponent._ContextMenuUniqueIdGenerator++} className=\"context-menu\">\r\n                {this.props.contextMenuItems.map((c) => {\r\n                    return (\r\n                        <MenuItem onClick={() => c.action()} key={c.label}>\r\n                            {c.label}\r\n                        </MenuItem>\r\n                    );\r\n                })}\r\n            </ContextMenu>\r\n        );\r\n    }\r\n\r\n    override render() {\r\n        let items = this.props.items;\r\n\r\n        const marginStyle = {\r\n            paddingLeft: 10 * (this.props.offset + 0.5) + \"px\",\r\n        };\r\n\r\n        if (!items) {\r\n            if (this.props.forceSubitems) {\r\n                items = [];\r\n            } else {\r\n                return (\r\n                    <div className=\"groupContainer\" style={marginStyle}>\r\n                        <div>{this.props.label}</div>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        if (!items.length) {\r\n            return (\r\n                <div className=\"groupContainer\" style={marginStyle}>\r\n                    <ContextMenuTrigger id={\"contextmenu#\" + TreeItemComponent._ContextMenuUniqueIdGenerator}>\r\n                        {this.renderContextMenu()}\r\n                        <TreeItemRootHeaderComponent label={this.props.label} />\r\n                    </ContextMenuTrigger>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (!this.state.isExpanded) {\r\n            return (\r\n                <div className=\"groupContainer\" style={marginStyle}>\r\n                    <ContextMenuTrigger id={\"contextmenu#\" + TreeItemComponent._ContextMenuUniqueIdGenerator}>\r\n                        {this.renderContextMenu()}\r\n                        <TreeItemExpandableHeaderComponent\r\n                            isExpanded={false}\r\n                            label={this.props.label}\r\n                            onClick={() => this.switchExpandedState()}\r\n                            onExpandAll={(expand) => this.expandAll(expand)}\r\n                        />\r\n                    </ContextMenuTrigger>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const sortedItems = Tools.SortAndFilter(null, items);\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"groupContainer\" style={marginStyle}>\r\n                    <ContextMenuTrigger id={\"contextmenu#\" + TreeItemComponent._ContextMenuUniqueIdGenerator}>\r\n                        {this.renderContextMenu()}\r\n                        <TreeItemExpandableHeaderComponent\r\n                            isExpanded={this.state.isExpanded}\r\n                            label={this.props.label}\r\n                            onClick={() => this.switchExpandedState()}\r\n                            onExpandAll={(expand) => this.expandAll(expand)}\r\n                        />\r\n                    </ContextMenuTrigger>\r\n                </div>\r\n                {sortedItems.map((item) => {\r\n                    return (\r\n                        <TreeItemSelectableComponent\r\n                            mustExpand={this.state.mustExpand}\r\n                            extensibilityGroups={this.props.extensibilityGroups}\r\n                            key={item.uniqueId !== undefined && item.uniqueId !== null ? item.uniqueId : item.name}\r\n                            offset={this.props.offset + 1}\r\n                            selectedEntity={this.props.selectedEntity}\r\n                            entity={item}\r\n                            globalState={this.props.globalState}\r\n                            gizmoCamera={this.props.gizmoCamera}\r\n                            filter={this.props.filter}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
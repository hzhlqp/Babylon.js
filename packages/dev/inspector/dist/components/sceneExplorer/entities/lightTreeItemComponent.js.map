{"version":3,"file":"lightTreeItemComponent.js","sourceRoot":"","sources":["../../../../src/components/sceneExplorer/entities/lightTreeItemComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { IExplorerExtensibilityGroup } from \"core/Debug/debugLayer\";\r\nimport type { Light } from \"core/Lights/light\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faLightbulb, faEye } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faLightbulb as faLightbubRegular } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { TreeItemLabelComponent } from \"../treeItemLabelComponent\";\r\nimport { ExtensionsComponent } from \"../extensionsComponent\";\r\nimport * as React from \"react\";\r\nimport type { GlobalState } from \"../../globalState\";\r\n\r\ninterface ILightTreeItemComponentProps {\r\n    light: Light;\r\n    extensibilityGroups?: IExplorerExtensibilityGroup[];\r\n    onClick: () => void;\r\n    globalState: GlobalState;\r\n    gizmoCamera?: Camera;\r\n}\r\n\r\nexport class LightTreeItemComponent extends React.Component<ILightTreeItemComponentProps, { isEnabled: boolean; isGizmoEnabled: boolean }> {\r\n    constructor(props: ILightTreeItemComponentProps) {\r\n        super(props);\r\n\r\n        const light = this.props.light;\r\n\r\n        this.state = { isEnabled: light.isEnabled(), isGizmoEnabled: light.reservedDataStore && light.reservedDataStore.lightGizmo };\r\n    }\r\n\r\n    switchIsEnabled(): void {\r\n        const light = this.props.light;\r\n\r\n        light.setEnabled(!light.isEnabled());\r\n        this.props.globalState.onPropertyChangedObservable.notifyObservers({ object: light, property: \"isEnabled\", value: light.isEnabled(), initialValue: !light.isEnabled() });\r\n\r\n        this.setState({ isEnabled: light.isEnabled() });\r\n    }\r\n\r\n    toggleGizmo(): void {\r\n        const light = this.props.light;\r\n        if (light.reservedDataStore && light.reservedDataStore.lightGizmo) {\r\n            if (light.getScene().reservedDataStore && light.getScene().reservedDataStore.gizmoManager) {\r\n                light.getScene().reservedDataStore.gizmoManager.attachToMesh(null);\r\n            }\r\n            this.props.globalState.enableLightGizmo(light, false);\r\n            this.setState({ isGizmoEnabled: false });\r\n        } else {\r\n            this.props.globalState.enableLightGizmo(light, true, this.props.gizmoCamera);\r\n            this.setState({ isGizmoEnabled: true });\r\n        }\r\n    }\r\n\r\n    override render() {\r\n        const isEnabledElement = this.state.isEnabled ? <FontAwesomeIcon icon={faLightbubRegular} /> : <FontAwesomeIcon icon={faLightbubRegular} className=\"isNotActive\" />;\r\n        const isGizmoEnabled =\r\n            this.state.isGizmoEnabled || (this.props.light && this.props.light.reservedDataStore && this.props.light.reservedDataStore.lightGizmo) ? (\r\n                <FontAwesomeIcon icon={faEye} />\r\n            ) : (\r\n                <FontAwesomeIcon icon={faEye} className=\"isNotActive\" />\r\n            );\r\n\r\n        return (\r\n            <div className=\"lightTools\">\r\n                <TreeItemLabelComponent label={this.props.light.name} onClick={() => this.props.onClick()} icon={faLightbulb} color=\"yellow\" />\r\n                <div className=\"visibility icon\" onClick={() => this.switchIsEnabled()} title=\"Turn on/off the light\">\r\n                    {isEnabledElement}\r\n                </div>\r\n                <div className=\"enableGizmo icon\" onClick={() => this.toggleGizmo()} title=\"Turn on/off the light's gizmo\">\r\n                    {isGizmoEnabled}\r\n                </div>\r\n                {<ExtensionsComponent target={this.props.light} extensibilityGroups={this.props.extensibilityGroups} />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
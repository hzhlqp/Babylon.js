{"version":3,"file":"advancedDynamicTextureTreeItemComponent.js","sourceRoot":"","sources":["../../../../../src/components/sceneExplorer/entities/gui/advancedDynamicTextureTreeItemComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport type { Observer, Observable } from \"core/Misc/observable\";\r\nimport type { IExplorerExtensibilityGroup } from \"core/Debug/debugLayer\";\r\n\r\nimport type { Control } from \"gui/2D/controls/control\";\r\nimport type { AdvancedDynamicTexture } from \"gui/2D/advancedDynamicTexture\";\r\n\r\nimport { faImage, faCrosshairs, faPen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { TreeItemLabelComponent } from \"../../treeItemLabelComponent\";\r\nimport { ExtensionsComponent } from \"../../extensionsComponent\";\r\nimport * as React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { EditAdvancedDynamicTexture } from \"./guiTools\";\r\n\r\ninterface IAdvancedDynamicTextureTreeItemComponentProps {\r\n    texture: AdvancedDynamicTexture;\r\n    extensibilityGroups?: IExplorerExtensibilityGroup[];\r\n    onSelectionChangedObservable?: Observable<any>;\r\n    onClick: () => void;\r\n}\r\n\r\nexport class AdvancedDynamicTextureTreeItemComponent extends React.Component<IAdvancedDynamicTextureTreeItemComponentProps, { isInPickingMode: boolean }> {\r\n    private _onControlPickedObserver: Nullable<Observer<Control>>;\r\n\r\n    constructor(props: IAdvancedDynamicTextureTreeItemComponentProps) {\r\n        super(props);\r\n\r\n        this.state = { isInPickingMode: false };\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        const adt = this.props.texture;\r\n\r\n        if (this._onControlPickedObserver) {\r\n            adt.onControlPickedObservable.remove(this._onControlPickedObserver);\r\n            this._onControlPickedObserver = null;\r\n        }\r\n    }\r\n\r\n    onPickingMode() {\r\n        const adt = this.props.texture;\r\n\r\n        if (this._onControlPickedObserver) {\r\n            adt.onControlPickedObservable.remove(this._onControlPickedObserver);\r\n            this._onControlPickedObserver = null;\r\n        }\r\n\r\n        if (!this.state.isInPickingMode) {\r\n            this._onControlPickedObserver = adt.onControlPickedObservable.add((control) => {\r\n                if (!this.props.onSelectionChangedObservable) {\r\n                    return;\r\n                }\r\n\r\n                if (control.getClassName() === \"ScrollViewerWindow\") {\r\n                    control = control.getAscendantOfClass(\"ScrollViewer\")!;\r\n                }\r\n\r\n                this.props.onSelectionChangedObservable.notifyObservers(control);\r\n            });\r\n        }\r\n\r\n        this.setState({ isInPickingMode: !this.state.isInPickingMode });\r\n    }\r\n\r\n    override render() {\r\n        return (\r\n            <div className=\"adtextureTools\">\r\n                <TreeItemLabelComponent label={this.props.texture.name} onClick={() => this.props.onClick()} icon={faImage} color=\"mediumpurple\" />\r\n                <div className={\"icon edit\"} onClick={() => EditAdvancedDynamicTexture(this.props.texture, true)} title=\"Edit\">\r\n                    <FontAwesomeIcon icon={faPen} />\r\n                </div>\r\n                <div\r\n                    className={this.state.isInPickingMode ? \"pickingMode selected icon\" : \"pickingMode icon\"}\r\n                    onClick={() => this.onPickingMode()}\r\n                    title=\"Turn picking mode on/off\"\r\n                >\r\n                    <FontAwesomeIcon icon={faCrosshairs} />\r\n                </div>\r\n                <ExtensionsComponent target={this.props.texture} extensibilityGroups={this.props.extensibilityGroups} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
{"version":3,"file":"sceneTreeItemComponent.js","sourceRoot":"","sources":["../../../../src/components/sceneExplorer/entities/sceneTreeItemComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport type { Observer, Observable } from \"core/Misc/observable\";\r\nimport type { PointerInfo } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport type { IExplorerExtensibilityGroup } from \"core/Debug/debugLayer\";\r\nimport { GizmoManager } from \"core/Gizmos/gizmoManager\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSyncAlt, faImage, faCrosshairs, faArrowsAlt, faCompress, faRedoAlt, faVectorSquare, faLocationDot } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { ExtensionsComponent } from \"../extensionsComponent\";\r\nimport * as React from \"react\";\r\n\r\nimport type { GlobalState } from \"../../globalState\";\r\nimport { UtilityLayerRenderer } from \"core/Rendering/utilityLayerRenderer\";\r\nimport { PropertyChangedEvent } from \"../../../components/propertyChangedEvent\";\r\nimport type { LightGizmo } from \"core/Gizmos/lightGizmo\";\r\nimport type { CameraGizmo } from \"core/Gizmos/cameraGizmo\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\nimport { TmpVectors, Vector3 } from \"core/Maths/math\";\r\nimport { GizmoCoordinatesMode } from \"core/Gizmos/gizmo\";\r\nimport type { Bone } from \"core/Bones/bone\";\r\n\r\nimport { setDebugNode } from \"../treeNodeDebugger\";\r\n\r\ninterface ISceneTreeItemComponentProps {\r\n    scene: Scene;\r\n    gizmoCamera?: Camera;\r\n    onRefresh: () => void;\r\n    selectedEntity?: any;\r\n    extensibilityGroups?: IExplorerExtensibilityGroup[];\r\n    onSelectionChangedObservable?: Observable<any>;\r\n    globalState: GlobalState;\r\n}\r\n\r\nexport class SceneTreeItemComponent extends React.Component<\r\n    ISceneTreeItemComponentProps,\r\n    { isSelected: boolean; isInPickingMode: boolean; gizmoMode: number; isInWorldCoodinatesMode: boolean }\r\n> {\r\n    private _gizmoLayerOnPointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _onPointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _onSelectionChangeObserver: Nullable<Observer<any>>;\r\n    private _selectedEntity: any;\r\n\r\n    private _posDragEnd: Nullable<Observer<PropertyChangedEvent>> = null;\r\n    private _scaleDragEnd: Nullable<Observer<PropertyChangedEvent>> = null;\r\n    private _rotateDragEnd: Nullable<Observer<PropertyChangedEvent>> = null;\r\n\r\n    constructor(props: ISceneTreeItemComponentProps) {\r\n        super(props);\r\n\r\n        const scene = this.props.scene;\r\n        let gizmoMode = 0;\r\n        if (scene.reservedDataStore && scene.reservedDataStore.gizmoManager) {\r\n            const manager: GizmoManager = scene.reservedDataStore.gizmoManager;\r\n            if (manager.positionGizmoEnabled) {\r\n                gizmoMode = 1;\r\n            } else if (manager.rotationGizmoEnabled) {\r\n                gizmoMode = 2;\r\n            } else if (manager.scaleGizmoEnabled) {\r\n                gizmoMode = 3;\r\n            } else if (manager.boundingBoxGizmoEnabled) {\r\n                gizmoMode = 4;\r\n            }\r\n            // autopicking is disable by default\r\n            manager.enableAutoPicking = false;\r\n        }\r\n\r\n        this.state = { isSelected: false, isInPickingMode: false, gizmoMode: gizmoMode, isInWorldCoodinatesMode: false };\r\n    }\r\n\r\n    override shouldComponentUpdate(nextProps: ISceneTreeItemComponentProps, nextState: { isSelected: boolean; isInPickingMode: boolean }) {\r\n        if (nextProps.selectedEntity) {\r\n            if (nextProps.scene === nextProps.selectedEntity) {\r\n                nextState.isSelected = true;\r\n                return true;\r\n            } else {\r\n                nextState.isSelected = false;\r\n            }\r\n        }\r\n        this.updateGizmoAutoPicking(nextState.isInPickingMode);\r\n        return true;\r\n    }\r\n\r\n    updateGizmoAutoPicking(isInPickingMode: boolean) {\r\n        const scene = this.props.scene;\r\n        if (scene.reservedDataStore && scene.reservedDataStore.gizmoManager) {\r\n            const manager: GizmoManager = scene.reservedDataStore.gizmoManager;\r\n            manager.enableAutoPicking = isInPickingMode;\r\n        }\r\n    }\r\n\r\n    override componentDidMount() {\r\n        if (!this.props.onSelectionChangedObservable) {\r\n            return;\r\n        }\r\n\r\n        const scene = this.props.scene;\r\n        this._onSelectionChangeObserver = this.props.onSelectionChangedObservable.add((entity) => {\r\n            this._selectedEntity = entity;\r\n            if (entity && scene.reservedDataStore && scene.reservedDataStore.gizmoManager) {\r\n                const manager: GizmoManager = scene.reservedDataStore.gizmoManager;\r\n\r\n                const className = entity.getClassName();\r\n\r\n                if (className === \"TransformNode\" || className.indexOf(\"Mesh\") !== -1) {\r\n                    manager.attachToMesh(entity);\r\n                } else if (className.indexOf(\"Light\") !== -1) {\r\n                    if (!this._selectedEntity.reservedDataStore || !this._selectedEntity.reservedDataStore.lightGizmo) {\r\n                        this.props.globalState.enableLightGizmo(this._selectedEntity, true, this.props.gizmoCamera);\r\n                        this.forceUpdate();\r\n                    }\r\n                    manager.attachToNode(this._selectedEntity.reservedDataStore.lightGizmo.attachedNode);\r\n                } else if (className.indexOf(\"Camera\") !== -1) {\r\n                    if (!this._selectedEntity.reservedDataStore || !this._selectedEntity.reservedDataStore.cameraGizmo) {\r\n                        this.props.globalState.enableCameraGizmo(this._selectedEntity, true, this.props.gizmoCamera);\r\n                        this.forceUpdate();\r\n                    }\r\n                    manager.attachToNode(this._selectedEntity.reservedDataStore.cameraGizmo.attachedNode);\r\n                } else if (className.indexOf(\"Bone\") !== -1) {\r\n                    manager.attachToMesh(this._selectedEntity._linkedTransformNode ? this._selectedEntity._linkedTransformNode : this._selectedEntity);\r\n                    if (!this._selectedEntity._linkedTransformNode) {\r\n                        manager.additionalTransformNode = this._getMeshFromBone(this._selectedEntity, scene);\r\n                    }\r\n                } else {\r\n                    manager.attachToNode(null);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private _getMeshFromBone(bone: Bone, scene: Scene) {\r\n        const skeleton = bone.getSkeleton();\r\n\r\n        // First try to find a mesh for which we've enabled the skeleton viewer\r\n        for (const mesh of scene.meshes) {\r\n            const skeletonViewer = mesh.reservedDataStore?.skeletonViewer;\r\n            if (skeletonViewer && skeletonViewer.skeleton === skeleton) {\r\n                return mesh;\r\n            }\r\n        }\r\n\r\n        // Not found, return the first mesh that uses the skeleton\r\n        for (const mesh of scene.meshes) {\r\n            if (mesh.skeleton === skeleton) {\r\n                return mesh;\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        const scene = this.props.scene;\r\n\r\n        if (this._onPointerObserver) {\r\n            scene.onPointerObservable.remove(this._onPointerObserver);\r\n            this._onPointerObserver = null;\r\n        }\r\n\r\n        if (this._gizmoLayerOnPointerObserver) {\r\n            scene.onPointerObservable.remove(this._gizmoLayerOnPointerObserver);\r\n            this._gizmoLayerOnPointerObserver = null;\r\n        }\r\n\r\n        if (this._onSelectionChangeObserver && this.props.onSelectionChangedObservable) {\r\n            this.props.onSelectionChangedObservable.remove(this._onSelectionChangeObserver);\r\n        }\r\n    }\r\n\r\n    onSelect() {\r\n        if (!this.props.onSelectionChangedObservable) {\r\n            return;\r\n        }\r\n        const scene = this.props.scene;\r\n        // Put scene object into window.debugNode\r\n        setDebugNode(scene);\r\n        this.props.onSelectionChangedObservable.notifyObservers(scene);\r\n    }\r\n\r\n    onCoordinatesMode() {\r\n        const scene = this.props.scene;\r\n        const manager: GizmoManager = scene.reservedDataStore.gizmoManager;\r\n        // flip coordinate system\r\n        manager.coordinatesMode = this.state.isInWorldCoodinatesMode ? GizmoCoordinatesMode.Local : GizmoCoordinatesMode.World;\r\n        this.setState({ isInWorldCoodinatesMode: !this.state.isInWorldCoodinatesMode });\r\n    }\r\n    onPickingMode() {\r\n        const scene = this.props.scene;\r\n\r\n        if (this._onPointerObserver) {\r\n            scene.onPointerObservable.remove(this._onPointerObserver);\r\n            this._onPointerObserver = null;\r\n        }\r\n\r\n        if (!this.state.isInPickingMode) {\r\n            this._onPointerObserver = scene.onPointerObservable.add(() => {\r\n                const pickPosition = scene.unTranslatedPointer;\r\n                const pickInfo = scene.pick(\r\n                    pickPosition.x,\r\n                    pickPosition.y,\r\n                    (mesh) => mesh.isEnabled() && mesh.isVisible && mesh.getTotalVertices() > 0,\r\n                    false,\r\n                    undefined,\r\n                    (p0, p1, p2, ray) => {\r\n                        if (!this.props.globalState.ignoreBackfacesForPicking) {\r\n                            return true;\r\n                        }\r\n\r\n                        const p0p1 = TmpVectors.Vector3[0];\r\n                        const p1p2 = TmpVectors.Vector3[1];\r\n                        let normal = TmpVectors.Vector3[2];\r\n\r\n                        p1.subtractToRef(p0, p0p1);\r\n                        p2.subtractToRef(p1, p1p2);\r\n\r\n                        normal = Vector3.Cross(p0p1, p1p2);\r\n\r\n                        return Vector3.Dot(normal, ray.direction) < 0;\r\n                    }\r\n                );\r\n\r\n                // Pick light gizmos first\r\n                if (this.props.globalState.lightGizmos.length > 0) {\r\n                    const gizmoScene = this.props.globalState.lightGizmos[0].gizmoLayer.utilityLayerScene;\r\n                    const pickInfo = gizmoScene.pick(pickPosition.x, pickPosition.y, (m: any) => {\r\n                        for (const g of this.props.globalState.lightGizmos as any) {\r\n                            if (g.attachedNode == m) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                        return false;\r\n                    });\r\n                    if (pickInfo && pickInfo.hit && this.props.onSelectionChangedObservable) {\r\n                        this.props.onSelectionChangedObservable.notifyObservers(pickInfo.pickedMesh);\r\n                        return;\r\n                    }\r\n                }\r\n                // Pick camera gizmos\r\n                if (this.props.globalState.cameraGizmos.length > 0) {\r\n                    const gizmoScene = this.props.globalState.cameraGizmos[0].gizmoLayer.utilityLayerScene;\r\n                    const pickInfo = gizmoScene.pick(pickPosition.x, pickPosition.y, (m: any) => {\r\n                        for (const g of this.props.globalState.cameraGizmos as any) {\r\n                            if (g.attachedNode == m) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                        return false;\r\n                    });\r\n                    if (pickInfo && pickInfo.hit && this.props.onSelectionChangedObservable) {\r\n                        this.props.onSelectionChangedObservable.notifyObservers(pickInfo.pickedMesh);\r\n                        return;\r\n                    }\r\n                }\r\n                if (pickInfo && pickInfo.hit && this.props.onSelectionChangedObservable) {\r\n                    this.props.onSelectionChangedObservable.notifyObservers(pickInfo.pickedMesh);\r\n                }\r\n            }, PointerEventTypes.POINTERTAP);\r\n        }\r\n\r\n        this.setState({ isInPickingMode: !this.state.isInPickingMode });\r\n    }\r\n\r\n    setGizmoMode(mode: number) {\r\n        const scene = this.props.scene;\r\n\r\n        if (!scene.reservedDataStore) {\r\n            scene.reservedDataStore = {};\r\n        }\r\n\r\n        if (this._gizmoLayerOnPointerObserver) {\r\n            scene.onPointerObservable.remove(this._gizmoLayerOnPointerObserver);\r\n            this._gizmoLayerOnPointerObserver = null;\r\n        }\r\n\r\n        if (!scene.reservedDataStore.gizmoManager) {\r\n            scene.reservedDataStore.gizmoManager = new GizmoManager(scene, undefined, new UtilityLayerRenderer(scene), new UtilityLayerRenderer(scene));\r\n        }\r\n\r\n        if (this.props.gizmoCamera) {\r\n            scene.reservedDataStore.gizmoManager.utilityLayer.setRenderCamera(this.props.gizmoCamera);\r\n        }\r\n\r\n        const manager: GizmoManager = scene.reservedDataStore.gizmoManager;\r\n        // Allow picking of light gizmo when a gizmo mode is selected\r\n        this._gizmoLayerOnPointerObserver = UtilityLayerRenderer.DefaultUtilityLayer.utilityLayerScene.onPointerObservable.add((pointerInfo) => {\r\n            if (pointerInfo.type == PointerEventTypes.POINTERDOWN) {\r\n                if (pointerInfo.pickInfo && pointerInfo.pickInfo.pickedMesh) {\r\n                    let node: Nullable<any> = pointerInfo.pickInfo.pickedMesh;\r\n                    // Attach to the most parent node\r\n                    while (node && node.parent != null) {\r\n                        node = node.parent;\r\n                    }\r\n                    for (const gizmo of this.props.globalState.lightGizmos) {\r\n                        if (gizmo._rootMesh == node) {\r\n                            manager.attachToNode(gizmo.attachedNode);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        manager.boundingBoxGizmoEnabled = false;\r\n        manager.positionGizmoEnabled = false;\r\n        manager.rotationGizmoEnabled = false;\r\n        manager.scaleGizmoEnabled = false;\r\n\r\n        if (this.state.gizmoMode === mode) {\r\n            mode = 0;\r\n            manager.dispose();\r\n            scene.reservedDataStore.gizmoManager = null;\r\n        } else {\r\n            switch (mode) {\r\n                case 1:\r\n                    manager.positionGizmoEnabled = true;\r\n                    if (!this._posDragEnd) {\r\n                        // Record movement for generating replay code\r\n                        this._posDragEnd = manager.gizmos.positionGizmo!.onDragEndObservable.add(() => {\r\n                            if (manager.gizmos.positionGizmo && manager.gizmos.positionGizmo.attachedNode) {\r\n                                const lightGizmo: Nullable<LightGizmo> = manager.gizmos.positionGizmo.attachedNode.reservedDataStore\r\n                                    ? manager.gizmos.positionGizmo.attachedNode.reservedDataStore.lightGizmo\r\n                                    : null;\r\n                                const objLight: any = lightGizmo && lightGizmo.light ? lightGizmo.light : manager.gizmos.positionGizmo.attachedNode;\r\n\r\n                                if (objLight.position) {\r\n                                    const e = new PropertyChangedEvent();\r\n                                    e.object = objLight;\r\n                                    e.property = \"position\";\r\n                                    e.value = objLight.position;\r\n                                    this.props.globalState.onPropertyChangedObservable.notifyObservers(e);\r\n                                } else {\r\n                                    const cameraGizmo: Nullable<CameraGizmo> = manager.gizmos.positionGizmo.attachedNode.reservedDataStore\r\n                                        ? manager.gizmos.positionGizmo.attachedNode.reservedDataStore.cameraGizmo\r\n                                        : null;\r\n                                    const objCamera: any = cameraGizmo && cameraGizmo.camera ? cameraGizmo.camera : manager.gizmos.positionGizmo.attachedNode;\r\n\r\n                                    if (objCamera.position) {\r\n                                        const e = new PropertyChangedEvent();\r\n                                        e.object = objCamera;\r\n                                        e.property = \"position\";\r\n                                        e.value = objCamera.position;\r\n                                        this.props.globalState.onPropertyChangedObservable.notifyObservers(e);\r\n                                    }\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    break;\r\n                case 2:\r\n                    manager.rotationGizmoEnabled = true;\r\n                    if (!this._rotateDragEnd) {\r\n                        // Record movement for generating replay code\r\n                        this._rotateDragEnd = manager.gizmos.rotationGizmo!.onDragEndObservable.add(() => {\r\n                            if (manager.gizmos.rotationGizmo && manager.gizmos.rotationGizmo.attachedNode) {\r\n                                const lightGizmo: Nullable<LightGizmo> = manager.gizmos.rotationGizmo.attachedNode.reservedDataStore\r\n                                    ? manager.gizmos.rotationGizmo.attachedNode.reservedDataStore.lightGizmo\r\n                                    : null;\r\n                                const objLight: any = lightGizmo && lightGizmo.light ? lightGizmo.light : manager.gizmos.rotationGizmo.attachedNode;\r\n                                const cameraGizmo: Nullable<CameraGizmo> = manager.gizmos.rotationGizmo.attachedNode.reservedDataStore\r\n                                    ? manager.gizmos.rotationGizmo.attachedNode.reservedDataStore.cameraGizmo\r\n                                    : null;\r\n                                const objCamera: any = cameraGizmo && cameraGizmo.camera ? cameraGizmo.camera : manager.gizmos.rotationGizmo.attachedNode;\r\n\r\n                                if (objLight.rotationQuaternion) {\r\n                                    const e = new PropertyChangedEvent();\r\n                                    e.object = objLight;\r\n                                    e.property = \"rotationQuaternion\";\r\n                                    e.value = objLight.rotationQuaternion;\r\n                                    this.props.globalState.onPropertyChangedObservable.notifyObservers(e);\r\n                                } else if (objLight.rotation) {\r\n                                    const e = new PropertyChangedEvent();\r\n                                    e.object = objLight;\r\n                                    e.property = \"rotation\";\r\n                                    e.value = objLight.rotation;\r\n                                    this.props.globalState.onPropertyChangedObservable.notifyObservers(e);\r\n                                } else if (objLight.direction) {\r\n                                    const e = new PropertyChangedEvent();\r\n                                    e.object = objLight;\r\n                                    e.property = \"direction\";\r\n                                    e.value = objLight.direction;\r\n                                    this.props.globalState.onPropertyChangedObservable.notifyObservers(e);\r\n                                } else if (objCamera.rotationQuaternion) {\r\n                                    const e = new PropertyChangedEvent();\r\n                                    e.object = objCamera;\r\n                                    e.property = \"rotationQuaternion\";\r\n                                    e.value = objCamera.rotationQuaternion;\r\n                                    this.props.globalState.onPropertyChangedObservable.notifyObservers(e);\r\n                                } else if (objCamera.rotation) {\r\n                                    const e = new PropertyChangedEvent();\r\n                                    e.object = objCamera;\r\n                                    e.property = \"rotation\";\r\n                                    e.value = objCamera.rotation;\r\n                                    this.props.globalState.onPropertyChangedObservable.notifyObservers(e);\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    break;\r\n                case 3:\r\n                    manager.scaleGizmoEnabled = true;\r\n                    if (!this._scaleDragEnd) {\r\n                        // Record movement for generating replay code\r\n                        this._scaleDragEnd = manager.gizmos.scaleGizmo!.onDragEndObservable.add(() => {\r\n                            if (manager.gizmos.scaleGizmo && manager.gizmos.scaleGizmo.attachedMesh) {\r\n                                const lightGizmo: Nullable<LightGizmo> = manager.gizmos.scaleGizmo.attachedMesh.reservedDataStore\r\n                                    ? manager.gizmos.scaleGizmo.attachedMesh.reservedDataStore.lightGizmo\r\n                                    : null;\r\n                                const obj: any = lightGizmo && lightGizmo.light ? lightGizmo.light : manager.gizmos.scaleGizmo.attachedMesh;\r\n\r\n                                if (obj.scaling) {\r\n                                    const e = new PropertyChangedEvent();\r\n                                    e.object = obj;\r\n                                    e.property = \"scaling\";\r\n                                    e.value = obj.scaling;\r\n                                    this.props.globalState.onPropertyChangedObservable.notifyObservers(e);\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    break;\r\n                case 4:\r\n                    manager.boundingBoxGizmoEnabled = true;\r\n                    if (manager.gizmos.boundingBoxGizmo) {\r\n                        manager.gizmos.boundingBoxGizmo.fixedDragMeshScreenSize = true;\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            if (this._selectedEntity && this._selectedEntity.getClassName) {\r\n                const className = this._selectedEntity.getClassName();\r\n\r\n                if (className === \"TransformNode\" || className.indexOf(\"Mesh\") !== -1) {\r\n                    manager.attachToMesh(this._selectedEntity);\r\n                } else if (className.indexOf(\"Light\") !== -1) {\r\n                    if (!this._selectedEntity.reservedDataStore || !this._selectedEntity.reservedDataStore.lightGizmo) {\r\n                        this.props.globalState.enableLightGizmo(this._selectedEntity, true, this.props.gizmoCamera);\r\n                        this.forceUpdate();\r\n                    }\r\n                    manager.attachToNode(this._selectedEntity.reservedDataStore.lightGizmo.attachedNode);\r\n                } else if (className.indexOf(\"Camera\") !== -1) {\r\n                    if (!this._selectedEntity.reservedDataStore || !this._selectedEntity.reservedDataStore.cameraGizmo) {\r\n                        this.props.globalState.enableCameraGizmo(this._selectedEntity, true, this.props.gizmoCamera);\r\n                        this.forceUpdate();\r\n                    }\r\n                    manager.attachToNode(this._selectedEntity.reservedDataStore.cameraGizmo.attachedNode);\r\n                } else if (className.indexOf(\"Bone\") !== -1) {\r\n                    manager.attachToMesh(this._selectedEntity._linkedTransformNode ? this._selectedEntity._linkedTransformNode : this._selectedEntity);\r\n                    if (!this._selectedEntity._linkedTransformNode) {\r\n                        manager.additionalTransformNode = this._getMeshFromBone(this._selectedEntity, scene);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({ gizmoMode: mode });\r\n    }\r\n\r\n    override render() {\r\n        return (\r\n            <div className={this.state.isSelected ? \"itemContainer selected\" : \"itemContainer\"}>\r\n                <div className=\"sceneNode\">\r\n                    <div className=\"sceneTitle\" onClick={() => this.onSelect()}>\r\n                        <FontAwesomeIcon icon={faImage} />\r\n                        &nbsp;Scene\r\n                    </div>\r\n                    <div\r\n                        className={this.state.gizmoMode === 1 ? \"translation selected icon\" : \"translation icon\"}\r\n                        onClick={() => this.setGizmoMode(1)}\r\n                        title=\"Enable/Disable position mode\"\r\n                    >\r\n                        <FontAwesomeIcon icon={faArrowsAlt} />\r\n                    </div>\r\n                    <div\r\n                        className={this.state.gizmoMode === 2 ? \"rotation selected icon\" : \"rotation icon\"}\r\n                        onClick={() => this.setGizmoMode(2)}\r\n                        title=\"Enable/Disable rotation mode\"\r\n                    >\r\n                        <FontAwesomeIcon icon={faRedoAlt} />\r\n                    </div>\r\n                    <div className={this.state.gizmoMode === 3 ? \"scaling selected icon\" : \"scaling icon\"} onClick={() => this.setGizmoMode(3)} title=\"Enable/Disable scaling mode\">\r\n                        <FontAwesomeIcon icon={faCompress} />\r\n                    </div>\r\n                    <div\r\n                        className={this.state.gizmoMode === 4 ? \"bounding selected icon\" : \"bounding icon\"}\r\n                        onClick={() => this.setGizmoMode(4)}\r\n                        title=\"Enable/Disable bounding box mode\"\r\n                    >\r\n                        <FontAwesomeIcon icon={faVectorSquare} />\r\n                    </div>\r\n                    <div className=\"separator\" />\r\n                    <div\r\n                        className={this.state.isInPickingMode ? \"pickingMode selected icon\" : \"pickingMode icon\"}\r\n                        onClick={() => this.onPickingMode()}\r\n                        title=\"Turn picking mode on/off\"\r\n                    >\r\n                        <FontAwesomeIcon icon={faCrosshairs} />\r\n                    </div>\r\n                    <div\r\n                        className={this.state.isInWorldCoodinatesMode ? \"coordinates selected icon\" : \"coordinates icon\"}\r\n                        onClick={() => this.onCoordinatesMode()}\r\n                        title=\"Switch between world and local coordinates\"\r\n                    >\r\n                        <FontAwesomeIcon icon={faLocationDot} />\r\n                    </div>\r\n                    <div className=\"refresh icon\" onClick={() => this.props.onRefresh()} title=\"Refresh the explorer\">\r\n                        <FontAwesomeIcon icon={faSyncAlt} />\r\n                    </div>\r\n                    {<ExtensionsComponent target={this.props.scene} extensibilityGroups={this.props.extensibilityGroups} />}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
{"version":3,"file":"toolsTabComponent.js","sourceRoot":"","sources":["../../../../src/components/actionTabs/tabs/toolsTabComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable import/no-internal-modules */\r\nimport type { IPaneComponentProps } from \"../paneComponent\";\r\nimport { PaneComponent } from \"../paneComponent\";\r\nimport { LineContainerComponent } from \"shared-ui-components/lines/lineContainerComponent\";\r\nimport { ButtonLineComponent } from \"shared-ui-components/lines/buttonLineComponent\";\r\nimport type { Node } from \"core/node\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { VideoRecorder } from \"core/Misc/videoRecorder\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { EnvironmentTextureTools } from \"core/Misc/environmentTextureTools\";\r\nimport type { BackgroundMaterial } from \"core/Materials/Background/backgroundMaterial\";\r\nimport type { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport type { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { CubeTexture } from \"core/Materials/Textures/cubeTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { SceneSerializer } from \"core/Misc/sceneSerializer\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { FilesInput } from \"core/Misc/filesInput\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { captureEquirectangularFromScene } from \"core/Misc/equirectangularCapture\";\r\nimport { SceneLoader, SceneLoaderAnimationGroupLoadingMode } from \"core/Loading/sceneLoader\";\r\nimport { Reflector } from \"core/Misc/reflector\";\r\nimport { GLTFComponent } from \"./tools/gltfComponent\";\r\n// TODO - does it still work if loading the modules from the correct files?\r\nimport type { GLTFData } from \"serializers/glTF/2.0/index\";\r\nimport { GLTF2Export } from \"serializers/glTF/2.0/index\";\r\nimport { FloatLineComponent } from \"shared-ui-components/lines/floatLineComponent\";\r\nimport type { IScreenshotSize } from \"core/Misc/interfaces/screenshotSize\";\r\nimport { NumericInput } from \"shared-ui-components/lines/numericInputComponent\";\r\nimport { CheckBoxLineComponent } from \"shared-ui-components/lines/checkBoxLineComponent\";\r\nimport { TextLineComponent } from \"shared-ui-components/lines/textLineComponent\";\r\nimport { FileMultipleButtonLineComponent } from \"shared-ui-components/lines/fileMultipleButtonLineComponent\";\r\nimport { OptionsLine } from \"shared-ui-components/lines/optionsLineComponent\";\r\nimport { MessageLineComponent } from \"shared-ui-components/lines/messageLineComponent\";\r\nimport { FileButtonLine } from \"shared-ui-components/lines/fileButtonLineComponent\";\r\nimport { IndentedTextLineComponent } from \"shared-ui-components/lines/indentedTextLineComponent\";\r\nimport { TextInputLineComponent } from \"shared-ui-components/lines/textInputLineComponent\";\r\nimport { LockObject } from \"shared-ui-components/tabs/propertyGrids/lockObject\";\r\n\r\nimport GIF from \"gif.js.optimized\";\r\nimport { Camera } from \"core/Cameras/camera\";\r\nimport { Light } from \"core/Lights/light\";\r\nimport { GLTFFileLoader } from \"loaders/glTF/glTFFileLoader\";\r\nimport { Logger } from \"core/Misc/logger\";\r\n\r\nconst envExportImageTypes = [\r\n    { label: \"PNG\", value: 0, imageType: \"image/png\" },\r\n    { label: \"WebP\", value: 1, imageType: \"image/webp\" },\r\n];\r\n\r\ninterface IGlbExportOptions {\r\n    exportDisabledNodes: boolean;\r\n    exportSkyboxes: boolean;\r\n    exportCameras: boolean;\r\n    exportLights: boolean;\r\n}\r\n\r\nexport class ToolsTabComponent extends PaneComponent {\r\n    private _lockObject = new LockObject();\r\n    private _videoRecorder: Nullable<VideoRecorder>;\r\n    private _screenShotSize: IScreenshotSize = { precision: 1 };\r\n    private _gifOptions = { width: 512, frequency: 200 };\r\n    private _useWidthHeight = false;\r\n    private _isExportingGltf = false;\r\n    private _gltfExportOptions: IGlbExportOptions = { exportDisabledNodes: false, exportSkyboxes: false, exportCameras: false, exportLights: false };\r\n    private _gifWorkerBlob: Blob;\r\n    private _gifRecorder: any;\r\n    private _previousRenderingScale: number;\r\n    private _crunchingGIF = false;\r\n    private _reflectorHostname: string = \"localhost\";\r\n    private _reflectorPort: number = 1234;\r\n    private _reflector: Reflector;\r\n    private _envOptions = { imageTypeIndex: 0, imageQuality: 0.8 };\r\n\r\n    constructor(props: IPaneComponentProps) {\r\n        super(props);\r\n\r\n        this.state = { tag: \"Record video\" };\r\n\r\n        const sceneImportDefaults = this.props.globalState.sceneImportDefaults;\r\n        if (sceneImportDefaults[\"overwriteAnimations\"] === undefined) {\r\n            sceneImportDefaults[\"overwriteAnimations\"] = true;\r\n        }\r\n        if (sceneImportDefaults[\"animationGroupLoadingMode\"] === undefined) {\r\n            sceneImportDefaults[\"animationGroupLoadingMode\"] = SceneLoaderAnimationGroupLoadingMode.Clean;\r\n        }\r\n    }\r\n\r\n    override componentDidMount() {\r\n        if (!GLTF2Export) {\r\n            Tools.Warn(\"GLTF2Export is not available. Make sure to load the serializers library\");\r\n            return;\r\n        }\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        if (this._videoRecorder) {\r\n            this._videoRecorder.stopRecording();\r\n            this._videoRecorder.dispose();\r\n            this._videoRecorder = null;\r\n        }\r\n\r\n        if (this._gifRecorder) {\r\n            this._gifRecorder.render();\r\n            this._gifRecorder = null;\r\n            return;\r\n        }\r\n    }\r\n\r\n    captureScreenshot() {\r\n        const scene = this.props.scene;\r\n        if (scene.activeCamera) {\r\n            Tools.CreateScreenshot(scene.getEngine(), scene.activeCamera, this._screenShotSize);\r\n        }\r\n    }\r\n\r\n    captureEquirectangular() {\r\n        const scene = this.props.scene;\r\n        if (scene.activeCamera) {\r\n            captureEquirectangularFromScene(scene, { size: 1024, filename: \"equirectangular_capture.png\" });\r\n        }\r\n    }\r\n\r\n    captureRender() {\r\n        const scene = this.props.scene;\r\n        const oldScreenshotSize: IScreenshotSize = {\r\n            height: this._screenShotSize.height,\r\n            width: this._screenShotSize.width,\r\n            precision: this._screenShotSize.precision,\r\n        };\r\n        if (!this._useWidthHeight) {\r\n            this._screenShotSize.width = undefined;\r\n            this._screenShotSize.height = undefined;\r\n        }\r\n        if (scene.activeCamera) {\r\n            Tools.CreateScreenshotUsingRenderTarget(scene.getEngine(), scene.activeCamera, this._screenShotSize, undefined, undefined, 4);\r\n        }\r\n        this._screenShotSize = oldScreenshotSize;\r\n    }\r\n\r\n    recordVideo() {\r\n        if (this._videoRecorder && this._videoRecorder.isRecording) {\r\n            this._videoRecorder.stopRecording();\r\n            return;\r\n        }\r\n\r\n        const scene = this.props.scene;\r\n        if (!this._videoRecorder) {\r\n            this._videoRecorder = new VideoRecorder(scene.getEngine());\r\n        }\r\n\r\n        this._videoRecorder.startRecording().then(() => {\r\n            this.setState({ tag: \"Record video\" });\r\n        });\r\n        this.setState({ tag: \"Stop recording\" });\r\n    }\r\n\r\n    recordGIFInternal() {\r\n        const workerUrl = URL.createObjectURL(this._gifWorkerBlob);\r\n        this._gifRecorder = new GIF({\r\n            workers: 2,\r\n            quality: 10,\r\n            workerScript: workerUrl,\r\n        });\r\n        const scene = this.props.scene;\r\n        const engine = scene.getEngine();\r\n\r\n        this._previousRenderingScale = engine.getHardwareScalingLevel();\r\n        engine.setHardwareScalingLevel(engine.getRenderWidth() / this._gifOptions.width ?? 1);\r\n\r\n        const intervalId = setInterval(() => {\r\n            if (!this._gifRecorder) {\r\n                clearInterval(intervalId);\r\n                return;\r\n            }\r\n            this._gifRecorder.addFrame(engine.getRenderingCanvas(), { delay: 0, copy: true });\r\n        }, this._gifOptions.frequency);\r\n\r\n        this._gifRecorder.on(\"finished\", (blob: Blob) => {\r\n            this._crunchingGIF = false;\r\n            Tools.Download(blob, \"record.gif\");\r\n\r\n            this.forceUpdate();\r\n\r\n            URL.revokeObjectURL(workerUrl);\r\n            engine.setHardwareScalingLevel(this._previousRenderingScale);\r\n        });\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    recordGIF() {\r\n        if (this._gifRecorder) {\r\n            this._crunchingGIF = true;\r\n            this.forceUpdate();\r\n            this._gifRecorder.render();\r\n            this._gifRecorder = null;\r\n            return;\r\n        }\r\n\r\n        if (this._gifWorkerBlob) {\r\n            this.recordGIFInternal();\r\n            return;\r\n        }\r\n\r\n        Tools.LoadFileAsync(\"https://cdn.jsdelivr.net/gh//terikon/gif.js.optimized@0.1.6/dist/gif.worker.js\").then((value) => {\r\n            this._gifWorkerBlob = new Blob([value], {\r\n                type: \"application/javascript\",\r\n            });\r\n            this.recordGIFInternal();\r\n        });\r\n    }\r\n\r\n    importAnimations(event: any) {\r\n        const scene = this.props.scene;\r\n\r\n        const overwriteAnimations = this.props.globalState.sceneImportDefaults[\"overwriteAnimations\"];\r\n        const animationGroupLoadingMode = this.props.globalState.sceneImportDefaults[\"animationGroupLoadingMode\"];\r\n\r\n        const reload = function (sceneFile: File) {\r\n            // If a scene file has been provided\r\n            if (sceneFile) {\r\n                const onSuccess = function (scene: Scene) {\r\n                    if (scene.animationGroups.length > 0) {\r\n                        const currentGroup = scene.animationGroups[0];\r\n                        currentGroup.play(true);\r\n                    }\r\n                };\r\n                SceneLoader.ImportAnimationsAsync(\"file:\", sceneFile, scene, overwriteAnimations, animationGroupLoadingMode, null, onSuccess);\r\n            }\r\n        };\r\n        const filesInputAnimation = new FilesInput(\r\n            scene.getEngine() as any,\r\n            scene as any,\r\n            () => {},\r\n            () => {},\r\n            () => {},\r\n            () => {},\r\n            () => {},\r\n            reload,\r\n            () => {}\r\n        );\r\n\r\n        filesInputAnimation.loadFiles(event);\r\n    }\r\n\r\n    exportGLTF() {\r\n        const scene = this.props.scene;\r\n        this._isExportingGltf = true;\r\n        this.forceUpdate();\r\n\r\n        const shouldExport = (node: Node): boolean => {\r\n            if (!this._gltfExportOptions.exportDisabledNodes) {\r\n                if (!node.isEnabled()) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            if (!this._gltfExportOptions.exportSkyboxes) {\r\n                if (node instanceof Mesh) {\r\n                    if (node.material) {\r\n                        const material = node.material as PBRMaterial | StandardMaterial | BackgroundMaterial;\r\n                        const reflectionTexture = material.reflectionTexture;\r\n                        if (reflectionTexture && reflectionTexture.coordinatesMode === Texture.SKYBOX_MODE) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!this._gltfExportOptions.exportCameras) {\r\n                if (node instanceof Camera) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            if (!this._gltfExportOptions.exportLights) {\r\n                if (node instanceof Light) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        };\r\n\r\n        GLTF2Export.GLBAsync(scene, \"scene\", { shouldExportNode: (node) => shouldExport(node) }).then(\r\n            (glb: GLTFData) => {\r\n                this._isExportingGltf = false;\r\n                this.forceUpdate();\r\n                glb.downloadFiles();\r\n            },\r\n            () => {\r\n                this._isExportingGltf = false;\r\n                this.forceUpdate();\r\n            }\r\n        );\r\n    }\r\n\r\n    exportBabylon() {\r\n        const scene = this.props.scene;\r\n\r\n        const strScene = JSON.stringify(SceneSerializer.Serialize(scene));\r\n        const blob = new Blob([strScene], { type: \"octet/stream\" });\r\n\r\n        Tools.Download(blob, \"scene.babylon\");\r\n    }\r\n\r\n    createEnvTexture() {\r\n        const scene = this.props.scene;\r\n        EnvironmentTextureTools.CreateEnvTextureAsync(scene.environmentTexture as CubeTexture, {\r\n            imageType: envExportImageTypes[this._envOptions.imageTypeIndex].imageType,\r\n            imageQuality: this._envOptions.imageQuality,\r\n        })\r\n            .then((buffer: ArrayBuffer) => {\r\n                const blob = new Blob([buffer], { type: \"octet/stream\" });\r\n                Tools.Download(blob, \"environment.env\");\r\n            })\r\n            .catch((error: any) => {\r\n                Logger.Error(error);\r\n                alert(error);\r\n            });\r\n    }\r\n\r\n    exportReplay() {\r\n        this.props.globalState.recorder.export();\r\n        this.forceUpdate();\r\n    }\r\n\r\n    startRecording() {\r\n        this.props.globalState.recorder.trackScene(this.props.scene);\r\n        this.forceUpdate();\r\n    }\r\n\r\n    applyDelta(file: File) {\r\n        Tools.ReadFile(file, (data) => {\r\n            this.props.globalState.recorder.applyDelta(data, this.props.scene);\r\n\r\n            this.forceUpdate();\r\n        });\r\n    }\r\n\r\n    connectReflector() {\r\n        if (this._reflector) {\r\n            this._reflector.close();\r\n        }\r\n\r\n        this._reflector = new Reflector(this.props.scene, this._reflectorHostname, this._reflectorPort);\r\n    }\r\n\r\n    override render() {\r\n        const scene = this.props.scene;\r\n\r\n        if (!scene) {\r\n            return null;\r\n        }\r\n\r\n        const sceneImportDefaults = this.props.globalState.sceneImportDefaults;\r\n\r\n        const animationGroupLoadingModes = [\r\n            { label: \"Clean\", value: SceneLoaderAnimationGroupLoadingMode.Clean },\r\n            { label: \"Stop\", value: SceneLoaderAnimationGroupLoadingMode.Stop },\r\n            { label: \"Sync\", value: SceneLoaderAnimationGroupLoadingMode.Sync },\r\n            { label: \"NoSync\", value: SceneLoaderAnimationGroupLoadingMode.NoSync },\r\n        ];\r\n\r\n        return (\r\n            <div className=\"pane\">\r\n                <LineContainerComponent title=\"CAPTURE\" selection={this.props.globalState}>\r\n                    <ButtonLineComponent label=\"Screenshot\" onClick={() => this.captureScreenshot()} />\r\n                    <ButtonLineComponent label=\"Generate equirectangular capture\" onClick={() => this.captureEquirectangular()} />\r\n                    <ButtonLineComponent label={this.state.tag} onClick={() => this.recordVideo()} />\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"CAPTURE WITH RTT\" selection={this.props.globalState}>\r\n                    <ButtonLineComponent label=\"Capture\" onClick={() => this.captureRender()} />\r\n                    <div className=\"vector3Line\">\r\n                        <FloatLineComponent\r\n                            lockObject={this._lockObject}\r\n                            label=\"Precision\"\r\n                            target={this._screenShotSize}\r\n                            propertyName=\"precision\"\r\n                            onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        />\r\n                        <CheckBoxLineComponent\r\n                            label=\"Use Width/Height\"\r\n                            onSelect={(value) => {\r\n                                this._useWidthHeight = value;\r\n                                this.forceUpdate();\r\n                            }}\r\n                            isSelected={() => this._useWidthHeight}\r\n                        />\r\n                        {this._useWidthHeight && (\r\n                            <div className=\"secondLine\">\r\n                                <NumericInput\r\n                                    lockObject={this._lockObject}\r\n                                    label=\"Width\"\r\n                                    precision={0}\r\n                                    step={1}\r\n                                    value={this._screenShotSize.width ? this._screenShotSize.width : 512}\r\n                                    onChange={(value) => (this._screenShotSize.width = value)}\r\n                                />\r\n                                <NumericInput\r\n                                    lockObject={this._lockObject}\r\n                                    label=\"Height\"\r\n                                    precision={0}\r\n                                    step={1}\r\n                                    value={this._screenShotSize.height ? this._screenShotSize.height : 512}\r\n                                    onChange={(value) => (this._screenShotSize.height = value)}\r\n                                />\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"GIF\" selection={this.props.globalState}>\r\n                    {this._crunchingGIF && <MessageLineComponent text=\"Creating the GIF file...\" />}\r\n                    {!this._crunchingGIF && <ButtonLineComponent label={this._gifRecorder ? \"Stop\" : \"Record\"} onClick={() => this.recordGIF()} />}\r\n                    {!this._crunchingGIF && !this._gifRecorder && (\r\n                        <>\r\n                            <FloatLineComponent lockObject={this._lockObject} label=\"Resolution\" isInteger={true} target={this._gifOptions} propertyName=\"width\" />\r\n                            <FloatLineComponent lockObject={this._lockObject} label=\"Frequency (ms)\" isInteger={true} target={this._gifOptions} propertyName=\"frequency\" />\r\n                        </>\r\n                    )}\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"REPLAY\" selection={this.props.globalState}>\r\n                    {!this.props.globalState.recorder.isRecording && <ButtonLineComponent label=\"Start recording\" onClick={() => this.startRecording()} />}\r\n                    {this.props.globalState.recorder.isRecording && <IndentedTextLineComponent value={\"Record in progress\"} />}\r\n                    {this.props.globalState.recorder.isRecording && <ButtonLineComponent label=\"Generate delta file\" onClick={() => this.exportReplay()} />}\r\n                    <FileButtonLine label={`Apply delta file`} onClick={(file) => this.applyDelta(file)} accept=\".json\" />\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"SCENE IMPORT\" selection={this.props.globalState}>\r\n                    <FileMultipleButtonLineComponent label=\"Import animations\" accept=\"gltf\" onClick={(evt: any) => this.importAnimations(evt)} />\r\n                    <CheckBoxLineComponent\r\n                        label=\"Overwrite animations\"\r\n                        target={sceneImportDefaults}\r\n                        propertyName=\"overwriteAnimations\"\r\n                        onSelect={(value) => {\r\n                            sceneImportDefaults[\"overwriteAnimations\"] = value;\r\n                            this.forceUpdate();\r\n                        }}\r\n                    />\r\n                    {sceneImportDefaults[\"overwriteAnimations\"] === false && (\r\n                        <OptionsLine label=\"Animation merge mode\" options={animationGroupLoadingModes} target={sceneImportDefaults} propertyName=\"animationGroupLoadingMode\" />\r\n                    )}\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"SCENE EXPORT\" selection={this.props.globalState}>\r\n                    <ButtonLineComponent label=\"Export to Babylon\" onClick={() => this.exportBabylon()} />\r\n                    {!scene.getEngine().premultipliedAlpha && scene.environmentTexture && scene.environmentTexture._prefiltered && scene.activeCamera && (\r\n                        <>\r\n                            <ButtonLineComponent label=\"Generate .env texture\" onClick={() => this.createEnvTexture()} />\r\n                            <OptionsLine\r\n                                label=\"Image type\"\r\n                                options={envExportImageTypes}\r\n                                target={this._envOptions}\r\n                                propertyName=\"imageTypeIndex\"\r\n                                onSelect={() => {\r\n                                    this.forceUpdate();\r\n                                }}\r\n                            />\r\n                            {this._envOptions.imageTypeIndex > 0 && (\r\n                                <FloatLineComponent\r\n                                    lockObject={this._lockObject}\r\n                                    label=\"Quality\"\r\n                                    isInteger={false}\r\n                                    min={0}\r\n                                    max={1}\r\n                                    target={this._envOptions}\r\n                                    propertyName=\"imageQuality\"\r\n                                />\r\n                            )}\r\n                        </>\r\n                    )}\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"GLTF EXPORT\" selection={this.props.globalState}>\r\n                    {this._isExportingGltf && <TextLineComponent label=\"Please wait..exporting\" ignoreValue={true} />}\r\n                    {!this._isExportingGltf && (\r\n                        <>\r\n                            <CheckBoxLineComponent\r\n                                label=\"Export Disabled Nodes\"\r\n                                isSelected={() => this._gltfExportOptions.exportDisabledNodes}\r\n                                onSelect={(value) => (this._gltfExportOptions.exportDisabledNodes = value)}\r\n                            />\r\n                            <CheckBoxLineComponent\r\n                                label=\"Export Skybox\"\r\n                                isSelected={() => this._gltfExportOptions.exportSkyboxes}\r\n                                onSelect={(value) => (this._gltfExportOptions.exportSkyboxes = value)}\r\n                            />\r\n                            <CheckBoxLineComponent\r\n                                label=\"Export Cameras\"\r\n                                isSelected={() => this._gltfExportOptions.exportCameras}\r\n                                onSelect={(value) => (this._gltfExportOptions.exportCameras = value)}\r\n                            />\r\n                            <CheckBoxLineComponent\r\n                                label=\"Export Lights\"\r\n                                isSelected={() => this._gltfExportOptions.exportLights}\r\n                                onSelect={(value) => (this._gltfExportOptions.exportLights = value)}\r\n                            />\r\n                            <ButtonLineComponent label=\"Export to GLB\" onClick={() => this.exportGLTF()} />\r\n                        </>\r\n                    )}\r\n                </LineContainerComponent>\r\n                {GLTFFileLoader && <GLTFComponent lockObject={this._lockObject} scene={scene} globalState={this.props.globalState!} />}\r\n                <LineContainerComponent title=\"REFLECTOR\" selection={this.props.globalState}>\r\n                    <TextInputLineComponent lockObject={this._lockObject} label=\"Hostname\" target={this} propertyName=\"_reflectorHostname\" />\r\n                    <FloatLineComponent lockObject={this._lockObject} label=\"Port\" target={this} propertyName=\"_reflectorPort\" isInteger={true} />\r\n                    <ButtonLineComponent label=\"Connect\" onClick={() => this.connectReflector()} />\r\n                </LineContainerComponent>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
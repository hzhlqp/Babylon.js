{"version":3,"file":"debugTabComponent.js","sourceRoot":"","sources":["../../../../src/components/actionTabs/tabs/debugTabComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { IPaneComponentProps } from \"../paneComponent\";\r\nimport { PaneComponent } from \"../paneComponent\";\r\nimport { LineContainerComponent } from \"shared-ui-components/lines/lineContainerComponent\";\r\nimport { CheckBoxLineComponent } from \"shared-ui-components/lines/checkBoxLineComponent\";\r\nimport { RenderGridPropertyGridComponent } from \"./propertyGrids/renderGridPropertyGridComponent\";\r\n\r\nimport { PhysicsViewer } from \"core/Debug/physicsViewer\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { MaterialFlags } from \"core/Materials/materialFlags\";\r\n\r\nimport \"core/Physics/physicsEngineComponent\";\r\nimport \"core/Physics/v1/physicsEngineComponent\";\r\nimport \"core/Physics/v2/physicsEngineComponent\";\r\n\r\nexport class DebugTabComponent extends PaneComponent {\r\n    private _physicsViewersEnabled = false;\r\n\r\n    constructor(props: IPaneComponentProps) {\r\n        super(props);\r\n\r\n        const scene = this.props.scene;\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        if (!scene.reservedDataStore) {\r\n            scene.reservedDataStore = {};\r\n        }\r\n\r\n        this._physicsViewersEnabled = scene.reservedDataStore.physicsViewer != null;\r\n    }\r\n\r\n    switchPhysicsViewers() {\r\n        this._physicsViewersEnabled = !this._physicsViewersEnabled;\r\n        const scene = this.props.scene;\r\n\r\n        if (this._physicsViewersEnabled) {\r\n            const physicsViewer = new PhysicsViewer(scene);\r\n            scene.reservedDataStore.physicsViewer = physicsViewer;\r\n\r\n            for (const mesh of scene.meshes) {\r\n                if (mesh.physicsImpostor) {\r\n                    const debugMesh = physicsViewer.showImpostor(mesh.physicsImpostor, mesh as Mesh);\r\n\r\n                    if (debugMesh) {\r\n                        debugMesh.reservedDataStore = { hidden: true };\r\n                        debugMesh.material!.reservedDataStore = { hidden: true };\r\n                    }\r\n                } else if (mesh.physicsBody) {\r\n                    const debugMesh = physicsViewer.showBody(mesh.physicsBody);\r\n\r\n                    if (debugMesh) {\r\n                        debugMesh.reservedDataStore = { hidden: true };\r\n                        debugMesh.material!.reservedDataStore = { hidden: true };\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (const transformNode of scene.transformNodes) {\r\n                if (transformNode.physicsBody) {\r\n                    const debugMesh = physicsViewer.showBody(transformNode.physicsBody);\r\n\r\n                    if (debugMesh) {\r\n                        debugMesh.reservedDataStore = { hidden: true };\r\n                        debugMesh.material!.reservedDataStore = { hidden: true };\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            scene.reservedDataStore.physicsViewer.dispose();\r\n            scene.reservedDataStore.physicsViewer = null;\r\n        }\r\n    }\r\n\r\n    override render() {\r\n        const scene = this.props.scene;\r\n\r\n        if (!scene) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className=\"pane\">\r\n                <LineContainerComponent title=\"HELPERS\" selection={this.props.globalState}>\r\n                    <RenderGridPropertyGridComponent globalState={this.props.globalState} scene={scene} />\r\n                    <CheckBoxLineComponent label=\"Physics\" isSelected={() => this._physicsViewersEnabled} onSelect={() => this.switchPhysicsViewers()} />\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"CORE TEXTURE CHANNELS\" selection={this.props.globalState}>\r\n                    <CheckBoxLineComponent\r\n                        label=\"Diffuse\"\r\n                        isSelected={() => StandardMaterial.DiffuseTextureEnabled}\r\n                        onSelect={() => (StandardMaterial.DiffuseTextureEnabled = !StandardMaterial.DiffuseTextureEnabled)}\r\n                    />\r\n                    <CheckBoxLineComponent\r\n                        label=\"Ambient\"\r\n                        isSelected={() => StandardMaterial.AmbientTextureEnabled}\r\n                        onSelect={() => (StandardMaterial.AmbientTextureEnabled = !StandardMaterial.AmbientTextureEnabled)}\r\n                    />\r\n                    <CheckBoxLineComponent\r\n                        label=\"Specular\"\r\n                        isSelected={() => StandardMaterial.SpecularTextureEnabled}\r\n                        onSelect={() => (StandardMaterial.SpecularTextureEnabled = !StandardMaterial.SpecularTextureEnabled)}\r\n                    />\r\n                    <CheckBoxLineComponent\r\n                        label=\"Emissive\"\r\n                        isSelected={() => StandardMaterial.EmissiveTextureEnabled}\r\n                        onSelect={() => (StandardMaterial.EmissiveTextureEnabled = !StandardMaterial.EmissiveTextureEnabled)}\r\n                    />\r\n                    <CheckBoxLineComponent\r\n                        label=\"Bump\"\r\n                        isSelected={() => StandardMaterial.BumpTextureEnabled}\r\n                        onSelect={() => (StandardMaterial.BumpTextureEnabled = !StandardMaterial.BumpTextureEnabled)}\r\n                    />\r\n                    <CheckBoxLineComponent\r\n                        label=\"Opacity\"\r\n                        isSelected={() => StandardMaterial.OpacityTextureEnabled}\r\n                        onSelect={() => (StandardMaterial.OpacityTextureEnabled = !StandardMaterial.OpacityTextureEnabled)}\r\n                    />\r\n                    <CheckBoxLineComponent\r\n                        label=\"Reflection\"\r\n                        isSelected={() => StandardMaterial.ReflectionTextureEnabled}\r\n                        onSelect={() => (StandardMaterial.ReflectionTextureEnabled = !StandardMaterial.ReflectionTextureEnabled)}\r\n                    />\r\n                    <CheckBoxLineComponent\r\n                        label=\"Refraction\"\r\n                        isSelected={() => StandardMaterial.RefractionTextureEnabled}\r\n                        onSelect={() => (StandardMaterial.RefractionTextureEnabled = !StandardMaterial.RefractionTextureEnabled)}\r\n                    />\r\n                    <CheckBoxLineComponent\r\n                        label=\"ColorGrading\"\r\n                        isSelected={() => StandardMaterial.ColorGradingTextureEnabled}\r\n                        onSelect={() => (StandardMaterial.ColorGradingTextureEnabled = !StandardMaterial.ColorGradingTextureEnabled)}\r\n                    />\r\n                    <CheckBoxLineComponent\r\n                        label=\"Lightmap\"\r\n                        isSelected={() => StandardMaterial.LightmapTextureEnabled}\r\n                        onSelect={() => (StandardMaterial.LightmapTextureEnabled = !StandardMaterial.LightmapTextureEnabled)}\r\n                    />\r\n                    <CheckBoxLineComponent\r\n                        label=\"Fresnel\"\r\n                        isSelected={() => StandardMaterial.FresnelEnabled}\r\n                        onSelect={() => (StandardMaterial.FresnelEnabled = !StandardMaterial.FresnelEnabled)}\r\n                    />\r\n                    <CheckBoxLineComponent\r\n                        label=\"Detail\"\r\n                        isSelected={() => MaterialFlags.DetailTextureEnabled}\r\n                        onSelect={() => (MaterialFlags.DetailTextureEnabled = !MaterialFlags.DetailTextureEnabled)}\r\n                    />\r\n                    <CheckBoxLineComponent\r\n                        label=\"Decal\"\r\n                        isSelected={() => MaterialFlags.DecalMapEnabled}\r\n                        onSelect={() => (MaterialFlags.DecalMapEnabled = !MaterialFlags.DecalMapEnabled)}\r\n                    />\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"FEATURES\" selection={this.props.globalState}>\r\n                    <CheckBoxLineComponent label=\"Animations\" isSelected={() => scene.animationsEnabled} onSelect={() => (scene.animationsEnabled = !scene.animationsEnabled)} />\r\n                    <CheckBoxLineComponent label=\"Physics\" isSelected={() => scene.physicsEnabled} onSelect={() => (scene.physicsEnabled = !scene.physicsEnabled)} />\r\n                    <CheckBoxLineComponent label=\"Collisions\" isSelected={() => scene.collisionsEnabled} onSelect={() => (scene.collisionsEnabled = !scene.collisionsEnabled)} />\r\n                    <CheckBoxLineComponent label=\"Fog\" isSelected={() => scene.fogEnabled} onSelect={() => (scene.fogEnabled = !scene.fogEnabled)} />\r\n                    <CheckBoxLineComponent label=\"Lens flares\" isSelected={() => scene.lensFlaresEnabled} onSelect={() => (scene.lensFlaresEnabled = !scene.lensFlaresEnabled)} />\r\n                    <CheckBoxLineComponent label=\"Lights\" isSelected={() => scene.lightsEnabled} onSelect={() => (scene.lightsEnabled = !scene.lightsEnabled)} />\r\n                    <CheckBoxLineComponent label=\"Particles\" isSelected={() => scene.particlesEnabled} onSelect={() => (scene.particlesEnabled = !scene.particlesEnabled)} />\r\n                    <CheckBoxLineComponent\r\n                        label=\"Post-processes\"\r\n                        isSelected={() => scene.postProcessesEnabled}\r\n                        onSelect={() => (scene.postProcessesEnabled = !scene.postProcessesEnabled)}\r\n                    />\r\n                    <CheckBoxLineComponent label=\"Probes\" isSelected={() => scene.probesEnabled} onSelect={() => (scene.probesEnabled = !scene.probesEnabled)} />\r\n                    <CheckBoxLineComponent label=\"Textures\" isSelected={() => scene.texturesEnabled} onSelect={() => (scene.texturesEnabled = !scene.texturesEnabled)} />\r\n                    <CheckBoxLineComponent\r\n                        label=\"Procedural textures\"\r\n                        isSelected={() => scene.proceduralTexturesEnabled}\r\n                        onSelect={() => (scene.proceduralTexturesEnabled = !scene.proceduralTexturesEnabled)}\r\n                    />\r\n                    <CheckBoxLineComponent\r\n                        label=\"Render targets\"\r\n                        isSelected={() => scene.renderTargetsEnabled}\r\n                        onSelect={() => (scene.renderTargetsEnabled = !scene.renderTargetsEnabled)}\r\n                    />\r\n                    <CheckBoxLineComponent label=\"Shadows\" isSelected={() => scene.shadowsEnabled} onSelect={() => (scene.shadowsEnabled = !scene.shadowsEnabled)} />\r\n                    <CheckBoxLineComponent label=\"Skeletons\" isSelected={() => scene.skeletonsEnabled} onSelect={() => (scene.skeletonsEnabled = !scene.skeletonsEnabled)} />\r\n                    <CheckBoxLineComponent label=\"Sprites\" isSelected={() => scene.spritesEnabled} onSelect={() => (scene.spritesEnabled = !scene.spritesEnabled)} />\r\n                </LineContainerComponent>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
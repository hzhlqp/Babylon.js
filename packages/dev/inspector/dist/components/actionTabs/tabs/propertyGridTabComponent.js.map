{"version":3,"file":"propertyGridTabComponent.js","sourceRoot":"","sources":["../../../../src/components/actionTabs/tabs/propertyGridTabComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { IPaneComponentProps } from \"../paneComponent\";\r\nimport { PaneComponent } from \"../paneComponent\";\r\n\r\nimport type { ArcRotateCamera } from \"core/Cameras/arcRotateCamera\";\r\nimport type { FreeCamera } from \"core/Cameras/freeCamera\";\r\nimport type { AnimationGroup, TargetedAnimation } from \"core/Animations/animationGroup\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { BackgroundMaterial } from \"core/Materials/Background/backgroundMaterial\";\r\nimport type { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport type { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { PBRMetallicRoughnessMaterial } from \"core/Materials/PBR/pbrMetallicRoughnessMaterial\";\r\nimport type { PBRSpecularGlossinessMaterial } from \"core/Materials/PBR/pbrSpecularGlossinessMaterial\";\r\nimport type { Texture } from \"core/Materials/Textures/texture\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { HemisphericLight } from \"core/Lights/hemisphericLight\";\r\nimport type { PointLight } from \"core/Lights/pointLight\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { MaterialPropertyGridComponent } from \"./propertyGrids/materials/materialPropertyGridComponent\";\r\nimport { StandardMaterialPropertyGridComponent } from \"./propertyGrids/materials/standardMaterialPropertyGridComponent\";\r\nimport { TexturePropertyGridComponent } from \"./propertyGrids/materials/texturePropertyGridComponent\";\r\nimport { PBRMaterialPropertyGridComponent } from \"./propertyGrids/materials/pbrMaterialPropertyGridComponent\";\r\nimport { ScenePropertyGridComponent } from \"./propertyGrids/scenePropertyGridComponent\";\r\nimport { HemisphericLightPropertyGridComponent } from \"./propertyGrids/lights/hemisphericLightPropertyGridComponent\";\r\nimport { PointLightPropertyGridComponent } from \"./propertyGrids/lights/pointLightPropertyGridComponent\";\r\nimport { FreeCameraPropertyGridComponent } from \"./propertyGrids/cameras/freeCameraPropertyGridComponent\";\r\nimport { ArcRotateCameraPropertyGridComponent } from \"./propertyGrids/cameras/arcRotateCameraPropertyGridComponent\";\r\nimport { MeshPropertyGridComponent } from \"./propertyGrids/meshes/meshPropertyGridComponent\";\r\nimport { TransformNodePropertyGridComponent } from \"./propertyGrids/meshes/transformNodePropertyGridComponent\";\r\nimport { BackgroundMaterialPropertyGridComponent } from \"./propertyGrids/materials/backgroundMaterialPropertyGridComponent\";\r\nimport type { Control } from \"gui/2D/controls/control\";\r\nimport { ControlPropertyGridComponent } from \"shared-ui-components/tabs/propertyGrids/gui/controlPropertyGridComponent\";\r\nimport { TextBlockPropertyGridComponent } from \"shared-ui-components/tabs/propertyGrids/gui/textBlockPropertyGridComponent\";\r\nimport type { TextBlock } from \"gui/2D/controls/textBlock\";\r\nimport type { InputText } from \"gui/2D/controls/inputText\";\r\nimport { InputTextPropertyGridComponent } from \"shared-ui-components/tabs/propertyGrids/gui/inputTextPropertyGridComponent\";\r\n\r\nimport type { ColorPicker } from \"gui/2D/controls/colorpicker\";\r\nimport type { Image } from \"gui/2D/controls/image\";\r\nimport type { Slider } from \"gui/2D/controls/sliders/slider\";\r\nimport type { ImageBasedSlider } from \"gui/2D/controls/sliders/imageBasedSlider\";\r\nimport type { Rectangle } from \"gui/2D/controls/rectangle\";\r\nimport type { Ellipse } from \"gui/2D/controls/ellipse\";\r\nimport type { Checkbox } from \"gui/2D/controls/checkbox\";\r\nimport type { RadioButton } from \"gui/2D/controls/radioButton\";\r\nimport type { Line } from \"gui/2D/controls/line\";\r\nimport type { ScrollViewer } from \"gui/2D/controls/scrollViewers/scrollViewer\";\r\nimport type { Grid } from \"gui/2D/controls/grid\";\r\nimport type { StackPanel } from \"gui/2D/controls/stackPanel\";\r\n\r\nimport { ColorPickerPropertyGridComponent } from \"shared-ui-components/tabs/propertyGrids/gui/colorPickerPropertyGridComponent\";\r\nimport { AnimationGroupGridComponent } from \"./propertyGrids/animations/animationGroupPropertyGridComponent\";\r\nimport { LockObject } from \"shared-ui-components/tabs/propertyGrids/lockObject\";\r\nimport { ImagePropertyGridComponent } from \"shared-ui-components/tabs/propertyGrids/gui/imagePropertyGridComponent\";\r\nimport { SliderPropertyGridComponent } from \"shared-ui-components/tabs/propertyGrids/gui/sliderPropertyGridComponent\";\r\nimport { ImageBasedSliderPropertyGridComponent } from \"shared-ui-components/tabs/propertyGrids/gui/imageBasedSliderPropertyGridComponent\";\r\nimport { RectanglePropertyGridComponent } from \"shared-ui-components/tabs/propertyGrids/gui/rectanglePropertyGridComponent\";\r\nimport { EllipsePropertyGridComponent } from \"shared-ui-components/tabs/propertyGrids/gui/ellipsePropertyGridComponent\";\r\nimport { CheckboxPropertyGridComponent } from \"shared-ui-components/tabs/propertyGrids/gui/checkboxPropertyGridComponent\";\r\nimport { RadioButtonPropertyGridComponent } from \"shared-ui-components/tabs/propertyGrids/gui/radioButtonPropertyGridComponent\";\r\nimport { LinePropertyGridComponent } from \"shared-ui-components/tabs/propertyGrids/gui/linePropertyGridComponent\";\r\nimport { ScrollViewerPropertyGridComponent } from \"shared-ui-components/tabs/propertyGrids/gui/scrollViewerPropertyGridComponent\";\r\nimport { GridPropertyGridComponent } from \"shared-ui-components/tabs/propertyGrids/gui/gridPropertyGridComponent\";\r\nimport { PBRMetallicRoughnessMaterialPropertyGridComponent } from \"./propertyGrids/materials/pbrMetallicRoughnessMaterialPropertyGridComponent\";\r\nimport { PBRSpecularGlossinessMaterialPropertyGridComponent } from \"./propertyGrids/materials/pbrSpecularGlossinessMaterialPropertyGridComponent\";\r\nimport { StackPanelPropertyGridComponent } from \"shared-ui-components/tabs/propertyGrids/gui/stackPanelPropertyGridComponent\";\r\nimport type { PostProcess } from \"core/PostProcesses/postProcess\";\r\nimport { PostProcessPropertyGridComponent } from \"./propertyGrids/postProcesses/postProcessPropertyGridComponent\";\r\nimport { RenderingPipelinePropertyGridComponent } from \"./propertyGrids/postProcesses/renderingPipelinePropertyGridComponent\";\r\nimport type { PostProcessRenderPipeline } from \"core/PostProcesses/RenderPipeline/postProcessRenderPipeline\";\r\nimport { DefaultRenderingPipelinePropertyGridComponent } from \"./propertyGrids/postProcesses/defaultRenderingPipelinePropertyGridComponent\";\r\nimport type { DefaultRenderingPipeline } from \"core/PostProcesses/RenderPipeline/Pipelines/defaultRenderingPipeline\";\r\nimport type { SSAORenderingPipeline } from \"core/PostProcesses/RenderPipeline/Pipelines/ssaoRenderingPipeline\";\r\nimport { SSAORenderingPipelinePropertyGridComponent } from \"./propertyGrids/postProcesses/ssaoRenderingPipelinePropertyGridComponent\";\r\nimport type { SSAO2RenderingPipeline } from \"core/PostProcesses/RenderPipeline/Pipelines/ssao2RenderingPipeline\";\r\nimport { SSAO2RenderingPipelinePropertyGridComponent } from \"./propertyGrids/postProcesses/ssao2RenderingPipelinePropertyGridComponent\";\r\nimport type { IblShadowsRenderPipeline } from \"core/Rendering/IBLShadows/iblShadowsRenderPipeline\";\r\nimport { IblShadowsRenderPipelinePropertyGridComponent } from \"./propertyGrids/postProcesses/iblShadowsRenderPipelinePropertyGridComponent\";\r\nimport type { SSRRenderingPipeline } from \"core/PostProcesses/RenderPipeline/Pipelines/ssrRenderingPipeline\";\r\nimport { SSRRenderingPipelinePropertyGridComponent } from \"./propertyGrids/postProcesses/ssrRenderingPipelinePropertyGridComponent\";\r\nimport type { Skeleton } from \"core/Bones/skeleton\";\r\nimport { SkeletonPropertyGridComponent } from \"./propertyGrids/meshes/skeletonPropertyGridComponent\";\r\nimport type { Bone } from \"core/Bones/bone\";\r\nimport { BonePropertyGridComponent } from \"./propertyGrids/meshes/bonePropertyGridComponent\";\r\nimport { DirectionalLightPropertyGridComponent } from \"./propertyGrids/lights/directionalLightPropertyGridComponent\";\r\nimport type { DirectionalLight } from \"core/Lights/directionalLight\";\r\nimport type { SpotLight } from \"core/Lights/spotLight\";\r\nimport { SpotLightPropertyGridComponent } from \"./propertyGrids/lights/spotLightPropertyGridComponent\";\r\nimport type { LensRenderingPipeline } from \"core/PostProcesses/RenderPipeline/Pipelines/lensRenderingPipeline\";\r\nimport { LensRenderingPipelinePropertyGridComponent } from \"./propertyGrids/postProcesses/lensRenderingPipelinePropertyGridComponent\";\r\nimport type { NodeMaterial } from \"core/Materials/Node/nodeMaterial\";\r\nimport { NodeMaterialPropertyGridComponent } from \"./propertyGrids/materials/nodeMaterialPropertyGridComponent\";\r\nimport type { MultiMaterial } from \"core/Materials/multiMaterial\";\r\nimport { MultiMaterialPropertyGridComponent } from \"./propertyGrids/materials/multiMaterialPropertyGridComponent\";\r\nimport { ParticleSystemPropertyGridComponent } from \"./propertyGrids/particleSystems/particleSystemPropertyGridComponent\";\r\nimport type { IParticleSystem } from \"core/Particles/IParticleSystem\";\r\nimport { SpriteManagerPropertyGridComponent } from \"./propertyGrids/sprites/spriteManagerPropertyGridComponent\";\r\nimport type { SpriteManager } from \"core/Sprites/spriteManager\";\r\nimport { SpritePropertyGridComponent } from \"./propertyGrids/sprites/spritePropertyGridComponent\";\r\nimport type { Sprite } from \"core/Sprites/sprite\";\r\nimport { TargetedAnimationGridComponent } from \"./propertyGrids/animations/targetedAnimationPropertyGridComponent\";\r\nimport type { FollowCamera } from \"core/Cameras/followCamera\";\r\nimport { FollowCameraPropertyGridComponent } from \"./propertyGrids/cameras/followCameraPropertyGridComponent\";\r\nimport type { Sound } from \"core/Audio/sound\";\r\nimport { SoundPropertyGridComponent } from \"./propertyGrids/sounds/soundPropertyGridComponent\";\r\nimport { LayerPropertyGridComponent } from \"./propertyGrids/layers/layerPropertyGridComponent\";\r\nimport type { EffectLayer } from \"core/Layers/effectLayer\";\r\nimport { EmptyPropertyGridComponent } from \"./propertyGrids/emptyPropertyGridComponent\";\r\nimport { MetadataGridComponent } from \"inspector/components/actionTabs/tabs/propertyGrids/metadata/metadataPropertyGridComponent\";\r\nimport type { SkyMaterial } from \"materials/sky/skyMaterial\";\r\nimport { SkyMaterialPropertyGridComponent } from \"./propertyGrids/materials/skyMaterialPropertyGridComponent\";\r\n\r\n/**\r\n *\r\n */\r\nexport class PropertyGridTabComponent extends PaneComponent {\r\n    private _timerIntervalId: number;\r\n    private _lockObject = new LockObject();\r\n\r\n    constructor(props: IPaneComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    timerRefresh() {\r\n        if (!this._lockObject.lock) {\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    override componentDidMount() {\r\n        this._timerIntervalId = window.setInterval(() => this.timerRefresh(), 500);\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        window.clearInterval(this._timerIntervalId);\r\n    }\r\n\r\n    renderContent() {\r\n        const entity = this.props.selectedEntity;\r\n\r\n        if (!entity) {\r\n            return <div className=\"infoMessage\">Please select an entity in the scene explorer.</div>;\r\n        }\r\n\r\n        if (entity.getClassName) {\r\n            const className = entity.getClassName();\r\n\r\n            if (className === \"Scene\") {\r\n                const scene = entity as Scene;\r\n                return (\r\n                    <ScenePropertyGridComponent\r\n                        scene={scene}\r\n                        globalState={this.props.globalState}\r\n                        lockObject={this._lockObject}\r\n                        onSelectionChangedObservable={this.props.onSelectionChangedObservable}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className === \"Sound\") {\r\n                const sound = entity as Sound;\r\n                return (\r\n                    <SoundPropertyGridComponent\r\n                        sound={sound}\r\n                        globalState={this.props.globalState}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className === \"Sprite\") {\r\n                const sprite = entity as Sprite;\r\n                return (\r\n                    <SpritePropertyGridComponent\r\n                        sprite={sprite}\r\n                        globalState={this.props.globalState}\r\n                        lockObject={this._lockObject}\r\n                        onSelectionChangedObservable={this.props.onSelectionChangedObservable}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className === \"SpriteManager\") {\r\n                const spriteManager = entity as SpriteManager;\r\n                return (\r\n                    <SpriteManagerPropertyGridComponent\r\n                        spriteManager={spriteManager}\r\n                        globalState={this.props.globalState}\r\n                        lockObject={this._lockObject}\r\n                        onSelectionChangedObservable={this.props.onSelectionChangedObservable}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className.indexOf(\"Mesh\") !== -1) {\r\n                const mesh = entity as Mesh;\r\n                if (mesh.getTotalVertices() > 0) {\r\n                    return (\r\n                        <div>\r\n                            <MeshPropertyGridComponent\r\n                                globalState={this.props.globalState}\r\n                                mesh={mesh}\r\n                                lockObject={this._lockObject}\r\n                                onSelectionChangedObservable={this.props.onSelectionChangedObservable}\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n\r\n            if (className.indexOf(\"ParticleSystem\") !== -1) {\r\n                const particleSystem = entity as IParticleSystem;\r\n                return (\r\n                    <ParticleSystemPropertyGridComponent\r\n                        globalState={this.props.globalState}\r\n                        system={particleSystem}\r\n                        lockObject={this._lockObject}\r\n                        onSelectionChangedObservable={this.props.onSelectionChangedObservable}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (\r\n                className.indexOf(\"FreeCamera\") !== -1 ||\r\n                className.indexOf(\"UniversalCamera\") !== -1 ||\r\n                className.indexOf(\"WebXRCamera\") !== -1 ||\r\n                className.indexOf(\"DeviceOrientationCamera\") !== -1\r\n            ) {\r\n                const freeCamera = entity as FreeCamera;\r\n                return (\r\n                    <FreeCameraPropertyGridComponent\r\n                        globalState={this.props.globalState}\r\n                        camera={freeCamera}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className.indexOf(\"ArcRotateCamera\") !== -1) {\r\n                const arcRotateCamera = entity as ArcRotateCamera;\r\n                return (\r\n                    <ArcRotateCameraPropertyGridComponent\r\n                        globalState={this.props.globalState}\r\n                        camera={arcRotateCamera}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className.indexOf(\"FollowCamera\") !== -1) {\r\n                const followCamera = entity as FollowCamera;\r\n                return (\r\n                    <FollowCameraPropertyGridComponent\r\n                        globalState={this.props.globalState}\r\n                        camera={followCamera}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className === \"HemisphericLight\") {\r\n                const hemisphericLight = entity as HemisphericLight;\r\n                return (\r\n                    <HemisphericLightPropertyGridComponent\r\n                        globalState={this.props.globalState}\r\n                        light={hemisphericLight}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className === \"PointLight\") {\r\n                const pointLight = entity as PointLight;\r\n                return (\r\n                    <PointLightPropertyGridComponent\r\n                        globalState={this.props.globalState}\r\n                        light={pointLight}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className === \"DirectionalLight\") {\r\n                const pointLight = entity as DirectionalLight;\r\n                return (\r\n                    <DirectionalLightPropertyGridComponent\r\n                        globalState={this.props.globalState}\r\n                        light={pointLight}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className === \"SpotLight\") {\r\n                const pointLight = entity as SpotLight;\r\n                return (\r\n                    <SpotLightPropertyGridComponent\r\n                        globalState={this.props.globalState}\r\n                        light={pointLight}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className.indexOf(\"TransformNode\") !== -1 || className.indexOf(\"Mesh\") !== -1) {\r\n                const transformNode = entity as TransformNode;\r\n                return (\r\n                    <TransformNodePropertyGridComponent\r\n                        transformNode={transformNode}\r\n                        globalState={this.props.globalState}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className === \"MultiMaterial\") {\r\n                const material = entity as MultiMaterial;\r\n                return (\r\n                    <MultiMaterialPropertyGridComponent\r\n                        globalState={this.props.globalState}\r\n                        material={material}\r\n                        lockObject={this._lockObject}\r\n                        onSelectionChangedObservable={this.props.onSelectionChangedObservable}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className === \"StandardMaterial\") {\r\n                const material = entity as StandardMaterial;\r\n                return (\r\n                    <StandardMaterialPropertyGridComponent\r\n                        globalState={this.props.globalState}\r\n                        material={material}\r\n                        lockObject={this._lockObject}\r\n                        onSelectionChangedObservable={this.props.onSelectionChangedObservable}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className === \"NodeMaterial\") {\r\n                const material = entity as NodeMaterial;\r\n                return (\r\n                    <NodeMaterialPropertyGridComponent\r\n                        globalState={this.props.globalState}\r\n                        material={material}\r\n                        lockObject={this._lockObject}\r\n                        onSelectionChangedObservable={this.props.onSelectionChangedObservable}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className === \"PBRMaterial\") {\r\n                const material = entity as PBRMaterial;\r\n                return (\r\n                    <PBRMaterialPropertyGridComponent\r\n                        globalState={this.props.globalState}\r\n                        material={material}\r\n                        lockObject={this._lockObject}\r\n                        onSelectionChangedObservable={this.props.onSelectionChangedObservable}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className === \"PBRMetallicRoughnessMaterial\") {\r\n                const material = entity as PBRMetallicRoughnessMaterial;\r\n                return (\r\n                    <PBRMetallicRoughnessMaterialPropertyGridComponent\r\n                        globalState={this.props.globalState}\r\n                        material={material}\r\n                        lockObject={this._lockObject}\r\n                        onSelectionChangedObservable={this.props.onSelectionChangedObservable}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className === \"PBRSpecularGlossinessMaterial\") {\r\n                const material = entity as PBRSpecularGlossinessMaterial;\r\n                return (\r\n                    <PBRSpecularGlossinessMaterialPropertyGridComponent\r\n                        globalState={this.props.globalState}\r\n                        material={material}\r\n                        lockObject={this._lockObject}\r\n                        onSelectionChangedObservable={this.props.onSelectionChangedObservable}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className === \"SkyMaterial\") {\r\n                const material = entity as SkyMaterial;\r\n                return (\r\n                    <SkyMaterialPropertyGridComponent\r\n                        globalState={this.props.globalState}\r\n                        material={material}\r\n                        lockObject={this._lockObject}\r\n                        onSelectionChangedObservable={this.props.onSelectionChangedObservable}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className === \"BackgroundMaterial\") {\r\n                const material = entity as BackgroundMaterial;\r\n                return (\r\n                    <BackgroundMaterialPropertyGridComponent\r\n                        globalState={this.props.globalState}\r\n                        material={material}\r\n                        lockObject={this._lockObject}\r\n                        onSelectionChangedObservable={this.props.onSelectionChangedObservable}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className === \"AnimationGroup\") {\r\n                const animationGroup = entity as AnimationGroup;\r\n                return (\r\n                    <AnimationGroupGridComponent\r\n                        globalState={this.props.globalState}\r\n                        animationGroup={animationGroup}\r\n                        scene={this.props.scene}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className === \"TargetedAnimation\") {\r\n                const targetedAnimation = entity as TargetedAnimation;\r\n                return (\r\n                    <TargetedAnimationGridComponent\r\n                        globalState={this.props.globalState}\r\n                        targetedAnimation={targetedAnimation}\r\n                        scene={this.props.scene}\r\n                        lockObject={this._lockObject}\r\n                        onSelectionChangedObservable={this.props.onSelectionChangedObservable}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className.indexOf(\"Material\") !== -1) {\r\n                const material = entity as Material;\r\n                return (\r\n                    <MaterialPropertyGridComponent\r\n                        material={material}\r\n                        globalState={this.props.globalState}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className.indexOf(\"DefaultRenderingPipeline\") !== -1) {\r\n                const renderPipeline = entity as DefaultRenderingPipeline;\r\n                return (\r\n                    <DefaultRenderingPipelinePropertyGridComponent\r\n                        renderPipeline={renderPipeline}\r\n                        globalState={this.props.globalState}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className.indexOf(\"LensRenderingPipeline\") !== -1) {\r\n                const renderPipeline = entity as LensRenderingPipeline;\r\n                return (\r\n                    <LensRenderingPipelinePropertyGridComponent\r\n                        renderPipeline={renderPipeline}\r\n                        globalState={this.props.globalState}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className.indexOf(\"SSAORenderingPipeline\") !== -1) {\r\n                const renderPipeline = entity as SSAORenderingPipeline;\r\n                return (\r\n                    <SSAORenderingPipelinePropertyGridComponent\r\n                        renderPipeline={renderPipeline}\r\n                        globalState={this.props.globalState}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className.indexOf(\"SSAO2RenderingPipeline\") !== -1) {\r\n                const renderPipeline = entity as SSAO2RenderingPipeline;\r\n                return (\r\n                    <SSAO2RenderingPipelinePropertyGridComponent\r\n                        renderPipeline={renderPipeline}\r\n                        globalState={this.props.globalState}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className.indexOf(\"SSRRenderingPipeline\") !== -1) {\r\n                const renderPipeline = entity as SSRRenderingPipeline;\r\n                return (\r\n                    <SSRRenderingPipelinePropertyGridComponent\r\n                        renderPipeline={renderPipeline}\r\n                        globalState={this.props.globalState}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className.indexOf(\"IBLShadowsRenderPipeline\") !== -1) {\r\n                const renderPipeline = entity as IblShadowsRenderPipeline;\r\n                return (\r\n                    <IblShadowsRenderPipelinePropertyGridComponent\r\n                        renderPipeline={renderPipeline}\r\n                        globalState={this.props.globalState}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className.indexOf(\"RenderingPipeline\") !== -1) {\r\n                const renderPipeline = entity as PostProcessRenderPipeline;\r\n                return (\r\n                    <RenderingPipelinePropertyGridComponent\r\n                        renderPipeline={renderPipeline}\r\n                        globalState={this.props.globalState}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className.indexOf(\"PostProcess\") !== -1) {\r\n                const postProcess = entity as PostProcess;\r\n                return (\r\n                    <PostProcessPropertyGridComponent\r\n                        postProcess={postProcess}\r\n                        globalState={this.props.globalState}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className.indexOf(\"Layer\") !== -1) {\r\n                const layer = entity as EffectLayer;\r\n                return (\r\n                    <LayerPropertyGridComponent\r\n                        layer={layer}\r\n                        globalState={this.props.globalState}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className.indexOf(\"Texture\") !== -1) {\r\n                const texture = entity as Texture;\r\n                return (\r\n                    <TexturePropertyGridComponent\r\n                        texture={texture}\r\n                        globalState={this.props.globalState}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className.indexOf(\"Skeleton\") !== -1) {\r\n                const skeleton = entity as Skeleton;\r\n                return (\r\n                    <SkeletonPropertyGridComponent\r\n                        skeleton={skeleton}\r\n                        globalState={this.props.globalState}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className.indexOf(\"Bone\") !== -1) {\r\n                const bone = entity as Bone;\r\n                return (\r\n                    <BonePropertyGridComponent\r\n                        bone={bone}\r\n                        globalState={this.props.globalState}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className === \"TextBlock\") {\r\n                const textBlock = entity as TextBlock;\r\n                return <TextBlockPropertyGridComponent textBlock={textBlock} lockObject={this._lockObject} onPropertyChangedObservable={this.props.onPropertyChangedObservable} />;\r\n            }\r\n\r\n            if (className === \"InputText\") {\r\n                const inputText = entity as InputText;\r\n                return <InputTextPropertyGridComponent inputText={inputText} lockObject={this._lockObject} onPropertyChangedObservable={this.props.onPropertyChangedObservable} />;\r\n            }\r\n\r\n            if (className === \"ColorPicker\") {\r\n                const colorPicker = entity as ColorPicker;\r\n                return (\r\n                    <ColorPickerPropertyGridComponent\r\n                        colorPicker={colorPicker}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className === \"Image\") {\r\n                const image = entity as Image;\r\n                return <ImagePropertyGridComponent image={image} lockObject={this._lockObject} onPropertyChangedObservable={this.props.onPropertyChangedObservable} />;\r\n            }\r\n\r\n            if (className === \"Slider\") {\r\n                const slider = entity as Slider;\r\n                return <SliderPropertyGridComponent slider={slider} lockObject={this._lockObject} onPropertyChangedObservable={this.props.onPropertyChangedObservable} />;\r\n            }\r\n\r\n            if (className === \"ImageBasedSlider\") {\r\n                const imageBasedSlider = entity as ImageBasedSlider;\r\n                return (\r\n                    <ImageBasedSliderPropertyGridComponent\r\n                        imageBasedSlider={imageBasedSlider}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className === \"Rectangle\") {\r\n                const rectangle = entity as Rectangle;\r\n                return <RectanglePropertyGridComponent rectangle={rectangle} lockObject={this._lockObject} onPropertyChangedObservable={this.props.onPropertyChangedObservable} />;\r\n            }\r\n\r\n            if (className === \"StackPanel\") {\r\n                const stackPanel = entity as StackPanel;\r\n                return (\r\n                    <StackPanelPropertyGridComponent stackPanel={stackPanel} lockObject={this._lockObject} onPropertyChangedObservable={this.props.onPropertyChangedObservable} />\r\n                );\r\n            }\r\n\r\n            if (className === \"Grid\") {\r\n                const grid = entity as Grid;\r\n                return <GridPropertyGridComponent grid={grid} lockObject={this._lockObject} onPropertyChangedObservable={this.props.onPropertyChangedObservable} />;\r\n            }\r\n\r\n            if (className === \"ScrollViewer\") {\r\n                const scrollViewer = entity as ScrollViewer;\r\n                return (\r\n                    <ScrollViewerPropertyGridComponent\r\n                        scrollViewer={scrollViewer}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className === \"Ellipse\") {\r\n                const ellipse = entity as Ellipse;\r\n                return <EllipsePropertyGridComponent ellipse={ellipse} lockObject={this._lockObject} onPropertyChangedObservable={this.props.onPropertyChangedObservable} />;\r\n            }\r\n\r\n            if (className === \"Checkbox\") {\r\n                const checkbox = entity as Checkbox;\r\n                return <CheckboxPropertyGridComponent checkbox={checkbox} lockObject={this._lockObject} onPropertyChangedObservable={this.props.onPropertyChangedObservable} />;\r\n            }\r\n\r\n            if (className === \"RadioButton\") {\r\n                const radioButton = entity as RadioButton;\r\n                return (\r\n                    <RadioButtonPropertyGridComponent\r\n                        radioButtons={[radioButton]}\r\n                        lockObject={this._lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            }\r\n\r\n            if (className === \"Line\") {\r\n                const line = entity as Line;\r\n                return <LinePropertyGridComponent line={line} lockObject={this._lockObject} onPropertyChangedObservable={this.props.onPropertyChangedObservable} />;\r\n            }\r\n\r\n            if (entity._host) {\r\n                const control = entity as Control;\r\n                return <ControlPropertyGridComponent control={control} lockObject={this._lockObject} onPropertyChangedObservable={this.props.onPropertyChangedObservable} />;\r\n            }\r\n\r\n            return (\r\n                <EmptyPropertyGridComponent\r\n                    item={entity}\r\n                    lockObject={this._lockObject}\r\n                    onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    globalState={this.props.globalState}\r\n                />\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    override render() {\r\n        const entity = this.props.selectedEntity || {};\r\n        const entityHasMetadataProp = Object.prototype.hasOwnProperty.call(entity, \"metadata\");\r\n        return (\r\n            <div className=\"pane\">\r\n                {this.renderContent()}\r\n                {entityHasMetadataProp && <MetadataGridComponent globalState={this.props.globalState} entity={entity} />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
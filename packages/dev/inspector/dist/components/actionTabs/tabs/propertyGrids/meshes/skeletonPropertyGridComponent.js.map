{"version":3,"file":"skeletonPropertyGridComponent.js","sourceRoot":"","sources":["../../../../../../src/components/actionTabs/tabs/propertyGrids/meshes/skeletonPropertyGridComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\n\r\nimport type { Observable } from \"core/Misc/observable\";\r\n\r\nimport type { PropertyChangedEvent } from \"../../../../propertyChangedEvent\";\r\nimport { LineContainerComponent } from \"shared-ui-components/lines/lineContainerComponent\";\r\nimport { CheckBoxLineComponent } from \"shared-ui-components/lines/checkBoxLineComponent\";\r\nimport { TextLineComponent } from \"shared-ui-components/lines/textLineComponent\";\r\nimport type { LockObject } from \"shared-ui-components/tabs/propertyGrids/lockObject\";\r\nimport type { GlobalState } from \"../../../../globalState\";\r\nimport type { Skeleton } from \"core/Bones/skeleton\";\r\nimport { AnimationGridComponent } from \"../animations/animationPropertyGridComponent\";\r\nimport { SkeletonViewer } from \"core/Debug/skeletonViewer\";\r\nimport { CustomPropertyGridComponent } from \"../customPropertyGridComponent\";\r\nimport { OptionsLine } from \"shared-ui-components/lines/optionsLineComponent\";\r\nimport { FloatLineComponent } from \"shared-ui-components/lines/floatLineComponent\";\r\nimport { ButtonLineComponent } from \"shared-ui-components/lines/buttonLineComponent\";\r\n\r\ninterface ISkeletonPropertyGridComponentProps {\r\n    globalState: GlobalState;\r\n    skeleton: Skeleton;\r\n    lockObject: LockObject;\r\n    onPropertyChangedObservable?: Observable<PropertyChangedEvent>;\r\n}\r\n\r\nexport class SkeletonPropertyGridComponent extends React.Component<ISkeletonPropertyGridComponentProps> {\r\n    private _skeletonViewersEnabled = false;\r\n\r\n    private _skeletonViewerDisplayOptions = {\r\n        displayMode: SkeletonViewer.DISPLAY_LINES,\r\n        sphereBaseSize: 0.15,\r\n        sphereScaleUnit: 2,\r\n        sphereFactor: 0.865,\r\n        midStep: 0.235,\r\n        midStepFactor: 0.155,\r\n    };\r\n\r\n    private _skeletonViewers = new Array<SkeletonViewer>();\r\n\r\n    constructor(props: ISkeletonPropertyGridComponentProps) {\r\n        super(props);\r\n\r\n        this.checkSkeletonViewerState(this.props);\r\n    }\r\n\r\n    switchSkeletonViewers() {\r\n        this._skeletonViewersEnabled = !this._skeletonViewersEnabled;\r\n        const scene = this.props.skeleton.getScene();\r\n\r\n        if (this._skeletonViewersEnabled) {\r\n            for (const mesh of scene.meshes) {\r\n                if (mesh.skeleton === this.props.skeleton) {\r\n                    let found = false;\r\n                    for (let sIndex = 0; sIndex < this._skeletonViewers.length; sIndex++) {\r\n                        if (this._skeletonViewers[sIndex].skeleton === mesh.skeleton) {\r\n                            found = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (found) {\r\n                        continue;\r\n                    }\r\n\r\n                    const viewer = new SkeletonViewer(mesh.skeleton, mesh, scene, true, 3, {\r\n                        displayMode: this._skeletonViewerDisplayOptions.displayMode,\r\n                        displayOptions: {\r\n                            sphereBaseSize: this._skeletonViewerDisplayOptions.sphereBaseSize,\r\n                            sphereScaleUnit: this._skeletonViewerDisplayOptions.sphereScaleUnit,\r\n                            sphereFactor: this._skeletonViewerDisplayOptions.sphereFactor,\r\n                            midStep: this._skeletonViewerDisplayOptions.midStep,\r\n                            midStepFactor: this._skeletonViewerDisplayOptions.midStepFactor,\r\n                        },\r\n                    });\r\n\r\n                    viewer.isEnabled = true;\r\n                    this._skeletonViewers.push(viewer);\r\n                    if (!mesh.reservedDataStore) {\r\n                        mesh.reservedDataStore = {};\r\n                    }\r\n                    mesh.reservedDataStore.skeletonViewer = viewer;\r\n                }\r\n            }\r\n        } else {\r\n            for (let index = 0; index < this._skeletonViewers.length; index++) {\r\n                const skeletonViewer = this._skeletonViewers[index];\r\n                if (skeletonViewer.mesh) {\r\n                    skeletonViewer.mesh.reservedDataStore.skeletonViewer = null;\r\n                }\r\n                skeletonViewer.dispose();\r\n            }\r\n            this._skeletonViewers = [];\r\n        }\r\n    }\r\n\r\n    checkSkeletonViewerState(props: ISkeletonPropertyGridComponentProps) {\r\n        const scene = props.skeleton.getScene();\r\n        this._skeletonViewers = [];\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        let needInit = true;\r\n        for (const mesh of scene.meshes) {\r\n            if (mesh.skeleton === props.skeleton && mesh.reservedDataStore && mesh.reservedDataStore.skeletonViewer) {\r\n                this._skeletonViewers.push(mesh.reservedDataStore.skeletonViewer);\r\n\r\n                if (needInit) {\r\n                    needInit = false;\r\n                    this._skeletonViewerDisplayOptions.displayMode = this._skeletonViewers[0].displayMode;\r\n                    for (const key in this._skeletonViewers[0].options.displayOptions) {\r\n                        if (!key) {\r\n                            continue;\r\n                        }\r\n                        (this._skeletonViewerDisplayOptions as any)[key] = (this._skeletonViewers[0].options as any).displayOptions[key];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._skeletonViewersEnabled = this._skeletonViewers.length > 0;\r\n    }\r\n\r\n    changeDisplayMode() {\r\n        if (this._skeletonViewersEnabled) {\r\n            for (let index = 0; index < this._skeletonViewers.length; index++) {\r\n                this._skeletonViewers[index].changeDisplayMode(this._skeletonViewerDisplayOptions.displayMode || 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    changeDisplayOptions(option: string, value: number) {\r\n        if (this._skeletonViewersEnabled) {\r\n            for (let index = 0; index < this._skeletonViewers.length; index++) {\r\n                this._skeletonViewers[index].changeDisplayOptions(option, value);\r\n            }\r\n            if ((this._skeletonViewerDisplayOptions as any)[option] !== undefined) {\r\n                (this._skeletonViewerDisplayOptions as any)[option] = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    override shouldComponentUpdate(nextProps: ISkeletonPropertyGridComponentProps) {\r\n        if (nextProps.skeleton !== this.props.skeleton) {\r\n            this.checkSkeletonViewerState(nextProps);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    override render() {\r\n        const skeleton = this.props.skeleton;\r\n\r\n        const debugModeOptions = [\r\n            { label: \"Lines\", value: SkeletonViewer.DISPLAY_LINES },\r\n            { label: \"Spheres\", value: SkeletonViewer.DISPLAY_SPHERES },\r\n            { label: \"Sphere and Spurs\", value: SkeletonViewer.DISPLAY_SPHERE_AND_SPURS },\r\n        ];\r\n\r\n        let displayOptions;\r\n        if (this._skeletonViewerDisplayOptions.displayMode > SkeletonViewer.DISPLAY_LINES) {\r\n            displayOptions = (\r\n                <LineContainerComponent title=\"DISPLAY OPTIONS\" selection={this.props.globalState}>\r\n                    <FloatLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"sphereBaseSize\"\r\n                        target={this._skeletonViewerDisplayOptions}\r\n                        propertyName=\"sphereBaseSize\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        onChange={(value) => {\r\n                            this.changeDisplayOptions(\"sphereBaseSize\", value);\r\n                        }}\r\n                    />\r\n                    <FloatLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"sphereScaleUnit\"\r\n                        target={this._skeletonViewerDisplayOptions}\r\n                        propertyName=\"sphereScaleUnit\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        onChange={(value) => {\r\n                            this.changeDisplayOptions(\"sphereScaleUnit\", value);\r\n                        }}\r\n                    />\r\n                    <FloatLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"sphereFactor\"\r\n                        target={this._skeletonViewerDisplayOptions}\r\n                        propertyName=\"sphereFactor\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        onChange={(value) => {\r\n                            this.changeDisplayOptions(\"sphereFactor\", value);\r\n                        }}\r\n                    />\r\n                    <FloatLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"midStep\"\r\n                        target={this._skeletonViewerDisplayOptions}\r\n                        propertyName=\"midStep\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        onChange={(value) => {\r\n                            this.changeDisplayOptions(\"midStep\", value);\r\n                        }}\r\n                    />\r\n                    <FloatLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"midStepFactor\"\r\n                        target={this._skeletonViewerDisplayOptions}\r\n                        propertyName=\"midStepFactor\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        onChange={(value) => {\r\n                            this.changeDisplayOptions(\"midStepFactor\", value);\r\n                        }}\r\n                    />\r\n                </LineContainerComponent>\r\n            );\r\n        } else {\r\n            displayOptions = null;\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <CustomPropertyGridComponent\r\n                    globalState={this.props.globalState}\r\n                    target={skeleton}\r\n                    lockObject={this.props.lockObject}\r\n                    onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                />\r\n                <LineContainerComponent title=\"GENERAL\" selection={this.props.globalState}>\r\n                    <TextLineComponent label=\"ID\" value={skeleton.id} />\r\n                    <TextLineComponent label=\"Bone count\" value={skeleton.bones.length.toString()} />\r\n                    <CheckBoxLineComponent\r\n                        label=\"Use texture to store matrices\"\r\n                        target={skeleton}\r\n                        propertyName=\"useTextureToStoreBoneMatrices\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    <ButtonLineComponent label=\"Return to rest\" onClick={() => skeleton.returnToRest()} />\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"DEBUG\" selection={this.props.globalState}>\r\n                    <CheckBoxLineComponent label=\"Enabled\" isSelected={() => this._skeletonViewersEnabled} onSelect={() => this.switchSkeletonViewers()} />\r\n                    <OptionsLine\r\n                        label=\"displayMode\"\r\n                        options={debugModeOptions}\r\n                        target={this._skeletonViewerDisplayOptions}\r\n                        propertyName=\"displayMode\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        onSelect={() => this.changeDisplayMode()}\r\n                    />\r\n                    {displayOptions}\r\n                </LineContainerComponent>\r\n                <AnimationGridComponent globalState={this.props.globalState} animatable={skeleton} scene={skeleton.getScene()} lockObject={this.props.lockObject} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n"]}
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import * as React from "react";
import { CommonRenderingPipelinePropertyGridComponent } from "./commonRenderingPipelinePropertyGridComponent";
import { SliderLineComponent } from "shared-ui-components/lines/sliderLineComponent";
import { LineContainerComponent } from "shared-ui-components/lines/lineContainerComponent";
import { CheckBoxLineComponent } from "shared-ui-components/lines/checkBoxLineComponent";
import { ButtonLineComponent } from "shared-ui-components/lines/buttonLineComponent";
export class IblShadowsRenderPipelinePropertyGridComponent extends React.Component {
    constructor(props) {
        super(props);
    }
    render() {
        const renderPipeline = this.props.renderPipeline;
        return (_jsxs(_Fragment, { children: [_jsx(CommonRenderingPipelinePropertyGridComponent, { globalState: this.props.globalState, lockObject: this.props.lockObject, renderPipeline: renderPipeline, onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsxs(LineContainerComponent, { title: "Voxel Shadows", selection: this.props.globalState, children: [_jsx(ButtonLineComponent, { label: "Update Scene Bounds", onClick: () => {
                                this.props.renderPipeline.updateSceneBounds();
                            } }), _jsx(ButtonLineComponent, { label: "Revoxelize", onClick: () => {
                                this.props.renderPipeline.updateVoxelization();
                            } }), _jsx(ButtonLineComponent, { label: "Link IBL", onClick: () => {
                                if (this.props.renderPipeline.scene.environmentTexture) {
                                    this.props.renderPipeline.setIblTexture(this.props.renderPipeline.scene.environmentTexture);
                                }
                            } }), _jsx(SliderLineComponent, { lockObject: this.props.lockObject, label: "Opacity", minimum: 0, maximum: 1, step: 0.05, target: renderPipeline, propertyName: "shadowOpacity", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(SliderLineComponent, { lockObject: this.props.lockObject, label: "Samples", minimum: 0, maximum: 8, step: 1, target: renderPipeline, propertyName: "sampleDirections", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(SliderLineComponent, { lockObject: this.props.lockObject, label: "Resolution", minimum: 4, maximum: 8, step: 1, target: renderPipeline, propertyName: "resolutionExp", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(SliderLineComponent, { lockObject: this.props.lockObject, label: "Remenance", minimum: 0, maximum: 1, step: 0.01, target: renderPipeline, propertyName: "shadowRemenance", onPropertyChangedObservable: this.props.onPropertyChangedObservable })] }), _jsxs(LineContainerComponent, { title: "Screenspace Shadows", selection: this.props.globalState, children: [_jsx(SliderLineComponent, { lockObject: this.props.lockObject, label: "Opacity", minimum: 0, maximum: 1, step: 0.01, target: renderPipeline, propertyName: "ssShadowOpacity", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(SliderLineComponent, { lockObject: this.props.lockObject, label: "Samples", minimum: 0, maximum: 16, step: 1, target: renderPipeline, propertyName: "ssShadowSamples", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(SliderLineComponent, { lockObject: this.props.lockObject, label: "Stride", minimum: 0, maximum: 16, step: 0.01, target: renderPipeline, propertyName: "ssShadowStride", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(SliderLineComponent, { lockObject: this.props.lockObject, label: "Max Distance", minimum: 0.01, maximum: 0.2, step: 0.01, target: renderPipeline, propertyName: "ssShadowMaxDist", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(SliderLineComponent, { lockObject: this.props.lockObject, label: "Thickness", minimum: 0.005, maximum: 0.02, step: 0.001, target: renderPipeline, propertyName: "ssShadowThickness", onPropertyChangedObservable: this.props.onPropertyChangedObservable })] }), _jsxs(LineContainerComponent, { title: "Debug", selection: this.props.globalState, children: [_jsx(CheckBoxLineComponent, { label: "Allow Debug", propertyName: "allowDebugPasses", onPropertyChangedObservable: this.props.onPropertyChangedObservable, target: renderPipeline }), _jsx(CheckBoxLineComponent, { label: "Voxel Grid", propertyName: "voxelDebugEnabled", onPropertyChangedObservable: this.props.onPropertyChangedObservable, target: renderPipeline }), _jsx(CheckBoxLineComponent, { label: "Importance Sample", propertyName: "importanceSamplingDebugEnabled", onPropertyChangedObservable: this.props.onPropertyChangedObservable, target: renderPipeline }), _jsx(CheckBoxLineComponent, { label: "Voxel Tracing", propertyName: "voxelTracingDebugEnabled", onPropertyChangedObservable: this.props.onPropertyChangedObservable, target: renderPipeline }), _jsx(CheckBoxLineComponent, { label: "Accumulation", propertyName: "accumulationPassDebugEnabled", onPropertyChangedObservable: this.props.onPropertyChangedObservable, target: renderPipeline })] })] }));
    }
}
//# sourceMappingURL=iblShadowsRenderPipelinePropertyGridComponent.js.map
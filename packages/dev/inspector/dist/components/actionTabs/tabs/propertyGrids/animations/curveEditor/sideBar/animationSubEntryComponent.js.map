{"version":3,"file":"animationSubEntryComponent.js","sourceRoot":"","sources":["../../../../../../../../src/components/actionTabs/tabs/propertyGrids/animations/curveEditor/sideBar/animationSubEntryComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport type { GlobalState } from \"../../../../../../globalState\";\r\nimport type { Context, IActiveAnimationChangedOptions } from \"../context\";\r\nimport type { Animation } from \"core/Animations/animation\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { SelectionState } from \"../graph/keyPoint\";\r\n\r\nimport selectedIcon from \"../assets/keySelectedIcon.svg\";\r\n\r\ninterface IAnimationSubEntryComponentProps {\r\n    globalState: GlobalState;\r\n    context: Context;\r\n    animation: Animation;\r\n    color: string;\r\n    subName: string;\r\n}\r\n\r\ninterface IAnimationSubEntryComponentState {\r\n    isSelected: boolean;\r\n}\r\n\r\nexport class AnimationSubEntryComponent extends React.Component<IAnimationSubEntryComponentProps, IAnimationSubEntryComponentState> {\r\n    private _onActiveAnimationChangedObserver: Nullable<Observer<IActiveAnimationChangedOptions>>;\r\n    private _onActiveKeyPointChangedObserver: Nullable<Observer<void>>;\r\n\r\n    constructor(props: IAnimationSubEntryComponentProps) {\r\n        super(props);\r\n\r\n        let isSelected = false;\r\n\r\n        if (this.props.context.activeAnimations.indexOf(this.props.animation) !== -1 && this.props.context.activeKeyPoints) {\r\n            for (const keyPoint of this.props.context.activeKeyPoints) {\r\n                if (keyPoint.state.selectedState === SelectionState.Selected && keyPoint.props.channel === this.props.color) {\r\n                    isSelected = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.state = { isSelected: isSelected };\r\n\r\n        this._onActiveAnimationChangedObserver = props.context.onActiveAnimationChanged.add(() => {\r\n            this.forceUpdate();\r\n        });\r\n\r\n        this._onActiveKeyPointChangedObserver = this.props.context.onActiveKeyPointChanged.add(() => {\r\n            let isSelected = false;\r\n\r\n            if (this.props.context.activeKeyPoints) {\r\n                for (const activeKeyPoint of this.props.context.activeKeyPoints) {\r\n                    if (\r\n                        activeKeyPoint.props.curve.animation === this.props.animation &&\r\n                        activeKeyPoint.props.channel === this.props.color &&\r\n                        this.props.context.activeAnimations.indexOf(this.props.animation) !== -1\r\n                    ) {\r\n                        isSelected = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setState({ isSelected: isSelected });\r\n        });\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        if (this._onActiveAnimationChangedObserver) {\r\n            this.props.context.onActiveAnimationChanged.remove(this._onActiveAnimationChangedObserver);\r\n        }\r\n\r\n        if (this._onActiveKeyPointChangedObserver) {\r\n            this.props.context.onActiveKeyPointChanged.remove(this._onActiveKeyPointChangedObserver);\r\n        }\r\n    }\r\n\r\n    private _activate(evt: React.MouseEvent<HTMLDivElement>) {\r\n        const index = this.props.context.activeAnimations.indexOf(this.props.animation);\r\n\r\n        if (index !== -1 && this.props.context.getActiveChannel(this.props.animation) === this.props.color) {\r\n            return;\r\n        }\r\n\r\n        if (!evt.ctrlKey) {\r\n            this.props.context.activeAnimations = [this.props.animation];\r\n            this.props.context.resetAllActiveChannels();\r\n        } else {\r\n            if (index === -1) {\r\n                this.props.context.activeAnimations.push(this.props.animation);\r\n            }\r\n        }\r\n        this.props.context.enableChannel(this.props.animation, this.props.color);\r\n        this.props.context.onActiveAnimationChanged.notifyObservers({});\r\n    }\r\n\r\n    public override render() {\r\n        const isActive = this.props.context.activeAnimations.indexOf(this.props.animation) !== -1 && this.props.context.isChannelEnabled(this.props.animation, this.props.color);\r\n        return (\r\n            <>\r\n                <div className={\"animation-entry\" + (isActive ? \" isActive\" : \"\")}>\r\n                    {this.state.isSelected && (\r\n                        <div className=\"animation-active-indicator\">\r\n                            <img src={selectedIcon} />\r\n                        </div>\r\n                    )}\r\n                    <div\r\n                        className=\"animation-name\"\r\n                        style={{\r\n                            color: this.props.color,\r\n                        }}\r\n                        onClick={(evt) => this._activate(evt)}\r\n                    >\r\n                        {this.props.subName}\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n"]}
{"version":3,"file":"targetedAnimationPropertyGridComponent.js","sourceRoot":"","sources":["../../../../../../src/components/actionTabs/tabs/propertyGrids/animations/targetedAnimationPropertyGridComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport type { Observable } from \"core/Misc/observable\";\r\nimport type { TargetedAnimation, AnimationGroup } from \"core/Animations/animationGroup\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { PropertyChangedEvent } from \"../../../../propertyChangedEvent\";\r\nimport { ButtonLineComponent } from \"shared-ui-components/lines/buttonLineComponent\";\r\nimport { LineContainerComponent } from \"shared-ui-components/lines/lineContainerComponent\";\r\nimport { TextLineComponent } from \"shared-ui-components/lines/textLineComponent\";\r\nimport type { LockObject } from \"shared-ui-components/tabs/propertyGrids/lockObject\";\r\nimport type { GlobalState } from \"../../../../globalState\";\r\nimport { TextInputLineComponent } from \"shared-ui-components/lines/textInputLineComponent\";\r\n\r\nimport { AnimationCurveEditorComponent } from \"./curveEditor/animationCurveEditorComponent\";\r\nimport { Context } from \"./curveEditor/context\";\r\n\r\ninterface ITargetedAnimationGridComponentProps {\r\n    globalState: GlobalState;\r\n    targetedAnimation: TargetedAnimation;\r\n    scene: Scene;\r\n    lockObject: LockObject;\r\n    onSelectionChangedObservable?: Observable<any>;\r\n    onPropertyChangedObservable?: Observable<PropertyChangedEvent>;\r\n}\r\n\r\nexport class TargetedAnimationGridComponent extends React.Component<ITargetedAnimationGridComponentProps> {\r\n    private _animationGroup: AnimationGroup | undefined;\r\n    private _animationCurveEditorContext: Context;\r\n\r\n    constructor(props: ITargetedAnimationGridComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    findAnimationGroup = () => {\r\n        this._animationGroup = this.props.scene.animationGroups.find((ag) => {\r\n            const ta = ag.targetedAnimations.find((ta) => ta === this.props.targetedAnimation);\r\n            return ta !== undefined;\r\n        });\r\n    };\r\n\r\n    playOrPause = () => {\r\n        if (this._animationGroup) {\r\n            if (this._animationGroup.isPlaying) {\r\n                this._animationGroup.stop();\r\n            } else {\r\n                this._animationGroup.start();\r\n            }\r\n            this.forceUpdate();\r\n        }\r\n    };\r\n\r\n    deleteAnimation = () => {\r\n        if (this._animationGroup) {\r\n            const index = this._animationGroup.targetedAnimations.indexOf(this.props.targetedAnimation);\r\n\r\n            if (index > -1) {\r\n                this._animationGroup.targetedAnimations.splice(index, 1);\r\n                this.props.onSelectionChangedObservable?.notifyObservers(null);\r\n\r\n                if (this._animationGroup.isPlaying) {\r\n                    this._animationGroup.stop();\r\n                    this._animationGroup.start();\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    updateContextFromProps = () => {\r\n        if (!this._animationCurveEditorContext) {\r\n            this._animationCurveEditorContext = new Context();\r\n        }\r\n        this._animationCurveEditorContext.title = (this.props.targetedAnimation.target as any).name || \"\";\r\n        this._animationCurveEditorContext.animations = [this.props.targetedAnimation.animation];\r\n        this._animationCurveEditorContext.target = this.props.targetedAnimation.target;\r\n        this._animationCurveEditorContext.scene = this.props.scene;\r\n        if (this._animationGroup) {\r\n            this._animationCurveEditorContext.rootAnimationGroup = this._animationGroup;\r\n        }\r\n    };\r\n\r\n    override componentDidMount() {\r\n        this.findAnimationGroup();\r\n        this.updateContextFromProps();\r\n    }\r\n\r\n    override componentDidUpdate(prevProps: Readonly<ITargetedAnimationGridComponentProps>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if (prevProps.targetedAnimation !== this.props.targetedAnimation) {\r\n            this.findAnimationGroup();\r\n            this.updateContextFromProps();\r\n        }\r\n    }\r\n\r\n    override render() {\r\n        const targetedAnimation = this.props.targetedAnimation;\r\n\r\n        return (\r\n            <>\r\n                <LineContainerComponent title=\"GENERAL\" selection={this.props.globalState}>\r\n                    <TextLineComponent label=\"Class\" value={targetedAnimation.getClassName()} />\r\n                    <TextInputLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"Name\"\r\n                        target={targetedAnimation.animation}\r\n                        propertyName=\"name\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    {targetedAnimation.target.name && (\r\n                        <TextLineComponent\r\n                            label=\"Target\"\r\n                            value={targetedAnimation.target.name}\r\n                            onLink={() => this.props.globalState.onSelectionChangedObservable.notifyObservers(targetedAnimation)}\r\n                        />\r\n                    )}\r\n                    {this._animationCurveEditorContext && <AnimationCurveEditorComponent globalState={this.props.globalState} context={this._animationCurveEditorContext} />}\r\n                    <ButtonLineComponent label=\"Dispose\" onClick={this.deleteAnimation} />\r\n                </LineContainerComponent>\r\n            </>\r\n        );\r\n    }\r\n}\r\n"]}
{"version":3,"file":"spriteManagerPropertyGridComponent.js","sourceRoot":"","sources":["../../../../../../src/components/actionTabs/tabs/propertyGrids/sprites/spriteManagerPropertyGridComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\n\r\nimport type { Observable } from \"core/Misc/observable\";\r\n\r\nimport type { PropertyChangedEvent } from \"../../../../propertyChangedEvent\";\r\nimport type { LockObject } from \"shared-ui-components/tabs/propertyGrids/lockObject\";\r\nimport { LineContainerComponent } from \"shared-ui-components/lines/lineContainerComponent\";\r\nimport type { GlobalState } from \"../../../../globalState\";\r\nimport { SpriteManager } from \"core/Sprites/spriteManager\";\r\nimport { TextInputLineComponent } from \"shared-ui-components/lines/textInputLineComponent\";\r\nimport { TextLineComponent } from \"shared-ui-components/lines/textLineComponent\";\r\nimport { CheckBoxLineComponent } from \"shared-ui-components/lines/checkBoxLineComponent\";\r\nimport { FloatLineComponent } from \"shared-ui-components/lines/floatLineComponent\";\r\nimport { SliderLineComponent } from \"shared-ui-components/lines/sliderLineComponent\";\r\nimport { RenderingManager } from \"core/Rendering/renderingManager\";\r\nimport { TextureLinkLineComponent } from \"../../../lines/textureLinkLineComponent\";\r\nimport { ButtonLineComponent } from \"shared-ui-components/lines/buttonLineComponent\";\r\nimport { Sprite } from \"core/Sprites/sprite\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { FileButtonLine } from \"shared-ui-components/lines/fileButtonLineComponent\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { OptionsLine } from \"shared-ui-components/lines/optionsLineComponent\";\r\n\r\ninterface ISpriteManagerPropertyGridComponentProps {\r\n    globalState: GlobalState;\r\n    spriteManager: SpriteManager;\r\n    lockObject: LockObject;\r\n    onSelectionChangedObservable?: Observable<any>;\r\n    onPropertyChangedObservable?: Observable<PropertyChangedEvent>;\r\n}\r\n\r\nexport class SpriteManagerPropertyGridComponent extends React.Component<ISpriteManagerPropertyGridComponentProps> {\r\n    private _snippetUrl = Constants.SnippetUrl;\r\n\r\n    constructor(props: ISpriteManagerPropertyGridComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    addNewSprite() {\r\n        const spriteManager = this.props.spriteManager;\r\n        const newSprite = new Sprite(\"new sprite\", spriteManager);\r\n\r\n        this.props.onSelectionChangedObservable?.notifyObservers(newSprite);\r\n    }\r\n\r\n    disposeManager() {\r\n        const spriteManager = this.props.spriteManager;\r\n        spriteManager.dispose();\r\n\r\n        this.props.onSelectionChangedObservable?.notifyObservers(null);\r\n    }\r\n\r\n    saveToFile() {\r\n        const spriteManager = this.props.spriteManager;\r\n        const content = JSON.stringify(spriteManager.serialize(true));\r\n\r\n        Tools.Download(new Blob([content]), \"spriteManager.json\");\r\n    }\r\n\r\n    loadFromFile(file: File) {\r\n        const spriteManager = this.props.spriteManager;\r\n        const scene = spriteManager.scene;\r\n\r\n        Tools.ReadFile(\r\n            file,\r\n            (data) => {\r\n                const decoder = new TextDecoder(\"utf-8\");\r\n                const jsonObject = JSON.parse(decoder.decode(data));\r\n\r\n                spriteManager.dispose();\r\n                this.props.globalState.onSelectionChangedObservable.notifyObservers(null);\r\n\r\n                const newManager = SpriteManager.Parse(jsonObject, scene, \"\");\r\n                this.props.globalState.onSelectionChangedObservable.notifyObservers(newManager);\r\n            },\r\n            undefined,\r\n            true\r\n        );\r\n    }\r\n\r\n    loadFromSnippet() {\r\n        const spriteManager = this.props.spriteManager;\r\n        const scene = spriteManager.scene;\r\n\r\n        const snippedId = window.prompt(\"Please enter the snippet ID to use\");\r\n\r\n        if (!snippedId) {\r\n            return;\r\n        }\r\n\r\n        spriteManager.dispose();\r\n        this.props.globalState.onSelectionChangedObservable.notifyObservers(null);\r\n\r\n        SpriteManager.ParseFromSnippetAsync(snippedId, scene)\r\n            .then((newManager) => {\r\n                this.props.globalState.onSelectionChangedObservable.notifyObservers(newManager);\r\n            })\r\n            .catch((err) => {\r\n                alert(\"Unable to load your sprite manager: \" + err);\r\n            });\r\n    }\r\n\r\n    saveToSnippet() {\r\n        const spriteManager = this.props.spriteManager;\r\n        const content = JSON.stringify(spriteManager.serialize(true));\r\n\r\n        const xmlHttp = new XMLHttpRequest();\r\n        xmlHttp.onreadystatechange = () => {\r\n            if (xmlHttp.readyState == 4) {\r\n                if (xmlHttp.status == 200) {\r\n                    const snippet = JSON.parse(xmlHttp.responseText);\r\n                    const oldId = spriteManager.snippetId || \"_BLANK\";\r\n                    spriteManager.snippetId = snippet.id;\r\n                    if (snippet.version && snippet.version != \"0\") {\r\n                        spriteManager.snippetId += \"#\" + snippet.version;\r\n                    }\r\n                    this.forceUpdate();\r\n                    if (navigator.clipboard) {\r\n                        navigator.clipboard.writeText(spriteManager.snippetId);\r\n                    }\r\n\r\n                    const windowAsAny = window as any;\r\n\r\n                    if (windowAsAny.Playground && oldId) {\r\n                        windowAsAny.Playground.onRequestCodeChangeObservable.notifyObservers({\r\n                            regex: new RegExp(`SpriteManager.ParseFromSnippetAsync\\\\(\"${oldId}`, \"g\"),\r\n                            replace: `SpriteManager.ParseFromSnippetAsync(\"${spriteManager.snippetId}`,\r\n                        });\r\n                    }\r\n\r\n                    alert(\"Sprite manager saved with ID: \" + spriteManager.snippetId + \" (please note that the id was also saved to your clipboard)\");\r\n                } else {\r\n                    alert(\"Unable to save your sprite manager\");\r\n                }\r\n            }\r\n        };\r\n\r\n        xmlHttp.open(\"POST\", this._snippetUrl + (spriteManager.snippetId ? \"/\" + spriteManager.snippetId : \"\"), true);\r\n        xmlHttp.setRequestHeader(\"Content-Type\", \"application/json\");\r\n\r\n        const dataToSend = {\r\n            payload: JSON.stringify({\r\n                spriteManager: content,\r\n            }),\r\n            name: \"\",\r\n            description: \"\",\r\n            tags: \"\",\r\n        };\r\n\r\n        xmlHttp.send(JSON.stringify(dataToSend));\r\n    }\r\n\r\n    override render() {\r\n        const spriteManager = this.props.spriteManager;\r\n\r\n        const alphaModeOptions = [\r\n            { label: \"Combine\", value: Constants.ALPHA_COMBINE },\r\n            { label: \"One one\", value: Constants.ALPHA_ONEONE },\r\n            { label: \"Add\", value: Constants.ALPHA_ADD },\r\n            { label: \"Subtract\", value: Constants.ALPHA_SUBTRACT },\r\n            { label: \"Multiply\", value: Constants.ALPHA_MULTIPLY },\r\n            { label: \"Maximized\", value: Constants.ALPHA_MAXIMIZED },\r\n            { label: \"Pre-multiplied\", value: Constants.ALPHA_PREMULTIPLIED },\r\n        ];\r\n\r\n        return (\r\n            <>\r\n                <LineContainerComponent title=\"GENERAL\" selection={this.props.globalState}>\r\n                    <TextInputLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"Name\"\r\n                        target={spriteManager}\r\n                        propertyName=\"name\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    <TextLineComponent label=\"Unique ID\" value={spriteManager.uniqueId.toString()} />\r\n                    <TextLineComponent label=\"Capacity\" value={spriteManager.capacity.toString()} />\r\n                    <TextureLinkLineComponent label=\"Texture\" texture={spriteManager.texture} onSelectionChangedObservable={this.props.onSelectionChangedObservable} />\r\n                    {spriteManager.sprites.length < spriteManager.capacity && <ButtonLineComponent label=\"Add new sprite\" onClick={() => this.addNewSprite()} />}\r\n                    <ButtonLineComponent label=\"Dispose\" onClick={() => this.disposeManager()} />\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"FILE\" selection={this.props.globalState}>\r\n                    <FileButtonLine label=\"Load\" onClick={(file) => this.loadFromFile(file)} accept=\".json\" />\r\n                    <ButtonLineComponent label=\"Save\" onClick={() => this.saveToFile()} />\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"SNIPPET\" selection={this.props.globalState}>\r\n                    {spriteManager.snippetId && <TextLineComponent label=\"Snippet ID\" value={spriteManager.snippetId} />}\r\n                    <ButtonLineComponent label=\"Load from snippet server\" onClick={() => this.loadFromSnippet()} />\r\n                    <ButtonLineComponent label=\"Save to snippet server\" onClick={() => this.saveToSnippet()} />\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"PROPERTIES\" selection={this.props.globalState}>\r\n                    <CheckBoxLineComponent label=\"Pickable\" target={spriteManager} propertyName=\"isPickable\" onPropertyChangedObservable={this.props.onPropertyChangedObservable} />\r\n                    <CheckBoxLineComponent\r\n                        label=\"Fog enabled\"\r\n                        target={spriteManager}\r\n                        propertyName=\"fogEnabled\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    <CheckBoxLineComponent\r\n                        label=\"No depth write\"\r\n                        target={spriteManager}\r\n                        propertyName=\"disableDepthWrite\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    <SliderLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"Rendering group ID\"\r\n                        decimalCount={0}\r\n                        target={spriteManager}\r\n                        propertyName=\"renderingGroupId\"\r\n                        minimum={RenderingManager.MIN_RENDERINGGROUPS}\r\n                        maximum={RenderingManager.MAX_RENDERINGGROUPS - 1}\r\n                        step={1}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    <OptionsLine\r\n                        label=\"Alpha mode\"\r\n                        options={alphaModeOptions}\r\n                        target={spriteManager}\r\n                        propertyName=\"blendMode\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        onSelect={(value) => this.setState({ blendMode: value })}\r\n                    />\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"CELLS\" selection={this.props.globalState}>\r\n                    <FloatLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"Cell width\"\r\n                        isInteger={true}\r\n                        target={spriteManager}\r\n                        propertyName=\"cellWidth\"\r\n                        min={0}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    <FloatLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"Cell height\"\r\n                        isInteger={true}\r\n                        target={spriteManager}\r\n                        propertyName=\"cellHeight\"\r\n                        min={0}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                </LineContainerComponent>\r\n            </>\r\n        );\r\n    }\r\n}\r\n"]}
{"version":3,"file":"loadAnimationComponent.js","sourceRoot":"","sources":["../../../../../../../../src/components/actionTabs/tabs/propertyGrids/animations/curveEditor/sideBar/loadAnimationComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Tools } from \"core/Misc/tools\";\r\nimport * as React from \"react\";\r\nimport type { GlobalState } from \"../../../../../../globalState\";\r\nimport type { Context } from \"../context\";\r\nimport { Animation } from \"core/Animations/animation\";\r\n\r\ninterface ILoadAnimationComponentProps {\r\n    globalState: GlobalState;\r\n    context: Context;\r\n}\r\n\r\ninterface ILoadAnimationComponentState {}\r\n\r\nexport class LoadAnimationComponent extends React.Component<ILoadAnimationComponentProps, ILoadAnimationComponentState> {\r\n    private _root: React.RefObject<HTMLDivElement>;\r\n    private _textInput: React.RefObject<HTMLInputElement>;\r\n\r\n    constructor(props: ILoadAnimationComponentProps) {\r\n        super(props);\r\n\r\n        this.state = {};\r\n\r\n        this._root = React.createRef();\r\n        this._textInput = React.createRef();\r\n    }\r\n\r\n    public loadFromFile(evt: React.ChangeEvent<HTMLInputElement>) {\r\n        const files = evt.target.files;\r\n        if (!files || !files.length) {\r\n            return;\r\n        }\r\n\r\n        const file = files[0];\r\n        Tools.ReadFile(\r\n            file,\r\n            (data) => {\r\n                const context = this.props.context;\r\n                const decoder = new TextDecoder(\"utf-8\");\r\n                const parsedAnimations = JSON.parse(decoder.decode(data)).animations;\r\n                context.animations = [];\r\n\r\n                const animations = context.animations as Animation[];\r\n\r\n                for (const parsedAnimation of parsedAnimations) {\r\n                    animations.push(Animation.Parse(parsedAnimation));\r\n                }\r\n\r\n                context.stop();\r\n\r\n                context.target!.animations = animations;\r\n                context.activeAnimations = animations.length ? animations : [];\r\n                context.prepare();\r\n                context.onAnimationsLoaded.notifyObservers();\r\n                context.onActiveAnimationChanged.notifyObservers({});\r\n            },\r\n            undefined,\r\n            true\r\n        );\r\n\r\n        evt.target.value = \"\";\r\n    }\r\n\r\n    public loadFromSnippetServer() {\r\n        const context = this.props.context;\r\n        const snippetId = this._textInput.current!.value;\r\n\r\n        Animation.ParseFromSnippetAsync(snippetId)\r\n            .then((animations) => {\r\n                context.snippetId = snippetId;\r\n\r\n                if ((animations as Animation[]).length !== undefined) {\r\n                    context.animations = animations as Animation[];\r\n                } else {\r\n                    context.animations = [animations as Animation];\r\n                }\r\n\r\n                context.stop();\r\n\r\n                context.target!.animations = context.animations;\r\n                context.activeAnimations = context.animations.length ? context.animations : [];\r\n                context.prepare();\r\n                context.onAnimationsLoaded.notifyObservers();\r\n                context.onActiveAnimationChanged.notifyObservers({});\r\n            })\r\n            .catch((err) => {\r\n                this._root.current?.ownerDocument.defaultView!.alert(\"Unable to load your animations: \" + err);\r\n            });\r\n    }\r\n\r\n    public override render() {\r\n        return (\r\n            <div id=\"load-animation-pane\" ref={this._root}>\r\n                <div id=\"load-animation-snippet-id-label\">Snippet Id</div>\r\n                <div id=\"load-animation-local-file-label\">Local File</div>\r\n                <input type=\"text\" id=\"load-snippet-id\" ref={this._textInput} />\r\n                <button className=\"simple-button\" id=\"load-snippet\" type=\"button\" onClick={() => this.loadFromSnippetServer()}>\r\n                    Load\r\n                </button>\r\n                <label htmlFor=\"upload-snippet\" id=\"file-snippet-label\" className=\"simple-button\">\r\n                    Browse\r\n                </label>\r\n                <input id=\"upload-snippet\" type=\"file\" accept=\".json\" onChange={(evt) => this.loadFromFile(evt)} />\r\n                {this.props.context.snippetId && <div id=\"load-animation-snippet\">Snippet ID: {this.props.context.snippetId}</div>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
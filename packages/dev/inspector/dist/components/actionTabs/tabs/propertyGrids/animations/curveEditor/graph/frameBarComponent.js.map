{"version":3,"file":"frameBarComponent.js","sourceRoot":"","sources":["../../../../../../../../src/components/actionTabs/tabs/propertyGrids/animations/curveEditor/graph/frameBarComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport * as React from \"react\";\r\nimport type { GlobalState } from \"../../../../../../globalState\";\r\nimport type { Context, IActiveAnimationChangedOptions } from \"../context\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\n\r\n// x distance between consecutive ticks on the frame\r\nconst baseTickDistance = 25;\r\nconst minTickDistance = 35;\r\n\r\ninterface IFrameBarComponentProps {\r\n    globalState: GlobalState;\r\n    context: Context;\r\n}\r\n\r\ninterface IFrameBarComponentState {}\r\n\r\nexport class FrameBarComponent extends React.Component<IFrameBarComponentProps, IFrameBarComponentState> {\r\n    private readonly _graphAbsoluteWidth = 788;\r\n    private _svgHost: React.RefObject<SVGSVGElement>;\r\n    private _viewWidth = 748;\r\n    private _viewScale = 1;\r\n    private _offsetX = 0;\r\n\r\n    private _onActiveAnimationChangedObserver: Nullable<Observer<IActiveAnimationChangedOptions>>;\r\n\r\n    constructor(props: IFrameBarComponentProps) {\r\n        super(props);\r\n\r\n        this.state = {};\r\n\r\n        this._svgHost = React.createRef();\r\n\r\n        this.props.context.onHostWindowResized.add(() => {\r\n            this._computeSizes();\r\n        });\r\n\r\n        this._onActiveAnimationChangedObserver = this.props.context.onActiveAnimationChanged.add(() => {\r\n            this._computeSizes();\r\n            this.forceUpdate();\r\n        });\r\n\r\n        this.props.context.onGraphMoved.add((x) => {\r\n            this._offsetX = x;\r\n            this.forceUpdate();\r\n        });\r\n\r\n        this.props.context.onGraphScaled.add((scale) => {\r\n            this._viewScale = scale;\r\n            this.forceUpdate();\r\n        });\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        if (this._onActiveAnimationChangedObserver) {\r\n            this.props.context.onActiveAnimationChanged.remove(this._onActiveAnimationChangedObserver);\r\n        }\r\n    }\r\n\r\n    private _computeSizes() {\r\n        if (!this._svgHost.current) {\r\n            return;\r\n        }\r\n\r\n        this._viewWidth = this._svgHost.current.clientWidth;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    private _buildFrames() {\r\n        if (this.props.context.activeAnimations.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const minFrame = this.props.context.referenceMinFrame;\r\n        const maxFrame = this.props.context.referenceMaxFrame;\r\n\r\n        const range = maxFrame - minFrame;\r\n        const convertRatio = range / this._graphAbsoluteWidth;\r\n        const dist = Math.max(baseTickDistance * this._viewScale, minTickDistance); // x distance between consecutive ticks\r\n        let offset = Math.floor(dist * convertRatio);\r\n\r\n        const steps = [];\r\n\r\n        if (offset === 0) {\r\n            offset = 1;\r\n        }\r\n\r\n        const startPosition = this._offsetX * convertRatio;\r\n        const start = minFrame - ((startPosition / offset) | 0) * offset;\r\n        const end = start + this._viewWidth * this._viewScale * convertRatio;\r\n\r\n        for (let step = start - offset; step <= end + offset; step += offset) {\r\n            steps.push(step);\r\n        }\r\n\r\n        return steps.map((s) => {\r\n            const x = (s - minFrame) / convertRatio;\r\n            return (\r\n                <g key={\"axis\" + s}>\r\n                    <line\r\n                        key={\"line\" + s}\r\n                        x1={x}\r\n                        y1={`${5 * this._viewScale}px`}\r\n                        x2={x}\r\n                        y2={`${30 * this._viewScale}px`}\r\n                        style={{\r\n                            stroke: \"#333333\",\r\n                            strokeWidth: 0.5,\r\n                        }}\r\n                    ></line>\r\n                    <text\r\n                        key={\"label\" + s}\r\n                        x={x}\r\n                        y={0}\r\n                        dx={`${7 * this._viewScale}px`}\r\n                        textAnchor=\"middle\"\r\n                        dy={`${15 * this._viewScale}px`}\r\n                        style={{\r\n                            fontFamily: \"acumin-pro-condensed\",\r\n                            fontSize: `${10 * this._viewScale}px`,\r\n                            fill: \"#555555\",\r\n                            textAlign: \"center\",\r\n                        }}\r\n                    >\r\n                        {s.toFixed(0)}\r\n                    </text>\r\n                </g>\r\n            );\r\n        });\r\n    }\r\n\r\n    public override render() {\r\n        const viewBox = `${-this._offsetX} 0 ${Math.round(this._viewWidth * this._viewScale)} ${Math.round(30 * this._viewScale)}`;\r\n\r\n        return (\r\n            <div id=\"frame-bar\">\r\n                {this.props.context.activeAnimations.length > 0 && <div id=\"angle-unit\"></div>}\r\n\r\n                <div id=\"frames\">\r\n                    <svg id=\"svg-frames\" viewBox={viewBox} ref={this._svgHost}>\r\n                        {this._buildFrames()}\r\n                    </svg>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
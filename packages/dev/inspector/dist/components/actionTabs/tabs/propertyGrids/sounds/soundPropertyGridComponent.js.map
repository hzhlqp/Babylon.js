{"version":3,"file":"soundPropertyGridComponent.js","sourceRoot":"","sources":["../../../../../../src/components/actionTabs/tabs/propertyGrids/sounds/soundPropertyGridComponent.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAK/B,OAAO,EAAE,sBAAsB,EAAE,MAAM,mDAAmD,CAAC;AAC3F,OAAO,EAAE,iBAAiB,EAAE,MAAM,8CAA8C,CAAC;AAKjF,OAAO,EAAE,sBAAsB,EAAE,MAAM,mDAAmD,CAAC;AAC3F,OAAO,EAAE,mBAAmB,EAAE,MAAM,gDAAgD,CAAC;AACrF,OAAO,EAAE,mBAAmB,EAAE,MAAM,gDAAgD,CAAC;AACrF,OAAO,EAAE,qBAAqB,EAAE,MAAM,kDAAkD,CAAC;AAUzF,MAAM,OAAO,0BAA2B,SAAQ,KAAK,CAAC,SAA2C;IAC7F,YAAY,KAAuC;QAC/C,KAAK,CAAC,KAAK,CAAC,CAAC;IACjB,CAAC;IAEQ,MAAM;QACX,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QAE/B,OAAO,CACH,8BACI,MAAC,sBAAsB,IAAC,KAAK,EAAC,SAAS,EAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,aACrE,KAAC,iBAAiB,IAAC,KAAK,EAAC,OAAO,EAAC,KAAK,EAAE,KAAK,CAAC,YAAY,EAAE,GAAI,EAChE,KAAC,sBAAsB,IACnB,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,EACjC,KAAK,EAAC,MAAM,EACZ,MAAM,EAAE,KAAK,EACb,YAAY,EAAC,MAAM,EACnB,2BAA2B,EAAE,IAAI,CAAC,KAAK,CAAC,2BAA2B,GACrE,EACF,KAAC,iBAAiB,IAAC,KAAK,EAAC,QAAQ,EAAC,KAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,GAAI,IAqB3F,EACzB,MAAC,sBAAsB,IAAC,KAAK,EAAC,UAAU,EAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,aACrE,KAAK,CAAC,SAAS,IAAI,CAChB,KAAC,mBAAmB,IAChB,KAAK,EAAC,OAAO,EACb,OAAO,EAAE,GAAG,EAAE;gCACV,KAAK,CAAC,KAAK,EAAE,CAAC;gCACd,IAAI,CAAC,WAAW,EAAE,CAAC;4BACvB,CAAC,GACH,CACL,EACA,CAAC,KAAK,CAAC,SAAS,IAAI,CACjB,KAAC,mBAAmB,IAChB,KAAK,EAAC,MAAM,EACZ,OAAO,EAAE,GAAG,EAAE;gCACV,KAAK,CAAC,IAAI,EAAE,CAAC;gCACb,IAAI,CAAC,WAAW,EAAE,CAAC;4BACvB,CAAC,GACH,CACL,EACD,KAAC,mBAAmB,IAChB,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,EACjC,KAAK,EAAC,QAAQ,EACd,MAAM,EAAE,KAAK,EACb,WAAW,EAAE,KAAK,CAAC,SAAS,EAAE,EAC9B,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE;gCAChB,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gCACvB,IAAI,CAAC,WAAW,EAAE,CAAC;4BACvB,CAAC,EACD,OAAO,EAAE,CAAC,EACV,OAAO,EAAE,CAAC,EACV,IAAI,EAAE,GAAG,EACT,YAAY,EAAE,CAAC,EACf,2BAA2B,EAAE,IAAI,CAAC,KAAK,CAAC,2BAA2B,GACrE,EACF,KAAC,qBAAqB,IAAC,KAAK,EAAC,MAAM,EAAC,MAAM,EAAE,KAAK,EAAE,YAAY,EAAC,MAAM,EAAC,2BAA2B,EAAE,IAAI,CAAC,KAAK,CAAC,2BAA2B,GAAI,IACzH,IAC1B,CACN,CAAC;IACN,CAAC;CACJ","sourcesContent":["import * as React from \"react\";\r\n\r\nimport type { Observable } from \"core/Misc/observable\";\r\n\r\nimport type { PropertyChangedEvent } from \"../../../../propertyChangedEvent\";\r\nimport { LineContainerComponent } from \"shared-ui-components/lines/lineContainerComponent\";\r\nimport { TextLineComponent } from \"shared-ui-components/lines/textLineComponent\";\r\nimport type { LockObject } from \"shared-ui-components/tabs/propertyGrids/lockObject\";\r\nimport type { GlobalState } from \"../../../../globalState\";\r\nimport type { Sound } from \"core/Audio/sound\";\r\nimport type { IExplorerExtensibilityGroup } from \"core/Debug/debugLayer\";\r\nimport { TextInputLineComponent } from \"shared-ui-components/lines/textInputLineComponent\";\r\nimport { ButtonLineComponent } from \"shared-ui-components/lines/buttonLineComponent\";\r\nimport { SliderLineComponent } from \"shared-ui-components/lines/sliderLineComponent\";\r\nimport { CheckBoxLineComponent } from \"shared-ui-components/lines/checkBoxLineComponent\";\r\n\r\ninterface ISoundPropertyGridComponentProps {\r\n    globalState: GlobalState;\r\n    sound: Sound;\r\n    extensibilityGroups?: IExplorerExtensibilityGroup[];\r\n    lockObject: LockObject;\r\n    onPropertyChangedObservable?: Observable<PropertyChangedEvent>;\r\n}\r\n\r\nexport class SoundPropertyGridComponent extends React.Component<ISoundPropertyGridComponentProps> {\r\n    constructor(props: ISoundPropertyGridComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    override render() {\r\n        const sound = this.props.sound;\r\n\r\n        return (\r\n            <>\r\n                <LineContainerComponent title=\"GENERAL\" selection={this.props.globalState}>\r\n                    <TextLineComponent label=\"Class\" value={sound.getClassName()} />\r\n                    <TextInputLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"Name\"\r\n                        target={sound}\r\n                        propertyName=\"name\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    <TextLineComponent label=\"Status\" value={sound.isPaused ? \"Paused\" : sound.isPlaying ? \"Playing\" : \"Stopped\"} />\r\n                    {/* {\r\n                        postProcess.width &&\r\n                        <TextLineComponent label=\"Width\" value={postProcess.width.toString()} />\r\n                    }\r\n                    {\r\n                        postProcess.height &&\r\n                        <TextLineComponent label=\"Height\" value={postProcess.height.toString()} />\r\n                    }\r\n                    <CheckBoxLineComponent label=\"Auto clear\" target={postProcess} propertyName=\"autoClear\" onPropertyChangedObservable={this.props.onPropertyChangedObservable} />\r\n                    {\r\n                        postProcess.clearColor &&\r\n                        <Color3LineComponent label=\"Clear color\" target={postProcess} propertyName=\"clearColor\" onPropertyChangedObservable={this.props.onPropertyChangedObservable} />\r\n                    }\r\n                    <CheckBoxLineComponent label=\"Pixel perfect\" target={postProcess} propertyName=\"enablePixelPerfectMode\" onPropertyChangedObservable={this.props.onPropertyChangedObservable} />\r\n                    <CheckBoxLineComponent label=\"Fullscreen viewport\" target={postProcess} propertyName=\"forceFullscreenViewport\" onPropertyChangedObservable={this.props.onPropertyChangedObservable} />\r\n                    <SliderLineComponent label=\"Samples\" target={postProcess} propertyName=\"samples\" minimum={1} maximum={8} step={1} decimalCount={0} onPropertyChangedObservable={this.props.onPropertyChangedObservable} />\r\n                    <ButtonLineComponent label=\"Dispose\" onClick={() => {\r\n                        postProcess.dispose();\r\n                        this.props.globalState.onSelectionChangedObservable.notifyObservers(null);\r\n                    }} />                       */}\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"COMMANDS\" selection={this.props.globalState}>\r\n                    {sound.isPlaying && (\r\n                        <ButtonLineComponent\r\n                            label=\"Pause\"\r\n                            onClick={() => {\r\n                                sound.pause();\r\n                                this.forceUpdate();\r\n                            }}\r\n                        />\r\n                    )}\r\n                    {!sound.isPlaying && (\r\n                        <ButtonLineComponent\r\n                            label=\"Play\"\r\n                            onClick={() => {\r\n                                sound.play();\r\n                                this.forceUpdate();\r\n                            }}\r\n                        />\r\n                    )}\r\n                    <SliderLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"Volume\"\r\n                        target={sound}\r\n                        directValue={sound.getVolume()}\r\n                        onChange={(value) => {\r\n                            sound.setVolume(value);\r\n                            this.forceUpdate();\r\n                        }}\r\n                        minimum={0}\r\n                        maximum={5}\r\n                        step={0.1}\r\n                        decimalCount={1}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    <CheckBoxLineComponent label=\"Loop\" target={sound} propertyName=\"loop\" onPropertyChangedObservable={this.props.onPropertyChangedObservable} />\r\n                </LineContainerComponent>\r\n            </>\r\n        );\r\n    }\r\n}\r\n"]}
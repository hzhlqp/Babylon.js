{"version":3,"file":"nodeMaterialPropertyGridComponent.js","sourceRoot":"","sources":["../../../../../../src/components/actionTabs/tabs/propertyGrids/materials/nodeMaterialPropertyGridComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\n\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { NodeMaterial } from \"core/Materials/Node/nodeMaterial\";\r\nimport type { PropertyChangedEvent } from \"../../../../propertyChangedEvent\";\r\nimport { LineContainerComponent } from \"shared-ui-components/lines/lineContainerComponent\";\r\nimport { CommonMaterialPropertyGridComponent } from \"./commonMaterialPropertyGridComponent\";\r\nimport type { LockObject } from \"shared-ui-components/tabs/propertyGrids/lockObject\";\r\nimport type { GlobalState } from \"../../../../globalState\";\r\nimport { ButtonLineComponent } from \"shared-ui-components/lines/buttonLineComponent\";\r\nimport { CheckBoxLineComponent } from \"shared-ui-components/lines/checkBoxLineComponent\";\r\nimport { FloatLineComponent } from \"shared-ui-components/lines/floatLineComponent\";\r\nimport { Color3LineComponent } from \"shared-ui-components/lines/color3LineComponent\";\r\nimport { Vector3LineComponent } from \"shared-ui-components/lines/vector3LineComponent\";\r\nimport { Vector4LineComponent } from \"shared-ui-components/lines/vector4LineComponent\";\r\nimport { Vector2LineComponent } from \"shared-ui-components/lines/vector2LineComponent\";\r\nimport { TextureLinkLineComponent } from \"../../../lines/textureLinkLineComponent\";\r\nimport { SliderLineComponent } from \"shared-ui-components/lines/sliderLineComponent\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"core/Materials/Node/Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { InputBlock } from \"core/Materials/Node/Blocks/Input/inputBlock\";\r\nimport { GradientPropertyTabComponent } from \"../../gradientNodePropertyComponent\";\r\nimport { Color4LineComponent } from \"shared-ui-components/lines/color4LineComponent\";\r\n\r\ninterface INodeMaterialPropertyGridComponentProps {\r\n    globalState: GlobalState;\r\n    material: NodeMaterial;\r\n    lockObject: LockObject;\r\n    onSelectionChangedObservable?: Observable<any>;\r\n    onPropertyChangedObservable?: Observable<PropertyChangedEvent>;\r\n}\r\n\r\nexport class NodeMaterialPropertyGridComponent extends React.Component<INodeMaterialPropertyGridComponentProps> {\r\n    private _onDebugSelectionChangeObservable = new Observable<TextureLinkLineComponent>();\r\n\r\n    constructor(props: INodeMaterialPropertyGridComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    edit() {\r\n        this.props.material.edit({ nodeEditorConfig: { backgroundColor: this.props.material.getScene().clearColor } });\r\n    }\r\n\r\n    renderTextures() {\r\n        const material = this.props.material;\r\n\r\n        const onDebugSelectionChangeObservable = this._onDebugSelectionChangeObservable;\r\n\r\n        const textureBlocks = material.getTextureBlocks();\r\n\r\n        if (!textureBlocks || textureBlocks.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <LineContainerComponent title=\"TEXTURES\" selection={this.props.globalState}>\r\n                {textureBlocks.map((textureBlock, i) => {\r\n                    return (\r\n                        <TextureLinkLineComponent\r\n                            label={textureBlock.name}\r\n                            key={\"nodematText\" + i}\r\n                            texture={textureBlock.texture}\r\n                            material={material}\r\n                            onTextureCreated={(texture) => (textureBlock.texture = texture)}\r\n                            onSelectionChangedObservable={this.props.onSelectionChangedObservable}\r\n                            onDebugSelectionChangeObservable={onDebugSelectionChangeObservable}\r\n                        />\r\n                    );\r\n                })}\r\n            </LineContainerComponent>\r\n        );\r\n    }\r\n\r\n    renderInputBlock(block: InputBlock) {\r\n        switch (block.type) {\r\n            case NodeMaterialBlockConnectionPointTypes.Float: {\r\n                const cantDisplaySlider = isNaN(block.min) || isNaN(block.max) || block.min === block.max;\r\n                return (\r\n                    <div key={block.name}>\r\n                        {block.isBoolean && (\r\n                            <CheckBoxLineComponent\r\n                                key={block.name}\r\n                                label={block.name}\r\n                                target={block}\r\n                                propertyName=\"value\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                        )}\r\n                        {!block.isBoolean && cantDisplaySlider && (\r\n                            <FloatLineComponent\r\n                                key={block.name}\r\n                                lockObject={this.props.lockObject}\r\n                                label={block.name}\r\n                                target={block}\r\n                                propertyName=\"value\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                        )}\r\n                        {!block.isBoolean && !cantDisplaySlider && (\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                key={block.name}\r\n                                label={block.name}\r\n                                target={block}\r\n                                propertyName=\"value\"\r\n                                step={(block.max - block.min) / 100.0}\r\n                                minimum={block.min}\r\n                                maximum={block.max}\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                );\r\n            }\r\n            case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                return (\r\n                    <Color3LineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        key={block.name}\r\n                        label={block.name}\r\n                        target={block}\r\n                        propertyName=\"value\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            case NodeMaterialBlockConnectionPointTypes.Color4:\r\n                return (\r\n                    <Color4LineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        key={block.name}\r\n                        label={block.name}\r\n                        target={block}\r\n                        propertyName=\"value\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                return (\r\n                    <Vector2LineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        key={block.name}\r\n                        label={block.name}\r\n                        target={block}\r\n                        propertyName=\"value\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                return (\r\n                    <Vector3LineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        key={block.name}\r\n                        label={block.name}\r\n                        target={block}\r\n                        propertyName=\"value\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n            case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n                return (\r\n                    <Vector4LineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        key={block.name}\r\n                        label={block.name}\r\n                        target={block}\r\n                        propertyName=\"value\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderInputValues() {\r\n        const configurableInputBlocks = this.props.material\r\n            .getInputBlocks()\r\n            .filter((block) => {\r\n                return block.visibleInInspector && block.isUniform && !block.isSystemValue;\r\n            })\r\n            .sort((a, b) => {\r\n                return a.name.localeCompare(b.name);\r\n            });\r\n\r\n        const namedGroups: string[] = [];\r\n        configurableInputBlocks.forEach((block) => {\r\n            if (!block.groupInInspector) {\r\n                return;\r\n            }\r\n\r\n            if (namedGroups.indexOf(block.groupInInspector) === -1) {\r\n                namedGroups.push(block.groupInInspector);\r\n            }\r\n        });\r\n        namedGroups.sort();\r\n\r\n        const gradiantNodeMaterialBlocks = this.props.material.attachedBlocks\r\n            .filter((block) => {\r\n                return block.visibleInInspector && block.getClassName() === \"GradientBlock\";\r\n            })\r\n            .sort((a, b) => {\r\n                return a.name.localeCompare(b.name);\r\n            });\r\n\r\n        const inputBlockContainer =\r\n            configurableInputBlocks.length > 0 ? (\r\n                <LineContainerComponent title=\"INPUTS\" selection={this.props.globalState}>\r\n                    {\" \"}\r\n                    {configurableInputBlocks\r\n                        .filter((block) => !block.groupInInspector)\r\n                        .map((block) => {\r\n                            return this.renderInputBlock(block);\r\n                        })}\r\n                </LineContainerComponent>\r\n            ) : null;\r\n\r\n        return (\r\n            <>\r\n                {inputBlockContainer}\r\n                {namedGroups.map((name, i) => {\r\n                    return (\r\n                        <LineContainerComponent key={\"inputValue\" + i} title={name.toUpperCase()} selection={this.props.globalState}>\r\n                            {configurableInputBlocks\r\n                                .filter((block) => block.groupInInspector === name)\r\n                                .map((block) => {\r\n                                    return this.renderInputBlock(block);\r\n                                })}\r\n                        </LineContainerComponent>\r\n                    );\r\n                })}\r\n                {gradiantNodeMaterialBlocks.map((block, i) => {\r\n                    return (\r\n                        <LineContainerComponent key={block.name + i} title={block.name.toUpperCase()} selection={this.props.globalState}>\r\n                            {<GradientPropertyTabComponent globalState={this.props.globalState} block={block} />}\r\n                        </LineContainerComponent>\r\n                    );\r\n                })}\r\n            </>\r\n        );\r\n    }\r\n\r\n    override render() {\r\n        const material = this.props.material;\r\n\r\n        return (\r\n            <>\r\n                <CommonMaterialPropertyGridComponent\r\n                    globalState={this.props.globalState}\r\n                    lockObject={this.props.lockObject}\r\n                    material={material}\r\n                    onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                />\r\n                <LineContainerComponent title=\"CONFIGURATION\" selection={this.props.globalState}>\r\n                    <CheckBoxLineComponent label=\"Ignore alpha\" target={material} propertyName=\"ignoreAlpha\" onPropertyChangedObservable={this.props.onPropertyChangedObservable} />\r\n                    <ButtonLineComponent label=\"Node Material Editor\" onClick={() => this.edit()} />\r\n                </LineContainerComponent>\r\n                {this.renderInputValues()}\r\n                {this.renderTextures()}\r\n            </>\r\n        );\r\n    }\r\n}\r\n"]}
{"version":3,"file":"spritePropertyGridComponent.js","sourceRoot":"","sources":["../../../../../../src/components/actionTabs/tabs/propertyGrids/sprites/spritePropertyGridComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport * as React from \"react\";\r\n\r\nimport type { Observable } from \"core/Misc/observable\";\r\nimport type { PropertyChangedEvent } from \"../../../../propertyChangedEvent\";\r\nimport type { LockObject } from \"shared-ui-components/tabs/propertyGrids/lockObject\";\r\nimport { LineContainerComponent } from \"shared-ui-components/lines/lineContainerComponent\";\r\nimport type { GlobalState } from \"../../../../globalState\";\r\nimport { TextInputLineComponent } from \"shared-ui-components/lines/textInputLineComponent\";\r\nimport { TextLineComponent } from \"shared-ui-components/lines/textLineComponent\";\r\nimport type { Sprite } from \"core/Sprites/sprite\";\r\nimport { CheckBoxLineComponent } from \"shared-ui-components/lines/checkBoxLineComponent\";\r\nimport { Vector3LineComponent } from \"shared-ui-components/lines/vector3LineComponent\";\r\nimport { FloatLineComponent } from \"shared-ui-components/lines/floatLineComponent\";\r\nimport { SliderLineComponent } from \"shared-ui-components/lines/sliderLineComponent\";\r\nimport { ButtonLineComponent } from \"shared-ui-components/lines/buttonLineComponent\";\r\nimport { TextureHelper } from \"../../../../../textureHelper\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { Color4LineComponent } from \"shared-ui-components/lines/color4LineComponent\";\r\n\r\ninterface ISpritePropertyGridComponentProps {\r\n    globalState: GlobalState;\r\n    sprite: Sprite;\r\n    lockObject: LockObject;\r\n    onPropertyChangedObservable?: Observable<PropertyChangedEvent>;\r\n    onSelectionChangedObservable?: Observable<any>;\r\n}\r\n\r\nexport class SpritePropertyGridComponent extends React.Component<ISpritePropertyGridComponentProps> {\r\n    private _canvasRef: React.RefObject<HTMLCanvasElement>;\r\n    private _imageData: Nullable<Uint8Array> = null;\r\n    private _cachedCellIndex = -1;\r\n\r\n    constructor(props: ISpritePropertyGridComponentProps) {\r\n        super(props);\r\n\r\n        this._canvasRef = React.createRef();\r\n    }\r\n\r\n    onManagerLink() {\r\n        if (!this.props.onSelectionChangedObservable) {\r\n            return;\r\n        }\r\n\r\n        const sprite = this.props.sprite;\r\n        this.props.onSelectionChangedObservable.notifyObservers(sprite.manager);\r\n    }\r\n\r\n    switchPlayStopState() {\r\n        const sprite = this.props.sprite;\r\n\r\n        if (sprite.animationStarted) {\r\n            sprite.stopAnimation();\r\n        } else {\r\n            sprite.playAnimation(sprite.fromIndex, sprite.toIndex, sprite.loopAnimation, sprite.delay, () => {});\r\n        }\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    disposeSprite() {\r\n        const sprite = this.props.sprite;\r\n        sprite.dispose();\r\n\r\n        this.props.onSelectionChangedObservable?.notifyObservers(null);\r\n    }\r\n\r\n    override componentDidMount() {\r\n        this.updatePreview();\r\n    }\r\n\r\n    override componentDidUpdate() {\r\n        this.updatePreview();\r\n    }\r\n\r\n    override shouldComponentUpdate(nextProps: ISpritePropertyGridComponentProps) {\r\n        if (nextProps.sprite !== this.props.sprite) {\r\n            this._imageData = null;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    updatePreview() {\r\n        const sprite = this.props.sprite;\r\n        const manager = sprite.manager;\r\n        const texture = manager.texture;\r\n        const size = texture.getSize();\r\n\r\n        if (!this._imageData) {\r\n            TextureHelper.GetTextureDataAsync(texture, size.width, size.height, 0, { R: true, G: true, B: true, A: true }, this.props.globalState).then((data) => {\r\n                this._imageData = data;\r\n                this.forceUpdate();\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        if (this._cachedCellIndex === sprite.cellIndex) {\r\n            return;\r\n        }\r\n\r\n        this._cachedCellIndex = sprite.cellIndex;\r\n\r\n        const previewCanvas = this._canvasRef.current as HTMLCanvasElement;\r\n        previewCanvas.width = manager.cellWidth;\r\n        previewCanvas.height = manager.cellHeight;\r\n        const context = previewCanvas.getContext(\"2d\");\r\n\r\n        if (context) {\r\n            // Copy the pixels to the preview canvas\r\n            const imageData = context.createImageData(manager.cellWidth, manager.cellHeight);\r\n            const castData = imageData.data;\r\n\r\n            const rowLength = (size.width / manager.cellWidth) | 0;\r\n            const offsetY = (sprite.cellIndex / rowLength) | 0;\r\n            const offsetX = sprite.cellIndex - offsetY * rowLength;\r\n            const offset = (offsetX + offsetY * size.width) * 4 * manager.cellWidth;\r\n\r\n            for (let x = 0; x < manager.cellWidth; x++) {\r\n                for (let y = 0; y < manager.cellHeight; y++) {\r\n                    const targetCoord = (x + y * manager.cellWidth) * 4;\r\n                    const sourceCoord = (x + y * size.width) * 4;\r\n                    castData[targetCoord] = this._imageData[offset + sourceCoord];\r\n                    castData[targetCoord + 1] = this._imageData[offset + sourceCoord + 1];\r\n                    castData[targetCoord + 2] = this._imageData[offset + sourceCoord + 2];\r\n                    castData[targetCoord + 3] = this._imageData[offset + sourceCoord + 3];\r\n                }\r\n            }\r\n\r\n            context.putImageData(imageData, 0, 0);\r\n        }\r\n    }\r\n\r\n    override render() {\r\n        const sprite = this.props.sprite;\r\n        const manager = sprite.manager;\r\n        const textureSize = manager.texture.getSize();\r\n        let maxCellCount = 0;\r\n\r\n        if (!textureSize.width || !textureSize.height) {\r\n            maxCellCount = Math.max(sprite.fromIndex, sprite.toIndex);\r\n        } else {\r\n            maxCellCount = (textureSize.width / manager.cellWidth) * (textureSize.height / manager.cellHeight);\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <LineContainerComponent title=\"GENERAL\" selection={this.props.globalState}>\r\n                    <TextInputLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"Name\"\r\n                        target={sprite}\r\n                        propertyName=\"name\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    <TextLineComponent label=\"Unique ID\" value={sprite.uniqueId.toString()} />\r\n                    <TextLineComponent label=\"Link to manager\" value={manager.name} onLink={() => this.onManagerLink()} />\r\n                    <CheckBoxLineComponent label=\"Visible\" target={sprite} propertyName=\"isVisible\" onPropertyChangedObservable={this.props.onPropertyChangedObservable} />\r\n                    <ButtonLineComponent label=\"Dispose\" onClick={() => this.disposeSprite()} />\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"PROPERTIES\" selection={this.props.globalState}>\r\n                    <Vector3LineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"Position\"\r\n                        target={sprite}\r\n                        propertyName=\"position\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    <CheckBoxLineComponent label=\"Pickable\" target={sprite} propertyName=\"isPickable\" onPropertyChangedObservable={this.props.onPropertyChangedObservable} />\r\n                    <CheckBoxLineComponent\r\n                        label=\"Use alpha for picking\"\r\n                        target={sprite}\r\n                        propertyName=\"useAlphaForPicking\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    <Color4LineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"Color\"\r\n                        target={sprite}\r\n                        propertyName=\"color\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    <SliderLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        useEuler={this.props.globalState.onlyUseEulers}\r\n                        label=\"Angle\"\r\n                        target={sprite}\r\n                        propertyName=\"angle\"\r\n                        minimum={0}\r\n                        maximum={2 * Math.PI}\r\n                        step={0.01}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"CELL\" selection={this.props.globalState}>\r\n                    <canvas\r\n                        ref={this._canvasRef}\r\n                        className=\"preview\"\r\n                        style={{\r\n                            margin: \"auto\",\r\n                            marginTop: \"4px\",\r\n                            marginBottom: \"4px\",\r\n                            display: \"grid\",\r\n                            height: \"108px\",\r\n                        }}\r\n                    />\r\n                    <SliderLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"Cell index\"\r\n                        decimalCount={0}\r\n                        target={sprite}\r\n                        propertyName=\"cellIndex\"\r\n                        minimum={0}\r\n                        maximum={maxCellCount}\r\n                        step={1}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        onChange={() => this.forceUpdate()}\r\n                    />\r\n                    <CheckBoxLineComponent label=\"Invert U axis\" target={sprite} propertyName=\"invertU\" onPropertyChangedObservable={this.props.onPropertyChangedObservable} />\r\n                    <CheckBoxLineComponent label=\"Invert V axis\" target={sprite} propertyName=\"invertV\" onPropertyChangedObservable={this.props.onPropertyChangedObservable} />\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"SCALE\" selection={this.props.globalState}>\r\n                    <FloatLineComponent\r\n                        label=\"Width\"\r\n                        lockObject={this.props.lockObject}\r\n                        target={sprite}\r\n                        propertyName=\"width\"\r\n                        min={0}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    <FloatLineComponent\r\n                        label=\"Height\"\r\n                        lockObject={this.props.lockObject}\r\n                        target={sprite}\r\n                        propertyName=\"height\"\r\n                        min={0}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"ANIMATION\" selection={this.props.globalState}>\r\n                    <FloatLineComponent\r\n                        label=\"Start cell\"\r\n                        isInteger={true}\r\n                        lockObject={this.props.lockObject}\r\n                        target={sprite}\r\n                        propertyName=\"fromIndex\"\r\n                        min={0}\r\n                        max={maxCellCount}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    <FloatLineComponent\r\n                        label=\"End cell\"\r\n                        isInteger={true}\r\n                        lockObject={this.props.lockObject}\r\n                        target={sprite}\r\n                        propertyName=\"toIndex\"\r\n                        min={0}\r\n                        max={maxCellCount}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    <CheckBoxLineComponent label=\"Loop\" target={sprite} propertyName=\"loopAnimation\" onPropertyChangedObservable={this.props.onPropertyChangedObservable} />\r\n                    <FloatLineComponent\r\n                        label=\"Delay\"\r\n                        lockObject={this.props.lockObject}\r\n                        target={sprite}\r\n                        propertyName=\"delay\"\r\n                        digits={0}\r\n                        min={0}\r\n                        isInteger={true}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    <ButtonLineComponent label={sprite.animationStarted ? \"Stop\" : \"Start\"} onClick={() => this.switchPlayStopState()} />\r\n                </LineContainerComponent>\r\n            </>\r\n        );\r\n    }\r\n}\r\n"]}
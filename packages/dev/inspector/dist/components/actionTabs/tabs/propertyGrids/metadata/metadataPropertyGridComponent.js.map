{"version":3,"file":"metadataPropertyGridComponent.js","sourceRoot":"","sources":["../../../../../../src/components/actionTabs/tabs/propertyGrids/metadata/metadataPropertyGridComponent.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAE,sBAAsB,EAAE,MAAM,mDAAmD,CAAC;AAC3F,OAAO,EAAE,qBAAqB,EAAE,MAAM,kDAAkD,CAAC;AACzF,OAAO,EAAE,mBAAmB,EAAE,MAAM,gDAAgD,CAAC;AACrF,OAAO,EAAE,sBAAsB,EAAE,MAAM,mDAAmD,CAAC;AAC3F,OAAO,EAAE,iBAAiB,EAAE,MAAM,8CAA8C,CAAC;AACjF,OAAO,QAAQ,MAAM,oCAAoC,CAAC;AAE1D,OAAO,6BAA6B,CAAC;AACrC,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAO1C,IAAK,aAMJ;AAND,WAAK,aAAa;IACd,wCAAuB,CAAA;IACvB,8BAAa,CAAA;IACb,kCAAiB,CAAA;IACjB,kCAAiB,CAAA;IACjB,8BAAa,CAAA;AACjB,CAAC,EANI,aAAa,KAAb,aAAa,QAMjB;AAED,8BAA8B;AAC9B,MAAM,OAAO,qBAAsB,SAAQ,KAAK,CAAC,SAWhD;IAEG;;OAEG;IACH,YAAY,KAA8B;QACtC,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,KAAK,GAAG;YACT,sBAAsB,EAAE,EAAE;YAC1B,KAAK,EAAE,KAAK;YACZ,UAAU,EAAE,KAAK;YACjB,oBAAoB,EAAE,IAAI;YAC1B,gBAAgB,EAAE,aAAa,CAAC,SAAS;YACzC,aAAa,EAAE,eAAe;YAC9B,WAAW,EAAE,KAAK;SACrB,CAAC;QACF,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;QACvC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvD,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjE,CAAC;IAED,oBAAoB;IACX,iBAAiB;QACtB,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;YACxB,IAAI,CAAC,eAAe,EAAE,CAAC;SAC1B;IACL,CAAC;IAED;;OAEG;IACM,kBAAkB,CAAC,SAA4C;QACpE,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YACnB,IAAI,CAAC,SAAS,CAAC,MAAM,IAAI,SAAS,CAAC,MAAM,CAAC,EAAE,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE;gBACnE,IAAI,CAAC,eAAe,EAAE,CAAC;aAC1B;SACJ;IACL,CAAC;IAED,wBAAwB;IACxB,eAAe;QACX,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YACnB,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAChE,MAAM,gBAAgB,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAC/D,IAAI,CAAC,QAAQ,CAAC;gBACV,aAAa,EAAE,EAAE;gBACjB,sBAAsB,EAAE,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC;gBACnF,gBAAgB,EAAE,gBAAgB;gBAClC,WAAW,EAAE,SAAS;aACzB,CAAC,CAAC;YACH,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,oBAAoB,IAAI,gBAAgB,KAAK,aAAa,CAAC,MAAM,CAAC,CAAC;SAC1G;aAAM;YACH,IAAI,CAAC,QAAQ,CAAC;gBACV,aAAa,EAAE,0CAA0C;gBACzD,sBAAsB,EAAE,EAAE;gBAC1B,gBAAgB,EAAE,aAAa,CAAC,SAAS;gBACzC,WAAW,EAAE,KAAK;aACrB,CAAC,CAAC;YACH,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;SAClC;IACL,CAAC;IAED;;OAEG;IACH,mBAAmB,CAAC,QAAiB;QACjC,IAAI;YACA,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE;gBAC5B,MAAM,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,UAAU,EAAE,UAAiC,CAAC;gBAClG,eAAe,CAAC,QAAQ,GAAG,QAAQ,CAAC;aACvC;SACJ;QAAC,OAAO,KAAK,EAAE;YACZ,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACvB;IACL,CAAC;IAED;;OAEG;IACH,YAAY;QACR,QAAQ,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE;YACjC,KAAK,aAAa,CAAC,MAAM;gBACrB,OAAO,aAAa,CAAC;YACzB,KAAK,aAAa,CAAC,IAAI;gBACnB,OAAO,WAAW,CAAC;YACvB,KAAK,aAAa,CAAC,MAAM;gBACrB,OAAO,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,aAAa,CAAC;YACnF;gBACI,OAAO,EAAE,CAAC;SACjB;IACL,CAAC;IAED;;;;OAIG;IACH,aAAa,CAAC,MAAW;QACrB,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,EAAE;YAC1D,MAAM,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC;YAC7B,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;gBAAE,OAAO,aAAa,CAAC,MAAM,CAAC;YACrD,IAAI,IAAI,KAAK,IAAI;gBAAE,OAAO,aAAa,CAAC,IAAI,CAAC;YAC7C,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC;gBAAE,OAAO,aAAa,CAAC,MAAM,CAAC;YACtE,OAAO,aAAa,CAAC,IAAI,CAAC;SAC7B;QACD,OAAO,aAAa,CAAC,SAAS,CAAC;IACnC,CAAC;IAED;;;OAGG;IACH,QAAQ,CAAC,KAAU;QACf,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,YAAY,MAAM,CAAC;IAChE,CAAC;IAED;;;OAGG;IACH,YAAY,CAAC,MAAc;QACvB,IAAI,CAAC,MAAM;YAAE,OAAO,KAAK,CAAC;QAC1B,IAAI;YACA,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;SAC/C;QAAC,OAAO,KAAK,EAAE;YACZ,OAAO,KAAK,CAAC;SAChB;IACL,CAAC;IAED;;;OAGG;IACH,cAAc,CAAC,MAAc;QACzB,IAAI;YACA,IAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC;YACvC,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;SAC7B;QAAC,OAAO,KAAK,EAAE;YACZ,IAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,EAAE,gBAAgB,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACnE,OAAO,IAAI,CAAC;SACf;IACL,CAAC;IAED;;;;OAIG;IACH,eAAe,CAAC,SAAkB,EAAE,QAAa;QAC7C,IAAI,SAAS;YAAE,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QACjG,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;YAAE,OAAO,QAAQ,CAAC;QAC7C,OAAO,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACH,wBAAwB,CAAC,CAA2B;QAChD,IAAI,OAAO,CAAC,KAAK,UAAU;YAAE,OAAO,KAAK,CAAC;QAC1C,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAAE,OAAO,IAAI,CAAC;QAEtG,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;YACvB,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC;gBAAE,OAAO,IAAI,CAAC;YAC/C,OAAO,MAAM,CAAC,MAAM,CAAC,CAAwB,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC,CAAC;SACzG;QAED,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YAClB,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC,CAAC;SACnE;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAyCE;IAEF,eAAe;QACX,IAAI;YACA,MAAM,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,UAAU,EAAE,UAAiC,CAAC;YAClG,eAAe,CAAC,MAAM,EAAE,CAAC;YACzB,eAAe,CAAC,iBAAiB,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,qBAAqB;YAClE,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;SACxD;QAAC,OAAO,KAAK,EAAE;YACZ,MAAM,CAAC,KAAK,CAAC,uCAAuC,CAAC,CAAC;YACtD,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACvB;IACL,CAAC;IAED,4FAA4F;IAC5F,kBAAkB;QACd,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;YACxB,IAAI;gBACA,MAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAQ,CAAC;gBACjF,IAAI,UAAU,EAAE;oBACZ,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,EAAE,MAAM,CAAC,EAAE;wBAC1D,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE;4BACjE,IAAI,CAAC,QAAQ,CAAC;gCACV,aAAa,EAAE,8CAA8C;6BAChE,CAAC,CAAC;yBACN;6BAAM;4BACH,UAAU,CAAC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;4BAC5B,IAAI,CAAC,QAAQ,CAAC;gCACV,KAAK,EAAE,IAAI;gCACX,UAAU,EAAE,KAAK;gCACjB,sBAAsB,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,UAAU,CAAC;gCAChF,aAAa,EAAE,iEAAiE;6BACnF,CAAC,CAAC;yBACN;qBACJ;yBAAM;wBACH,UAAU,CAAC,IAAI,GAAG;4BACd,MAAM,EAAE,EAAE;yBACb,CAAC;wBACF,IAAI,CAAC,QAAQ,CAAC;4BACV,KAAK,EAAE,IAAI;4BACX,UAAU,EAAE,KAAK;4BACjB,sBAAsB,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,UAAU,CAAC;4BAChF,aAAa,EAAE,0DAA0D;yBAC5E,CAAC,CAAC;qBACN;iBACJ;aACJ;YAAC,OAAO,KAAK,EAAE;gBACZ,IAAI,CAAC,QAAQ,CAAC;oBACV,aAAa,EAAE,KAAK,CAAC,OAAO;iBAC/B,CAAC,CAAC;aACN;SACJ;IACL,CAAC;IAED;;OAEG;IACM,MAAM;QACX,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,oBAAoB,IAAI,IAAI,CAAC,KAAK,CAAC,gBAAgB,KAAK,aAAa,CAAC,MAAM,CAAC;QAC3G,OAAO,CACH,MAAC,sBAAsB,IAAC,KAAK,EAAC,UAAU,EAAC,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,aACpF,KAAC,iBAAiB,IAAC,KAAK,EAAC,eAAe,EAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,gBAAgB,GAAI,EAC/E,KAAC,qBAAqB,IAClB,KAAK,EAAC,2BAA2B,EACjC,QAAQ,EAAE,KAAK,EACf,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,oBAAoB,EACjD,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE;wBAChB,IAAI,CAAC,QAAQ,CAAC,EAAE,oBAAoB,EAAE,KAAK,EAAE,CAAC,CAAC;wBAC/C,IAAI,CAAC,mBAAmB,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,gBAAgB,KAAK,aAAa,CAAC,MAAM,CAAC,CAAC;oBAC5F,CAAC,GACH,EACF,KAAC,qBAAqB,IAClB,KAAK,EAAC,aAAa,EACnB,QAAQ,EAAE,KAAK,EACf,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EACvC,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE;wBAChB,IAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;wBACrC,kBAAkB;wBAClB,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,gBAAgB,KAAK,aAAa,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,gBAAgB,KAAK,aAAa,CAAC,SAAS,EAAE;4BACpI,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;4BACxE,IAAI,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;gCACtC,IAAI,CAAC,QAAQ,CAAC;oCACV,KAAK,EAAE,IAAI;oCACX,sBAAsB,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;iCACrF,CAAC,CAAC;6BACN;yBACJ;oBACL,CAAC,GACH,EACF,cAAK,GAAG,EAAE,IAAI,CAAC,aAAa,EAAE,EAAE,EAAC,oBAAoB,EAAC,SAAS,EAAE,IAAI,CAAC,YAAY,EAAE,YAChF,KAAC,sBAAsB,IACnB,UAAU,QACV,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,sBAAsB,EACxC,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE;4BAChB,IAAI,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,sBAAsB;gCAAE,OAAO;4BACxD,IAAI,CAAC,QAAQ,CAAC;gCACV,KAAK,EAAE,IAAI;gCACX,UAAU,EAAE,KAAK;gCACjB,sBAAsB,EAAE,KAAK;6BAChC,CAAC,CAAC;4BACH,IAAI,KAAK,KAAK,EAAE,IAAI,KAAK,KAAK,WAAW,EAAE;gCACvC,IAAI,CAAC,QAAQ,CAAC;oCACV,WAAW,EAAE,KAAK;oCAClB,gBAAgB,EAAE,aAAa,CAAC,SAAS;iCAC5C,CAAC,CAAC;gCACH,OAAO;6BACV;4BACD,IAAI,KAAK,KAAK,MAAM,EAAE;gCAClB,IAAI,CAAC,QAAQ,CAAC;oCACV,WAAW,EAAE,KAAK;oCAClB,gBAAgB,EAAE,aAAa,CAAC,IAAI;iCACvC,CAAC,CAAC;gCACH,OAAO;6BACV;4BACD,MAAM,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;4BAChD,IAAI,CAAC,QAAQ,CAAC;gCACV,WAAW,EAAE,UAAU;gCACvB,gBAAgB,EAAE,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,aAAa,CAAC,MAAM;6BAC3E,CAAC,CAAC;wBACP,CAAC,GACH,GACA,EACN,cAAK,SAAS,EAAC,WAAW,YACtB,cAAK,SAAS,EAAC,gBAAgB,EAAC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE,KAAK,EAAC,mBAAmB,YAC5F,cAAK,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAC,MAAM,GAAG,GAC/B,GACJ,EACN,KAAC,mBAAmB,IAAC,KAAK,EAAC,sBAAsB,EAAC,OAAO,EAAE,IAAI,CAAC,kBAAkB,EAAE,UAAU,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,IAAI,UAAU,GAAI,EACzI,KAAC,mBAAmB,IAChB,KAAK,EAAE,kBAAkB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,EAAE,EACxF,OAAO,EAAE,GAAG,EAAE;wBACV,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;4BACnB,IAAI,IAAI,CAAC,KAAK,CAAC,gBAAgB,KAAK,aAAa,CAAC,IAAI,EAAE;gCACpD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;gCAClC,IAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,EAAE,sBAAsB,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;gCACvE,OAAO;6BACV;4BACD,IAAI,IAAI,CAAC,KAAK,CAAC,gBAAgB,KAAK,aAAa,CAAC,SAAS,EAAE;gCACzD,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC;gCAClC,IAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,EAAE,2BAA2B,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;gCAC5E,OAAO;6BACV;4BACD,MAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;4BAC1E,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,GAAG,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC;4BAC7E,IAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,EAAE,kBAAkB,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;yBACtE;oBACL,CAAC,EACD,UAAU,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,UAAU,GAC7C,EACF,cAAK,SAAS,EAAC,aAAa,YAAE,IAAI,CAAC,KAAK,CAAC,aAAa,GAAO,IACxC,CAC5B,CAAC;IACN,CAAC;CACJ","sourcesContent":["import * as React from \"react\";\r\nimport type { GlobalState } from \"inspector/components/globalState\";\r\nimport { LineContainerComponent } from \"shared-ui-components/lines/lineContainerComponent\";\r\nimport { CheckBoxLineComponent } from \"shared-ui-components/lines/checkBoxLineComponent\";\r\nimport { ButtonLineComponent } from \"shared-ui-components/lines/buttonLineComponent\";\r\nimport { TextInputLineComponent } from \"shared-ui-components/lines/textInputLineComponent\";\r\nimport { TextLineComponent } from \"shared-ui-components/lines/textLineComponent\";\r\nimport copyIcon from \"shared-ui-components/imgs/copy.svg\";\r\n\r\nimport \"./metadataPropertyGrid.scss\";\r\nimport { Logger } from \"core/Misc/logger\";\r\n\r\ninterface IMetadataComponentProps {\r\n    globalState: GlobalState;\r\n    entity: any;\r\n}\r\n\r\nenum MetadataTypes {\r\n    UNDEFINED = \"undefined\",\r\n    NULL = \"null\",\r\n    STRING = \"string\",\r\n    OBJECT = \"Object\",\r\n    JSON = \"JSON\",\r\n}\r\n\r\n/** Metadata Grid Component */\r\nexport class MetadataGridComponent extends React.Component<\r\n    IMetadataComponentProps,\r\n    {\r\n        selectedEntityMetadata: string;\r\n        dirty: boolean;\r\n        prettyJson: boolean;\r\n        preventObjCorruption: boolean;\r\n        metadataPropType: MetadataTypes;\r\n        statusMessage: string | null;\r\n        isValidJson: boolean;\r\n    }\r\n> {\r\n    private readonly _textAreaHost: React.RefObject<HTMLDivElement>;\r\n    /**\r\n     * @param props - component props\r\n     */\r\n    constructor(props: IMetadataComponentProps) {\r\n        super(props);\r\n        this.state = {\r\n            selectedEntityMetadata: \"\",\r\n            dirty: false,\r\n            prettyJson: false,\r\n            preventObjCorruption: true,\r\n            metadataPropType: MetadataTypes.UNDEFINED,\r\n            statusMessage: \"ready to pick\",\r\n            isValidJson: false,\r\n        };\r\n        this._textAreaHost = React.createRef();\r\n        this.refreshSelected = this.refreshSelected.bind(this);\r\n        this.populateGltfExtras = this.populateGltfExtras.bind(this);\r\n    }\r\n\r\n    /** @ignorenaming */\r\n    override componentDidMount() {\r\n        if (this.props.globalState) {\r\n            this.refreshSelected();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param prevProps - previous component props\r\n     */\r\n    override componentDidUpdate(prevProps: Readonly<IMetadataComponentProps>): void {\r\n        if (this.props.entity) {\r\n            if (!prevProps.entity || prevProps.entity.id !== this.props.entity.id) {\r\n                this.refreshSelected();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** on entity refresh */\r\n    refreshSelected() {\r\n        if (this.props.entity) {\r\n            const validJson = this.parsableJson(this.props.entity.metadata);\r\n            const metadataPropType = this.getEntityType(this.props.entity);\r\n            this.setState({\r\n                statusMessage: \"\", // loaded entity\r\n                selectedEntityMetadata: this.parseMetaObject(validJson, this.props.entity.metadata),\r\n                metadataPropType: metadataPropType,\r\n                isValidJson: validJson,\r\n            });\r\n            this.setTextAreaDisabled(this.state.preventObjCorruption && metadataPropType === MetadataTypes.OBJECT);\r\n        } else {\r\n            this.setState({\r\n                statusMessage: \"could not find entity, please pick again\",\r\n                selectedEntityMetadata: \"\",\r\n                metadataPropType: MetadataTypes.UNDEFINED,\r\n                isValidJson: false,\r\n            });\r\n            this.setTextAreaDisabled(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param disabled - is disabled\r\n     */\r\n    setTextAreaDisabled(disabled: boolean) {\r\n        try {\r\n            if (this._textAreaHost.current) {\r\n                const textAreaElement = this._textAreaHost.current?.firstChild?.firstChild as HTMLTextAreaElement;\r\n                textAreaElement.disabled = disabled;\r\n            }\r\n        } catch (error) {\r\n            Logger.Error(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns class name\r\n     */\r\n    getClassName(): string {\r\n        switch (this.state.metadataPropType) {\r\n            case MetadataTypes.STRING:\r\n                return \"meta-string\";\r\n            case MetadataTypes.JSON:\r\n                return \"meta-json\";\r\n            case MetadataTypes.OBJECT:\r\n                return this.state.preventObjCorruption ? \"meta-object-protect\" : \"meta-object\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines the Metadata type\r\n     * @param entity Picked entity\r\n     * @returns MetadataTypes\r\n     */\r\n    getEntityType(entity: any): MetadataTypes {\r\n        if (Object.prototype.hasOwnProperty.call(entity, \"metadata\")) {\r\n            const meta = entity.metadata;\r\n            if (this.isString(meta)) return MetadataTypes.STRING;\r\n            if (meta === null) return MetadataTypes.NULL;\r\n            if (!this.objectCanSafelyStringify(meta)) return MetadataTypes.OBJECT;\r\n            return MetadataTypes.JSON;\r\n        }\r\n        return MetadataTypes.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @param input - any input\r\n     * @returns is string\r\n     */\r\n    isString(input: any): boolean {\r\n        return typeof input === \"string\" || input instanceof String;\r\n    }\r\n\r\n    /**\r\n     * @param object - any object\r\n     * @returns is parsable\r\n     */\r\n    parsableJson(object: Object): boolean {\r\n        if (!object) return false;\r\n        try {\r\n            return !!JSON.parse(JSON.stringify(object));\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param string - any string\r\n     * @returns parsable string\r\n     */\r\n    parsableString(string: string): JSON | null {\r\n        try {\r\n            this.setState({ statusMessage: null });\r\n            return JSON.parse(string);\r\n        } catch (error) {\r\n            this.setState({ statusMessage: \"invalid JSON: \" + error.message });\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param validJson - a valid json\r\n     * @param metadata - any metadata\r\n     * @returns parsed metadata\r\n     */\r\n    parseMetaObject(validJson: boolean, metadata: any) {\r\n        if (validJson) return JSON.stringify(metadata, undefined, this.state.prettyJson ? 2 : undefined);\r\n        if (this.isString(metadata)) return metadata;\r\n        return String(metadata);\r\n    }\r\n\r\n    /**\r\n     * Recurse through an object to check for any Functions, returns False if found at least one\r\n     * @param o Any Object, String or number\r\n     * @returns Boolean\r\n     */\r\n    objectCanSafelyStringify(o: Object | string | number): boolean {\r\n        if (typeof o === \"function\") return false;\r\n        if (o === null || o === true || o === false || typeof o === \"number\" || this.isString(o)) return true;\r\n\r\n        if (typeof o === \"object\") {\r\n            if (Object.values(o).length === 0) return true;\r\n            return Object.values(o as Record<string, any>).every((value) => this.objectCanSafelyStringify(value));\r\n        }\r\n\r\n        if (Array.isArray(o)) {\r\n            return o.every((value) => this.objectCanSafelyStringify(value));\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /* TODO: Convert testObjectCanSafelyStringify() to Jest unit tests\r\n    testObjectCanSafelyStringify() {\r\n        const scene = this.props.entity._scene;\r\n        console.log(\"/// test Truthy and Falsey ///\");\r\n        console.log(\"expect true\", this.objectCanSafelyStringify(true));\r\n        console.log(\"expect true\", this.objectCanSafelyStringify(false));\r\n        console.log(\"expect true\", this.objectCanSafelyStringify(null as any));\r\n        console.log(\"expect false\", this.objectCanSafelyStringify(undefined as any));\r\n\r\n        console.log(\"/// test Strings\");\r\n        console.log(\"expect true\", this.objectCanSafelyStringify(\"\"));\r\n        console.log(\"expect true\", this.objectCanSafelyStringify(\"hi\"));\r\n        console.log(\"expect true\", this.objectCanSafelyStringify(String(\"hello\")));\r\n\r\n        console.log(\"/// test Number\");\r\n        console.log(\"expect true\", this.objectCanSafelyStringify(2));\r\n        console.log(\"expect true\", this.objectCanSafelyStringify(2.456));\r\n        console.log(\"expect true\", this.objectCanSafelyStringify(Number(9)));\r\n\r\n        console.log(\"/// test Array\");\r\n        console.log(\"expect true\", this.objectCanSafelyStringify(String([])));\r\n        console.log(\"expect true\", this.objectCanSafelyStringify(String([\"aaa\"])));\r\n\r\n        console.log(\"/// test Objects\");\r\n        console.log(\"expect true\", this.objectCanSafelyStringify({}));\r\n        console.log(\"expect true\", this.objectCanSafelyStringify({ foo: \"bar\" }));\r\n        console.log(\"expect false\", this.objectCanSafelyStringify({ foo: \"bar\", funky: () => \"this is funky!\" }));\r\n        console.log(\"expect true\", this.objectCanSafelyStringify({ a: \"babylon\", b: [{ c: [\"js\", { d: \"rules\", e: 7 }] }] }));\r\n\r\n        console.log(\"/// test Function\");\r\n        console.log(\r\n            \"expect false\",\r\n            this.objectCanSafelyStringify(() => {})\r\n        );\r\n\r\n        console.log(\"/// test Mesh\");\r\n        const mesh = new Mesh(\"a test mesh\", scene);\r\n        console.log(\"expect false\", this.objectCanSafelyStringify(mesh));\r\n        mesh.dispose();\r\n        console.log(\"/// end tests ///\");\r\n    }\r\n    */\r\n\r\n    copyToClipboard() {\r\n        try {\r\n            const textAreaElement = this._textAreaHost.current?.firstChild?.firstChild as HTMLTextAreaElement;\r\n            textAreaElement.select();\r\n            textAreaElement.setSelectionRange(0, 99999); // For mobile devices\r\n            navigator.clipboard.writeText(textAreaElement.value);\r\n        } catch (error) {\r\n            window.alert(\"Could not copy to clipboard, see log.\");\r\n            Logger.Error(error);\r\n        }\r\n    }\r\n\r\n    /** Safely checks if valid JSON then appends necessary props without overwriting existing */\r\n    populateGltfExtras() {\r\n        if (this.state.isValidJson) {\r\n            try {\r\n                const parsedJson = this.parsableString(this.state.selectedEntityMetadata) as any;\r\n                if (parsedJson) {\r\n                    if (Object.prototype.hasOwnProperty.call(parsedJson, \"gltf\")) {\r\n                        if (Object.prototype.hasOwnProperty.call(parsedJson.gltf, \"extras\")) {\r\n                            this.setState({\r\n                                statusMessage: \"metadata.gltf.extras property already exists\",\r\n                            });\r\n                        } else {\r\n                            parsedJson.gltf.extras = {};\r\n                            this.setState({\r\n                                dirty: true,\r\n                                prettyJson: false,\r\n                                selectedEntityMetadata: this.parseMetaObject(this.state.isValidJson, parsedJson),\r\n                                statusMessage: \"metadata.gltf.extras property inserted, don't forget to Update!\",\r\n                            });\r\n                        }\r\n                    } else {\r\n                        parsedJson.gltf = {\r\n                            extras: {},\r\n                        };\r\n                        this.setState({\r\n                            dirty: true,\r\n                            prettyJson: false,\r\n                            selectedEntityMetadata: this.parseMetaObject(this.state.isValidJson, parsedJson),\r\n                            statusMessage: \"metadata.gltf property inserted, don't forget to Update!\",\r\n                        });\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                this.setState({\r\n                    statusMessage: error.message,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /** render\r\n     * @returns the component\r\n     */\r\n    override render() {\r\n        const protectObj = this.state.preventObjCorruption && this.state.metadataPropType === MetadataTypes.OBJECT;\r\n        return (\r\n            <LineContainerComponent title=\"METADATA\" closed={true} selection={this.props.globalState}>\r\n                <TextLineComponent label=\"Property type\" value={this.state.metadataPropType} />\r\n                <CheckBoxLineComponent\r\n                    label=\"Prevent Object corruption\"\r\n                    disabled={false}\r\n                    isSelected={() => this.state.preventObjCorruption}\r\n                    onSelect={(value) => {\r\n                        this.setState({ preventObjCorruption: value });\r\n                        this.setTextAreaDisabled(value && this.state.metadataPropType === MetadataTypes.OBJECT);\r\n                    }}\r\n                />\r\n                <CheckBoxLineComponent\r\n                    label=\"Pretty JSON\"\r\n                    disabled={false}\r\n                    isSelected={() => this.state.prettyJson}\r\n                    onSelect={(value) => {\r\n                        this.setState({ prettyJson: value });\r\n                        // Update textArea\r\n                        if (this.props.entity && this.state.metadataPropType !== MetadataTypes.NULL && this.state.metadataPropType !== MetadataTypes.UNDEFINED) {\r\n                            const parsable = this.parsableString(this.state.selectedEntityMetadata);\r\n                            if (parsable && !this.isString(parsable)) {\r\n                                this.setState({\r\n                                    dirty: true,\r\n                                    selectedEntityMetadata: JSON.stringify(parsable, undefined, value ? 2 : undefined),\r\n                                });\r\n                            }\r\n                        }\r\n                    }}\r\n                />\r\n                <div ref={this._textAreaHost} id=\"metadata-container\" className={this.getClassName()}>\r\n                    <TextInputLineComponent\r\n                        multilines\r\n                        value={this.state.selectedEntityMetadata}\r\n                        onChange={(value) => {\r\n                            if (value === this.state.selectedEntityMetadata) return;\r\n                            this.setState({\r\n                                dirty: true,\r\n                                prettyJson: false,\r\n                                selectedEntityMetadata: value,\r\n                            });\r\n                            if (value === \"\" || value === \"undefined\") {\r\n                                this.setState({\r\n                                    isValidJson: false,\r\n                                    metadataPropType: MetadataTypes.UNDEFINED,\r\n                                });\r\n                                return;\r\n                            }\r\n                            if (value === \"null\") {\r\n                                this.setState({\r\n                                    isValidJson: false,\r\n                                    metadataPropType: MetadataTypes.NULL,\r\n                                });\r\n                                return;\r\n                            }\r\n                            const parsedJson = !!this.parsableString(value);\r\n                            this.setState({\r\n                                isValidJson: parsedJson,\r\n                                metadataPropType: parsedJson ? MetadataTypes.JSON : MetadataTypes.STRING,\r\n                            });\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"copy-root\">\r\n                    <div className=\"copy-container\" onClick={() => this.copyToClipboard()} title=\"Copy to clipboard\">\r\n                        <img src={copyIcon} alt=\"Copy\" />\r\n                    </div>\r\n                </div>\r\n                <ButtonLineComponent label=\"Populate glTF extras\" onClick={this.populateGltfExtras} isDisabled={!this.state.isValidJson || protectObj} />\r\n                <ButtonLineComponent\r\n                    label={`Update metadata${this.props.entity ? \" as \" + this.state.metadataPropType : \"\"}`}\r\n                    onClick={() => {\r\n                        if (this.props.entity) {\r\n                            if (this.state.metadataPropType === MetadataTypes.NULL) {\r\n                                this.props.entity.metadata = null;\r\n                                this.setState({ statusMessage: \"metadata set to null\", dirty: false });\r\n                                return;\r\n                            }\r\n                            if (this.state.metadataPropType === MetadataTypes.UNDEFINED) {\r\n                                delete this.props.entity.metadata;\r\n                                this.setState({ statusMessage: \"metadata set to undefined\", dirty: false });\r\n                                return;\r\n                            }\r\n                            const parsedJson = this.parsableString(this.state.selectedEntityMetadata);\r\n                            this.props.entity.metadata = parsedJson || this.state.selectedEntityMetadata;\r\n                            this.setState({ statusMessage: \"metadata updated\", dirty: false });\r\n                        }\r\n                    }}\r\n                    isDisabled={!this.state.dirty || protectObj}\r\n                />\r\n                <div className=\"type-status\">{this.state.statusMessage}</div>\r\n            </LineContainerComponent>\r\n        );\r\n    }\r\n}\r\n"]}
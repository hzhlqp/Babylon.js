{"version":3,"file":"animationPropertyGridComponent.js","sourceRoot":"","sources":["../../../../../../src/components/actionTabs/tabs/propertyGrids/animations/animationPropertyGridComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\n\r\nimport type { Observable, Observer } from \"core/Misc/observable\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport type { PropertyChangedEvent } from \"../../../../propertyChangedEvent\";\r\nimport { ButtonLineComponent } from \"shared-ui-components/lines/buttonLineComponent\";\r\nimport { LineContainerComponent } from \"shared-ui-components/lines/lineContainerComponent\";\r\nimport { SliderLineComponent } from \"shared-ui-components/lines/sliderLineComponent\";\r\nimport type { LockObject } from \"shared-ui-components/tabs/propertyGrids/lockObject\";\r\nimport type { GlobalState } from \"../../../../globalState\";\r\nimport type { Animation } from \"core/Animations/animation\";\r\nimport type { Animatable } from \"core/Animations/animatable\";\r\nimport { AnimationPropertiesOverride } from \"core/Animations/animationPropertiesOverride\";\r\nimport type { AnimationRange } from \"core/Animations/animationRange\";\r\nimport { CheckBoxLineComponent } from \"shared-ui-components/lines/checkBoxLineComponent\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { FloatLineComponent } from \"shared-ui-components/lines/floatLineComponent\";\r\nimport { TextLineComponent } from \"shared-ui-components/lines/textLineComponent\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport { AnimationCurveEditorComponent } from \"./curveEditor/animationCurveEditorComponent\";\r\nimport { Context } from \"./curveEditor/context\";\r\n\r\ninterface IAnimationGridComponentProps {\r\n    globalState: GlobalState;\r\n    animatable: IAnimatable;\r\n    scene: Scene;\r\n    lockObject: LockObject;\r\n    onPropertyChangedObservable?: Observable<PropertyChangedEvent>;\r\n}\r\n\r\nexport class AnimationGridComponent extends React.Component<IAnimationGridComponentProps, { currentFrame: number }> {\r\n    private _animations: Nullable<Animation[]> = null;\r\n    private _ranges: AnimationRange[];\r\n    private _mainAnimatable: Nullable<Animatable>;\r\n    private _onBeforeRenderObserver: Nullable<Observer<Scene>>;\r\n    private _isPlaying = false;\r\n    private _timelineRef: React.RefObject<SliderLineComponent>;\r\n    private _animationCurveEditorContext: Nullable<Context>;\r\n    private _animationControl = {\r\n        from: 0,\r\n        to: 0,\r\n        loop: false,\r\n        initialized: false,\r\n    };\r\n\r\n    constructor(props: IAnimationGridComponentProps) {\r\n        super(props);\r\n\r\n        this.state = { currentFrame: 0 };\r\n\r\n        const animatableAsAny = this.props.animatable as any;\r\n\r\n        this._ranges = animatableAsAny.getAnimationRanges ? animatableAsAny.getAnimationRanges() : [];\r\n        if (animatableAsAny.getAnimatables) {\r\n            const animatables = animatableAsAny.getAnimatables();\r\n            this._animations = new Array<Animation>();\r\n\r\n            animatables.forEach((animatable: IAnimatable) => {\r\n                if (animatable.animations) {\r\n                    this._animations!.push(...animatable.animations);\r\n                }\r\n            });\r\n\r\n            if (animatableAsAny.animations) {\r\n                this._animations!.push(...animatableAsAny.animations);\r\n            }\r\n\r\n            // Extract from and to\r\n            if (this._animations && this._animations.length) {\r\n                this._animations.forEach((animation) => {\r\n                    const keys = animation.getKeys();\r\n\r\n                    if (keys && keys.length > 0) {\r\n                        if (keys[0].frame < this._animationControl.from) {\r\n                            this._animationControl.from = keys[0].frame;\r\n                        }\r\n                        const lastKeyIndex = keys.length - 1;\r\n                        if (keys[lastKeyIndex].frame > this._animationControl.to) {\r\n                            this._animationControl.to = keys[lastKeyIndex].frame;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        this._timelineRef = React.createRef();\r\n    }\r\n\r\n    playOrPause() {\r\n        const animatable = this.props.animatable;\r\n        this._isPlaying = this.props.scene.getAllAnimatablesByTarget(animatable).length > 0;\r\n\r\n        if (this._isPlaying) {\r\n            this.props.scene.stopAnimation(this.props.animatable);\r\n            this._mainAnimatable = null;\r\n        } else {\r\n            this._mainAnimatable = this.props.scene.beginAnimation(this.props.animatable, this._animationControl.from, this._animationControl.to, this._animationControl.loop);\r\n        }\r\n        this.forceUpdate();\r\n    }\r\n\r\n    override componentDidMount() {\r\n        this._onBeforeRenderObserver = this.props.scene.onBeforeRenderObservable.add(() => {\r\n            if (!this._isPlaying || !this._mainAnimatable) {\r\n                return;\r\n            }\r\n            this.setState({ currentFrame: this._mainAnimatable.masterFrame });\r\n        });\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        if (this._onBeforeRenderObserver) {\r\n            this.props.scene.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\r\n            this._onBeforeRenderObserver = null;\r\n        }\r\n    }\r\n\r\n    onCurrentFrameChange(value: number) {\r\n        if (!this._mainAnimatable) {\r\n            return;\r\n        }\r\n\r\n        this._mainAnimatable.goToFrame(value);\r\n        this.setState({ currentFrame: value });\r\n    }\r\n\r\n    onChangeFromOrTo() {\r\n        this.playOrPause();\r\n        if (this._isPlaying) {\r\n            this.playOrPause();\r\n        }\r\n    }\r\n\r\n    override componentDidUpdate(prevProps: IAnimationGridComponentProps) {\r\n        const prevId = (prevProps.animatable as any).uniqueId;\r\n        const currId = (this.props.animatable as any).uniqueId;\r\n        if (prevId !== currId) {\r\n            this._animationCurveEditorContext = null;\r\n        }\r\n    }\r\n\r\n    override render() {\r\n        const animatable = this.props.animatable;\r\n        const animatableAsAny = this.props.animatable as any;\r\n\r\n        const animatablesForTarget = this.props.scene.getAllAnimatablesByTarget(animatable);\r\n        this._isPlaying = animatablesForTarget.length > 0;\r\n\r\n        if (this._isPlaying) {\r\n            this._mainAnimatable = animatablesForTarget[0];\r\n            if (this._mainAnimatable) {\r\n                this._animationControl.from = this._mainAnimatable.fromFrame;\r\n                this._animationControl.to = this._mainAnimatable.toFrame;\r\n                this._animationControl.loop = this._mainAnimatable.loopAnimation;\r\n                this._animationControl.initialized = true;\r\n            }\r\n        }\r\n\r\n        const animations = animatable.animations;\r\n\r\n        if (!this._animationCurveEditorContext) {\r\n            this._animationCurveEditorContext = new Context();\r\n            this._animationCurveEditorContext.title = (this.props.animatable as any).name || \"\";\r\n            this._animationCurveEditorContext.animations = animations;\r\n            this._animationCurveEditorContext.target = this.props.animatable;\r\n            this._animationCurveEditorContext.scene = this.props.scene;\r\n            this._animationCurveEditorContext.fromKey = this._animationControl.from;\r\n            this._animationCurveEditorContext.toKey = this._animationControl.to;\r\n            this._animationCurveEditorContext.useExistingPlayRange = this._animationControl.initialized;\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {this._ranges.length > 0 && (\r\n                    <LineContainerComponent title=\"ANIMATION RANGES\" selection={this.props.globalState}>\r\n                        {this._ranges.map((range, i) => {\r\n                            return (\r\n                                <ButtonLineComponent\r\n                                    key={range.name + i}\r\n                                    label={range.name}\r\n                                    onClick={() => {\r\n                                        this._mainAnimatable = null;\r\n                                        this.props.scene.beginAnimation(animatable, range.from, range.to, true);\r\n                                    }}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </LineContainerComponent>\r\n                )}\r\n                {animations && (\r\n                    <>\r\n                        <LineContainerComponent title=\"ANIMATIONS\" selection={this.props.globalState}>\r\n                            <TextLineComponent label=\"Count\" value={animations.length.toString()} />\r\n                            {animations.map((anim, i) => {\r\n                                return <TextLineComponent key={anim.targetProperty + i} label={\"#\" + i + \" >\"} value={anim.targetProperty} />;\r\n                            })}\r\n                            <AnimationCurveEditorComponent globalState={this.props.globalState} context={this._animationCurveEditorContext} />\r\n                        </LineContainerComponent>\r\n                        {animations.length > 0 && (\r\n                            <LineContainerComponent title=\"ANIMATION GENERAL CONTROL\" selection={this.props.globalState}>\r\n                                <FloatLineComponent\r\n                                    lockObject={this.props.lockObject}\r\n                                    isInteger={true}\r\n                                    label=\"From\"\r\n                                    target={this._animationControl}\r\n                                    propertyName=\"from\"\r\n                                    onChange={() => this.onChangeFromOrTo()}\r\n                                />\r\n                                <FloatLineComponent\r\n                                    lockObject={this.props.lockObject}\r\n                                    isInteger={true}\r\n                                    label=\"To\"\r\n                                    target={this._animationControl}\r\n                                    propertyName=\"to\"\r\n                                    onChange={() => this.onChangeFromOrTo()}\r\n                                />\r\n                                <CheckBoxLineComponent\r\n                                    label=\"Loop\"\r\n                                    onSelect={(value) => {\r\n                                        this._animationControl.loop = value;\r\n\r\n                                        animatablesForTarget.forEach((at) => {\r\n                                            at.loopAnimation = value;\r\n                                        });\r\n                                    }}\r\n                                    isSelected={() => this._animationControl.loop}\r\n                                />\r\n                                {this._isPlaying && (\r\n                                    <SliderLineComponent\r\n                                        lockObject={this.props.lockObject}\r\n                                        ref={this._timelineRef}\r\n                                        label=\"Current frame\"\r\n                                        minimum={this._animationControl.from}\r\n                                        maximum={this._animationControl.to}\r\n                                        step={(this._animationControl.to - this._animationControl.from) / 1000.0}\r\n                                        directValue={this.state.currentFrame}\r\n                                        onInput={(value) => this.onCurrentFrameChange(value)}\r\n                                    />\r\n                                )}\r\n                                <ButtonLineComponent label={this._isPlaying ? \"Stop\" : \"Play\"} onClick={() => this.playOrPause()} />\r\n                                {(this._ranges.length > 0 || (this._animations && this._animations.length > 0)) && (\r\n                                    <>\r\n                                        <CheckBoxLineComponent\r\n                                            label=\"Enable override\"\r\n                                            onSelect={(value) => {\r\n                                                if (value) {\r\n                                                    animatableAsAny.animationPropertiesOverride = new AnimationPropertiesOverride();\r\n                                                    animatableAsAny.animationPropertiesOverride.blendingSpeed = 0.05;\r\n                                                } else {\r\n                                                    animatableAsAny.animationPropertiesOverride = null;\r\n                                                }\r\n                                                this.forceUpdate();\r\n                                            }}\r\n                                            isSelected={() => animatableAsAny.animationPropertiesOverride != null}\r\n                                            onValueChanged={() => this.forceUpdate()}\r\n                                        />\r\n                                        {animatableAsAny.animationPropertiesOverride != null && (\r\n                                            <div>\r\n                                                <CheckBoxLineComponent\r\n                                                    label=\"Enable blending\"\r\n                                                    target={animatableAsAny.animationPropertiesOverride}\r\n                                                    propertyName=\"enableBlending\"\r\n                                                    onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                                                />\r\n                                                <SliderLineComponent\r\n                                                    lockObject={this.props.lockObject}\r\n                                                    label=\"Blending speed\"\r\n                                                    target={animatableAsAny.animationPropertiesOverride}\r\n                                                    propertyName=\"blendingSpeed\"\r\n                                                    minimum={0}\r\n                                                    maximum={0.1}\r\n                                                    step={0.01}\r\n                                                    onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                                                />\r\n                                            </div>\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n                            </LineContainerComponent>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n}\r\n"]}
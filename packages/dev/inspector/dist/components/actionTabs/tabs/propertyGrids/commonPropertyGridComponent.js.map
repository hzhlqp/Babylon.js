{"version":3,"file":"commonPropertyGridComponent.js","sourceRoot":"","sources":["../../../../../src/components/actionTabs/tabs/propertyGrids/commonPropertyGridComponent.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAK/B,OAAO,EAAE,sBAAsB,EAAE,MAAM,mDAAmD,CAAC;AAG3F,OAAO,EAAE,iBAAiB,EAAE,MAAM,8CAA8C,CAAC;AACjF,OAAO,EAAE,yBAAyB,EAAE,MAAM,sDAAsD,CAAC;AASjG,MAAM,OAAO,2BAA4B,SAAQ,KAAK,CAAC,SAA4C;IAC/F,YAAY,KAAwC;QAChD,KAAK,CAAC,KAAK,CAAC,CAAC;IACjB,CAAC;IAED,WAAW,CAAC,UAAe;QACvB,MAAM,UAAU,GAAG,EAAE,CAAC;QAEtB,KAAK,MAAM,IAAI,IAAI,UAAU,EAAE;YAC3B,MAAM,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;YAC/B,MAAM,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEnD,QAAQ,IAAI,EAAE;gBACV,KAAK,iBAAiB;oBAClB,UAAU,CAAC,IAAI,CAAC,KAAC,iBAAiB,IAAY,KAAK,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,IAApC,IAAI,CAAoC,CAAC,CAAC;oBAClF,UAAU,CAAC,IAAI,CAAC,KAAC,yBAAyB,IAAoB,KAAK,EAAE,KAAK,IAA1B,IAAI,GAAG,KAAK,CAAkB,CAAC,CAAC;oBAChF,MAAM;gBACV,KAAK,gBAAgB;oBACjB,UAAU,CAAC,IAAI,CAAC,KAAC,iBAAiB,IAAY,KAAK,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,IAApC,IAAI,CAAoC,CAAC,CAAC;oBAClF,KAAK,MAAM,KAAK,IAAI,KAAK,EAAE;wBACvB,UAAU,CAAC,IAAI,CAAC,KAAC,yBAAyB,IAAoB,KAAK,EAAE,KAAK,IAA1B,IAAI,GAAG,KAAK,CAAkB,CAAC,CAAC;qBACnF;oBACD,MAAM;gBACV,KAAK,iBAAiB;oBAClB,UAAU,CAAC,IAAI,CAAC,KAAC,iBAAiB,IAAY,KAAK,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,IAApC,IAAI,CAAoC,CAAC,CAAC;oBAClF,KAAK,MAAM,QAAQ,IAAI,KAAK,EAAE;wBAC1B,UAAU,CAAC,IAAI,CAAC,KAAC,iBAAiB,IAAuB,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,EAAE,eAAe,EAAC,iBAAiB,IAA3F,IAAI,GAAG,QAAQ,CAA+E,CAAC,CAAC;qBAC3I;oBACD,MAAM;aACb;SACJ;QAED,OAAO,UAAU,CAAC;IACtB,CAAC;IAEQ,MAAM;QACX,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE;YAC3B,OAAO,IAAI,CAAC;SACf;QAED,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE;YAC/B,OAAO,IAAI,CAAC;SACf;QAED,OAAO,CACH,wBACI,KAAC,sBAAsB,IAAC,KAAK,EAAC,cAAc,EAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,YACzE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAC1B,GACvB,CACT,CAAC;IACN,CAAC;CACJ","sourcesContent":["import * as React from \"react\";\r\n\r\nimport type { Observable } from \"core/Misc/observable\";\r\n\r\nimport type { PropertyChangedEvent } from \"../../../propertyChangedEvent\";\r\nimport { LineContainerComponent } from \"shared-ui-components/lines/lineContainerComponent\";\r\nimport type { LockObject } from \"shared-ui-components/tabs/propertyGrids/lockObject\";\r\nimport type { GlobalState } from \"../../../globalState\";\r\nimport { TextLineComponent } from \"shared-ui-components/lines/textLineComponent\";\r\nimport { IndentedTextLineComponent } from \"shared-ui-components/lines/indentedTextLineComponent\";\r\n\r\ninterface ICommonPropertyGridComponentProps {\r\n    globalState: GlobalState;\r\n    host: { metadata: any };\r\n    lockObject: LockObject;\r\n    onPropertyChangedObservable?: Observable<PropertyChangedEvent>;\r\n}\r\n\r\nexport class CommonPropertyGridComponent extends React.Component<ICommonPropertyGridComponentProps> {\r\n    constructor(props: ICommonPropertyGridComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    renderLevel(jsonObject: any) {\r\n        const components = [];\r\n\r\n        for (const data in jsonObject) {\r\n            const value = jsonObject[data];\r\n            const type = Object.prototype.toString.call(value);\r\n\r\n            switch (type) {\r\n                case \"[object String]\":\r\n                    components.push(<TextLineComponent key={data} label={data} ignoreValue={true} />);\r\n                    components.push(<IndentedTextLineComponent key={data + value} value={value} />);\r\n                    break;\r\n                case \"[object Array]\":\r\n                    components.push(<TextLineComponent key={data} label={data} ignoreValue={true} />);\r\n                    for (const entry of value) {\r\n                        components.push(<IndentedTextLineComponent key={data + entry} value={entry} />);\r\n                    }\r\n                    break;\r\n                case \"[object Object]\":\r\n                    components.push(<TextLineComponent key={data} label={data} ignoreValue={true} />);\r\n                    for (const entryKey in value) {\r\n                        components.push(<TextLineComponent key={data + entryKey} label={entryKey} value={value[entryKey]} additionalClass=\"reduced-opacity\" />);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return components;\r\n    }\r\n\r\n    override render() {\r\n        if (!this.props.host.metadata) {\r\n            return null;\r\n        }\r\n\r\n        if (!this.props.host.metadata.xmp) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <LineContainerComponent title=\"XMP METADATA\" selection={this.props.globalState}>\r\n                    {this.renderLevel(this.props.host.metadata.xmp)}\r\n                </LineContainerComponent>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
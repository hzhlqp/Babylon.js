{"version":3,"file":"defaultRenderingPipelinePropertyGridComponent.js","sourceRoot":"","sources":["../../../../../../src/components/actionTabs/tabs/propertyGrids/postProcesses/defaultRenderingPipelinePropertyGridComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\n\r\nimport type { Observable } from \"core/Misc/observable\";\r\nimport type { DefaultRenderingPipeline } from \"core/PostProcesses/RenderPipeline/Pipelines/defaultRenderingPipeline\";\r\nimport { DepthOfFieldEffectBlurLevel } from \"core/PostProcesses/depthOfFieldEffect\";\r\n\r\nimport type { PropertyChangedEvent } from \"../../../../propertyChangedEvent\";\r\nimport type { LockObject } from \"shared-ui-components/tabs/propertyGrids/lockObject\";\r\nimport { CommonRenderingPipelinePropertyGridComponent } from \"./commonRenderingPipelinePropertyGridComponent\";\r\nimport { SliderLineComponent } from \"shared-ui-components/lines/sliderLineComponent\";\r\nimport { LineContainerComponent } from \"shared-ui-components/lines/lineContainerComponent\";\r\nimport { CheckBoxLineComponent } from \"shared-ui-components/lines/checkBoxLineComponent\";\r\nimport { OptionsLine } from \"shared-ui-components/lines/optionsLineComponent\";\r\nimport { ImageProcessingConfiguration } from \"core/Materials/imageProcessingConfiguration\";\r\nimport { Color3LineComponent } from \"shared-ui-components/lines/color3LineComponent\";\r\nimport type { GlobalState } from \"../../../../globalState\";\r\nimport { ButtonLineComponent } from \"shared-ui-components/lines/buttonLineComponent\";\r\nimport { Vector2LineComponent } from \"shared-ui-components/lines/vector2LineComponent\";\r\n\r\ninterface IDefaultRenderingPipelinePropertyGridComponentProps {\r\n    globalState: GlobalState;\r\n    renderPipeline: DefaultRenderingPipeline;\r\n    lockObject: LockObject;\r\n    onPropertyChangedObservable?: Observable<PropertyChangedEvent>;\r\n}\r\n\r\nexport class DefaultRenderingPipelinePropertyGridComponent extends React.Component<IDefaultRenderingPipelinePropertyGridComponentProps> {\r\n    constructor(props: IDefaultRenderingPipelinePropertyGridComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    override render() {\r\n        const renderPipeline = this.props.renderPipeline;\r\n\r\n        const camera = renderPipeline.scene.activeCamera!;\r\n\r\n        const toneMappingOptions = [\r\n            { label: \"Standard\", value: ImageProcessingConfiguration.TONEMAPPING_STANDARD },\r\n            { label: \"ACES\", value: ImageProcessingConfiguration.TONEMAPPING_ACES },\r\n            { label: \"Khronos PBR Neutral\", value: ImageProcessingConfiguration.TONEMAPPING_KHR_PBR_NEUTRAL },\r\n        ];\r\n\r\n        const vignetteModeOptions = [\r\n            { label: \"Multiply\", value: ImageProcessingConfiguration.VIGNETTEMODE_MULTIPLY },\r\n            { label: \"Opaque\", value: ImageProcessingConfiguration.VIGNETTEMODE_OPAQUE },\r\n        ];\r\n\r\n        const depthOfFieldBlurOptions = [\r\n            { label: \"Low\", value: DepthOfFieldEffectBlurLevel.Low },\r\n            { label: \"Medium\", value: DepthOfFieldEffectBlurLevel.Medium },\r\n            { label: \"High\", value: DepthOfFieldEffectBlurLevel.High },\r\n        ];\r\n\r\n        return (\r\n            <>\r\n                <CommonRenderingPipelinePropertyGridComponent\r\n                    globalState={this.props.globalState}\r\n                    lockObject={this.props.lockObject}\r\n                    renderPipeline={renderPipeline}\r\n                    onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                />\r\n                <LineContainerComponent title=\"BLOOM\" selection={this.props.globalState}>\r\n                    <CheckBoxLineComponent\r\n                        label=\"Enabled\"\r\n                        target={renderPipeline}\r\n                        onValueChanged={() => this.forceUpdate()}\r\n                        propertyName=\"bloomEnabled\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    {renderPipeline.bloomEnabled && (\r\n                        <div>\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"Threshold\"\r\n                                minimum={0}\r\n                                maximum={2.0}\r\n                                step={0.01}\r\n                                target={renderPipeline}\r\n                                propertyName=\"bloomThreshold\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"Weight\"\r\n                                minimum={0}\r\n                                maximum={1}\r\n                                step={0.05}\r\n                                target={renderPipeline}\r\n                                propertyName=\"bloomWeight\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"Kernel\"\r\n                                minimum={0}\r\n                                maximum={128}\r\n                                step={1}\r\n                                target={renderPipeline}\r\n                                propertyName=\"bloomKernel\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                                decimalCount={0}\r\n                            />\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"Scale\"\r\n                                minimum={0}\r\n                                maximum={1}\r\n                                step={0.25}\r\n                                target={renderPipeline}\r\n                                propertyName=\"bloomScale\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"CHROMATIC ABERRATION\" selection={this.props.globalState}>\r\n                    <CheckBoxLineComponent\r\n                        label=\"Enabled\"\r\n                        target={renderPipeline}\r\n                        onValueChanged={() => this.forceUpdate()}\r\n                        propertyName=\"chromaticAberrationEnabled\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    {renderPipeline.chromaticAberrationEnabled && (\r\n                        <div>\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"aberrationAmount\"\r\n                                minimum={0}\r\n                                maximum={128}\r\n                                step={0.1}\r\n                                target={renderPipeline.chromaticAberration}\r\n                                propertyName=\"aberrationAmount\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"Radial intensity\"\r\n                                minimum={0}\r\n                                maximum={1}\r\n                                step={0.01}\r\n                                target={renderPipeline.chromaticAberration}\r\n                                propertyName=\"radialIntensity\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                            <Vector2LineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"Center\"\r\n                                target={renderPipeline.chromaticAberration}\r\n                                propertyName=\"centerPosition\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                            <Vector2LineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"Direction\"\r\n                                target={renderPipeline.chromaticAberration}\r\n                                propertyName=\"direction\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"DEPTH OF FIELD\" selection={this.props.globalState}>\r\n                    <CheckBoxLineComponent\r\n                        label=\"Enabled\"\r\n                        target={renderPipeline}\r\n                        onValueChanged={() => this.forceUpdate()}\r\n                        propertyName=\"depthOfFieldEnabled\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    {renderPipeline.depthOfFieldEnabled && (\r\n                        <div>\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"Focal length\"\r\n                                minimum={0}\r\n                                maximum={camera.maxZ}\r\n                                step={0.1}\r\n                                target={renderPipeline.depthOfField}\r\n                                propertyName=\"focalLength\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"fStop\"\r\n                                minimum={0}\r\n                                maximum={32}\r\n                                step={0.1}\r\n                                target={renderPipeline.depthOfField}\r\n                                propertyName=\"fStop\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"Distance\"\r\n                                minimum={0}\r\n                                maximum={camera.maxZ}\r\n                                step={0.1}\r\n                                target={renderPipeline.depthOfField}\r\n                                propertyName=\"focusDistance\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"Lens size\"\r\n                                minimum={0}\r\n                                maximum={1000}\r\n                                step={1}\r\n                                target={renderPipeline.depthOfField}\r\n                                propertyName=\"lensSize\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                                decimalCount={0}\r\n                            />\r\n                            <OptionsLine\r\n                                label=\"Blur level\"\r\n                                options={depthOfFieldBlurOptions}\r\n                                target={renderPipeline}\r\n                                propertyName=\"depthOfFieldBlurLevel\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                                onSelect={(value) => this.setState({ mode: value })}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"FXAA\" selection={this.props.globalState}>\r\n                    <CheckBoxLineComponent\r\n                        label=\"Enabled\"\r\n                        target={renderPipeline}\r\n                        propertyName=\"fxaaEnabled\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"GLOW LAYER\" selection={this.props.globalState}>\r\n                    <CheckBoxLineComponent\r\n                        label=\"Enabled\"\r\n                        target={renderPipeline}\r\n                        propertyName=\"glowLayerEnabled\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    {renderPipeline.glowLayerEnabled && (\r\n                        <div>\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"Blur kernel size\"\r\n                                minimum={1}\r\n                                maximum={128}\r\n                                step={1}\r\n                                decimalCount={0}\r\n                                target={renderPipeline.glowLayer}\r\n                                propertyName=\"blurKernelSize\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"Intensity\"\r\n                                minimum={0}\r\n                                maximum={10}\r\n                                step={0.1}\r\n                                target={renderPipeline.glowLayer}\r\n                                propertyName=\"intensity\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"GRAIN\" selection={this.props.globalState}>\r\n                    <CheckBoxLineComponent\r\n                        label=\"Enabled\"\r\n                        target={renderPipeline}\r\n                        onValueChanged={() => this.forceUpdate()}\r\n                        propertyName=\"grainEnabled\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    {renderPipeline.grainEnabled && (\r\n                        <div>\r\n                            <CheckBoxLineComponent\r\n                                label=\"Animated\"\r\n                                target={renderPipeline.grain}\r\n                                propertyName=\"animated\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"Intensity\"\r\n                                minimum={0}\r\n                                maximum={50}\r\n                                step={0.1}\r\n                                target={renderPipeline.grain}\r\n                                propertyName=\"intensity\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"IMAGE PROCESSING\" selection={this.props.globalState}>\r\n                    <CheckBoxLineComponent\r\n                        label=\"Enabled\"\r\n                        target={renderPipeline}\r\n                        onValueChanged={() => this.forceUpdate()}\r\n                        propertyName=\"imageProcessingEnabled\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    {renderPipeline.imageProcessing && (\r\n                        <div>\r\n                            <ButtonLineComponent\r\n                                label=\"Convert clear color to linear\"\r\n                                onClick={() =>\r\n                                    (renderPipeline.scene.clearColor = renderPipeline.scene.clearColor.toLinearSpace(renderPipeline.scene.getEngine().useExactSrgbConversions))\r\n                                }\r\n                            />\r\n                            <ButtonLineComponent\r\n                                label=\"Convert clear color to gamma\"\r\n                                onClick={() =>\r\n                                    (renderPipeline.scene.clearColor = renderPipeline.scene.clearColor.toGammaSpace(renderPipeline.scene.getEngine().useExactSrgbConversions))\r\n                                }\r\n                            />\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                minimum={0}\r\n                                maximum={4}\r\n                                step={0.1}\r\n                                label=\"Contrast\"\r\n                                target={renderPipeline.imageProcessing}\r\n                                propertyName=\"contrast\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                minimum={0}\r\n                                maximum={4}\r\n                                step={0.1}\r\n                                label=\"Exposure\"\r\n                                target={renderPipeline.imageProcessing}\r\n                                propertyName=\"exposure\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                            <CheckBoxLineComponent\r\n                                label=\"Tone mapping\"\r\n                                target={renderPipeline.imageProcessing}\r\n                                propertyName=\"toneMappingEnabled\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                            <OptionsLine\r\n                                label=\"Tone mapping type\"\r\n                                options={toneMappingOptions}\r\n                                target={renderPipeline.imageProcessing}\r\n                                propertyName=\"toneMappingType\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                                onSelect={(value) => this.setState({ mode: value })}\r\n                            />\r\n                            <CheckBoxLineComponent\r\n                                label=\"Vignette\"\r\n                                target={renderPipeline.imageProcessing}\r\n                                propertyName=\"vignetteEnabled\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                minimum={0}\r\n                                maximum={4}\r\n                                step={0.1}\r\n                                label=\"Vignette weight\"\r\n                                target={renderPipeline.imageProcessing}\r\n                                propertyName=\"vignetteWeight\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                minimum={0}\r\n                                maximum={1}\r\n                                step={0.1}\r\n                                label=\"Vignette stretch\"\r\n                                target={renderPipeline.imageProcessing}\r\n                                propertyName=\"vignetteStretch\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                minimum={0}\r\n                                maximum={Math.PI}\r\n                                step={0.1}\r\n                                label=\"Vignette FOV\"\r\n                                target={renderPipeline.imageProcessing}\r\n                                propertyName=\"vignetteCameraFov\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                minimum={0}\r\n                                maximum={1}\r\n                                step={0.1}\r\n                                label=\"Vignette center X\"\r\n                                target={renderPipeline.imageProcessing}\r\n                                propertyName=\"vignetteCenterX\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                minimum={0}\r\n                                maximum={1}\r\n                                step={0.1}\r\n                                label=\"Vignette center Y\"\r\n                                target={renderPipeline.imageProcessing}\r\n                                propertyName=\"vignetteCenterY\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                            <Color3LineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"Vignette color\"\r\n                                target={renderPipeline.imageProcessing}\r\n                                propertyName=\"vignetteColor\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                            <OptionsLine\r\n                                label=\"Vignette blend mode\"\r\n                                options={vignetteModeOptions}\r\n                                target={renderPipeline.imageProcessing}\r\n                                propertyName=\"vignetteBlendMode\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                                onSelect={(value) => this.setState({ mode: value })}\r\n                            />\r\n                            <CheckBoxLineComponent\r\n                                label=\"Dithering\"\r\n                                target={renderPipeline.imageProcessing}\r\n                                propertyName=\"ditheringEnabled\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                minimum={0}\r\n                                maximum={1}\r\n                                step={0.5 / 255.0}\r\n                                label=\"Dithering intensity\"\r\n                                target={renderPipeline.imageProcessing}\r\n                                propertyName=\"ditheringIntensity\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"SHARPEN\" selection={this.props.globalState}>\r\n                    <CheckBoxLineComponent\r\n                        label=\"Enabled\"\r\n                        target={renderPipeline}\r\n                        onValueChanged={() => this.forceUpdate()}\r\n                        propertyName=\"sharpenEnabled\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    {renderPipeline.sharpenEnabled && (\r\n                        <div>\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"Color amount\"\r\n                                minimum={0}\r\n                                maximum={1}\r\n                                step={0.05}\r\n                                target={renderPipeline.sharpen}\r\n                                propertyName=\"colorAmount\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                            <SliderLineComponent\r\n                                lockObject={this.props.lockObject}\r\n                                label=\"Edge amount\"\r\n                                minimum={0}\r\n                                maximum={5}\r\n                                step={0.05}\r\n                                target={renderPipeline.sharpen}\r\n                                propertyName=\"edgeAmount\"\r\n                                onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                </LineContainerComponent>\r\n            </>\r\n        );\r\n    }\r\n}\r\n"]}
{"version":3,"file":"transformNodePropertyGridComponent.js","sourceRoot":"","sources":["../../../../../../src/components/actionTabs/tabs/propertyGrids/meshes/transformNodePropertyGridComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\n\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Observable } from \"core/Misc/observable\";\r\n\r\nimport type { PropertyChangedEvent } from \"../../../../propertyChangedEvent\";\r\nimport { LineContainerComponent } from \"shared-ui-components/lines/lineContainerComponent\";\r\nimport { CheckBoxLineComponent } from \"shared-ui-components/lines/checkBoxLineComponent\";\r\nimport { Vector3LineComponent } from \"shared-ui-components/lines/vector3LineComponent\";\r\nimport { TextLineComponent } from \"shared-ui-components/lines/textLineComponent\";\r\nimport { QuaternionLineComponent } from \"../../../lines/quaternionLineComponent\";\r\nimport type { LockObject } from \"shared-ui-components/tabs/propertyGrids/lockObject\";\r\nimport type { GlobalState } from \"../../../../globalState\";\r\nimport { CustomPropertyGridComponent } from \"../customPropertyGridComponent\";\r\nimport { ButtonLineComponent } from \"shared-ui-components/lines/buttonLineComponent\";\r\nimport { TextInputLineComponent } from \"shared-ui-components/lines/textInputLineComponent\";\r\nimport { AnimationGridComponent } from \"../animations/animationPropertyGridComponent\";\r\nimport { CommonPropertyGridComponent } from \"../commonPropertyGridComponent\";\r\nimport { VariantsPropertyGridComponent } from \"../variantsPropertyGridComponent\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { ParentPropertyGridComponent } from \"../parentPropertyGridComponent\";\r\n\r\ninterface ITransformNodePropertyGridComponentProps {\r\n    globalState: GlobalState;\r\n    transformNode: TransformNode;\r\n    lockObject: LockObject;\r\n    onPropertyChangedObservable?: Observable<PropertyChangedEvent>;\r\n}\r\n\r\nexport class TransformNodePropertyGridComponent extends React.Component<ITransformNodePropertyGridComponentProps> {\r\n    constructor(props: ITransformNodePropertyGridComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    override render() {\r\n        const transformNode = this.props.transformNode;\r\n\r\n        return (\r\n            <>\r\n                <CustomPropertyGridComponent\r\n                    globalState={this.props.globalState}\r\n                    target={transformNode}\r\n                    lockObject={this.props.lockObject}\r\n                    onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                />\r\n                <LineContainerComponent title=\"GENERAL\" selection={this.props.globalState}>\r\n                    <TextLineComponent label=\"ID\" value={transformNode.id} />\r\n                    <TextInputLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"Name\"\r\n                        target={transformNode}\r\n                        propertyName=\"name\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    <TextLineComponent label=\"Unique ID\" value={transformNode.uniqueId.toString()} />\r\n                    <TextLineComponent label=\"Class\" value={transformNode.getClassName()} />\r\n                    <CheckBoxLineComponent label=\"IsEnabled\" isSelected={() => transformNode.isEnabled()} onSelect={(value) => transformNode.setEnabled(value)} />\r\n                    <ParentPropertyGridComponent globalState={this.props.globalState} node={transformNode} lockObject={this.props.lockObject} />\r\n                    <ButtonLineComponent\r\n                        label=\"Dispose\"\r\n                        onClick={() => {\r\n                            transformNode.dispose();\r\n                            this.props.globalState.onSelectionChangedObservable.notifyObservers(null);\r\n                        }}\r\n                    />\r\n                </LineContainerComponent>\r\n                <CommonPropertyGridComponent host={transformNode} lockObject={this.props.lockObject} globalState={this.props.globalState} />\r\n                <VariantsPropertyGridComponent host={transformNode as Mesh} lockObject={this.props.lockObject} globalState={this.props.globalState} />\r\n                <LineContainerComponent title=\"TRANSFORMATIONS\" selection={this.props.globalState}>\r\n                    <Vector3LineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"Position\"\r\n                        target={transformNode}\r\n                        propertyName=\"position\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    {!transformNode.rotationQuaternion && (\r\n                        <Vector3LineComponent\r\n                            lockObject={this.props.lockObject}\r\n                            label=\"Rotation\"\r\n                            useEuler={this.props.globalState.onlyUseEulers}\r\n                            target={transformNode}\r\n                            propertyName=\"rotation\"\r\n                            step={0.01}\r\n                            onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        />\r\n                    )}\r\n                    {transformNode.rotationQuaternion && (\r\n                        <QuaternionLineComponent\r\n                            lockObject={this.props.lockObject}\r\n                            label=\"Rotation\"\r\n                            useEuler={this.props.globalState.onlyUseEulers}\r\n                            target={transformNode}\r\n                            propertyName=\"rotationQuaternion\"\r\n                            onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        />\r\n                    )}\r\n                    <Vector3LineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"Scaling\"\r\n                        target={transformNode}\r\n                        propertyName=\"scaling\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                </LineContainerComponent>\r\n                <AnimationGridComponent globalState={this.props.globalState} animatable={transformNode} scene={transformNode.getScene()} lockObject={this.props.lockObject} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n"]}
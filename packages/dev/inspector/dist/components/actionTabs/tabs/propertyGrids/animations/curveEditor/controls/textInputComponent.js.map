{"version":3,"file":"textInputComponent.js","sourceRoot":"","sources":["../../../../../../../../src/components/actionTabs/tabs/propertyGrids/animations/curveEditor/controls/textInputComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport type { GlobalState } from \"../../../../../../globalState\";\r\nimport type { Context } from \"../context\";\r\n\r\ninterface ITextInputComponentProps {\r\n    globalState: GlobalState;\r\n    context: Context;\r\n    id?: string;\r\n    className?: string;\r\n    tooltip?: string;\r\n    value: string;\r\n    isNumber?: boolean;\r\n    complement?: string;\r\n    onValueAsNumberChanged?: (value: number, isFocused: boolean) => void;\r\n    disabled?: boolean;\r\n}\r\n\r\ninterface ITextInputComponentState {\r\n    value: string;\r\n    isFocused: boolean;\r\n}\r\n\r\nexport class TextInputComponent extends React.Component<ITextInputComponentProps, ITextInputComponentState> {\r\n    private _lastKnownGoodValue: string;\r\n\r\n    constructor(props: ITextInputComponentProps) {\r\n        super(props);\r\n\r\n        this.state = { value: this.props.value, isFocused: false };\r\n    }\r\n\r\n    private _onChange(value: string) {\r\n        if (this.props.isNumber) {\r\n            const valueAsNumber = parseFloat(value);\r\n\r\n            if (!isNaN(valueAsNumber)) {\r\n                if (this.props.onValueAsNumberChanged) {\r\n                    this.props.onValueAsNumberChanged(valueAsNumber, true);\r\n                }\r\n                this._lastKnownGoodValue = valueAsNumber.toString();\r\n            } else if (value !== \"-\" && value !== \"\") {\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._lastKnownGoodValue = value;\r\n        this.setState({ value: value });\r\n    }\r\n\r\n    private _onBlur() {\r\n        this.props.context.focusedInput = false;\r\n\r\n        if (this.props.isNumber) {\r\n            const valueAsNumber = parseFloat(this.state.value);\r\n\r\n            if (!isNaN(valueAsNumber)) {\r\n                if (this.props.onValueAsNumberChanged) {\r\n                    this.props.onValueAsNumberChanged(valueAsNumber, false);\r\n                }\r\n                this.setState({ value: valueAsNumber.toString(), isFocused: false });\r\n            } else {\r\n                this.setState({ value: this._lastKnownGoodValue, isFocused: false });\r\n            }\r\n            return;\r\n        }\r\n\r\n        this.setState({ isFocused: false });\r\n    }\r\n\r\n    private _onFocus() {\r\n        this.props.context.focusedInput = true;\r\n        this.setState({ isFocused: true });\r\n    }\r\n\r\n    override shouldComponentUpdate(newProps: ITextInputComponentProps, newState: ITextInputComponentState) {\r\n        if (newProps !== this.props) {\r\n            newState.value = newProps.value;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private _onKeyPress(evt: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (evt.key === \"Enter\") {\r\n            const valueAsNumber = parseFloat(this.state.value);\r\n\r\n            if (!isNaN(valueAsNumber)) {\r\n                if (this.props.onValueAsNumberChanged) {\r\n                    this.props.onValueAsNumberChanged(valueAsNumber, false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public override render() {\r\n        return (\r\n            <input\r\n                type=\"text\"\r\n                title={this.props.tooltip}\r\n                onFocus={() => this._onFocus()}\r\n                onBlur={() => this._onBlur()}\r\n                className={\"text-input\" + (this.props.className ? \" \" + this.props.className : \"\")}\r\n                onChange={(evt) => this._onChange(this.props.complement ? evt.target.value.replace(this.props.complement, \"\") : evt.target.value)}\r\n                onKeyPress={(evt) => this._onKeyPress(evt)}\r\n                value={(this.state.value || \"\") + (!this.state.isFocused && this.props.complement ? this.props.complement : \"\")}\r\n                id={this.props.id}\r\n                disabled={this.props.disabled}\r\n            ></input>\r\n        );\r\n    }\r\n}\r\n"]}
{"version":3,"file":"factorGradientStepGridComponent.js","sourceRoot":"","sources":["../../../../../../src/components/actionTabs/tabs/propertyGrids/particleSystems/factorGradientStepGridComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport type { GlobalState } from \"../../../../globalState\";\r\nimport type { FactorGradient } from \"core/Misc/gradients\";\r\nimport type { LockObject } from \"shared-ui-components/tabs/propertyGrids/lockObject\";\r\nimport type { IParticleSystem } from \"core/Particles/IParticleSystem\";\r\nimport { ParticleSystem } from \"core/Particles/particleSystem\";\r\n\r\ninterface IFactorGradientStepGridComponent {\r\n    globalState: GlobalState;\r\n    gradient: FactorGradient;\r\n    lockObject: LockObject;\r\n    lineIndex: number;\r\n    onDelete: () => void;\r\n    onUpdateGradient: () => void;\r\n    onCheckForReOrder: () => void;\r\n    host: IParticleSystem;\r\n    codeRecorderPropertyName: string;\r\n}\r\n\r\nexport class FactorGradientStepGridComponent extends React.Component<IFactorGradientStepGridComponent, { gradient: number; factor1: string; factor2?: string }> {\r\n    constructor(props: IFactorGradientStepGridComponent) {\r\n        super(props);\r\n\r\n        this.state = { gradient: props.gradient.gradient, factor1: this.props.gradient.factor1.toString(), factor2: this.props.gradient.factor2?.toString() };\r\n    }\r\n\r\n    override shouldComponentUpdate(nextProps: IFactorGradientStepGridComponent, nextState: { gradient: number; factor1: string; factor2?: string }) {\r\n        if (nextProps.gradient !== this.props.gradient) {\r\n            nextState.gradient = nextProps.gradient.gradient;\r\n            nextState.factor1 = nextProps.gradient.factor1.toString();\r\n            nextState.factor2 = nextProps.gradient.factor2?.toString();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    updateFactor1(valueString: string) {\r\n        if (/[^0-9.-]/g.test(valueString)) {\r\n            return;\r\n        }\r\n\r\n        const valueAsNumber = parseFloat(valueString);\r\n\r\n        this.setState({ factor1: valueString });\r\n\r\n        if (isNaN(valueAsNumber)) {\r\n            return;\r\n        }\r\n\r\n        this.props.gradient.factor1 = valueAsNumber;\r\n\r\n        this.props.onUpdateGradient();\r\n        this.forceUpdate();\r\n    }\r\n\r\n    updateFactor2(valueString: string) {\r\n        if (/[^0-9.-]/g.test(valueString)) {\r\n            return;\r\n        }\r\n\r\n        const valueAsNumber = parseFloat(valueString);\r\n\r\n        this.setState({ factor2: valueString });\r\n\r\n        if (isNaN(valueAsNumber)) {\r\n            return;\r\n        }\r\n\r\n        this.props.gradient.factor2 = valueAsNumber;\r\n\r\n        this.props.onUpdateGradient();\r\n        this.forceUpdate();\r\n    }\r\n\r\n    updateGradient(gradient: number) {\r\n        this.props.gradient.gradient = gradient;\r\n\r\n        this.setState({ gradient: gradient });\r\n\r\n        this.props.onUpdateGradient();\r\n    }\r\n\r\n    onPointerUp() {\r\n        this.props.onCheckForReOrder();\r\n    }\r\n\r\n    lock() {\r\n        if (this.props.lockObject) {\r\n            this.props.lockObject.lock = true;\r\n        }\r\n    }\r\n\r\n    unlock() {\r\n        if (this.props.lockObject) {\r\n            this.props.lockObject.lock = false;\r\n        }\r\n    }\r\n\r\n    override render() {\r\n        const gradient = this.props.gradient;\r\n\r\n        return (\r\n            <div className=\"gradient-step\">\r\n                <div className=\"step\">{`#${this.props.lineIndex}`}</div>\r\n                <div className=\"factor1\">\r\n                    <input\r\n                        type=\"number\"\r\n                        step={\"0.01\"}\r\n                        className=\"numeric-input\"\r\n                        value={this.state.factor1}\r\n                        onBlur={() => this.unlock()}\r\n                        onFocus={() => this.lock()}\r\n                        onChange={(evt) => this.updateFactor1(evt.target.value)}\r\n                    />\r\n                </div>\r\n                {this.props.host instanceof ParticleSystem && (\r\n                    <div className=\"factor2\">\r\n                        <input\r\n                            type=\"number\"\r\n                            step={\"0.01\"}\r\n                            className={\"numeric-input\" + (this.state.factor1 === this.state.factor2 || gradient.factor2 === undefined ? \" grayed\" : \"\")}\r\n                            value={this.state.factor2}\r\n                            onBlur={() => this.unlock()}\r\n                            onFocus={() => this.lock()}\r\n                            onChange={(evt) => this.updateFactor2(evt.target.value)}\r\n                        />\r\n                    </div>\r\n                )}\r\n                <div className=\"step-value\">{gradient.gradient.toFixed(2)}</div>\r\n                <div className=\"step-slider\">\r\n                    <input\r\n                        className=\"range\"\r\n                        type=\"range\"\r\n                        step={0.01}\r\n                        min={0}\r\n                        max={1.0}\r\n                        value={gradient.gradient}\r\n                        onPointerUp={() => this.onPointerUp()}\r\n                        onChange={(evt) => this.updateGradient(parseFloat(evt.target.value))}\r\n                    />\r\n                </div>\r\n                <div className=\"gradient-delete hoverIcon\" onClick={() => this.props.onDelete()}>\r\n                    <FontAwesomeIcon icon={faTrash} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
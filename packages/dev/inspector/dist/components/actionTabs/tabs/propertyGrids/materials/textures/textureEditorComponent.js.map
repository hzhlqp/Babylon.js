{"version":3,"file":"textureEditorComponent.js","sourceRoot":"","sources":["../../../../../../../src/components/actionTabs/tabs/propertyGrids/materials/textures/textureEditorComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport type { IPixelData } from \"./textureCanvasManager\";\r\nimport { TextureCanvasManager } from \"./textureCanvasManager\";\r\nimport type { ITool } from \"./toolBar\";\r\nimport { ToolBar } from \"./toolBar\";\r\nimport { PropertiesBar } from \"./propertiesBar\";\r\nimport type { IChannel } from \"./channelsBar\";\r\nimport { ChannelsBar } from \"./channelsBar\";\r\nimport { BottomBar } from \"./bottomBar\";\r\nimport { TextureCanvasComponent } from \"./textureCanvasComponent\";\r\nimport defaultTools from \"./defaultTools/defaultTools\";\r\n\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { ISize } from \"core/Maths/math.size\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\nimport type { PointerInfo } from \"core/Events/pointerEvents\";\r\n\r\nimport type { PopupComponent } from \"../../../../../popupComponent\";\r\nimport { ToolSettings } from \"./toolSettings\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nimport \"./textureEditor.scss\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare const _TOOL_DATA_: IToolData;\r\ninterface ITextureEditorComponentProps {\r\n    texture: BaseTexture;\r\n    url: string;\r\n    window: React.RefObject<PopupComponent>;\r\n    onUpdate: () => void;\r\n}\r\n\r\ninterface ITextureEditorComponentState {\r\n    tools: ITool[];\r\n    activeToolIndex: number;\r\n    metadata: IMetadata;\r\n    channels: IChannel[];\r\n    pixelData: IPixelData;\r\n    face: number;\r\n    mipLevel: number;\r\n    pickerOpen: boolean;\r\n}\r\n\r\nexport interface IToolParameters {\r\n    /** The visible scene in the editor. Useful for adding pointer and keyboard events. */\r\n    scene: Scene;\r\n    /** The 2D canvas which you can sample pixel data from. Tools should not paint directly on this canvas. */\r\n    canvas2D: HTMLCanvasElement;\r\n    /** The 3D scene which tools can add post processes to. */\r\n    scene3D: Scene;\r\n    /** The size of the texture. */\r\n    size: ISize;\r\n    /** Pushes the editor texture back to the original scene. This should be called every time a tool makes any modification to a texture. */\r\n    updateTexture: () => void;\r\n    /** The metadata object which is shared between all tools. Feel free to store any information here. Do not set this directly: instead call setMetadata. */\r\n    metadata: IMetadata;\r\n    /** Call this when you want to mutate the metadata. */\r\n    setMetadata: (data: any) => void;\r\n    /** Returns the texture coordinates under the cursor */\r\n    getMouseCoordinates: (pointerInfo: PointerInfo) => Vector2;\r\n    /** Provides a canvas that you can use the canvas API to paint on. */\r\n    startPainting: () => Promise<CanvasRenderingContext2D>;\r\n    /** After you have painted on your canvas, call this method to push the updates back to the texture. */\r\n    updatePainting: () => void;\r\n    /** Call this when you are finished painting. */\r\n    stopPainting: () => void;\r\n    /** Returns whether the tool should be allowed to interact */\r\n    interactionEnabled: () => boolean;\r\n}\r\n\r\nexport interface IToolGUIProps {\r\n    instance: IToolType;\r\n}\r\n\r\n/** An interface representing the definition of a tool */\r\nexport interface IToolData {\r\n    /** Name to display on the toolbar */\r\n    name: string;\r\n    /** A class definition for the tool including setup and cleanup methods */\r\n    type: IToolConstructable;\r\n    /**  An SVG icon encoded in Base64 */\r\n    icon: string;\r\n    /** Whether the tool uses postprocesses */\r\n    is3D?: boolean;\r\n    cursor?: string;\r\n    settingsComponent?: React.ComponentType<IToolGUIProps>;\r\n}\r\n\r\nexport interface IToolType {\r\n    /** Called when the tool is selected. */\r\n    setup: () => void;\r\n    /** Called when the tool is deselected. */\r\n    cleanup: () => void;\r\n    /** Optional. Called when the user resets the texture or uploads a new texture. Tools may want to reset their state when this happens. */\r\n    onReset?: () => void;\r\n}\r\n\r\n/** For constructable types, TS requires that you define a separate interface which constructs your actual interface */\r\ninterface IToolConstructable {\r\n    new (getParameters: () => IToolParameters): IToolType;\r\n}\r\n\r\nexport interface IMetadata {\r\n    color: string;\r\n    alpha: number;\r\n    select: {\r\n        x1: number;\r\n        y1: number;\r\n        x2: number;\r\n        y2: number;\r\n    };\r\n    [key: string]: any;\r\n}\r\n\r\nexport class TextureEditorComponent extends React.Component<ITextureEditorComponentProps, ITextureEditorComponentState> {\r\n    private _textureCanvasManager: TextureCanvasManager;\r\n    private _uiCanvas = React.createRef<HTMLCanvasElement>();\r\n    private _2DCanvas = React.createRef<HTMLCanvasElement>();\r\n    private _3DCanvas = React.createRef<HTMLCanvasElement>();\r\n    private _pickerRef = React.createRef<HTMLDivElement>();\r\n    private _timer: number | null;\r\n    private static _PREVIEW_UPDATE_DELAY_MS = 160;\r\n\r\n    constructor(props: ITextureEditorComponentProps) {\r\n        super(props);\r\n        const channels: IChannel[] = [\r\n            { name: \"Red\", visible: true, editable: true, id: \"R\", icon: require(\"./assets/channelR.svg\") },\r\n            { name: \"Green\", visible: true, editable: true, id: \"G\", icon: require(\"./assets/channelG.svg\") },\r\n            { name: \"Blue\", visible: true, editable: true, id: \"B\", icon: require(\"./assets/channelB.svg\") },\r\n        ];\r\n        if (this.props.texture.isCube) {\r\n            channels.push({ name: \"Display\", visible: true, editable: true, id: \"A\", icon: require(\"./assets/channelD.svg\") });\r\n        } else {\r\n            channels.push({ name: \"Alpha\", visible: true, editable: true, id: \"A\", icon: require(\"./assets/channelA.svg\") });\r\n        }\r\n        this.state = {\r\n            tools: [],\r\n            activeToolIndex: -1,\r\n            metadata: {\r\n                color: \"#ffffff\",\r\n                alpha: 1,\r\n                select: {\r\n                    x1: -1,\r\n                    y1: -1,\r\n                    x2: -1,\r\n                    y2: -1,\r\n                },\r\n            },\r\n            channels,\r\n            pixelData: {},\r\n            face: 0,\r\n            mipLevel: 0,\r\n            pickerOpen: false,\r\n        };\r\n        this.loadToolFromURL = this.loadToolFromURL.bind(this);\r\n        this.changeTool = this.changeTool.bind(this);\r\n        this.setMetadata = this.setMetadata.bind(this);\r\n        this.saveTexture = this.saveTexture.bind(this);\r\n        this.resetTexture = this.resetTexture.bind(this);\r\n        this.resizeTexture = this.resizeTexture.bind(this);\r\n        this.uploadTexture = this.uploadTexture.bind(this);\r\n        this.setPickerOpen = this.setPickerOpen.bind(this);\r\n        this.onPointerDown = this.onPointerDown.bind(this);\r\n    }\r\n\r\n    override componentDidMount() {\r\n        this._textureCanvasManager = new TextureCanvasManager(\r\n            this.props.texture,\r\n            this.props.window.current!.getWindow()!,\r\n            this._uiCanvas.current!,\r\n            this._2DCanvas.current!,\r\n            this._3DCanvas.current!,\r\n            (data: IPixelData) => {\r\n                this.setState({ pixelData: data });\r\n            },\r\n            this.state.metadata,\r\n            () => this.textureDidUpdate(),\r\n            (data) => this.setMetadata(data),\r\n            (mipLevel) => this.setState({ mipLevel })\r\n        );\r\n        this.addTools(defaultTools);\r\n    }\r\n\r\n    override componentDidUpdate() {\r\n        const channelsClone: IChannel[] = [];\r\n        this.state.channels.forEach((channel) => channelsClone.push({ ...channel }));\r\n        this._textureCanvasManager.channels = channelsClone;\r\n        this._textureCanvasManager.face = this.state.face;\r\n        this._textureCanvasManager.mipLevel = this.state.mipLevel;\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        this._textureCanvasManager.dispose();\r\n    }\r\n\r\n    textureDidUpdate() {\r\n        if (this._timer != null) {\r\n            window.clearTimeout(this._timer);\r\n        }\r\n        this._timer = window.setTimeout(() => {\r\n            this.props.onUpdate();\r\n            this._timer = null;\r\n        }, TextureEditorComponent._PREVIEW_UPDATE_DELAY_MS);\r\n    }\r\n\r\n    loadToolFromURL(url: string) {\r\n        Tools.LoadScript(url, () => {\r\n            this.addTools([_TOOL_DATA_]);\r\n        });\r\n    }\r\n\r\n    addTools(tools: IToolData[]) {\r\n        let newTools: ITool[] = [];\r\n        tools.forEach((toolData) => {\r\n            const tool: ITool = {\r\n                ...toolData,\r\n                instance: new toolData.type(() => this.getToolParameters()),\r\n            };\r\n            newTools = newTools.concat(tool);\r\n        });\r\n        newTools = this.state.tools.concat(newTools);\r\n        this.setState({ tools: newTools });\r\n    }\r\n\r\n    getToolParameters(): IToolParameters {\r\n        return {\r\n            scene: this._textureCanvasManager.scene,\r\n            canvas2D: this._textureCanvasManager.canvas2D,\r\n            scene3D: this._textureCanvasManager.scene3D,\r\n            size: this._textureCanvasManager.size,\r\n            updateTexture: () => this._textureCanvasManager.updateTexture(),\r\n            startPainting: () => this._textureCanvasManager.startPainting(),\r\n            stopPainting: () => this._textureCanvasManager.stopPainting(),\r\n            updatePainting: () => this._textureCanvasManager.updatePainting(),\r\n            metadata: this.state.metadata,\r\n            setMetadata: (data: any) => this.setMetadata(data),\r\n            getMouseCoordinates: (pointerInfo: PointerInfo) => this._textureCanvasManager.getMouseCoordinates(pointerInfo),\r\n            interactionEnabled: () => this._textureCanvasManager.toolInteractionEnabled(),\r\n        };\r\n    }\r\n\r\n    changeTool(index: number) {\r\n        if (index != -1) {\r\n            this._textureCanvasManager.tool = this.state.tools[index];\r\n        } else {\r\n            this._textureCanvasManager.tool = null;\r\n        }\r\n        this.setState({ activeToolIndex: index });\r\n    }\r\n\r\n    setMetadata(newMetadata: any) {\r\n        const data = {\r\n            ...this.state.metadata,\r\n            ...newMetadata,\r\n        };\r\n        this.setState({ metadata: data });\r\n        this._textureCanvasManager.metadata = data;\r\n    }\r\n\r\n    setPickerOpen(open: boolean) {\r\n        this.setState({ pickerOpen: open });\r\n    }\r\n\r\n    onPointerDown(evt: React.PointerEvent) {\r\n        if (!this._pickerRef.current?.contains(evt.target as Node)) {\r\n            this.setPickerOpen(false);\r\n        }\r\n    }\r\n\r\n    saveTexture() {\r\n        this._textureCanvasManager.saveTexture();\r\n    }\r\n\r\n    resetTexture() {\r\n        this._textureCanvasManager.reset();\r\n    }\r\n\r\n    resizeTexture(width: number, height: number) {\r\n        this._textureCanvasManager.resize({ width, height });\r\n    }\r\n\r\n    uploadTexture(file: File) {\r\n        this._textureCanvasManager.upload(file);\r\n    }\r\n\r\n    override render() {\r\n        const currentTool: ITool | undefined = this.state.tools[this.state.activeToolIndex];\r\n        let cursor = `initial`;\r\n        if (!this._textureCanvasManager?.toolInteractionEnabled()) {\r\n            cursor = `pointer`;\r\n        } else if (currentTool && currentTool.cursor) {\r\n            cursor = `url(data:image/png;base64,${currentTool.cursor}) 10 10, auto`;\r\n        }\r\n\r\n        return (\r\n            <div id=\"texture-editor\" onPointerDown={this.onPointerDown} style={{ cursor }}>\r\n                <PropertiesBar\r\n                    texture={this.props.texture}\r\n                    saveTexture={this.saveTexture}\r\n                    pixelData={this.state.pixelData}\r\n                    face={this.state.face}\r\n                    setFace={(face) => this.setState({ face })}\r\n                    resetTexture={this.resetTexture}\r\n                    resizeTexture={this.resizeTexture}\r\n                    uploadTexture={this.uploadTexture}\r\n                    mipLevel={this.state.mipLevel}\r\n                    setMipLevel={(mipLevel) => this.setState({ mipLevel })}\r\n                    size={this._textureCanvasManager?.size || this.props.texture.getSize()}\r\n                />\r\n                {!this.props.texture.isCube && (\r\n                    <ToolBar\r\n                        tools={this.state.tools}\r\n                        activeToolIndex={this.state.activeToolIndex}\r\n                        addTool={this.loadToolFromURL}\r\n                        changeTool={this.changeTool}\r\n                        metadata={this.state.metadata}\r\n                        setMetadata={this.setMetadata}\r\n                        pickerOpen={this.state.pickerOpen}\r\n                        setPickerOpen={this.setPickerOpen}\r\n                        pickerRef={this._pickerRef}\r\n                        hasAlpha={this.props.texture.textureFormat === -1 || this.props.texture.textureFormat === Constants.TEXTUREFORMAT_RGBA}\r\n                    />\r\n                )}\r\n                <ChannelsBar\r\n                    channels={this.state.channels}\r\n                    setChannels={(channels) => {\r\n                        this.setState({ channels });\r\n                    }}\r\n                />\r\n                <TextureCanvasComponent canvas2D={this._2DCanvas} canvas3D={this._3DCanvas} canvasUI={this._uiCanvas} texture={this.props.texture} />\r\n                <ToolSettings tool={currentTool} />\r\n                <BottomBar texture={this.props.texture} mipLevel={this.state.mipLevel} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
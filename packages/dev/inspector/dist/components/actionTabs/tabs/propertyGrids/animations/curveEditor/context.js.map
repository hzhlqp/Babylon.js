{"version":3,"file":"context.js","sourceRoot":"","sources":["../../../../../../../src/components/actionTabs/tabs/propertyGrids/animations/curveEditor/context.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport { Animation } from \"core/Animations/animation\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { KeyPointComponent } from \"./graph/keyPoint\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { AnimationGroup, TargetedAnimation } from \"core/Animations/animationGroup\";\r\nimport type { Animatable } from \"core/Animations/animatable\";\r\nimport type { AnimationKeyInterpolation } from \"core/Animations/animationKey\";\r\n\r\nexport interface IActiveAnimationChangedOptions {\r\n    evaluateKeys?: boolean;\r\n    frame?: boolean;\r\n    range?: boolean;\r\n}\r\nexport class Context {\r\n    title: string;\r\n    animations: Nullable<Animation[] | TargetedAnimation[]>;\r\n    scene: Scene;\r\n    target: Nullable<IAnimatable>;\r\n    rootAnimationGroup: Nullable<AnimationGroup>;\r\n    activeAnimations: Animation[] = [];\r\n    activeChannels: { [key: number]: string } = {};\r\n    activeKeyPoints: Nullable<KeyPointComponent[]>;\r\n    mainKeyPoint: Nullable<KeyPointComponent>;\r\n    snippetId: string;\r\n    useTargetAnimations: boolean;\r\n\r\n    activeFrame: number;\r\n    fromKey: number;\r\n    toKey: number;\r\n    useExistingPlayRange: boolean = false;\r\n    forwardAnimation = true;\r\n    isPlaying: boolean;\r\n    clipLength: number;\r\n\r\n    referenceMinFrame = 0;\r\n    referenceMaxFrame = 100;\r\n\r\n    focusedInput = false;\r\n\r\n    onActiveAnimationChanged = new Observable<IActiveAnimationChangedOptions>();\r\n    onActiveKeyPointChanged = new Observable<void>();\r\n    onHostWindowResized = new Observable<void>();\r\n    onSelectAllKeys = new Observable<void>();\r\n\r\n    onActiveKeyFrameChanged = new Observable<number>();\r\n\r\n    onFrameSet = new Observable<number>();\r\n    onFrameManuallyEntered = new Observable<number>();\r\n\r\n    onMainKeyPointSet = new Observable<void>();\r\n    onMainKeyPointMoved = new Observable<void>();\r\n\r\n    onValueSet = new Observable<number>();\r\n    onValueManuallyEntered = new Observable<number>();\r\n\r\n    onFrameRequired = new Observable<void>();\r\n    onCreateOrUpdateKeyPointRequired = new Observable<void>();\r\n    onFlattenTangentRequired = new Observable<void>();\r\n    onLinearTangentRequired = new Observable<void>();\r\n    onBreakTangentRequired = new Observable<void>();\r\n    onUnifyTangentRequired = new Observable<void>();\r\n    onStepTangentRequired = new Observable<void>();\r\n\r\n    onDeleteAnimation = new Observable<Animation>();\r\n\r\n    onGraphMoved = new Observable<number>();\r\n    onGraphScaled = new Observable<number>();\r\n\r\n    onRangeUpdated = new Observable<void>();\r\n\r\n    onMoveToFrameRequired = new Observable<number>();\r\n\r\n    onAnimationStateChanged = new Observable<void>();\r\n\r\n    onDeleteKeyActiveKeyPoints = new Observable<void>();\r\n\r\n    onSelectionRectangleMoved = new Observable<DOMRect>();\r\n\r\n    onAnimationsLoaded = new Observable<void>();\r\n\r\n    onEditAnimationRequired = new Observable<Animation>();\r\n    onEditAnimationUIClosed = new Observable<void>();\r\n\r\n    onClipLengthIncreased = new Observable<number>();\r\n    onClipLengthDecreased = new Observable<number>();\r\n\r\n    onInterpolationModeSet = new Observable<{ keyId: number; value: AnimationKeyInterpolation }>();\r\n\r\n    onSelectToActivated = new Observable<{ from: number; to: number }>();\r\n\r\n    onRangeFrameBarResized = new Observable<number>();\r\n    onPlayheadMoved = new Observable<number>();\r\n\r\n    lockLastFrameValue: boolean = false;\r\n    lockLastFrameFrame: boolean = false;\r\n\r\n    // value frame inTangent outTangent\r\n    onActiveKeyDataChanged = new Observable<number>();\r\n    public prepare() {\r\n        this.isPlaying = false;\r\n        if (!this.animations || !this.animations.length) {\r\n            return;\r\n        }\r\n\r\n        const animation = this.useTargetAnimations ? (this.animations[0] as TargetedAnimation).animation : (this.animations[0] as Animation);\r\n        const keys = animation.getKeys();\r\n\r\n        this.referenceMinFrame = 0;\r\n        this.referenceMaxFrame = keys[keys.length - 1].frame;\r\n\r\n        if (!this.useExistingPlayRange) {\r\n            this.fromKey = this.referenceMinFrame;\r\n            this.toKey = this.referenceMaxFrame;\r\n        }\r\n\r\n        this.snippetId = animation.snippetId;\r\n\r\n        this.clipLength = this.referenceMaxFrame;\r\n\r\n        if (!animation || !animation.hasRunningRuntimeAnimations) {\r\n            return;\r\n        }\r\n        this.isPlaying = true;\r\n    }\r\n\r\n    public play(forward: boolean) {\r\n        this.isPlaying = true;\r\n        this.scene.stopAnimation(this.target);\r\n        let animatable: Animatable;\r\n        if (forward) {\r\n            if (this.rootAnimationGroup) {\r\n                this.rootAnimationGroup.start(true, 1.0, this.fromKey, this.toKey);\r\n            } else {\r\n                animatable = this.scene.beginAnimation(this.target, this.fromKey, this.toKey, true);\r\n            }\r\n        } else {\r\n            if (this.rootAnimationGroup) {\r\n                this.rootAnimationGroup.start(true, 1.0, this.toKey, this.fromKey);\r\n            } else {\r\n                animatable = this.scene.beginAnimation(this.target, this.toKey, this.fromKey, true);\r\n            }\r\n        }\r\n        this.forwardAnimation = forward;\r\n\r\n        // Move\r\n        if (this.rootAnimationGroup) {\r\n            this.rootAnimationGroup.goToFrame(this.activeFrame);\r\n        } else {\r\n            animatable!.goToFrame(this.activeFrame);\r\n        }\r\n\r\n        this.onAnimationStateChanged.notifyObservers();\r\n    }\r\n\r\n    public stop() {\r\n        this.isPlaying = false;\r\n        if (this.rootAnimationGroup) {\r\n            this.rootAnimationGroup.stop();\r\n        } else {\r\n            this.scene.stopAnimation(this.target);\r\n        }\r\n\r\n        this.onAnimationStateChanged.notifyObservers();\r\n    }\r\n\r\n    public moveToFrame(frame: number) {\r\n        if (!this.animations || !this.animations.length) {\r\n            return;\r\n        }\r\n\r\n        this.activeFrame = frame;\r\n\r\n        if (!this.isPlaying) {\r\n            if (this.rootAnimationGroup) {\r\n                this.rootAnimationGroup.start(false, 1.0, this.fromKey, this.toKey);\r\n            } else {\r\n                this.scene.beginAnimation(this.target, this.fromKey, this.toKey, false);\r\n            }\r\n        }\r\n\r\n        for (const animationEntry of this.animations) {\r\n            const animation = this.useTargetAnimations ? (animationEntry as TargetedAnimation).animation : (animationEntry as Animation);\r\n            if (!animation.hasRunningRuntimeAnimations) {\r\n                return;\r\n            }\r\n\r\n            for (const runtimeAnimation of animation.runtimeAnimations) {\r\n                runtimeAnimation.goToFrame(frame);\r\n            }\r\n        }\r\n\r\n        this.stop();\r\n    }\r\n\r\n    public refreshTarget() {\r\n        if (!this.animations || !this.animations.length) {\r\n            return;\r\n        }\r\n\r\n        if (this.isPlaying) {\r\n            return;\r\n        }\r\n\r\n        this.moveToFrame(this.activeFrame);\r\n    }\r\n\r\n    public clearSelection() {\r\n        this.activeKeyPoints = [];\r\n        this.onActiveKeyPointChanged.notifyObservers();\r\n    }\r\n\r\n    public enableChannel(animation: Animation, color: string) {\r\n        this.activeChannels[animation.uniqueId] = color;\r\n    }\r\n\r\n    public disableChannel(animation: Animation) {\r\n        delete this.activeChannels[animation.uniqueId];\r\n    }\r\n\r\n    public isChannelEnabled(animation: Animation, color: string) {\r\n        return this.activeChannels[animation.uniqueId] === undefined || this.activeChannels[animation.uniqueId] === color;\r\n    }\r\n\r\n    public getActiveChannel(animation: Animation) {\r\n        return this.activeChannels[animation.uniqueId];\r\n    }\r\n\r\n    public resetAllActiveChannels() {\r\n        this.clearSelection();\r\n        this.activeChannels = {};\r\n    }\r\n\r\n    public getAnimationSortIndex(animation: Animation) {\r\n        if (!this.animations) {\r\n            return -1;\r\n        }\r\n\r\n        for (let index = 0; index < this.animations?.length; index++) {\r\n            if (animation === (this.useTargetAnimations ? (this.animations[0] as TargetedAnimation).animation : (this.animations[index] as Animation))) {\r\n                return index;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    public getPrevKey(): Nullable<number> {\r\n        if (!this.animations || !this.animations.length || this.activeAnimations.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        let prevKey = -Number.MAX_VALUE;\r\n\r\n        for (const animation of this.activeAnimations) {\r\n            const keys = animation.getKeys();\r\n\r\n            for (const key of keys) {\r\n                if (key.frame < this.activeFrame && key.frame > prevKey) {\r\n                    prevKey = key.frame;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (prevKey === -Number.MAX_VALUE) {\r\n            prevKey = this.fromKey;\r\n        }\r\n\r\n        return prevKey;\r\n    }\r\n\r\n    public getNextKey(): Nullable<number> {\r\n        if (!this.animations || !this.animations.length) {\r\n            return null;\r\n        }\r\n\r\n        let nextKey = Number.MAX_VALUE;\r\n\r\n        for (const animation of this.activeAnimations) {\r\n            const keys = animation.getKeys();\r\n\r\n            for (const key of keys) {\r\n                if (key.frame > this.activeFrame && key.frame < nextKey) {\r\n                    nextKey = key.frame;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (nextKey === Number.MAX_VALUE) {\r\n            nextKey = this.toKey;\r\n        }\r\n\r\n        return nextKey;\r\n    }\r\n\r\n    /**\r\n     * If any current active animation has a key at the received frameNumber,\r\n     * return the index of the animation in the active animation array, and\r\n     * the index of the frame on the animation.\r\n     * @param frameNumber the frame number to look for\r\n     * @returns null if no key was found, or an object with the animation index and key index\r\n     */\r\n    public getKeyAtAnyFrameIndex(frameNumber: number) {\r\n        if (!this.animations || !this.animations.length || !this.activeAnimations || !this.activeAnimations.length) {\r\n            return null;\r\n        }\r\n\r\n        let animIdx = 0;\r\n        for (const animation of this.activeAnimations) {\r\n            const keys = animation.getKeys();\r\n            let idx = 0;\r\n            for (const key of keys) {\r\n                if (Math.floor(frameNumber - key.frame) === 0) {\r\n                    return { animationIndex: animIdx, keyIndex: idx };\r\n                }\r\n                idx++;\r\n            }\r\n            animIdx++;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @returns true if any active animation has a quaternion animation\r\n     */\r\n    public hasActiveQuaternionAnimationKeyPoints() {\r\n        const activeAnimData = this.activeKeyPoints?.map((keyPointComponent) => keyPointComponent.props.curve.animation.dataType);\r\n        const quaternionAnimData = activeAnimData?.filter((type) => type === Animation.ANIMATIONTYPE_QUATERNION);\r\n        const hasActiveQuaternionAnimation = (quaternionAnimData?.length || 0) > 0;\r\n        return hasActiveQuaternionAnimation;\r\n    }\r\n}\r\n"]}
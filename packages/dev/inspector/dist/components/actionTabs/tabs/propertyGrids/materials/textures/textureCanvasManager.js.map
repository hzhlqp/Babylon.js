{"version":3,"file":"textureCanvasManager.js","sourceRoot":"","sources":["../../../../../../../src/components/actionTabs/tabs/propertyGrids/materials/textures/textureCanvasManager.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { Engine } from \"core/Engines/engine\";\r\nimport { Scene } from \"core/scene\";\r\nimport { Vector3, Vector2 } from \"core/Maths/math.vector\";\r\nimport { Color4, Color3 } from \"core/Maths/math.color\";\r\nimport { FreeCamera } from \"core/Cameras/freeCamera\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { CreatePlane } from \"core/Meshes/Builders/planeBuilder\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { Camera } from \"core/Cameras/camera\";\r\n\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { HtmlElementTexture } from \"core/Materials/Textures/htmlElementTexture\";\r\nimport type { InternalTexture } from \"core/Materials/Textures/internalTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport type { RawCubeTexture } from \"core/Materials/Textures/rawCubeTexture\";\r\nimport type { CubeTexture } from \"core/Materials/Textures/cubeTexture\";\r\nimport { ShaderMaterial } from \"core/Materials/shaderMaterial\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\n\r\nimport type { ISize } from \"core/Maths/math.size\";\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\nimport type { PointerInfo } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport { KeyboardEventTypes } from \"core/Events/keyboardEvents\";\r\n\r\nimport { TextureHelper } from \"../../../../../../textureHelper\";\r\n\r\nimport type { ITool } from \"./toolBar\";\r\nimport type { IChannel } from \"./channelsBar\";\r\nimport type { IMetadata } from \"./textureEditorComponent\";\r\n\r\nimport { canvasShader } from \"./canvasShader\";\r\n\r\nimport type { IWheelEvent } from \"core/Events/deviceInputEvents\";\r\n\r\nexport interface IPixelData {\r\n    x?: number;\r\n    y?: number;\r\n    r?: number;\r\n    g?: number;\r\n    b?: number;\r\n    a?: number;\r\n}\r\n\r\nexport class TextureCanvasManager {\r\n    private _engine: Engine;\r\n    private _scene: Scene;\r\n    private _camera: FreeCamera;\r\n    private _cameraPos: Vector2;\r\n\r\n    private _scale: number;\r\n    private _isPanning: boolean = false;\r\n    private _mouseX: number;\r\n    private _mouseY: number;\r\n\r\n    private _uiCanvas: HTMLCanvasElement;\r\n\r\n    private _size: ISize;\r\n\r\n    /** The canvas we paint onto using the canvas API */\r\n    private _2DCanvas: HTMLCanvasElement;\r\n    /** The canvas we apply post processes to */\r\n    private _3DCanvas: HTMLCanvasElement;\r\n    /** The canvas which handles channel filtering */\r\n    private _channelsTexture: HtmlElementTexture;\r\n\r\n    private _3DEngine: Engine;\r\n    private _3DPlane: Mesh;\r\n    private _3DCanvasTexture: HtmlElementTexture;\r\n    private _3DScene: Scene;\r\n\r\n    private _channels: IChannel[] = [];\r\n    private _face: number = 0;\r\n    private _mipLevel: number = 0;\r\n\r\n    /** The texture from the original engine that we invoked the editor on */\r\n    private _originalTexture: BaseTexture;\r\n    /** This is a hidden texture which is only responsible for holding the actual texture memory in the original engine */\r\n    private _target: HtmlElementTexture | RawCubeTexture;\r\n    private _originalTextureProperties: {\r\n        _texture: Nullable<InternalTexture>;\r\n        url: Nullable<string>;\r\n        _forceSerialize: boolean;\r\n    };\r\n    /** Keeps track of whether we have modified the texture */\r\n    private _didEdit: boolean = false;\r\n\r\n    private _plane: Mesh;\r\n    private _planeMaterial: ShaderMaterial;\r\n\r\n    /** Tracks which keys are currently pressed */\r\n    private _keyMap: any = {};\r\n    /** Tracks which mouse buttons are currently pressed */\r\n    private _buttonsPressed = 0;\r\n\r\n    private readonly ZOOM_MOUSE_SPEED: number = 0.001;\r\n    private readonly ZOOM_KEYBOARD_SPEED: number = 0.4;\r\n    private readonly ZOOM_IN_KEY: string = \"+\";\r\n    private readonly ZOOM_OUT_KEY: string = \"-\";\r\n\r\n    private readonly PAN_SPEED: number = 0.003;\r\n    private readonly PAN_KEY = \"Space\";\r\n\r\n    private readonly MIN_SCALE: number = 0.01;\r\n    private readonly GRID_SCALE: number = 0.047;\r\n    private readonly MAX_SCALE: number = 10;\r\n\r\n    private readonly SELECT_ALL_KEY = \"KeyA\";\r\n    private readonly SAVE_KEY = \"KeyS\";\r\n    private readonly RESET_KEY = \"KeyR\";\r\n    private readonly DESELECT_KEY = \"Escape\";\r\n\r\n    /** The number of milliseconds between texture updates */\r\n    private readonly PUSH_FREQUENCY = 32;\r\n\r\n    private _tool: Nullable<ITool>;\r\n\r\n    private _setPixelData: (pixelData: IPixelData) => void;\r\n    private _setMipLevel: (mipLevel: number) => void;\r\n\r\n    private _window: Window;\r\n\r\n    private _metadata: IMetadata;\r\n\r\n    private _editing3D: boolean = false;\r\n\r\n    private _onUpdate: () => void;\r\n    private _setMetadata: (metadata: any) => void;\r\n\r\n    private _imageData: Uint8Array | Uint8ClampedArray;\r\n    private _canPush: boolean = true;\r\n    private _shouldPush: boolean = false;\r\n    private _paintCanvas: HTMLCanvasElement;\r\n\r\n    public constructor(\r\n        texture: BaseTexture,\r\n        window: Window,\r\n        canvasUI: HTMLCanvasElement,\r\n        canvas2D: HTMLCanvasElement,\r\n        canvas3D: HTMLCanvasElement,\r\n        setPixelData: (pixelData: IPixelData) => void,\r\n        metadata: IMetadata,\r\n        onUpdate: () => void,\r\n        setMetadata: (metadata: any) => void,\r\n        setMipLevel: (level: number) => void\r\n    ) {\r\n        this._window = window;\r\n\r\n        this._uiCanvas = canvasUI;\r\n        this._2DCanvas = canvas2D;\r\n        this._3DCanvas = canvas3D;\r\n        this._paintCanvas = document.createElement(\"canvas\");\r\n        this._setPixelData = setPixelData;\r\n        this._metadata = metadata;\r\n        this._onUpdate = onUpdate;\r\n        this._setMetadata = setMetadata;\r\n        this._setMipLevel = setMipLevel;\r\n\r\n        this._originalTexture = texture;\r\n        this._originalTextureProperties = {\r\n            _texture: this._originalTexture._texture,\r\n            url: (this._originalTexture as Texture).url,\r\n            _forceSerialize: this._originalTexture._forceSerialize,\r\n        };\r\n        this._engine = new Engine(this._uiCanvas, true);\r\n        this._scene = new Scene(this._engine, { virtual: true });\r\n        this._scene.clearColor = new Color4(0.11, 0.11, 0.11, 1.0);\r\n\r\n        this._camera = new FreeCamera(\"camera\", new Vector3(0, 0, -1), this._scene);\r\n        this._camera.mode = Camera.ORTHOGRAPHIC_CAMERA;\r\n        this._camera.minZ = 0.5;\r\n        this._camera.maxZ = 1.5;\r\n        this._cameraPos = new Vector2();\r\n\r\n        this.setSize(texture.getSize());\r\n\r\n        this._channelsTexture = new HtmlElementTexture(\"ct\", this._2DCanvas, {\r\n            engine: this._engine,\r\n            scene: null,\r\n            samplingMode: Texture.NEAREST_SAMPLINGMODE,\r\n            generateMipMaps: true,\r\n        });\r\n\r\n        this._3DEngine = new Engine(this._3DCanvas);\r\n        this._3DScene = new Scene(this._3DEngine, { virtual: true });\r\n        this._3DScene.clearColor = new Color4(0, 0, 0, 0);\r\n        this._3DCanvasTexture = new HtmlElementTexture(\"canvas\", this._2DCanvas, { engine: this._3DEngine, scene: this._3DScene });\r\n        this._3DCanvasTexture.hasAlpha = true;\r\n        const cam = new FreeCamera(\"camera\", new Vector3(0, 0, -1), this._3DScene);\r\n        cam.mode = Camera.ORTHOGRAPHIC_CAMERA;\r\n        [cam.orthoBottom, cam.orthoLeft, cam.orthoTop, cam.orthoRight] = [-0.5, -0.5, 0.5, 0.5];\r\n        this._3DPlane = CreatePlane(\"texture\", { width: 1, height: 1 }, this._3DScene);\r\n        this._3DPlane.hasVertexAlpha = true;\r\n        const mat = new StandardMaterial(\"material\", this._3DScene);\r\n        mat.diffuseTexture = this._3DCanvasTexture;\r\n        mat.useAlphaFromDiffuseTexture = true;\r\n        mat.disableLighting = true;\r\n        mat.emissiveColor = Color3.White();\r\n        this._3DPlane.material = mat;\r\n\r\n        this._planeMaterial = new ShaderMaterial(\"canvasShader\", this._scene, canvasShader.path, canvasShader.options);\r\n\r\n        this.grabOriginalTexture();\r\n\r\n        this._planeMaterial.setTexture(\"textureSampler\", this._channelsTexture);\r\n        this._planeMaterial.setFloat(\"r\", 1.0);\r\n        this._planeMaterial.setFloat(\"g\", 1.0);\r\n        this._planeMaterial.setFloat(\"b\", 1.0);\r\n        this._planeMaterial.setFloat(\"a\", 1.0);\r\n        this._planeMaterial.setInt(\"x1\", -1);\r\n        this._planeMaterial.setInt(\"y1\", -1);\r\n        this._planeMaterial.setInt(\"x2\", -1);\r\n        this._planeMaterial.setInt(\"y2\", -1);\r\n        this._planeMaterial.setInt(\"w\", this._size.width);\r\n        this._planeMaterial.setInt(\"h\", this._size.height);\r\n        this._planeMaterial.setInt(\"time\", 0);\r\n        this._planeMaterial.setFloat(\"showGrid\", 0.0);\r\n        this._plane.material = this._planeMaterial;\r\n\r\n        this._window.addEventListener(\"keydown\", (evt) => {\r\n            this._keyMap[evt.code] = true;\r\n            if (evt.code === this.SELECT_ALL_KEY && evt.ctrlKey) {\r\n                this._setMetadata({\r\n                    select: {\r\n                        x1: 0,\r\n                        y1: 0,\r\n                        x2: this._size.width,\r\n                        y2: this._size.height,\r\n                    },\r\n                });\r\n                evt.preventDefault();\r\n            }\r\n            if (evt.code === this.SAVE_KEY && evt.ctrlKey) {\r\n                this.saveTexture();\r\n                evt.preventDefault();\r\n            }\r\n            if (evt.code === this.RESET_KEY && evt.ctrlKey) {\r\n                this.reset();\r\n                evt.preventDefault();\r\n            }\r\n            if (evt.code === this.DESELECT_KEY) {\r\n                this._setMetadata({\r\n                    select: {\r\n                        x1: -1,\r\n                        y1: -1,\r\n                        x2: -1,\r\n                        y2: -1,\r\n                    },\r\n                });\r\n            }\r\n        });\r\n\r\n        this._window.addEventListener(\"keyup\", (evt) => {\r\n            this._keyMap[evt.code] = false;\r\n        });\r\n\r\n        this._engine.runRenderLoop(() => {\r\n            this._engine.resize();\r\n            this._scene.render();\r\n            this._planeMaterial.setInt(\"time\", new Date().getTime());\r\n        });\r\n\r\n        this._scale = 1.5 / Math.max(this._size.width, this._size.height);\r\n        this._isPanning = false;\r\n\r\n        this._scene.onBeforeRenderObservable.add(() => {\r\n            this._scale = Math.min(Math.max(this._scale, this.MIN_SCALE / Math.log2(Math.min(this._size.width, this._size.height))), this.MAX_SCALE);\r\n            if (this._scale > this.GRID_SCALE) {\r\n                this._planeMaterial.setFloat(\"showGrid\", 1.0);\r\n            } else {\r\n                this._planeMaterial.setFloat(\"showGrid\", 0.0);\r\n            }\r\n            const ratio = this._uiCanvas?.width / this._uiCanvas?.height;\r\n            const { x, y } = this._cameraPos;\r\n            this._camera.orthoBottom = y - 1 / this._scale;\r\n            this._camera.orthoTop = y + 1 / this._scale;\r\n            this._camera.orthoLeft = x - ratio / this._scale;\r\n            this._camera.orthoRight = x + ratio / this._scale;\r\n        });\r\n\r\n        this._scene.onPointerObservable.add((pointerInfo) => {\r\n            const leftButtonPressed = pointerInfo.event.buttons & 1;\r\n            const middleButtonPressed = pointerInfo.event.buttons & 4;\r\n            if (!this._isPanning) {\r\n                if ((leftButtonPressed && !(this._buttonsPressed & 1) && this._keyMap[this.PAN_KEY]) || middleButtonPressed) {\r\n                    this._isPanning = true;\r\n                    this._mouseX = pointerInfo.event.x;\r\n                    this._mouseY = pointerInfo.event.y;\r\n                }\r\n                if (middleButtonPressed) {\r\n                    this._isPanning = true;\r\n                }\r\n            } else if ((!leftButtonPressed || !this._keyMap[this.PAN_KEY]) && !middleButtonPressed) {\r\n                this._isPanning = false;\r\n            }\r\n            switch (pointerInfo.type) {\r\n                case PointerEventTypes.POINTERWHEEL: {\r\n                    const event = pointerInfo.event as IWheelEvent;\r\n                    this._scale -= event.deltaY * this.ZOOM_MOUSE_SPEED * this._scale;\r\n                    break;\r\n                }\r\n                case PointerEventTypes.POINTERMOVE:\r\n                    if (this._isPanning) {\r\n                        this._cameraPos.x -= ((pointerInfo.event.x - this._mouseX) * this.PAN_SPEED) / this._scale;\r\n                        this._cameraPos.y += ((pointerInfo.event.y - this._mouseY) * this.PAN_SPEED) / this._scale;\r\n                        this._mouseX = pointerInfo.event.x;\r\n                        this._mouseY = pointerInfo.event.y;\r\n                    }\r\n                    if (pointerInfo.pickInfo?.hit) {\r\n                        const pos = this.getMouseCoordinates(pointerInfo);\r\n                        const idx = (pos.x + pos.y * this._size.width) * 4;\r\n                        this._setPixelData({ x: pos.x, y: pos.y, r: this._imageData[idx], g: this._imageData[idx + 1], b: this._imageData[idx + 2], a: this._imageData[idx + 3] });\r\n                    } else {\r\n                        this._setPixelData({});\r\n                    }\r\n                    break;\r\n            }\r\n            this._buttonsPressed = pointerInfo.event.buttons;\r\n        });\r\n\r\n        this._scene.onKeyboardObservable.add((kbInfo) => {\r\n            switch (kbInfo.type) {\r\n                case KeyboardEventTypes.KEYDOWN:\r\n                    this._keyMap[kbInfo.event.key] = true;\r\n                    switch (kbInfo.event.key) {\r\n                        case this.ZOOM_IN_KEY:\r\n                            this._scale += this.ZOOM_KEYBOARD_SPEED * this._scale;\r\n                            break;\r\n                        case this.ZOOM_OUT_KEY:\r\n                            this._scale -= this.ZOOM_KEYBOARD_SPEED * this._scale;\r\n                            break;\r\n                    }\r\n                    break;\r\n                case KeyboardEventTypes.KEYUP:\r\n                    this._keyMap[kbInfo.event.key] = false;\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async updateTexture() {\r\n        if (this._mipLevel !== 0) {\r\n            await this._setMipLevel(0);\r\n        }\r\n        this._didEdit = true;\r\n        const element = this._editing3D ? this._3DCanvas : this._2DCanvas;\r\n        if (this._editing3D) {\r\n            this._3DCanvasTexture.update();\r\n            this._3DScene.render();\r\n        }\r\n        if (this._originalTexture.isCube) {\r\n            // TODO: fix cube map editing\r\n        } else {\r\n            if (!this._target) {\r\n                this._target = new HtmlElementTexture(\"editor\", element, {\r\n                    engine: this._originalTexture.getScene()?.getEngine()!,\r\n                    scene: null,\r\n                    samplingMode: (this._originalTexture as Texture).samplingMode,\r\n                    generateMipMaps: this._originalTextureProperties._texture?.generateMipMaps,\r\n                });\r\n            } else {\r\n                (this._target as HtmlElementTexture).element = element;\r\n            }\r\n            this.pushTexture();\r\n        }\r\n        this._originalTexture._texture = this._target._texture;\r\n        (this._originalTexture as Texture).url = null;\r\n        this._originalTexture._forceSerialize = true;\r\n        this._channelsTexture.element = element;\r\n        this.updateDisplay();\r\n        this._onUpdate();\r\n    }\r\n\r\n    private async pushTexture() {\r\n        if (this._canPush) {\r\n            const invertY = this._target.constructor.name === HtmlElementTexture.name ? false : (this._originalTexture as Texture).invertY;\r\n            (this._target as HtmlElementTexture).update(invertY);\r\n            this._target._texture?.updateSize(this._size.width, this._size.height);\r\n            if (this._editing3D) {\r\n                const bufferView = await this._3DEngine.readPixels(0, 0, this._size.width, this._size.height);\r\n                this._imageData = new Uint8Array(bufferView.buffer, 0, bufferView.byteLength);\r\n            } else {\r\n                this._imageData = this._2DCanvas.getContext(\"2d\")!.getImageData(0, 0, this._size.width, this._size.height).data;\r\n            }\r\n            this._canPush = false;\r\n            this._shouldPush = false;\r\n            setTimeout(() => {\r\n                this._canPush = true;\r\n                if (this._shouldPush) {\r\n                    this.pushTexture();\r\n                }\r\n            }, this.PUSH_FREQUENCY);\r\n        } else {\r\n            this._shouldPush = true;\r\n        }\r\n    }\r\n\r\n    public async startPainting(): Promise<CanvasRenderingContext2D> {\r\n        if (this._mipLevel != 0) {\r\n            await this._setMipLevel(0);\r\n        }\r\n        let x = 0,\r\n            y = 0,\r\n            w = this._size.width,\r\n            h = this._size.height;\r\n        if (this._metadata.select.x1 != -1) {\r\n            x = this._metadata.select.x1;\r\n            y = this._metadata.select.y1;\r\n            w = this._metadata.select.x2 - this._metadata.select.x1;\r\n            h = this._metadata.select.y2 - this._metadata.select.y1;\r\n        }\r\n        this._paintCanvas.width = w;\r\n        this._paintCanvas.height = h;\r\n        const ctx = this._paintCanvas.getContext(\"2d\")!;\r\n        ctx.imageSmoothingEnabled = false;\r\n        ctx.drawImage(this._2DCanvas, x, y, w, h, 0, 0, w, h);\r\n        return ctx;\r\n    }\r\n\r\n    public updatePainting() {\r\n        let x = 0,\r\n            y = 0,\r\n            w = this._size.width,\r\n            h = this._size.height;\r\n        if (this._metadata.select.x1 != -1) {\r\n            x = this._metadata.select.x1;\r\n            y = this._metadata.select.y1;\r\n            w = this._metadata.select.x2 - this._metadata.select.x1;\r\n            h = this._metadata.select.y2 - this._metadata.select.y1;\r\n        }\r\n        let editingAllChannels = true;\r\n        this._channels.forEach((channel) => {\r\n            if (!channel.editable) {\r\n                editingAllChannels = false;\r\n            }\r\n        });\r\n        let oldData: Uint8ClampedArray;\r\n        if (!editingAllChannels) {\r\n            oldData = this._2DCanvas.getContext(\"2d\")!.getImageData(x, y, w, h).data;\r\n        }\r\n        const ctx = this._paintCanvas.getContext(\"2d\")!;\r\n        const ctx2D = this.canvas2D.getContext(\"2d\")!;\r\n        ctx2D.globalAlpha = 1.0;\r\n        ctx2D.globalCompositeOperation = \"destination-out\";\r\n        ctx2D.fillStyle = \"white\";\r\n        ctx2D.fillRect(x, y, w, h);\r\n        ctx2D.imageSmoothingEnabled = false;\r\n        // If we're not editing all channels, we must process the pixel data\r\n        if (!editingAllChannels) {\r\n            const newData = ctx.getImageData(0, 0, w, h);\r\n            const nd = newData.data;\r\n            this._channels.forEach((channel, index) => {\r\n                if (!channel.editable) {\r\n                    for (let i = index; i < w * h * 4; i += 4) {\r\n                        nd[i] = oldData[i];\r\n                    }\r\n                }\r\n            });\r\n            ctx2D.globalCompositeOperation = \"source-over\";\r\n            ctx2D.globalAlpha = 1.0;\r\n            ctx2D.putImageData(newData, x, y);\r\n        } else {\r\n            ctx2D.globalCompositeOperation = \"source-over\";\r\n            ctx2D.globalAlpha = 1.0;\r\n            // We want to use drawImage wherever possible since it is much faster than putImageData\r\n            ctx2D.drawImage(ctx.canvas, x, y);\r\n        }\r\n        this.updateTexture();\r\n    }\r\n\r\n    public stopPainting(): void {\r\n        this._paintCanvas.getContext(\"2d\")!.clearRect(0, 0, this._paintCanvas.width, this._paintCanvas.height);\r\n    }\r\n\r\n    private updateDisplay() {\r\n        this._3DScene.render();\r\n        this._channelsTexture.update(true);\r\n    }\r\n\r\n    public set channels(channels: IChannel[]) {\r\n        // Determine if we need to re-render the texture. This is an expensive operation, so we should only do it if channel visibility has changed.\r\n        let needsRender = false;\r\n        if (channels.length !== this._channels.length) {\r\n            needsRender = true;\r\n        } else {\r\n            channels.forEach((channel, index) => {\r\n                if (channel.visible !== this._channels[index].visible) {\r\n                    needsRender = true;\r\n                    this._planeMaterial.setFloat(channel.id.toLowerCase(), channel.visible ? 1.0 : 0.0);\r\n                }\r\n            });\r\n        }\r\n        this._channels = channels;\r\n        if (needsRender) {\r\n            this.updateDisplay();\r\n        }\r\n    }\r\n\r\n    public paintPixelsOnCanvas(pixelData: Uint8Array, canvas: HTMLCanvasElement) {\r\n        const ctx = canvas.getContext(\"2d\")!;\r\n        const imgData = ctx.createImageData(canvas.width, canvas.height);\r\n        imgData.data.set(pixelData);\r\n        ctx.putImageData(imgData, 0, 0);\r\n    }\r\n\r\n    public async grabOriginalTexture() {\r\n        // Grab image data from original texture and paint it onto the context of a DynamicTexture\r\n        this.setSize(this._originalTexture.getSize());\r\n        const data = await TextureHelper.GetTextureDataAsync(\r\n            this._originalTexture,\r\n            this._size.width,\r\n            this._size.height,\r\n            this._face,\r\n            { R: true, G: true, B: true, A: true },\r\n            undefined,\r\n            this._mipLevel\r\n        );\r\n        this._imageData = data;\r\n        this.paintPixelsOnCanvas(data, this._2DCanvas);\r\n        this._3DCanvasTexture.update();\r\n        this.updateDisplay();\r\n        return data;\r\n    }\r\n\r\n    public getMouseCoordinates(pointerInfo: PointerInfo) {\r\n        if (pointerInfo.pickInfo?.hit) {\r\n            const x = Math.floor(pointerInfo.pickInfo.getTextureCoordinates()!.x * this._size.width);\r\n            const y = Math.floor((1 - pointerInfo.pickInfo.getTextureCoordinates()!.y) * this._size.height);\r\n            return new Vector2(x, y);\r\n        } else {\r\n            return new Vector2();\r\n        }\r\n    }\r\n\r\n    public get scene() {\r\n        return this._scene;\r\n    }\r\n\r\n    public get canvas2D() {\r\n        return this._2DCanvas;\r\n    }\r\n\r\n    public get size() {\r\n        return this._size;\r\n    }\r\n\r\n    public set tool(tool: Nullable<ITool>) {\r\n        if (this._tool) {\r\n            this._tool.instance.cleanup();\r\n        }\r\n        this._tool = tool;\r\n        if (this._tool) {\r\n            this._tool.instance.setup();\r\n            if (this._editing3D && !this._tool.is3D) {\r\n                this._editing3D = false;\r\n                this._2DCanvas.getContext(\"2d\")?.drawImage(this._3DCanvas, 0, 0);\r\n            } else if (!this._editing3D && this._tool.is3D) {\r\n                this._editing3D = true;\r\n                this.updateTexture();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get tool() {\r\n        return this._tool;\r\n    }\r\n\r\n    public set face(face: number) {\r\n        if (this._face !== face) {\r\n            this._face = face;\r\n            this.grabOriginalTexture();\r\n            this.updateDisplay();\r\n        }\r\n    }\r\n\r\n    public set mipLevel(mipLevel: number) {\r\n        if (this._mipLevel === mipLevel) {\r\n            return;\r\n        }\r\n        this._mipLevel = mipLevel;\r\n        this.grabOriginalTexture();\r\n    }\r\n\r\n    /** Returns the 3D scene used for postprocesses */\r\n    public get scene3D() {\r\n        return this._3DScene;\r\n    }\r\n\r\n    public set metadata(metadata: IMetadata) {\r\n        this._metadata = metadata;\r\n        const { x1, y1, x2, y2 } = metadata.select;\r\n        this._planeMaterial.setInt(\"x1\", x1);\r\n        this._planeMaterial.setInt(\"y1\", y1);\r\n        this._planeMaterial.setInt(\"x2\", x2);\r\n        this._planeMaterial.setInt(\"y2\", y2);\r\n    }\r\n\r\n    private makePlane() {\r\n        if (this._plane) {\r\n            this._plane.dispose();\r\n        }\r\n        this._plane = CreatePlane(\"plane\", { width: this._size.width, height: this._size.height }, this._scene);\r\n        this._plane.enableEdgesRendering();\r\n        this._plane.edgesWidth = 4.0;\r\n        this._plane.edgesColor = new Color4(1, 1, 1, 1);\r\n        this._plane.enablePointerMoveEvents = true;\r\n        this._plane.material = this._planeMaterial;\r\n    }\r\n\r\n    public reset(): void {\r\n        if (this._tool && this._tool.instance.onReset) {\r\n            this._tool.instance.onReset();\r\n        }\r\n        this._originalTexture._texture = this._originalTextureProperties._texture;\r\n        (this._originalTexture as Texture).url = this._originalTextureProperties.url;\r\n        this._originalTexture._forceSerialize = this._originalTextureProperties._forceSerialize;\r\n        this.grabOriginalTexture();\r\n        this.makePlane();\r\n        this._didEdit = false;\r\n        this._onUpdate();\r\n    }\r\n\r\n    public async resize(newSize: ISize) {\r\n        const data = await TextureHelper.GetTextureDataAsync(this._originalTexture, newSize.width, newSize.height, this._face, { R: true, G: true, B: true, A: true });\r\n        this.setSize(newSize);\r\n        this.paintPixelsOnCanvas(data, this._2DCanvas);\r\n        this.updateTexture();\r\n        this._didEdit = true;\r\n    }\r\n\r\n    public setSize(size: ISize) {\r\n        const oldSize = this._size;\r\n        this._size = size;\r\n        this._2DCanvas.width = this._size.width;\r\n        this._2DCanvas.height = this._size.height;\r\n        this._3DCanvas.width = this._size.width;\r\n        this._3DCanvas.height = this._size.height;\r\n        if (this._planeMaterial) {\r\n            this._planeMaterial.setInt(\"w\", this._size.width);\r\n            this._planeMaterial.setInt(\"h\", this._size.height);\r\n        }\r\n        if (!oldSize || oldSize.width != size.width || oldSize.height != size.height) {\r\n            this._cameraPos.x = 0;\r\n            this._cameraPos.y = 0;\r\n            this._scale = 1.5 / Math.max(this._size.width, this._size.height);\r\n        }\r\n        this.makePlane();\r\n    }\r\n\r\n    public upload(file: File) {\r\n        Tools.ReadFile(\r\n            file,\r\n            (data) => {\r\n                const blob = new Blob([data], { type: \"octet/stream\" });\r\n                let extension: string | undefined = undefined;\r\n                if (file.name.toLowerCase().indexOf(\".dds\") > 0) {\r\n                    extension = \".dds\";\r\n                } else if (file.name.toLowerCase().indexOf(\".env\") > 0) {\r\n                    extension = \".env\";\r\n                }\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(blob);\r\n                reader.onloadend = () => {\r\n                    const base64data = reader.result as string;\r\n\r\n                    if (extension === \".dds\" || extension === \".env\") {\r\n                        (this._originalTexture as CubeTexture).updateURL(base64data, extension, () => this.grabOriginalTexture());\r\n                    } else {\r\n                        const texture = new Texture(base64data, this._scene, this._originalTexture.noMipmap, false, Texture.NEAREST_SAMPLINGMODE, () => {\r\n                            TextureHelper.GetTextureDataAsync(texture, texture.getSize().width, texture.getSize().height, 0, { R: true, G: true, B: true, A: true }).then(\r\n                                async (pixels) => {\r\n                                    if (this._tool && this._tool.instance.onReset) {\r\n                                        this._tool.instance.onReset();\r\n                                    }\r\n                                    texture.dispose();\r\n                                    this.setSize(texture.getSize());\r\n                                    this.paintPixelsOnCanvas(pixels, this._2DCanvas);\r\n                                    await this.updateTexture();\r\n                                    this._setMipLevel(0);\r\n                                }\r\n                            );\r\n                        });\r\n                    }\r\n                };\r\n            },\r\n            undefined,\r\n            true\r\n        );\r\n    }\r\n\r\n    public saveTexture() {\r\n        const canvas = this._editing3D ? this._3DCanvas : this._2DCanvas;\r\n        Tools.ToBlob(canvas, (blob) => {\r\n            Tools.Download(blob!, this._originalTexture.name);\r\n        });\r\n    }\r\n\r\n    public toolInteractionEnabled() {\r\n        return !(this._keyMap[this.PAN_KEY] || this._isPanning);\r\n    }\r\n\r\n    public dispose() {\r\n        if (this._didEdit) {\r\n            this._originalTextureProperties._texture?.dispose();\r\n        }\r\n        if (this._tool) {\r\n            this._tool.instance.cleanup();\r\n        }\r\n        this._paintCanvas.parentNode?.removeChild(this._paintCanvas);\r\n        this._3DPlane.dispose();\r\n        this._3DCanvasTexture.dispose();\r\n        this._3DScene.dispose();\r\n        this._3DEngine.dispose();\r\n        this._plane.dispose();\r\n        this._channelsTexture.dispose();\r\n        this._planeMaterial.dispose();\r\n        this._camera.dispose();\r\n        this._scene.dispose();\r\n        this._engine.dispose();\r\n    }\r\n}\r\n"]}
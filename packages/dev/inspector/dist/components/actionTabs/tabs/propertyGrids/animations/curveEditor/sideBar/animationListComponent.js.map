{"version":3,"file":"animationListComponent.js","sourceRoot":"","sources":["../../../../../../../../src/components/actionTabs/tabs/propertyGrids/animations/curveEditor/sideBar/animationListComponent.tsx"],"names":[],"mappings":";AAEA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAG/B,OAAO,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;AAapE,MAAM,OAAO,sBAAuB,SAAQ,KAAK,CAAC,SAAqE;IAKnH,YAAY,KAAmC;QAC3C,KAAK,CAAC,KAAK,CAAC,CAAC;QAEb,IAAI,CAAC,KAAK,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;QAEjC,IAAI,CAAC,gCAAgC,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,uBAAuB,CAAC,GAAG,CAAC,GAAG,EAAE;YACxF,IAAI,CAAC,QAAQ,CAAC;gBACV,SAAS,EAAE,KAAK;aACnB,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gCAAgC,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,uBAAuB,CAAC,GAAG,CAAC,GAAG,EAAE;YACxF,IAAI,CAAC,QAAQ,CAAC;gBACV,SAAS,EAAE,IAAI;aAClB,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,EAAE;YAC5E,IAAI,CAAC,WAAW,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;IACP,CAAC;IAEQ,oBAAoB;QACzB,IAAI,IAAI,CAAC,gCAAgC,EAAE;YACvC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,uBAAuB,CAAC,MAAM,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;SAC5F;QAED,IAAI,IAAI,CAAC,gCAAgC,EAAE;YACvC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,uBAAuB,CAAC,MAAM,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;SAC5F;QAED,IAAI,IAAI,CAAC,0BAA0B,EAAE;YACjC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;SAChF;IACL,CAAC;IAEe,MAAM;QAClB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;YACvB,OAAO,IAAI,CAAC;SACf;QAED,OAAO,CACH,cAAK,EAAE,EAAC,gBAAgB,YACnB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,CAAgC,EAAE,CAAS,EAAE,EAAE;gBAChF,OAAO,CACH,KAAC,uBAAuB,IAEpB,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,EACnC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,EAC3B,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAE,CAAuB,CAAC,SAAS,CAAC,CAAC,CAAE,CAAe,IAHpG,CAAC,CAIR,CACL,CAAC;YACN,CAAC,CAAC,GACA,CACT,CAAC;IACN,CAAC;CACJ","sourcesContent":["import type { Observer } from \"core/Misc/observable\";\r\nimport type { Nullable } from \"core/types\";\r\nimport * as React from \"react\";\r\nimport type { GlobalState } from \"../../../../../../globalState\";\r\nimport type { Context } from \"../context\";\r\nimport { AnimationEntryComponent } from \"./animationEntryComponent\";\r\nimport type { Animation } from \"core/Animations/animation\";\r\nimport type { TargetedAnimation } from \"core/Animations/animationGroup\";\r\n\r\ninterface IAnimationListComponentProps {\r\n    globalState: GlobalState;\r\n    context: Context;\r\n}\r\n\r\ninterface IAnimationListComponentState {\r\n    isVisible: boolean;\r\n}\r\n\r\nexport class AnimationListComponent extends React.Component<IAnimationListComponentProps, IAnimationListComponentState> {\r\n    private _onEditAnimationRequiredObserver: Nullable<Observer<Animation>>;\r\n    private _onEditAnimationUIClosedObserver: Nullable<Observer<void>>;\r\n    private _onDeleteAnimationObserver: Nullable<Observer<Animation>>;\r\n\r\n    constructor(props: IAnimationListComponentProps) {\r\n        super(props);\r\n\r\n        this.state = { isVisible: true };\r\n\r\n        this._onEditAnimationRequiredObserver = this.props.context.onEditAnimationRequired.add(() => {\r\n            this.setState({\r\n                isVisible: false,\r\n            });\r\n        });\r\n\r\n        this._onEditAnimationUIClosedObserver = this.props.context.onEditAnimationUIClosed.add(() => {\r\n            this.setState({\r\n                isVisible: true,\r\n            });\r\n        });\r\n\r\n        this._onDeleteAnimationObserver = this.props.context.onDeleteAnimation.add(() => {\r\n            this.forceUpdate();\r\n        });\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        if (this._onEditAnimationRequiredObserver) {\r\n            this.props.context.onEditAnimationRequired.remove(this._onEditAnimationRequiredObserver);\r\n        }\r\n\r\n        if (this._onEditAnimationUIClosedObserver) {\r\n            this.props.context.onEditAnimationUIClosed.remove(this._onEditAnimationUIClosedObserver);\r\n        }\r\n\r\n        if (this._onDeleteAnimationObserver) {\r\n            this.props.context.onDeleteAnimation.remove(this._onDeleteAnimationObserver);\r\n        }\r\n    }\r\n\r\n    public override render() {\r\n        if (!this.state.isVisible) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div id=\"animation-list\">\r\n                {this.props.context.animations?.map((a: Animation | TargetedAnimation, i: number) => {\r\n                    return (\r\n                        <AnimationEntryComponent\r\n                            key={i}\r\n                            globalState={this.props.globalState}\r\n                            context={this.props.context}\r\n                            animation={this.props.context.useTargetAnimations ? (a as TargetedAnimation).animation : (a as Animation)}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
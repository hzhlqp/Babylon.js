{"version":3,"file":"meshPropertyGridComponent.js","sourceRoot":"","sources":["../../../../../../src/components/actionTabs/tabs/propertyGrids/meshes/meshPropertyGridComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\n\r\nimport type { Observable } from \"core/Misc/observable\";\r\nimport { Vector3, TmpVectors } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport { CreateLineSystem } from \"core/Meshes/Builders/linesBuilder\";\r\nimport { PhysicsImpostor } from \"core/Physics/v1/physicsImpostor\";\r\nimport { Scene } from \"core/scene\";\r\n\r\nimport type { PropertyChangedEvent } from \"../../../../propertyChangedEvent\";\r\nimport { LineContainerComponent } from \"shared-ui-components/lines/lineContainerComponent\";\r\nimport { TextLineComponent } from \"shared-ui-components/lines/textLineComponent\";\r\nimport { CheckBoxLineComponent } from \"shared-ui-components/lines/checkBoxLineComponent\";\r\nimport { Vector3LineComponent } from \"shared-ui-components/lines/vector3LineComponent\";\r\nimport { SliderLineComponent } from \"shared-ui-components/lines/sliderLineComponent\";\r\nimport { QuaternionLineComponent } from \"../../../lines/quaternionLineComponent\";\r\nimport { FloatLineComponent } from \"shared-ui-components/lines/floatLineComponent\";\r\nimport type { LockObject } from \"shared-ui-components/tabs/propertyGrids/lockObject\";\r\nimport type { GlobalState } from \"../../../../globalState\";\r\nimport { CustomPropertyGridComponent } from \"../customPropertyGridComponent\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport { Color3LineComponent } from \"shared-ui-components/lines/color3LineComponent\";\r\nimport { Color4LineComponent } from \"shared-ui-components/lines/color4LineComponent\";\r\nimport type { MorphTarget } from \"core/Morph/morphTarget\";\r\nimport { OptionsLine } from \"shared-ui-components/lines/optionsLineComponent\";\r\nimport { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { ButtonLineComponent } from \"shared-ui-components/lines/buttonLineComponent\";\r\nimport { TextInputLineComponent } from \"shared-ui-components/lines/textInputLineComponent\";\r\nimport { AnimationGridComponent } from \"../animations/animationPropertyGridComponent\";\r\nimport { RenderingManager } from \"core/Rendering/renderingManager\";\r\nimport { CommonPropertyGridComponent } from \"../commonPropertyGridComponent\";\r\nimport { VariantsPropertyGridComponent } from \"../variantsPropertyGridComponent\";\r\nimport { HexLineComponent } from \"shared-ui-components/lines/hexLineComponent\";\r\nimport { SkeletonViewer } from \"core/Debug/skeletonViewer\";\r\nimport type { ShaderMaterial } from \"core/Materials/shaderMaterial\";\r\nimport type { IInspectableOptions } from \"core/Misc/iInspectable\";\r\nimport { NormalMaterial } from \"materials/normal/normalMaterial\";\r\n\r\nimport \"core/Physics/physicsEngineComponent\";\r\nimport \"core/Physics/v1/physicsEngineComponent\";\r\n\r\nimport { ParentPropertyGridComponent } from \"../parentPropertyGridComponent\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { PhysicsBodyGridComponent } from \"./physics/physicsBodyGridComponent\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\ninterface IMeshPropertyGridComponentProps {\r\n    globalState: GlobalState;\r\n    mesh: Mesh;\r\n    lockObject: LockObject;\r\n    onSelectionChangedObservable?: Observable<any>;\r\n    onPropertyChangedObservable?: Observable<PropertyChangedEvent>;\r\n}\r\n\r\nexport class MeshPropertyGridComponent extends React.Component<\r\n    IMeshPropertyGridComponentProps,\r\n    {\r\n        displayNormals: boolean;\r\n        displayVertexColors: boolean;\r\n        displayBoneWeights: boolean;\r\n        displayBoneIndex: number;\r\n        displaySkeletonMap: boolean;\r\n    }\r\n> {\r\n    constructor(props: IMeshPropertyGridComponentProps) {\r\n        super(props);\r\n\r\n        const mesh = this.props.mesh;\r\n\r\n        this.state = {\r\n            displayNormals: false,\r\n            displayVertexColors: false,\r\n            displayBoneWeights: !!(mesh.material && mesh.material.getClassName() === \"BoneWeightShader\"),\r\n            displayBoneIndex: 0,\r\n            displaySkeletonMap: false,\r\n        };\r\n    }\r\n\r\n    renderWireframeOver() {\r\n        const mesh = this.props.mesh;\r\n        const scene = mesh.getScene();\r\n\r\n        if (mesh.reservedDataStore && mesh.reservedDataStore.wireframeOver) {\r\n            mesh.reservedDataStore.wireframeOver.dispose(false, true);\r\n            mesh.reservedDataStore.wireframeOver = null;\r\n\r\n            this.forceUpdate();\r\n            return;\r\n        }\r\n\r\n        const wireframeOver = mesh.clone(mesh.name + \"_wireframeover\", null, true, false)!;\r\n        wireframeOver.reservedDataStore = { hidden: true };\r\n\r\n        // Sets up the mesh to be attached to the parent.\r\n        // So all neutral in local space.\r\n        wireframeOver.parent = mesh;\r\n        wireframeOver.position = Vector3.Zero();\r\n        wireframeOver.scaling = new Vector3(1, 1, 1);\r\n        wireframeOver.rotation = Vector3.Zero();\r\n        wireframeOver.rotationQuaternion = null;\r\n\r\n        const material = new StandardMaterial(\"wireframeOver\", scene);\r\n        material.reservedDataStore = { hidden: true };\r\n        wireframeOver.material = material;\r\n        material.disableLighting = true;\r\n        material.backFaceCulling = false;\r\n        material.emissiveColor = Color3.White();\r\n\r\n        material.wireframe = true;\r\n\r\n        if (!mesh.reservedDataStore) {\r\n            mesh.reservedDataStore = {};\r\n        }\r\n\r\n        mesh.reservedDataStore.wireframeOver = wireframeOver;\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    renderNormalVectors() {\r\n        const mesh = this.props.mesh;\r\n        const scene = mesh.getScene();\r\n\r\n        if (mesh.reservedDataStore && mesh.reservedDataStore.normalLines) {\r\n            mesh.reservedDataStore.normalLines.dispose();\r\n            mesh.reservedDataStore.normalLines = null;\r\n\r\n            this.forceUpdate();\r\n            return;\r\n        }\r\n\r\n        const normals = mesh.getVerticesData(VertexBuffer.NormalKind);\r\n        const positions = mesh.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        const color = Color3.White();\r\n        const bbox = mesh.getBoundingInfo();\r\n        const diag = bbox.maximum.subtractToRef(bbox.minimum, TmpVectors.Vector3[0]);\r\n        const size = diag.length() * 0.05;\r\n\r\n        const lines = [];\r\n        for (let i = 0; i < normals!.length; i += 3) {\r\n            const v1 = Vector3.FromArray(positions!, i);\r\n            const v2 = v1.add(Vector3.FromArray(normals!, i).scaleInPlace(size));\r\n            lines.push([v1, v2]);\r\n        }\r\n\r\n        const normalLines = CreateLineSystem(\"normalLines\", { lines: lines }, scene);\r\n        normalLines.color = color;\r\n        normalLines.parent = mesh;\r\n        normalLines.reservedDataStore = { hidden: true };\r\n\r\n        if (!mesh.reservedDataStore) {\r\n            mesh.reservedDataStore = {};\r\n        }\r\n\r\n        mesh.reservedDataStore.normalLines = normalLines;\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    displayNormals() {\r\n        const mesh = this.props.mesh;\r\n        const scene = mesh.getScene();\r\n\r\n        if (mesh.material && mesh.material.getClassName() === \"NormalMaterial\") {\r\n            mesh.material.dispose();\r\n\r\n            mesh.material = mesh.reservedDataStore.originalMaterial;\r\n            mesh.reservedDataStore.originalMaterial = null;\r\n            this.setState({ displayNormals: false });\r\n        } else {\r\n            if (typeof NormalMaterial === \"undefined\") {\r\n                Tools.Warn(\"NormalMaterial not found. Make sure to load the materials library.\");\r\n                return;\r\n            }\r\n\r\n            if (!mesh.reservedDataStore) {\r\n                mesh.reservedDataStore = {};\r\n            }\r\n\r\n            if (!mesh.reservedDataStore.originalMaterial) {\r\n                mesh.reservedDataStore.originalMaterial = mesh.material;\r\n            }\r\n\r\n            const normalMaterial = new NormalMaterial(\"normalMaterial\", scene);\r\n            normalMaterial.disableLighting = true;\r\n            if (mesh.material) {\r\n                normalMaterial.sideOrientation = mesh.material.sideOrientation;\r\n            }\r\n            normalMaterial.reservedDataStore = { hidden: true };\r\n            mesh.material = normalMaterial;\r\n            this.setState({ displayNormals: true });\r\n        }\r\n    }\r\n\r\n    displayVertexColors() {\r\n        const mesh = this.props.mesh;\r\n        const scene = mesh.getScene();\r\n\r\n        if (mesh.material && mesh.material.reservedDataStore && mesh.material.reservedDataStore.isVertexColorMaterial) {\r\n            mesh.material.dispose();\r\n\r\n            mesh.material = mesh.reservedDataStore.originalMaterial;\r\n            mesh.reservedDataStore.originalMaterial = null;\r\n            this.setState({ displayVertexColors: false });\r\n        } else {\r\n            if (!mesh.reservedDataStore) {\r\n                mesh.reservedDataStore = {};\r\n            }\r\n\r\n            if (!mesh.reservedDataStore.originalMaterial) {\r\n                mesh.reservedDataStore.originalMaterial = mesh.material;\r\n            }\r\n            const vertexColorMaterial = new StandardMaterial(\"vertex colors\", scene);\r\n            vertexColorMaterial.disableLighting = true;\r\n            vertexColorMaterial.emissiveColor = Color3.White();\r\n            if (mesh.material) {\r\n                vertexColorMaterial.sideOrientation = mesh.material.sideOrientation;\r\n            }\r\n            vertexColorMaterial.reservedDataStore = { hidden: true, isVertexColorMaterial: true };\r\n            mesh.useVertexColors = true;\r\n            mesh.material = vertexColorMaterial;\r\n            this.setState({ displayVertexColors: true });\r\n        }\r\n    }\r\n\r\n    displayBoneWeights() {\r\n        const mesh = this.props.mesh;\r\n        const scene = mesh.getScene();\r\n\r\n        if (mesh.material && mesh.material.getClassName() === \"BoneWeightShader\") {\r\n            mesh.material.dispose();\r\n            mesh.material = mesh.reservedDataStore.originalMaterial;\r\n            mesh.reservedDataStore.originalMaterial = null;\r\n            this.setState({ displayBoneWeights: false });\r\n        } else {\r\n            if (!mesh.reservedDataStore) {\r\n                mesh.reservedDataStore = {};\r\n            }\r\n            if (!mesh.reservedDataStore.originalMaterial) {\r\n                mesh.reservedDataStore.originalMaterial = mesh.material;\r\n            }\r\n            if (!mesh.reservedDataStore.displayBoneIndex) {\r\n                mesh.reservedDataStore.displayBoneIndex = this.state.displayBoneIndex;\r\n            }\r\n            if (mesh.skeleton) {\r\n                const boneWeightsShader = SkeletonViewer.CreateBoneWeightShader({ skeleton: mesh.skeleton }, scene);\r\n                boneWeightsShader.reservedDataStore = { hidden: true };\r\n                mesh.material = boneWeightsShader;\r\n                this.setState({ displayBoneWeights: true });\r\n            }\r\n        }\r\n    }\r\n\r\n    displaySkeletonMap() {\r\n        const mesh = this.props.mesh;\r\n        const scene = mesh.getScene();\r\n\r\n        if (mesh.material && mesh.material.getClassName() === \"SkeletonMapShader\") {\r\n            mesh.material.dispose();\r\n            mesh.material = mesh.reservedDataStore.originalMaterial;\r\n            mesh.reservedDataStore.originalMaterial = null;\r\n            this.setState({ displaySkeletonMap: false });\r\n        } else {\r\n            if (!mesh.reservedDataStore) {\r\n                mesh.reservedDataStore = {};\r\n            }\r\n            if (!mesh.reservedDataStore.originalMaterial) {\r\n                mesh.reservedDataStore.originalMaterial = mesh.material;\r\n            }\r\n            if (mesh.skeleton) {\r\n                const skeletonMapShader = SkeletonViewer.CreateSkeletonMapShader({ skeleton: mesh.skeleton }, scene);\r\n                skeletonMapShader.reservedDataStore = { hidden: true };\r\n                mesh.material = skeletonMapShader;\r\n                this.setState({ displaySkeletonMap: true });\r\n            }\r\n        }\r\n    }\r\n\r\n    onBoneDisplayIndexChange(value: number): void {\r\n        const mesh = this.props.mesh;\r\n        mesh.reservedDataStore.displayBoneIndex = value;\r\n        this.setState({ displayBoneIndex: value });\r\n        if (mesh.material && mesh.material.getClassName() === \"BoneWeightShader\") {\r\n            (mesh.material as ShaderMaterial).setFloat(\"targetBoneIndex\", value);\r\n        }\r\n    }\r\n\r\n    onMaterialLink() {\r\n        if (!this.props.onSelectionChangedObservable) {\r\n            return;\r\n        }\r\n\r\n        const mesh = this.props.mesh;\r\n        this.props.onSelectionChangedObservable.notifyObservers(mesh.material);\r\n    }\r\n\r\n    onSourceMeshLink() {\r\n        if (!this.props.onSelectionChangedObservable) {\r\n            return;\r\n        }\r\n\r\n        const instanceMesh = this.props.mesh as any;\r\n        this.props.onSelectionChangedObservable.notifyObservers(instanceMesh.sourceMesh);\r\n    }\r\n\r\n    onSkeletonLink() {\r\n        if (!this.props.onSelectionChangedObservable) {\r\n            return;\r\n        }\r\n\r\n        const mesh = this.props.mesh;\r\n        this.props.onSelectionChangedObservable.notifyObservers(mesh.skeleton);\r\n    }\r\n\r\n    convertPhysicsTypeToString(): string {\r\n        const mesh = this.props.mesh;\r\n        switch (mesh.physicsImpostor!.type) {\r\n            case PhysicsImpostor.NoImpostor:\r\n                return \"No impostor\";\r\n            case PhysicsImpostor.SphereImpostor:\r\n                return \"Sphere\";\r\n            case PhysicsImpostor.BoxImpostor:\r\n                return \"Box\";\r\n            case PhysicsImpostor.PlaneImpostor:\r\n                return \"Plane\";\r\n            case PhysicsImpostor.MeshImpostor:\r\n                return \"Mesh\";\r\n            case PhysicsImpostor.CylinderImpostor:\r\n                return \"Cylinder\";\r\n            case PhysicsImpostor.ParticleImpostor:\r\n                return \"Particle\";\r\n            case PhysicsImpostor.HeightmapImpostor:\r\n                return \"Heightmap\";\r\n            case PhysicsImpostor.ConvexHullImpostor:\r\n                return \"Convex hull\";\r\n            case PhysicsImpostor.RopeImpostor:\r\n                return \"Rope\";\r\n            case PhysicsImpostor.SoftbodyImpostor:\r\n                return \"Soft body\";\r\n        }\r\n\r\n        return \"Unknown\";\r\n    }\r\n\r\n    private _getIdForDisplay(id: any) {\r\n        if (typeof id === \"string\") {\r\n            return id;\r\n        }\r\n        return \"[INVALID ID]\";\r\n    }\r\n\r\n    override render() {\r\n        const mesh = this.props.mesh;\r\n        const scene = mesh.getScene();\r\n\r\n        const displayNormals = mesh.material != null && mesh.material.getClassName() === \"NormalMaterial\";\r\n        const displayVertexColors = !!(mesh.material != null && mesh.material.reservedDataStore && mesh.material.reservedDataStore.isVertexColorMaterial);\r\n        const renderNormalVectors = mesh.reservedDataStore && mesh.reservedDataStore.normalLines ? true : false;\r\n        const renderWireframeOver = mesh.reservedDataStore && mesh.reservedDataStore.wireframeOver ? true : false;\r\n        const displayBoneWeights = mesh.material != null && mesh.material.getClassName() === \"BoneWeightShader\";\r\n        const displaySkeletonMap = mesh.material != null && mesh.material.getClassName() === \"SkeletonMapShader\";\r\n\r\n        const morphTargets: MorphTarget[] = [];\r\n\r\n        if (mesh.morphTargetManager) {\r\n            for (let index = 0; index < mesh.morphTargetManager.numTargets; index++) {\r\n                morphTargets.push(mesh.morphTargetManager.getTarget(index));\r\n            }\r\n        }\r\n\r\n        const algorithmOptions = [\r\n            { label: \"Accurate\", value: AbstractMesh.OCCLUSION_ALGORITHM_TYPE_ACCURATE },\r\n            { label: \"Conservative\", value: AbstractMesh.OCCLUSION_ALGORITHM_TYPE_CONSERVATIVE },\r\n        ];\r\n\r\n        const occlusionTypeOptions = [\r\n            { label: \"None\", value: AbstractMesh.OCCLUSION_TYPE_NONE },\r\n            { label: \"Optimistic\", value: AbstractMesh.OCCLUSION_TYPE_OPTIMISTIC },\r\n            { label: \"Strict\", value: AbstractMesh.OCCLUSION_TYPE_STRICT },\r\n        ];\r\n\r\n        const orientationOptions = [\r\n            { label: \"Clockwise\", value: Constants.MATERIAL_ClockWiseSideOrientation },\r\n            { label: \"Counterclockwise\", value: Constants.MATERIAL_CounterClockWiseSideOrientation },\r\n        ];\r\n\r\n        const sortedMaterials = scene.materials.slice(0).sort((a, b) => (a.name || \"no name\").localeCompare(b.name || \"no name\"));\r\n\r\n        const materialOptions = sortedMaterials.map((m, i) => {\r\n            return {\r\n                label: m.name || \"no name\",\r\n                value: i,\r\n            };\r\n        });\r\n\r\n        materialOptions.splice(0, 0, {\r\n            label: \"None (Default Fallback)\",\r\n            value: -1,\r\n        });\r\n\r\n        const targetBoneOptions: IInspectableOptions[] = mesh.skeleton\r\n            ? mesh.skeleton.bones\r\n                  .filter((bone) => bone.getIndex() >= 0)\r\n                  .sort((bone1, bone2) => bone1.getIndex() - bone2.getIndex())\r\n                  .map((bone) => {\r\n                      return {\r\n                          label: bone.name,\r\n                          value: bone.getIndex(),\r\n                      };\r\n                  })\r\n            : [];\r\n\r\n        return (\r\n            <>\r\n                <CustomPropertyGridComponent\r\n                    globalState={this.props.globalState}\r\n                    target={mesh}\r\n                    lockObject={this.props.lockObject}\r\n                    onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                />\r\n                <LineContainerComponent title=\"GENERAL\" selection={this.props.globalState}>\r\n                    <TextLineComponent label=\"ID\" value={this._getIdForDisplay(mesh.id)} />\r\n                    <TextInputLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"Name\"\r\n                        target={mesh}\r\n                        propertyName=\"name\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    <TextLineComponent label=\"Unique ID\" value={mesh.uniqueId.toString()} />\r\n                    <TextLineComponent label=\"Class\" value={mesh.getClassName()} />\r\n                    <TextLineComponent label=\"Vertices\" value={mesh.getTotalVertices().toString()} />\r\n                    <TextLineComponent label=\"Faces\" value={(mesh.getTotalIndices() / 3).toFixed(0)} />\r\n                    <TextLineComponent label=\"Sub-meshes\" value={mesh.subMeshes ? mesh.subMeshes.length.toString() : \"0\"} />\r\n                    <ParentPropertyGridComponent\r\n                        globalState={this.props.globalState}\r\n                        node={mesh}\r\n                        lockObject={this.props.lockObject}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    {mesh.skeleton && <TextLineComponent label=\"Skeleton\" value={mesh.skeleton.name} onLink={() => this.onSkeletonLink()} />}\r\n                    <CheckBoxLineComponent\r\n                        label=\"Is enabled\"\r\n                        isSelected={() => mesh.isEnabled()}\r\n                        onSelect={(value) => {\r\n                            const prevValue = mesh.isEnabled();\r\n                            mesh.setEnabled(value);\r\n                            this.props.onPropertyChangedObservable?.notifyObservers({\r\n                                object: mesh,\r\n                                property: \"isEnabled\",\r\n                                value,\r\n                                initialValue: prevValue,\r\n                            });\r\n                        }}\r\n                    />\r\n                    <CheckBoxLineComponent label=\"Is pickable\" target={mesh} propertyName=\"isPickable\" onPropertyChangedObservable={this.props.onPropertyChangedObservable} />\r\n                    {mesh.material && (!mesh.material.reservedDataStore || !mesh.material.reservedDataStore.hidden) && (\r\n                        <TextLineComponent label=\"Link to material\" value={mesh.material.name} onLink={() => this.onMaterialLink()} />\r\n                    )}\r\n                    {!mesh.isAnInstance && (\r\n                        <OptionsLine\r\n                            label=\"Active material\"\r\n                            options={materialOptions}\r\n                            target={mesh}\r\n                            propertyName=\"material\"\r\n                            noDirectUpdate={true}\r\n                            onSelect={(value) => {\r\n                                if ((value as number) < 0) {\r\n                                    mesh.material = null;\r\n                                } else {\r\n                                    mesh.material = sortedMaterials[value as number];\r\n                                }\r\n\r\n                                this.forceUpdate();\r\n                            }}\r\n                            extractValue={() => (mesh.material ? sortedMaterials.indexOf(mesh.material) : -1)}\r\n                            onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        />\r\n                    )}\r\n                    {mesh.isAnInstance && <TextLineComponent label=\"Source\" value={(mesh as any).sourceMesh.name} onLink={() => this.onSourceMeshLink()} />}\r\n                    <ButtonLineComponent\r\n                        label=\"Dispose\"\r\n                        onClick={() => {\r\n                            mesh.dispose();\r\n                            this.props.globalState.onSelectionChangedObservable.notifyObservers(null);\r\n                        }}\r\n                    />\r\n                </LineContainerComponent>\r\n                <CommonPropertyGridComponent host={mesh} lockObject={this.props.lockObject} globalState={this.props.globalState} />\r\n                <VariantsPropertyGridComponent host={mesh} lockObject={this.props.lockObject} globalState={this.props.globalState} />\r\n                <LineContainerComponent title=\"TRANSFORMS\" selection={this.props.globalState}>\r\n                    <Vector3LineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"Position\"\r\n                        target={mesh}\r\n                        propertyName=\"position\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    {!mesh.rotationQuaternion && (\r\n                        <Vector3LineComponent\r\n                            lockObject={this.props.lockObject}\r\n                            label=\"Rotation\"\r\n                            useEuler={this.props.globalState.onlyUseEulers}\r\n                            target={mesh}\r\n                            propertyName=\"rotation\"\r\n                            step={0.01}\r\n                            onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        />\r\n                    )}\r\n                    {mesh.rotationQuaternion && (\r\n                        <QuaternionLineComponent\r\n                            lockObject={this.props.lockObject}\r\n                            label=\"Rotation\"\r\n                            useEuler={this.props.globalState.onlyUseEulers}\r\n                            target={mesh}\r\n                            propertyName=\"rotationQuaternion\"\r\n                            onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        />\r\n                    )}\r\n                    <Vector3LineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"Scaling\"\r\n                        target={mesh}\r\n                        propertyName=\"scaling\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                </LineContainerComponent>\r\n                {mesh._internalMetadata && mesh._internalMetadata.nodeGeometry && (\r\n                    <LineContainerComponent title=\"NODE GEOMETRY\" selection={this.props.globalState}>\r\n                        <ButtonLineComponent\r\n                            label=\"Edit\"\r\n                            onClick={() => {\r\n                                mesh._internalMetadata.nodeGeometry.edit({\r\n                                    nodeGeometryEditorConfig: {\r\n                                        backgroundColor: mesh.getScene().clearColor,\r\n                                        hostMesh: mesh,\r\n                                        hostScene: mesh.getScene(),\r\n                                    },\r\n                                });\r\n                            }}\r\n                        />\r\n                    </LineContainerComponent>\r\n                )}\r\n                <LineContainerComponent title=\"DISPLAY\" closed={true} selection={this.props.globalState}>\r\n                    {!mesh.isAnInstance && (\r\n                        <SliderLineComponent\r\n                            lockObject={this.props.lockObject}\r\n                            label=\"Visibility\"\r\n                            target={mesh}\r\n                            propertyName=\"visibility\"\r\n                            minimum={0}\r\n                            maximum={1}\r\n                            step={0.01}\r\n                            onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        />\r\n                    )}\r\n                    <OptionsLine\r\n                        label=\"Orientation\"\r\n                        options={orientationOptions}\r\n                        target={mesh}\r\n                        propertyName=\"sideOrientation\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    <FloatLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"Alpha index\"\r\n                        target={mesh}\r\n                        propertyName=\"alphaIndex\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    <CheckBoxLineComponent\r\n                        label=\"Receive shadows\"\r\n                        target={mesh}\r\n                        propertyName=\"receiveShadows\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    {mesh.isVerticesDataPresent(VertexBuffer.ColorKind) && (\r\n                        <CheckBoxLineComponent\r\n                            label=\"Use vertex colors\"\r\n                            target={mesh}\r\n                            propertyName=\"useVertexColors\"\r\n                            onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        />\r\n                    )}\r\n                    {mesh.isVerticesDataPresent(VertexBuffer.ColorKind) && (\r\n                        <CheckBoxLineComponent\r\n                            label=\"Has vertex alpha\"\r\n                            target={mesh}\r\n                            propertyName=\"hasVertexAlpha\"\r\n                            onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        />\r\n                    )}\r\n                    {scene.fogMode !== Scene.FOGMODE_NONE && (\r\n                        <CheckBoxLineComponent label=\"Apply fog\" target={mesh} propertyName=\"applyFog\" onPropertyChangedObservable={this.props.onPropertyChangedObservable} />\r\n                    )}\r\n                    {!mesh.parent && (\r\n                        <CheckBoxLineComponent\r\n                            label=\"Infinite distance\"\r\n                            target={mesh}\r\n                            propertyName=\"infiniteDistance\"\r\n                            onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        />\r\n                    )}\r\n                    <SliderLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"Rendering group ID\"\r\n                        decimalCount={0}\r\n                        target={mesh}\r\n                        propertyName=\"renderingGroupId\"\r\n                        minimum={RenderingManager.MIN_RENDERINGGROUPS}\r\n                        maximum={RenderingManager.MAX_RENDERINGGROUPS - 1}\r\n                        step={1}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    <HexLineComponent\r\n                        isInteger\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"Layer mask\"\r\n                        target={mesh}\r\n                        propertyName=\"layerMask\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                </LineContainerComponent>\r\n                {mesh.morphTargetManager != null && (\r\n                    <LineContainerComponent title=\"MORPH TARGETS\" closed={true} selection={this.props.globalState}>\r\n                        {morphTargets.map((mt, i) => {\r\n                            return (\r\n                                <SliderLineComponent\r\n                                    lockObject={this.props.lockObject}\r\n                                    key={i}\r\n                                    label={mt.name}\r\n                                    target={mt}\r\n                                    propertyName=\"influence\"\r\n                                    minimum={0}\r\n                                    maximum={1}\r\n                                    step={0.01}\r\n                                    onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </LineContainerComponent>\r\n                )}\r\n                <AnimationGridComponent globalState={this.props.globalState} animatable={mesh} scene={mesh.getScene()} lockObject={this.props.lockObject} />\r\n                <LineContainerComponent title=\"ADVANCED\" closed={true} selection={this.props.globalState}>\r\n                    {mesh.useBones && (\r\n                        <CheckBoxLineComponent\r\n                            label=\"Compute bones using shaders\"\r\n                            target={mesh}\r\n                            propertyName=\"computeBonesUsingShaders\"\r\n                            onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        />\r\n                    )}\r\n                    <CheckBoxLineComponent label=\"Collisions\" target={mesh} propertyName=\"checkCollisions\" onPropertyChangedObservable={this.props.onPropertyChangedObservable} />\r\n                    <TextLineComponent label=\"Geometry ID\" value={mesh.geometry?.uniqueId.toString()} />\r\n                    <TextLineComponent label=\"Has normals\" value={mesh.isVerticesDataPresent(VertexBuffer.NormalKind) ? \"Yes\" : \"No\"} />\r\n                    <TextLineComponent label=\"Has vertex colors\" value={mesh.isVerticesDataPresent(VertexBuffer.ColorKind) ? \"Yes\" : \"No\"} />\r\n                    <TextLineComponent label=\"Has UV set 0\" value={mesh.isVerticesDataPresent(VertexBuffer.UVKind) ? \"Yes\" : \"No\"} />\r\n                    <TextLineComponent label=\"Has UV set 1\" value={mesh.isVerticesDataPresent(VertexBuffer.UV2Kind) ? \"Yes\" : \"No\"} />\r\n                    <TextLineComponent label=\"Has UV set 2\" value={mesh.isVerticesDataPresent(VertexBuffer.UV3Kind) ? \"Yes\" : \"No\"} />\r\n                    <TextLineComponent label=\"Has UV set 3\" value={mesh.isVerticesDataPresent(VertexBuffer.UV4Kind) ? \"Yes\" : \"No\"} />\r\n                    <TextLineComponent label=\"Has tangents\" value={mesh.isVerticesDataPresent(VertexBuffer.TangentKind) ? \"Yes\" : \"No\"} />\r\n                    <TextLineComponent label=\"Has matrix weights\" value={mesh.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind) ? \"Yes\" : \"No\"} />\r\n                    <TextLineComponent label=\"Has matrix indices\" value={mesh.isVerticesDataPresent(VertexBuffer.MatricesIndicesKind) ? \"Yes\" : \"No\"} />\r\n                </LineContainerComponent>\r\n                {mesh.physicsImpostor != null && (\r\n                    <LineContainerComponent title=\"PHYSICS\" closed={true} selection={this.props.globalState}>\r\n                        <FloatLineComponent\r\n                            lockObject={this.props.lockObject}\r\n                            label=\"Mass\"\r\n                            target={mesh.physicsImpostor}\r\n                            propertyName=\"mass\"\r\n                            onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        />\r\n                        <FloatLineComponent\r\n                            lockObject={this.props.lockObject}\r\n                            label=\"Friction\"\r\n                            target={mesh.physicsImpostor}\r\n                            propertyName=\"friction\"\r\n                            onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        />\r\n                        <FloatLineComponent\r\n                            lockObject={this.props.lockObject}\r\n                            label=\"Restitution\"\r\n                            target={mesh.physicsImpostor}\r\n                            propertyName=\"restitution\"\r\n                            onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        />\r\n                        <TextLineComponent label=\"Type\" value={this.convertPhysicsTypeToString()} />\r\n                    </LineContainerComponent>\r\n                )}\r\n                {mesh.physicsBody && (\r\n                    <PhysicsBodyGridComponent\r\n                        lockObject={this.props.lockObject}\r\n                        globalState={this.props.globalState}\r\n                        body={mesh.physicsBody}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                )}\r\n                <LineContainerComponent title=\"OCCLUSIONS\" closed={true} selection={this.props.globalState}>\r\n                    <OptionsLine\r\n                        label=\"Type\"\r\n                        options={occlusionTypeOptions}\r\n                        target={mesh}\r\n                        propertyName=\"occlusionType\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    <SliderLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"Retry count\"\r\n                        minimum={-1}\r\n                        maximum={10}\r\n                        decimalCount={0}\r\n                        step={1}\r\n                        target={mesh}\r\n                        propertyName=\"occlusionRetryCount\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    <OptionsLine\r\n                        label=\"Algorithm\"\r\n                        options={algorithmOptions}\r\n                        target={mesh}\r\n                        propertyName=\"occlusionQueryAlgorithmType\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                </LineContainerComponent>\r\n                <LineContainerComponent title=\"EDGE RENDERING\" closed={true} selection={this.props.globalState}>\r\n                    <CheckBoxLineComponent\r\n                        label=\"Enable\"\r\n                        target={mesh}\r\n                        isSelected={() => mesh.edgesRenderer != null}\r\n                        onSelect={(value) => {\r\n                            if (value) {\r\n                                mesh.enableEdgesRendering();\r\n                            } else {\r\n                                mesh.disableEdgesRendering();\r\n                            }\r\n                        }}\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    <SliderLineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"Edge width\"\r\n                        minimum={0}\r\n                        maximum={10}\r\n                        step={0.1}\r\n                        target={mesh}\r\n                        propertyName=\"edgesWidth\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                    <Color4LineComponent\r\n                        lockObject={this.props.lockObject}\r\n                        label=\"Edge color\"\r\n                        target={mesh}\r\n                        propertyName=\"edgesColor\"\r\n                        onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                    />\r\n                </LineContainerComponent>\r\n                {!mesh.isAnInstance && (\r\n                    <LineContainerComponent title=\"OUTLINE & OVERLAY\" closed={true} selection={this.props.globalState}>\r\n                        <CheckBoxLineComponent\r\n                            label=\"Render overlay\"\r\n                            target={mesh}\r\n                            propertyName=\"renderOverlay\"\r\n                            onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        />\r\n                        <Color3LineComponent\r\n                            lockObject={this.props.lockObject}\r\n                            label=\"Overlay color\"\r\n                            target={mesh}\r\n                            propertyName=\"overlayColor\"\r\n                            onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        />\r\n                        <CheckBoxLineComponent\r\n                            label=\"Render outline\"\r\n                            target={mesh}\r\n                            propertyName=\"renderOutline\"\r\n                            onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        />\r\n                        <Color3LineComponent\r\n                            lockObject={this.props.lockObject}\r\n                            label=\"Outline color\"\r\n                            target={mesh}\r\n                            propertyName=\"outlineColor\"\r\n                            onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        />\r\n                        <FloatLineComponent\r\n                            lockObject={this.props.lockObject}\r\n                            label=\"Outline width\"\r\n                            target={mesh}\r\n                            propertyName=\"outlineWidth\"\r\n                            onPropertyChangedObservable={this.props.onPropertyChangedObservable}\r\n                        />\r\n                    </LineContainerComponent>\r\n                )}\r\n                <LineContainerComponent title=\"DEBUG\" closed={true} selection={this.props.globalState}>\r\n                    {!mesh.isAnInstance && <CheckBoxLineComponent label=\"Display normals\" isSelected={() => displayNormals} onSelect={() => this.displayNormals()} />}\r\n                    {!mesh.isAnInstance && (\r\n                        <CheckBoxLineComponent label=\"Display vertex colors\" isSelected={() => displayVertexColors} onSelect={() => this.displayVertexColors()} />\r\n                    )}\r\n                    {mesh.isVerticesDataPresent(VertexBuffer.NormalKind) && (\r\n                        <CheckBoxLineComponent label=\"Render vertex normals\" isSelected={() => renderNormalVectors} onSelect={() => this.renderNormalVectors()} />\r\n                    )}\r\n                    {!mesh.isAnInstance && (\r\n                        <CheckBoxLineComponent label=\"Render wireframe over mesh\" isSelected={() => renderWireframeOver} onSelect={() => this.renderWireframeOver()} />\r\n                    )}\r\n                    {!mesh.isAnInstance && mesh.skeleton && (\r\n                        <CheckBoxLineComponent label=\"Display BoneWeights\" isSelected={() => displayBoneWeights} onSelect={() => this.displayBoneWeights()} />\r\n                    )}\r\n                    {!mesh.isAnInstance && this.state.displayBoneWeights && mesh.skeleton && (\r\n                        <OptionsLine\r\n                            label=\"Target Bone Name\"\r\n                            options={targetBoneOptions}\r\n                            target={mesh.reservedDataStore}\r\n                            propertyName=\"displayBoneIndex\"\r\n                            noDirectUpdate={true}\r\n                            onSelect={(value) => {\r\n                                this.onBoneDisplayIndexChange(value as number);\r\n                                this.forceUpdate();\r\n                            }}\r\n                        />\r\n                    )}\r\n                    {!mesh.isAnInstance && this.state.displayBoneWeights && mesh.skeleton && (\r\n                        <SliderLineComponent\r\n                            lockObject={this.props.lockObject}\r\n                            label=\"Target Bone\"\r\n                            decimalCount={0}\r\n                            target={mesh.reservedDataStore}\r\n                            propertyName=\"displayBoneIndex\"\r\n                            minimum={0}\r\n                            maximum={targetBoneOptions.length - 1 || 0}\r\n                            step={1}\r\n                            onChange={(value) => {\r\n                                this.onBoneDisplayIndexChange(value);\r\n                                this.forceUpdate();\r\n                            }}\r\n                        />\r\n                    )}\r\n                    {!mesh.isAnInstance && mesh.skeleton && (\r\n                        <CheckBoxLineComponent label=\"Display SkeletonMap\" isSelected={() => displaySkeletonMap} onSelect={() => this.displaySkeletonMap()} />\r\n                    )}\r\n                </LineContainerComponent>\r\n            </>\r\n        );\r\n    }\r\n}\r\n"]}
{"version":3,"file":"toolBar.js","sourceRoot":"","sources":["../../../../../../../src/components/actionTabs/tabs/propertyGrids/materials/textures/toolBar.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport type { IToolData, IToolType, IMetadata } from \"./textureEditorComponent\";\r\nimport type { Color3 } from \"core/Maths/math.color\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { ColorPicker } from \"shared-ui-components/colorPicker/colorPicker\";\r\nimport { LockObject } from \"shared-ui-components/tabs/propertyGrids/lockObject\";\r\n\r\nexport interface ITool extends IToolData {\r\n    instance: IToolType;\r\n}\r\n\r\ninterface IToolBarProps {\r\n    tools: ITool[];\r\n    addTool(url: string): void;\r\n    changeTool(toolIndex: number): void;\r\n    activeToolIndex: number;\r\n    metadata: IMetadata;\r\n    setMetadata(data: any): void;\r\n    pickerOpen: boolean;\r\n    setPickerOpen(open: boolean): void;\r\n    pickerRef: React.RefObject<HTMLDivElement>;\r\n    hasAlpha: boolean;\r\n}\r\n\r\ninterface IToolBarState {\r\n    toolURL: string;\r\n    addOpen: boolean;\r\n}\r\n\r\nexport class ToolBar extends React.Component<IToolBarProps, IToolBarState> {\r\n    private _lockObject = new LockObject();\r\n    constructor(props: IToolBarProps) {\r\n        super(props);\r\n        this.state = {\r\n            toolURL: \"\",\r\n            addOpen: false,\r\n        };\r\n    }\r\n\r\n    computeRGBAColor() {\r\n        const opacityInt = Math.floor(this.props.metadata.alpha * 255);\r\n        const opacityHex = opacityInt.toString(16).padStart(2, \"0\");\r\n\r\n        return Color4.FromHexString(`${this.props.metadata.color}${opacityHex}`);\r\n    }\r\n\r\n    override shouldComponentUpdate(nextProps: IToolBarProps) {\r\n        return (\r\n            nextProps.tools != this.props.tools ||\r\n            nextProps.activeToolIndex !== this.props.activeToolIndex ||\r\n            nextProps.metadata != this.props.metadata ||\r\n            nextProps.pickerOpen != this.props.pickerOpen\r\n        );\r\n    }\r\n\r\n    override render() {\r\n        return (\r\n            <div id=\"toolbar\">\r\n                <div id=\"tools\">\r\n                    {this.props.tools.map((item, index) => {\r\n                        return (\r\n                            <img\r\n                                src={`data:image/svg+xml;base64,${item.icon}`}\r\n                                className={index === this.props.activeToolIndex ? \"icon button active\" : \"icon button\"}\r\n                                alt={item.name}\r\n                                title={item.name}\r\n                                onClick={(evt) => {\r\n                                    if (evt.button === 0) {\r\n                                        this.props.changeTool(index);\r\n                                    }\r\n                                }}\r\n                                key={index}\r\n                            />\r\n                        );\r\n                    })}\r\n                </div>\r\n                <div\r\n                    id=\"color\"\r\n                    onClick={() => {\r\n                        if (!this.props.pickerOpen) this.props.setPickerOpen(true);\r\n                    }}\r\n                    title=\"Color\"\r\n                    className={`icon button${this.props.pickerOpen ? ` active` : ``}`}\r\n                >\r\n                    <div id=\"active-color-bg\">\r\n                        <div id=\"active-color\" style={{ backgroundColor: this.props.metadata.color, opacity: this.props.metadata.alpha }}></div>\r\n                    </div>\r\n                </div>\r\n                {this.props.pickerOpen && (\r\n                    <div id=\"color-picker\" ref={this.props.pickerRef}>\r\n                        <ColorPicker\r\n                            lockObject={this._lockObject}\r\n                            color={this.computeRGBAColor()}\r\n                            onColorChanged={(color: Color3 | Color4) => {\r\n                                const metadata = { color: color.toHexString(true), alpha: (color as unknown as Color4).a };\r\n                                if (metadata.color !== this.props.metadata.color || metadata.alpha !== this.props.metadata.alpha) {\r\n                                    this.props.setMetadata(metadata);\r\n                                }\r\n                            }}\r\n                        />\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
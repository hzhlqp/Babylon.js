{"version":3,"file":"renderGridPropertyGridComponent.js","sourceRoot":"","sources":["../../../../../src/components/actionTabs/tabs/propertyGrids/renderGridPropertyGridComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\n\r\nimport type { Nullable } from \"core/types\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { UtilityLayerRenderer } from \"core/Rendering/utilityLayerRenderer\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { GridMaterial } from \"materials/grid/gridMaterial\";\r\n\r\nimport { CheckBoxLineComponent } from \"shared-ui-components/lines/checkBoxLineComponent\";\r\nimport type { GlobalState } from \"../../../globalState\";\r\nimport { CreateGround } from \"core/Meshes/Builders/groundBuilder\";\r\n\r\ninterface IRenderGridPropertyGridComponentProps {\r\n    globalState: GlobalState;\r\n    scene: Scene;\r\n}\r\n\r\nexport class RenderGridPropertyGridComponent extends React.Component<IRenderGridPropertyGridComponentProps, { isEnabled: boolean }> {\r\n    private _gridMesh: Nullable<AbstractMesh>;\r\n\r\n    constructor(props: IRenderGridPropertyGridComponentProps) {\r\n        super(props);\r\n        this.state = { isEnabled: false };\r\n    }\r\n\r\n    override componentDidMount() {\r\n        const scene = UtilityLayerRenderer.DefaultKeepDepthUtilityLayer.utilityLayerScene;\r\n\r\n        for (const mesh of scene.meshes) {\r\n            if (mesh.reservedDataStore && mesh.reservedDataStore.isInspectorGrid) {\r\n                this._gridMesh = mesh;\r\n                this.setState({ isEnabled: true });\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    addOrRemoveGrid() {\r\n        const scene = UtilityLayerRenderer.DefaultKeepDepthUtilityLayer.utilityLayerScene;\r\n\r\n        if (!this._gridMesh) {\r\n            const extend = this.props.scene.getWorldExtends();\r\n            const width = (extend.max.x - extend.min.x) * 5.0;\r\n            const depth = (extend.max.z - extend.min.z) * 5.0;\r\n\r\n            this._gridMesh = CreateGround(\"grid\", { width: 1.0, height: 1.0, subdivisions: 1 }, scene);\r\n            if (!this._gridMesh.reservedDataStore) {\r\n                this._gridMesh.reservedDataStore = {};\r\n            }\r\n            this._gridMesh.scaling.x = Math.max(width, depth);\r\n            this._gridMesh.scaling.z = this._gridMesh.scaling.x;\r\n            this._gridMesh.reservedDataStore.isInspectorGrid = true;\r\n            this._gridMesh.isPickable = false;\r\n\r\n            const groundMaterial = new GridMaterial(\"GridMaterial\", scene);\r\n            groundMaterial.majorUnitFrequency = 10;\r\n            groundMaterial.minorUnitVisibility = 0.3;\r\n            groundMaterial.gridRatio = 0.01;\r\n            groundMaterial.backFaceCulling = false;\r\n            groundMaterial.mainColor = new Color3(1, 1, 1);\r\n            groundMaterial.lineColor = new Color3(1.0, 1.0, 1.0);\r\n            groundMaterial.opacity = 0.8;\r\n            groundMaterial.zOffset = 1.0;\r\n            groundMaterial.opacityTexture = new Texture(\"https://assets.babylonjs.com/environments/backgroundGround.png\", scene);\r\n\r\n            this._gridMesh.material = groundMaterial;\r\n\r\n            this.setState({ isEnabled: true });\r\n            return;\r\n        }\r\n\r\n        this.setState({ isEnabled: !this.state.isEnabled });\r\n        this._gridMesh.dispose(true, true);\r\n        this._gridMesh = null;\r\n    }\r\n\r\n    override render() {\r\n        return (\r\n            <div>\r\n                <CheckBoxLineComponent label=\"Render grid\" isSelected={() => this.state.isEnabled} onSelect={() => this.addOrRemoveGrid()} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
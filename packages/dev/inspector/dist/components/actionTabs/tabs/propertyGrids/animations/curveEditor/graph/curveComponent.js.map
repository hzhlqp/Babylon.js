{"version":3,"file":"curveComponent.js","sourceRoot":"","sources":["../../../../../../../../src/components/actionTabs/tabs/propertyGrids/animations/curveEditor/graph/curveComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { Observer } from \"core/Misc/observable\";\r\nimport type { Nullable } from \"core/types\";\r\nimport * as React from \"react\";\r\nimport type { Context, IActiveAnimationChangedOptions } from \"../context\";\r\nimport type { Curve } from \"./curve\";\r\nimport type { AnimationKeyInterpolation } from \"core/Animations/animationKey\";\r\nimport { Animation } from \"core/Animations/animation\";\r\n\r\ninterface ICurveComponentProps {\r\n    curve: Curve;\r\n    convertX: (x: number) => number;\r\n    convertY: (x: number) => number;\r\n    context: Context;\r\n}\r\n\r\ninterface ICurveComponentState {\r\n    isSelected: boolean;\r\n}\r\n\r\nexport class CurveComponent extends React.Component<ICurveComponentProps, ICurveComponentState> {\r\n    private _onDataUpdatedObserver: Nullable<Observer<void>>;\r\n    private _onActiveAnimationChangedObserver: Nullable<Observer<IActiveAnimationChangedOptions>>;\r\n    private _onInterpolationModeSetObserver: Nullable<Observer<{ keyId: number; value: AnimationKeyInterpolation }>>;\r\n\r\n    constructor(props: ICurveComponentProps) {\r\n        super(props);\r\n\r\n        this.state = { isSelected: false };\r\n\r\n        this._onDataUpdatedObserver = this.props.curve.onDataUpdatedObservable.add(() => this.forceUpdate());\r\n\r\n        this._onActiveAnimationChangedObserver = props.context.onActiveAnimationChanged.add(() => {\r\n            if (this._onDataUpdatedObserver) {\r\n                this.props.curve.onDataUpdatedObservable.remove(this._onDataUpdatedObserver);\r\n            }\r\n            this._onDataUpdatedObserver = null;\r\n            this.forceUpdate();\r\n        });\r\n\r\n        this._onInterpolationModeSetObserver = props.context.onInterpolationModeSet.add(({ keyId, value }) => {\r\n            this.props.curve.updateInterpolationMode(keyId, value);\r\n        });\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        if (this._onDataUpdatedObserver) {\r\n            this.props.curve.onDataUpdatedObservable.remove(this._onDataUpdatedObserver);\r\n        }\r\n\r\n        if (this._onActiveAnimationChangedObserver) {\r\n            this.props.context.onActiveAnimationChanged.remove(this._onActiveAnimationChangedObserver);\r\n        }\r\n\r\n        if (this._onInterpolationModeSetObserver) {\r\n            this.props.context.onInterpolationModeSet.remove(this._onInterpolationModeSetObserver);\r\n        }\r\n    }\r\n\r\n    override componentDidUpdate() {\r\n        if (!this._onDataUpdatedObserver) {\r\n            this._onDataUpdatedObserver = this.props.curve.onDataUpdatedObservable.add(() => this.forceUpdate());\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public override render() {\r\n        if (!this.props.context.isChannelEnabled(this.props.curve.animation, this.props.curve.color)) {\r\n            return null;\r\n        }\r\n        const pathStyle: any = {\r\n            stroke: this.props.curve.color,\r\n            fill: \"none\",\r\n            strokeWidth: \"1\",\r\n        };\r\n\r\n        if (this.props.curve.animation.dataType === Animation.ANIMATIONTYPE_QUATERNION) {\r\n            pathStyle[\"stroke-dasharray\"] = \"5\";\r\n            pathStyle[\"stroke-opacity\"] = \"0.5\";\r\n        }\r\n\r\n        return (\r\n            <svg style={{ cursor: \"pointer\", overflow: \"auto\" }}>\r\n                <path d={this.props.curve.getPathData(this.props.convertX, this.props.convertY)} style={pathStyle}></path>\r\n            </svg>\r\n        );\r\n    }\r\n}\r\n"]}
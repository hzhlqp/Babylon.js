{"version":3,"file":"propertiesBar.js","sourceRoot":"","sources":["../../../../../../../src/components/actionTabs/tabs/propertyGrids/materials/textures/propertiesBar.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IPixelData } from \"./textureCanvasManager\";\r\nimport type { ISize } from \"core/Maths/math.size\";\r\n\r\ninterface IPropertiesBarProps {\r\n    texture: BaseTexture;\r\n    size: ISize;\r\n    saveTexture(): void;\r\n    pixelData: IPixelData;\r\n    face: number;\r\n    setFace(face: number): void;\r\n    resetTexture(): void;\r\n    resizeTexture(width: number, height: number): void;\r\n    uploadTexture(file: File): void;\r\n    mipLevel: number;\r\n    setMipLevel: (mipLevel: number) => void;\r\n}\r\n\r\ninterface IPropertiesBarState {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\ninterface IPixelDataProps {\r\n    name: string;\r\n    data: number | undefined;\r\n}\r\n\r\nimport resetButton from \"./assets/reset.svg\";\r\nimport uploadButton from \"./assets/upload.svg\";\r\nimport saveButton from \"./assets/save.svg\";\r\nimport babylonLogo from \"./assets/babylonLogo.svg\";\r\n\r\nimport resizeButton from \"./assets/resizeTool.svg\";\r\n\r\nimport mipUp from \"./assets/mipUp.svg\";\r\nimport mipDown from \"./assets/mipDown.svg\";\r\n\r\nimport posX from \"./assets/posX.svg\";\r\nimport negX from \"./assets/negX.svg\";\r\nimport posY from \"./assets/posY.svg\";\r\nimport negY from \"./assets/negY.svg\";\r\nimport posZ from \"./assets/posZ.svg\";\r\nimport negZ from \"./assets/negZ.svg\";\r\n\r\nexport class PropertiesBar extends React.PureComponent<IPropertiesBarProps, IPropertiesBarState> {\r\n    private _faces = [posX, negX, posY, negY, posZ, negZ];\r\n\r\n    constructor(props: IPropertiesBarProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            width: props.size.width,\r\n            height: props.size.height,\r\n        };\r\n    }\r\n\r\n    private _pixelData(props: IPixelDataProps) {\r\n        return (\r\n            <span className=\"pixel-data\">\r\n                {props.name}: <span className=\"value\">{props.data !== undefined ? props.data : \"-\"}</span>\r\n            </span>\r\n        );\r\n    }\r\n\r\n    private _getNewDimension(oldDim: number, newDim: any) {\r\n        if (!isNaN(newDim)) {\r\n            if (parseInt(newDim) > 0) {\r\n                if (Number.isInteger(parseInt(newDim))) return parseInt(newDim);\r\n            }\r\n        }\r\n        return oldDim;\r\n    }\r\n\r\n    override componentWillUpdate(nextProps: IPropertiesBarProps) {\r\n        if (nextProps.size.width != this.props.size.width || nextProps.size.height != this.props.size.height) {\r\n            this.setState({\r\n                width: nextProps.size.width,\r\n                height: nextProps.size.height,\r\n            });\r\n        }\r\n    }\r\n\r\n    override render() {\r\n        const { mipLevel, setMipLevel, pixelData, resizeTexture, texture, face, setFace, saveTexture, resetTexture, uploadTexture } = this.props;\r\n        const maxLevels = Math.floor(Math.log2(Math.max(texture.getSize().width, texture.getSize().height)));\r\n        const engine = texture.getScene()!.getEngine();\r\n        const mipsEnabled = !texture.noMipmap && engine.getCaps().textureLOD;\r\n        return (\r\n            <div id=\"properties\">\r\n                <div className=\"tab\" id=\"logo-tab\">\r\n                    <img className=\"icon\" src={babylonLogo} />\r\n                </div>\r\n                <div id=\"left\">\r\n                    <div className=\"tab\" id=\"dimensions-tab\">\r\n                        <form\r\n                            onSubmit={(evt) => {\r\n                                this.props.resizeTexture(this.state.width, this.state.height);\r\n                                evt.preventDefault();\r\n                            }}\r\n                        >\r\n                            <label className=\"dimensions\">\r\n                                W:{\" \"}\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={this.state.width}\r\n                                    readOnly={texture.isCube}\r\n                                    onChange={(evt) => this.setState({ width: this._getNewDimension(this.state.width, evt.target.value) })}\r\n                                />\r\n                            </label>\r\n                            <label className=\"dimensions\">\r\n                                H:{\" \"}\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={this.state.height}\r\n                                    readOnly={texture.isCube}\r\n                                    onChange={(evt) => this.setState({ height: this._getNewDimension(this.state.height, evt.target.value) })}\r\n                                />\r\n                            </label>\r\n                            {!texture.isCube && (\r\n                                <img\r\n                                    id=\"resize\"\r\n                                    className=\"icon button\"\r\n                                    title=\"Resize\"\r\n                                    alt=\"Resize\"\r\n                                    src={resizeButton}\r\n                                    onClick={() => resizeTexture(this.state.width, this.state.height)}\r\n                                />\r\n                            )}\r\n                        </form>\r\n                    </div>\r\n                    <div className=\"tab\" id=\"pixel-coords-tab\">\r\n                        <this._pixelData name=\"X\" data={pixelData.x} />\r\n                        <this._pixelData name=\"Y\" data={pixelData.y} />\r\n                    </div>\r\n                    <div className=\"tab\" id=\"pixel-color-tab\">\r\n                        <this._pixelData name=\"R\" data={pixelData.r} />\r\n                        <this._pixelData name=\"G\" data={pixelData.g} />\r\n                        <this._pixelData name=\"B\" data={pixelData.b} />\r\n                        <this._pixelData name=\"A\" data={pixelData.a} />\r\n                    </div>\r\n                    {texture.isCube && (\r\n                        <div className=\"tab\" id=\"face-tab\">\r\n                            {this._faces.map((value, index) => (\r\n                                <img key={index} className={face == index ? \"icon face button active\" : \"icon face button\"} src={value} onClick={() => setFace(index)} />\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                    {mipsEnabled && (\r\n                        <div className=\"tab\" id=\"mip-tab\">\r\n                            <img title=\"Mip Preview Up\" className=\"icon button\" src={mipUp} onClick={() => mipLevel > 0 && setMipLevel(mipLevel - 1)} />\r\n                            <img title=\"Mip Preview Down\" className=\"icon button\" src={mipDown} onClick={() => mipLevel < maxLevels && setMipLevel(mipLevel + 1)} />\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                <div className=\"tab\" id=\"right-tab\">\r\n                    <img title=\"Reset\" className=\"icon button\" src={resetButton} onClick={() => resetTexture()} />\r\n                    <label>\r\n                        <input\r\n                            accept=\".jpg, .png, .tga, .dds, .env, .exr\"\r\n                            type=\"file\"\r\n                            onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\r\n                                const files = evt.target.files;\r\n                                if (files && files.length) {\r\n                                    uploadTexture(files[0]);\r\n                                }\r\n\r\n                                evt.target.value = \"\";\r\n                            }}\r\n                        />\r\n                        <img title=\"Upload\" className=\"icon button\" src={uploadButton} />\r\n                    </label>\r\n                    <img title=\"Save\" className=\"icon button\" src={saveButton} onClick={() => saveTexture()} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
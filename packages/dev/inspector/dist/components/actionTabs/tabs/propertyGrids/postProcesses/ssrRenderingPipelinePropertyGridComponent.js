import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import * as React from "react";
import { SliderLineComponent } from "shared-ui-components/lines/sliderLineComponent";
import { LineContainerComponent } from "shared-ui-components/lines/lineContainerComponent";
import { TextLineComponent } from "shared-ui-components/lines/textLineComponent";
import { CheckBoxLineComponent } from "shared-ui-components/lines/checkBoxLineComponent";
import { TextureLinkLineComponent } from "../../../lines/textureLinkLineComponent";
export class SSRRenderingPipelinePropertyGridComponent extends React.Component {
    constructor(props) {
        super(props);
    }
    render() {
        const renderPipeline = this.props.renderPipeline;
        return (_jsxs(_Fragment, { children: [_jsxs(LineContainerComponent, { title: "GENERAL", selection: this.props.globalState, children: [_jsx(TextLineComponent, { label: "Name", value: renderPipeline.name }), _jsx(TextLineComponent, { label: "Class", value: renderPipeline.getClassName() })] }), _jsxs(LineContainerComponent, { title: "SSR", selection: this.props.globalState, children: [_jsx(CheckBoxLineComponent, { label: "Enabled", target: renderPipeline, propertyName: "isEnabled", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(CheckBoxLineComponent, { label: "Debug", target: renderPipeline, propertyName: "debug", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(SliderLineComponent, { lockObject: this.props.lockObject, label: "Strength", minimum: 0, maximum: 5, step: 0.05, target: renderPipeline, propertyName: "strength", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(SliderLineComponent, { lockObject: this.props.lockObject, label: "Reflection exponent", minimum: 0, maximum: 5, step: 0.05, target: renderPipeline, propertyName: "reflectionSpecularFalloffExponent", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(SliderLineComponent, { lockObject: this.props.lockObject, label: "Reflectivity threshold", minimum: 0, maximum: 1, step: 0.01, target: renderPipeline, propertyName: "reflectivityThreshold", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(SliderLineComponent, { lockObject: this.props.lockObject, label: "Thickness", minimum: 0, maximum: 10, step: 0.01, target: renderPipeline, propertyName: "thickness", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(SliderLineComponent, { lockObject: this.props.lockObject, label: "Step", minimum: 1, maximum: 50, step: 1, target: renderPipeline, propertyName: "step", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(CheckBoxLineComponent, { label: "Smooth reflections", target: renderPipeline, propertyName: "enableSmoothReflections", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(SliderLineComponent, { lockObject: this.props.lockObject, label: "Max steps", minimum: 1, maximum: 3000, step: 10, target: renderPipeline, propertyName: "maxSteps", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(SliderLineComponent, { lockObject: this.props.lockObject, label: "Max distance", minimum: 1, maximum: 3000, step: 10, target: renderPipeline, propertyName: "maxDistance", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(SliderLineComponent, { lockObject: this.props.lockObject, label: "Roughness factor", minimum: 0, maximum: 1, step: 0.01, target: renderPipeline, propertyName: "roughnessFactor", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(SliderLineComponent, { lockObject: this.props.lockObject, label: "Self collision skips", minimum: 1, maximum: 10, step: 1, target: renderPipeline, propertyName: "selfCollisionNumSkip", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(SliderLineComponent, { lockObject: this.props.lockObject, label: "SSR downsample", minimum: 0, maximum: 5, step: 1, target: renderPipeline, propertyName: "ssrDownsample", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(CheckBoxLineComponent, { label: "Clip to frustum", target: renderPipeline, propertyName: "clipToFrustum", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsxs(LineContainerComponent, { title: "Automatic thickness computation", selection: this.props.globalState, children: [_jsx(CheckBoxLineComponent, { label: "Enabled", target: renderPipeline, propertyName: "enableAutomaticThicknessComputation", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(CheckBoxLineComponent, { label: "Force write transparent", target: renderPipeline, propertyName: "backfaceForceDepthWriteTransparentMeshes", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(SliderLineComponent, { lockObject: this.props.lockObject, label: "Downsample", minimum: 0, maximum: 5, step: 1, target: renderPipeline, propertyName: "backfaceDepthTextureDownsample", onPropertyChangedObservable: this.props.onPropertyChangedObservable })] }), _jsxs(LineContainerComponent, { title: "Blur", selection: this.props.globalState, children: [_jsx(SliderLineComponent, { lockObject: this.props.lockObject, label: "Strength", minimum: 0, maximum: 0.15, step: 0.001, target: renderPipeline, propertyName: "blurDispersionStrength", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(SliderLineComponent, { lockObject: this.props.lockObject, label: "Downsample", minimum: 0, maximum: 5, step: 1, target: renderPipeline, propertyName: "blurDownsample", onPropertyChangedObservable: this.props.onPropertyChangedObservable })] }), _jsxs(LineContainerComponent, { title: "Attenuations", selection: this.props.globalState, children: [_jsx(CheckBoxLineComponent, { label: "Screen borders", target: renderPipeline, propertyName: "attenuateScreenBorders", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(CheckBoxLineComponent, { label: "Distance", target: renderPipeline, propertyName: "attenuateIntersectionDistance", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(CheckBoxLineComponent, { label: "Step iterations", target: renderPipeline, propertyName: "attenuateIntersectionIterations", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(CheckBoxLineComponent, { label: "Facing camera", target: renderPipeline, propertyName: "attenuateFacingCamera", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(CheckBoxLineComponent, { label: "Backface reflections", target: renderPipeline, propertyName: "attenuateBackfaceReflection", onPropertyChangedObservable: this.props.onPropertyChangedObservable })] }), _jsxs(LineContainerComponent, { title: "Environment", selection: this.props.globalState, children: [_jsx(TextureLinkLineComponent, { label: "Cube", texture: renderPipeline.environmentTexture, propertyName: "environmentTexture", texturedObject: renderPipeline, fileFormats: ".dds", cubeOnly: true }), _jsx(CheckBoxLineComponent, { label: "Is probe", target: renderPipeline, propertyName: "environmentTextureIsProbe", onPropertyChangedObservable: this.props.onPropertyChangedObservable })] }), _jsxs(LineContainerComponent, { title: "Color space", selection: this.props.globalState, children: [_jsx(CheckBoxLineComponent, { label: "Input is in gamma space", target: renderPipeline, propertyName: "inputTextureColorIsInGammaSpace", onPropertyChangedObservable: this.props.onPropertyChangedObservable }), _jsx(CheckBoxLineComponent, { label: "Output to gamma space", target: renderPipeline, propertyName: "generateOutputInGammaSpace", onPropertyChangedObservable: this.props.onPropertyChangedObservable })] })] })] }));
    }
}
//# sourceMappingURL=ssrRenderingPipelinePropertyGridComponent.js.map
{"version":3,"file":"paintbrush.js","sourceRoot":"","sources":["../../../../../../../../src/components/actionTabs/tabs/propertyGrids/materials/textures/defaultTools/paintbrush.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport type { IToolParameters, IToolData, IToolType, IToolGUIProps } from \"../textureEditorComponent\";\r\nimport type { PointerInfo } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Vector2 } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\n\r\nclass PaintbrushTool implements IToolType {\r\n    getParameters: () => IToolParameters;\r\n    pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    isPainting: boolean;\r\n    width = 15;\r\n    mousePos: Vector2 | null = null;\r\n    ctx: CanvasRenderingContext2D;\r\n    circleCanvas: HTMLCanvasElement;\r\n\r\n    constructor(getParameters: () => IToolParameters) {\r\n        this.getParameters = getParameters;\r\n    }\r\n\r\n    paint(pointerInfo: PointerInfo) {\r\n        const { getMouseCoordinates, metadata, updatePainting } = this.getParameters();\r\n        let { x, y } = getMouseCoordinates(pointerInfo);\r\n        if (metadata.select.x1 != -1) {\r\n            x -= metadata.select.x1;\r\n            y -= metadata.select.y1;\r\n        }\r\n        const { ctx } = this;\r\n        let numSteps, stepVector;\r\n        stepVector = new Vector2();\r\n        if (this.mousePos == null) {\r\n            this.mousePos = new Vector2(x, y);\r\n            numSteps = 1;\r\n        } else {\r\n            const maxDistance = this.width / 4;\r\n            const diffVector = new Vector2(x - this.mousePos.x, y - this.mousePos.y);\r\n            numSteps = Math.ceil(diffVector.length() / maxDistance);\r\n            const trueDistance = diffVector.length() / numSteps;\r\n            stepVector = diffVector.normalize().multiplyByFloats(trueDistance, trueDistance);\r\n        }\r\n        const paintVector = this.mousePos.clone();\r\n        for (let stepCount = 0; stepCount < numSteps; stepCount++) {\r\n            ctx.globalAlpha = 1.0;\r\n            ctx.globalCompositeOperation = \"destination-out\";\r\n            ctx.drawImage(this.circleCanvas, Math.ceil(paintVector.x - this.width / 2), Math.ceil(paintVector.y - this.width / 2));\r\n            ctx.globalAlpha = metadata.alpha;\r\n            ctx.globalCompositeOperation = \"source-over\";\r\n            ctx.drawImage(this.circleCanvas, Math.ceil(paintVector.x - this.width / 2), Math.ceil(paintVector.y - this.width / 2));\r\n            paintVector.addInPlace(stepVector);\r\n        }\r\n        updatePainting();\r\n        this.mousePos = new Vector2(x, y);\r\n    }\r\n\r\n    setBrushWidth(width: number) {\r\n        this.width = width;\r\n    }\r\n\r\n    setup() {\r\n        const { scene } = this.getParameters();\r\n\r\n        this.pointerObserver = scene.onPointerObservable.add(async (pointerInfo) => {\r\n            const { startPainting, stopPainting, metadata } = this.getParameters();\r\n            if (!this.isPainting) {\r\n                if (\r\n                    pointerInfo.type === PointerEventTypes.POINTERDOWN &&\r\n                    pointerInfo.event.buttons === 1 &&\r\n                    this.getParameters().interactionEnabled() &&\r\n                    pointerInfo.pickInfo?.hit\r\n                ) {\r\n                    this.isPainting = true;\r\n                    const circleCanvas = document.createElement(\"canvas\");\r\n                    circleCanvas.width = this.width;\r\n                    circleCanvas.height = this.width;\r\n                    const circleCtx = circleCanvas.getContext(\"2d\")!;\r\n                    circleCtx.imageSmoothingEnabled = false;\r\n                    const pixels = new Array(4 * this.width * this.width);\r\n                    const dis = (this.width * this.width) / 4;\r\n                    const rgb = Color3.FromHexString(metadata.color)!;\r\n                    const r = Math.floor(rgb.r * 255);\r\n                    const g = Math.floor(rgb.g * 255);\r\n                    const b = Math.floor(rgb.b * 255);\r\n                    let idx = 0;\r\n                    const x1 = -Math.floor(this.width / 2),\r\n                        x2 = Math.ceil(this.width / 2);\r\n                    const y1 = -Math.floor(this.width / 2),\r\n                        y2 = Math.ceil(this.width / 2);\r\n                    for (let y = y1; y < y2; y++) {\r\n                        for (let x = x1; x < x2; x++) {\r\n                            pixels[idx++] = r;\r\n                            pixels[idx++] = g;\r\n                            pixels[idx++] = b;\r\n                            pixels[idx++] = x * x + y * y <= dis ? 255 : 0;\r\n                        }\r\n                    }\r\n                    circleCtx.putImageData(new ImageData(Uint8ClampedArray.from(pixels), this.width, this.width), 0, 0);\r\n                    this.circleCanvas = circleCanvas;\r\n                    this.ctx = await startPainting();\r\n                    this.paint(pointerInfo);\r\n                }\r\n            } else {\r\n                if (pointerInfo.event.buttons !== 1 || !this.getParameters().interactionEnabled()) {\r\n                    this.isPainting = false;\r\n                    this.circleCanvas.parentNode?.removeChild(this.circleCanvas);\r\n                    stopPainting();\r\n                    this.mousePos = null;\r\n                } else {\r\n                    if (pointerInfo.pickInfo?.hit && pointerInfo.type === PointerEventTypes.POINTERMOVE) {\r\n                        this.paint(pointerInfo);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        this.isPainting = false;\r\n    }\r\n    cleanup() {\r\n        this.isPainting = false;\r\n        if (this.pointerObserver) {\r\n            this.getParameters().scene.onPointerObservable.remove(this.pointerObserver);\r\n        }\r\n    }\r\n}\r\n\r\nclass Settings extends React.Component<IToolGUIProps> {\r\n    override render() {\r\n        const instance = this.props.instance as PaintbrushTool;\r\n        return (\r\n            <div>\r\n                <label className=\"tool-slider-input\">\r\n                    <span>Size: {instance.width}</span>\r\n                    <input\r\n                        id=\"contrast-slider\"\r\n                        type=\"range\"\r\n                        min={1}\r\n                        max={100}\r\n                        value={instance.width}\r\n                        onChange={(evt) => {\r\n                            instance.setBrushWidth(evt.target.valueAsNumber);\r\n                            this.forceUpdate();\r\n                        }}\r\n                    />\r\n                </label>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport const Paintbrush: IToolData = {\r\n    name: \"Paintbrush\",\r\n    type: PaintbrushTool,\r\n    settingsComponent: Settings,\r\n    icon: `PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI0MCIgaGVpZ2h0PSI0MCIgdmlld0JveD0iMCAwIDQwIDQwIj48cmVjdCB3aWR0aD0iNDAiIGhlaWdodD0iNDAiIHN0eWxlPSJmaWxsOm5vbmUiLz48cGF0aCBkPSJNMjksMTFhMy41NywzLjU3LDAsMCwxLDAsNS4wNkwxNywyOGEyLjM0LDIuMzQsMCwwLDEtMSwuNThMMTAuOTEsMzBhLjc1Ljc1LDAsMCwxLS45Mi0uOTJMMTEuMzgsMjRBMi4zNCwyLjM0LDAsMCwxLDEyLDIzbDEyLTEyQTMuNTcsMy41NywwLDAsMSwyOSwxMVpNMjMsMTQuMSwxMywyNGEuNjkuNjksMCwwLDAtLjE5LjMzbC0xLjA1LDMuODUsMy44NS0xQS42OS42OSwwLDAsMCwxNiwyN0wyNS45LDE3Wm0yLTItMSwxTDI3LDE2bDEtMUEyLjA4LDIuMDgsMCwxLDAsMjUsMTIuMDdaIiBzdHlsZT0iZmlsbDojZmZmIi8+PC9zdmc+`,\r\n    cursor: `iVBORw0KGgoAAAANSUhEUgAAABUAAAAVAgMAAADUeU0FAAAACVBMVEUAAAAAAAD///+D3c/SAAAAAXRSTlMAQObYZgAAAAFiS0dEAmYLfGQAAAA3SURBVAjXY2CAgVUNYGoqhFJjwE2BgQYDBwMXUGiFGtcyBgbVkKmtYXAeVA4O8BkGtQ9qOwgAAEPfC1QJPmWqAAAAAElFTkSuQmCC`,\r\n};\r\n"]}
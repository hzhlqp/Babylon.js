{"version":3,"file":"canvasShader.js","sourceRoot":"","sources":["../../../../../../../src/components/actionTabs/tabs/propertyGrids/materials/textures/canvasShader.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,MAAM,YAAY,GAAG;IACxB,IAAI,EAAE;QACF,YAAY,EAAE;;;;;;;;;;;;;;SAcb;QACD,cAAc,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cA8FV;KACT;IACD,OAAO,EAAE;QACL,UAAU,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAC9B,QAAQ,EAAE,CAAC,qBAAqB,EAAE,gBAAgB,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,UAAU,CAAC;KAChI;CACJ,CAAC","sourcesContent":["export const canvasShader = {\r\n    path: {\r\n        vertexSource: `\r\n            precision highp float;\r\n\r\n            attribute vec3 position;\r\n            attribute vec2 uv;\r\n\r\n            uniform mat4 worldViewProjection;\r\n\r\n            varying vec2 vUV;\r\n\r\n            void main(void) {\r\n                gl_Position = worldViewProjection * vec4(position, 1.0);\r\n                vUV = uv;\r\n            }\r\n        `,\r\n        fragmentSource: `\r\n            precision highp float;\r\n    \r\n            uniform sampler2D textureSampler;\r\n    \r\n            uniform bool r;\r\n            uniform bool g;\r\n            uniform bool b;\r\n            uniform bool a;\r\n\r\n            uniform int x1;\r\n            uniform int y1;\r\n            uniform int x2;\r\n            uniform int y2;\r\n            uniform int w;\r\n            uniform int h;\r\n\r\n            uniform int time;\r\n            uniform bool showGrid;\r\n    \r\n            varying vec2 vUV;\r\n\r\n            float scl = 200.0;\r\n            float speed = 10.0 / 1000.0;\r\n            float smoothing = 0.2;\r\n    \r\n            void main(void) {\r\n                vec2 pos2 = vec2(gl_FragCoord.x, gl_FragCoord.y);\r\n                vec2 pos = floor(pos2 * 0.05);\r\n                float pattern = mod(pos.x + pos.y, 2.0); \r\n                if (pattern == 0.0) {\r\n                    pattern = 0.7;\r\n                }\r\n                vec4 bg = vec4(pattern, pattern, pattern, 1.0);\r\n                vec4 col = texture(textureSampler, vUV);\r\n                if (!r && !g && !b) {\r\n                    if (a) {\r\n                        col = vec4(col.a, col.a, col.a, 1.0);\r\n                    } else {\r\n                        col = vec4(0.0,0.0,0.0,0.0);\r\n                    }\r\n                } else {\r\n                    if (!r) {\r\n                        col.r = 0.0;\r\n                        if (!b) {\r\n                            col.r = col.g;\r\n                        }\r\n                        else if (!g) {\r\n                            col.r = col.b;\r\n                        }\r\n                    }\r\n                    if (!g) {\r\n                        col.g = 0.0;\r\n                        if (!b) {\r\n                            col.g = col.r;\r\n                        }\r\n                        else if (!r) {\r\n                            col.g = col.b;\r\n                        }\r\n                    }\r\n                    if (!b) {\r\n                        col.b = 0.0;\r\n                        if (!r) {\r\n                            col.b = col.g;\r\n                        } else if (!g) {\r\n                            col.b = col.r;\r\n                        }\r\n                    }\r\n                    if (!a) {\r\n                        col.a = 1.0;\r\n                    }\r\n                }\r\n                gl_FragColor = col * (col.a) + bg * (1.0 - col.a);\r\n                float wF = float(w);\r\n                float hF = float(h);\r\n                int xPixel = int(floor(vUV.x * wF));\r\n                int yPixel = int(floor((1.0 - vUV.y) * hF));\r\n                int xDis = min(abs(xPixel - x1), abs(xPixel - x2));\r\n                int yDis = min(abs(yPixel - y1), abs(yPixel - y2));\r\n                if (showGrid) {\r\n                    vec2 frac = fract(vUV * vec2(wF,hF));\r\n                    float thickness = 0.1;\r\n                    if (abs(frac.x) < thickness || abs (frac.y) < thickness) {\r\n                        gl_FragColor = vec4(0.75,0.75,0.75,1.0);\r\n                    }\r\n                }\r\n                if (xPixel >= x1 && yPixel >= y1 && xPixel <= x2 && yPixel <= y2) {\r\n                    if (xDis <= 4 || yDis <= 4) {\r\n                        float c = sin(vUV.x * scl + vUV.y * scl + float(time) * speed);\r\n                        c = smoothstep(-smoothing,smoothing,c);\r\n                        float val = 1.0 - c;\r\n                        gl_FragColor = vec4(val, val, val, 1.0) * 0.7 + gl_FragColor * 0.3;\r\n                    }\r\n                }\r\n            }`,\r\n    },\r\n    options: {\r\n        attributes: [\"position\", \"uv\"],\r\n        uniforms: [\"worldViewProjection\", \"textureSampler\", \"r\", \"g\", \"b\", \"a\", \"x1\", \"y1\", \"x2\", \"y2\", \"w\", \"h\", \"time\", \"showGrid\"],\r\n    },\r\n};\r\n"]}
{"version":3,"file":"performanceViewerComponent.js","sourceRoot":"","sources":["../../../../../src/components/actionTabs/tabs/performanceViewer/performanceViewerComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from \"core/Misc/observable\";\r\nimport type { Scene } from \"core/scene\";\r\nimport * as React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { ButtonLineComponent } from \"shared-ui-components/lines/buttonLineComponent\";\r\nimport { FileButtonLine } from \"shared-ui-components/lines/fileButtonLineComponent\";\r\nimport { LineContainerComponent } from \"shared-ui-components/lines/lineContainerComponent\";\r\nimport type { IPerfLayoutSize } from \"../../../graph/graphSupportingTypes\";\r\nimport type { PerformanceViewerCollector } from \"core/Misc/PerformanceViewer/performanceViewerCollector\";\r\nimport { PerfCollectionStrategy } from \"core/Misc/PerformanceViewer/performanceViewerCollectionStrategies\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport \"core/Misc/PerformanceViewer/performanceViewerSceneExtension\";\r\nimport { Inspector } from \"../../../../inspector\";\r\nimport { PerformanceViewerPopupComponent } from \"./performanceViewerPopupComponent\";\r\nimport { PressureObserverWrapper } from \"core/Misc/pressureObserverWrapper\";\r\n\r\nimport \"./scss/performanceViewer.scss\";\r\n\r\ninterface IPerformanceViewerComponentProps {\r\n    scene: Scene;\r\n}\r\n\r\n// arbitrary window size\r\nconst initialWindowSize = { width: 1024, height: 512 };\r\nconst initialGraphSize = { width: 724, height: 512 };\r\n\r\nexport enum IPerfMetadataCategory {\r\n    Count = \"Count\",\r\n    FrameSteps = \"Frame Steps Duration\",\r\n}\r\n\r\n// list of strategies to add to perf graph automatically.\r\nconst defaultStrategiesList = [\r\n    { strategyCallback: PerfCollectionStrategy.FpsStrategy() },\r\n    { strategyCallback: PerfCollectionStrategy.TotalMeshesStrategy(), category: IPerfMetadataCategory.Count, hidden: true },\r\n    { strategyCallback: PerfCollectionStrategy.ActiveMeshesStrategy(), category: IPerfMetadataCategory.Count, hidden: true },\r\n    { strategyCallback: PerfCollectionStrategy.ActiveIndicesStrategy(), category: IPerfMetadataCategory.Count, hidden: true },\r\n    { strategyCallback: PerfCollectionStrategy.ActiveBonesStrategy(), category: IPerfMetadataCategory.Count, hidden: true },\r\n    { strategyCallback: PerfCollectionStrategy.ActiveParticlesStrategy(), category: IPerfMetadataCategory.Count, hidden: true },\r\n    { strategyCallback: PerfCollectionStrategy.DrawCallsStrategy(), category: IPerfMetadataCategory.Count, hidden: true },\r\n    { strategyCallback: PerfCollectionStrategy.TotalLightsStrategy(), category: IPerfMetadataCategory.Count, hidden: true },\r\n    { strategyCallback: PerfCollectionStrategy.TotalVerticesStrategy(), category: IPerfMetadataCategory.Count, hidden: true },\r\n    { strategyCallback: PerfCollectionStrategy.TotalMaterialsStrategy(), category: IPerfMetadataCategory.Count, hidden: true },\r\n    { strategyCallback: PerfCollectionStrategy.TotalTexturesStrategy(), category: IPerfMetadataCategory.Count, hidden: true },\r\n    { strategyCallback: PerfCollectionStrategy.AbsoluteFpsStrategy(), category: IPerfMetadataCategory.FrameSteps, hidden: true },\r\n    { strategyCallback: PerfCollectionStrategy.MeshesSelectionStrategy(), category: IPerfMetadataCategory.FrameSteps, hidden: true },\r\n    { strategyCallback: PerfCollectionStrategy.RenderTargetsStrategy(), category: IPerfMetadataCategory.FrameSteps, hidden: true },\r\n    { strategyCallback: PerfCollectionStrategy.ParticlesStrategy(), category: IPerfMetadataCategory.FrameSteps, hidden: true },\r\n    { strategyCallback: PerfCollectionStrategy.SpritesStrategy(), category: IPerfMetadataCategory.FrameSteps, hidden: true },\r\n    { strategyCallback: PerfCollectionStrategy.AnimationsStrategy(), category: IPerfMetadataCategory.FrameSteps, hidden: true },\r\n    { strategyCallback: PerfCollectionStrategy.PhysicsStrategy(), category: IPerfMetadataCategory.FrameSteps, hidden: true },\r\n    { strategyCallback: PerfCollectionStrategy.RenderStrategy(), category: IPerfMetadataCategory.FrameSteps, hidden: true },\r\n    { strategyCallback: PerfCollectionStrategy.FrameTotalStrategy(), category: IPerfMetadataCategory.FrameSteps, hidden: true },\r\n    { strategyCallback: PerfCollectionStrategy.InterFrameStrategy(), category: IPerfMetadataCategory.FrameSteps, hidden: true },\r\n    { strategyCallback: PerfCollectionStrategy.GpuFrameTimeStrategy(), category: IPerfMetadataCategory.FrameSteps, hidden: true },\r\n];\r\n\r\nexport const PerformanceViewerComponent: React.FC<IPerformanceViewerComponentProps> = (props: IPerformanceViewerComponentProps) => {\r\n    const { scene } = props;\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [isLoadedFromCsv, setIsLoadedFromCsv] = useState(false);\r\n    const [performanceCollector, setPerformanceCollector] = useState<PerformanceViewerCollector | undefined>();\r\n    const [layoutObservable] = useState(new Observable<IPerfLayoutSize>());\r\n    const [returnToLiveObservable] = useState(new Observable<void>());\r\n\r\n    // do cleanup when the window is closed\r\n    const onClosePerformanceViewer = (window: Window | null) => {\r\n        if (window) {\r\n            window.close();\r\n        }\r\n        setIsLoadedFromCsv(false);\r\n        setIsOpen(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!isLoadedFromCsv) {\r\n            if (performanceCollector) {\r\n                performanceCollector.stop();\r\n                performanceCollector.clear(false);\r\n                addStrategies(performanceCollector);\r\n            }\r\n        }\r\n    }, [isLoadedFromCsv]);\r\n\r\n    const startPerformanceViewerPopup = () => {\r\n        if (performanceCollector) {\r\n            Inspector._CreatePersistentPopup(\r\n                {\r\n                    props: {\r\n                        id: \"performance-viewer\",\r\n                        title: \"Realtime Performance Viewer\",\r\n                        onClose: onClosePerformanceViewer,\r\n                        onResize: onResize,\r\n                        size: initialWindowSize,\r\n                    },\r\n                    children: (\r\n                        <PerformanceViewerPopupComponent\r\n                            scene={scene}\r\n                            layoutObservable={layoutObservable}\r\n                            returnToLiveObservable={returnToLiveObservable}\r\n                            performanceCollector={performanceCollector}\r\n                            initialGraphSize={initialGraphSize}\r\n                        />\r\n                    ),\r\n                },\r\n                document.body\r\n            );\r\n        }\r\n    };\r\n\r\n    const onPerformanceButtonClick = () => {\r\n        setIsOpen(true);\r\n        performanceCollector?.start(true);\r\n        startPerformanceViewerPopup();\r\n    };\r\n\r\n    const onLoadClick = (file: File) => {\r\n        Tools.ReadFile(file, (data: string) => {\r\n            // reopen window and load data!\r\n            setIsOpen(false);\r\n            setIsLoadedFromCsv(true);\r\n            performanceCollector?.stop();\r\n            const isValid = performanceCollector?.loadFromFileData(data);\r\n            if (!isValid) {\r\n                // if our data isnt valid we close the window.\r\n                setIsOpen(false);\r\n                performanceCollector?.start(true);\r\n            } else {\r\n                startPerformanceViewerPopup();\r\n            }\r\n        });\r\n    };\r\n\r\n    const onExportClick = () => {\r\n        performanceCollector?.exportDataToCsv();\r\n    };\r\n\r\n    const onResize = (window: Window) => {\r\n        const width = window?.innerWidth ?? 0;\r\n        const height = window?.innerHeight ?? 0;\r\n        layoutObservable.notifyObservers({ width, height });\r\n    };\r\n\r\n    const onToggleRecording = () => {\r\n        if (!performanceCollector?.isStarted) {\r\n            performanceCollector?.start(true);\r\n        } else {\r\n            performanceCollector?.stop();\r\n        }\r\n    };\r\n\r\n    const addStrategies = (perfCollector: PerformanceViewerCollector) => {\r\n        perfCollector.addCollectionStrategies(...defaultStrategiesList);\r\n        if (PressureObserverWrapper.IsAvailable) {\r\n            // Do not enable for now as the Pressure API does not\r\n            // report factors at the moment.\r\n            // perfCollector.addCollectionStrategies({\r\n            //     strategyCallback: PerfCollectionStrategy.ThermalStrategy(),\r\n            //     category: IPerfMetadataCategory.FrameSteps,\r\n            //     hidden: true,\r\n            // });\r\n            // perfCollector.addCollectionStrategies({\r\n            //     strategyCallback: PerfCollectionStrategy.PowerSupplyStrategy(),\r\n            //     category: IPerfMetadataCategory.FrameSteps,\r\n            //     hidden: true,\r\n            // });\r\n            perfCollector.addCollectionStrategies({\r\n                strategyCallback: PerfCollectionStrategy.PressureStrategy(),\r\n                category: IPerfMetadataCategory.FrameSteps,\r\n                hidden: true,\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const perfCollector = scene.getPerfCollector();\r\n        addStrategies(perfCollector);\r\n        setPerformanceCollector(perfCollector);\r\n    }, []);\r\n\r\n    return (\r\n        <LineContainerComponent title=\"Performance Viewer\">\r\n            {!isOpen && <ButtonLineComponent label=\"Open Realtime Perf Viewer\" onClick={onPerformanceButtonClick} />}\r\n            {!isOpen && <FileButtonLine accept=\"csv\" label=\"Load Perf Viewer using CSV\" onClick={onLoadClick} />}\r\n            <ButtonLineComponent label=\"Export Perf to CSV\" onClick={onExportClick} />\r\n            {!isOpen && <ButtonLineComponent label={performanceCollector?.isStarted ? \"Stop Recording\" : \"Begin Recording\"} onClick={onToggleRecording} />}\r\n        </LineContainerComponent>\r\n    );\r\n};\r\n"]}
{"version":3,"file":"performanceViewerSidebarComponent.js","sourceRoot":"","sources":["../../../../../src/components/actionTabs/tabs/performanceViewer/performanceViewerSidebarComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Color3 } from \"core/Maths/math.color\";\r\nimport type { IPerfMetadata } from \"core/Misc/interfaces/iPerfViewer\";\r\nimport type { PerformanceViewerCollector } from \"core/Misc/PerformanceViewer/performanceViewerCollector\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { ColorPickerLine } from \"shared-ui-components/lines/colorPickerComponent\";\r\nimport { faSquare, faCheckSquare } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { CheckBoxLineComponent } from \"shared-ui-components/lines/checkBoxLineComponent\";\r\nimport type { Observable } from \"core/Misc/observable\";\r\nimport type { IPerfMinMax, IVisibleRangeChangedObservableProps } from \"../../../graph/graphSupportingTypes\";\r\nimport { Engine } from \"core/Engines/engine\";\r\n\r\ninterface IPerformanceViewerSidebarComponentProps {\r\n    collector: PerformanceViewerCollector;\r\n    onVisibleRangeChangedObservable?: Observable<IVisibleRangeChangedObservableProps>;\r\n}\r\n\r\nexport const PerformanceViewerSidebarComponent = (props: IPerformanceViewerSidebarComponentProps) => {\r\n    const { collector, onVisibleRangeChangedObservable } = props;\r\n    // Map from id to IPerfMetadata information\r\n    const [metadataMap, setMetadataMap] = useState<Map<string, IPerfMetadata>>();\r\n    // Map from category to all the ids belonging to that category\r\n    const [metadataCategoryId, setMetadataCategoryId] = useState<Map<string, string[]>>();\r\n    // Count how many elements are checked for that category\r\n    const [metadataCategoryChecked, setMetadataCategoryChecked] = useState<Map<string, number>>();\r\n    // List of ordered categories\r\n    const [metadataCategories, setMetadataCategories] = useState<string[]>();\r\n    // Min/Max/Current values of the ids\r\n    const [valueMap, setValueMap] = useState<Map<string, IPerfMinMax>>();\r\n\r\n    useEffect(() => {\r\n        if (!onVisibleRangeChangedObservable) {\r\n            return;\r\n        }\r\n        const observer = (props: IVisibleRangeChangedObservableProps) => {\r\n            setValueMap(props.valueMap);\r\n        };\r\n        onVisibleRangeChangedObservable.add(observer);\r\n        return () => {\r\n            onVisibleRangeChangedObservable.removeCallback(observer);\r\n        };\r\n    }, [onVisibleRangeChangedObservable]);\r\n\r\n    useEffect(() => {\r\n        const onUpdateMetadata = (metadata: Map<string, IPerfMetadata>) => {\r\n            const newCategoryIdMap = new Map<string, string[]>();\r\n            const newCategoryCheckedMap = new Map<string, number>();\r\n\r\n            metadata.forEach((value: IPerfMetadata, id: string) => {\r\n                const currentCategory = value.category ?? \"\";\r\n                const currentIds: string[] = newCategoryIdMap.get(currentCategory) ?? [];\r\n                let currentChecked: number = newCategoryCheckedMap.get(currentCategory) ?? 0;\r\n\r\n                currentIds.push(id);\r\n                newCategoryIdMap.set(currentCategory, currentIds);\r\n\r\n                if (!value.hidden) {\r\n                    currentChecked += 1;\r\n                }\r\n                newCategoryCheckedMap.set(currentCategory, currentChecked);\r\n            });\r\n            const orderedCategories = Array.from(newCategoryIdMap.keys());\r\n            orderedCategories.sort();\r\n\r\n            setMetadataCategoryId(newCategoryIdMap);\r\n            setMetadataCategoryChecked(newCategoryCheckedMap);\r\n            setMetadataMap(metadata);\r\n            setMetadataCategories(orderedCategories);\r\n        };\r\n\r\n        collector.metadataObservable.add(onUpdateMetadata);\r\n        return () => {\r\n            collector.metadataObservable.removeCallback(onUpdateMetadata);\r\n        };\r\n    }, []);\r\n\r\n    const onCheckChange = (id: string) => (selected: boolean) => {\r\n        collector.updateMetadata(id, \"hidden\", !selected);\r\n    };\r\n\r\n    const onCheckAllChange = (category: string) => (selected: boolean) => {\r\n        const categoryIds = metadataCategoryId?.get(category);\r\n        categoryIds?.forEach((id) => {\r\n            collector.updateMetadata(id, \"hidden\", !selected);\r\n        });\r\n    };\r\n\r\n    const onColorChange = (id: string) => (color: string) => {\r\n        collector.updateMetadata(id, \"color\", color);\r\n    };\r\n\r\n    return (\r\n        <div id=\"performance-viewer-sidebar\">\r\n            {metadataCategories &&\r\n                metadataCategories.map((category) => (\r\n                    <div key={`category-${category || \"version\"}`}>\r\n                        {category ? (\r\n                            <div className=\"category-header header sidebar-item\" key={`header-${category}`}>\r\n                                <span className=\"category\">{category}</span>\r\n                                <CheckBoxLineComponent\r\n                                    isSelected={() => metadataCategoryChecked?.get(category) === metadataCategoryId?.get(category)?.length}\r\n                                    onSelect={onCheckAllChange(category)}\r\n                                    faIcons={{ enabled: faCheckSquare, disabled: faSquare }}\r\n                                />\r\n                            </div>\r\n                        ) : (\r\n                            <div className=\"version-header sidebar-item\" key={\"header-version\"}>\r\n                                <span className=\"category\">Version:</span>\r\n                                <span className=\"value\">{Engine.Version}</span>\r\n                            </div>\r\n                        )}\r\n                        {metadataCategoryId?.get(category)?.map((id) => {\r\n                            const metadata = metadataMap?.get(id);\r\n                            const range = valueMap?.get(id);\r\n                            return (\r\n                                metadata && (\r\n                                    <div key={`perf-sidebar-item-${id}`} className=\"sidebar-item measure\">\r\n                                        {/* div with check box, color picker and category name */}\r\n                                        <div className=\"category\">\r\n                                            <CheckBoxLineComponent\r\n                                                isSelected={() => !metadata.hidden}\r\n                                                onSelect={onCheckChange(id)}\r\n                                                faIcons={{ enabled: faCheckSquare, disabled: faSquare }}\r\n                                            />\r\n                                            <ColorPickerLine value={Color3.FromHexString(metadata.color ?? \"#000\")} onColorChanged={onColorChange(id)} shouldPopRight />\r\n                                            <span className=\"sidebar-item-label\">{id}</span>\r\n                                        </div>\r\n                                        {/* div with category value */}\r\n                                        {range && <div className=\"value\"> {((range.min + range.max) / 2).toFixed(2)} </div>}\r\n                                    </div>\r\n                                )\r\n                            );\r\n                        })}\r\n                    </div>\r\n                ))}\r\n        </div>\r\n    );\r\n};\r\n"]}
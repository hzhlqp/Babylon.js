{"version":3,"file":"textureLineComponent.js","sourceRoot":"","sources":["../../../../src/components/actionTabs/lines/textureLineComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport * as React from \"react\";\r\n\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\n\r\nimport type { GlobalState } from \"../../../components/globalState\";\r\nimport { ButtonLineComponent } from \"shared-ui-components/lines/buttonLineComponent\";\r\nimport type { TextureChannelsToDisplay } from \"../../../textureHelper\";\r\nimport { TextureHelper } from \"../../../textureHelper\";\r\n\r\ninterface ITextureLineComponentProps {\r\n    texture: BaseTexture;\r\n    width: number;\r\n    height: number;\r\n    globalState?: GlobalState;\r\n    hideChannelSelect?: boolean;\r\n}\r\n\r\nexport class TextureLineComponent extends React.Component<ITextureLineComponentProps, { channels: TextureChannelsToDisplay; face: number }> {\r\n    private _canvasRef: React.RefObject<HTMLCanvasElement>;\r\n\r\n    private static _TextureChannelStates = {\r\n        R: { R: true, G: false, B: false, A: false },\r\n        G: { R: false, G: true, B: false, A: false },\r\n        B: { R: false, G: false, B: true, A: false },\r\n        A: { R: false, G: false, B: false, A: true },\r\n        ALL: { R: true, G: true, B: true, A: true },\r\n    };\r\n\r\n    constructor(props: ITextureLineComponentProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            channels: TextureLineComponent._TextureChannelStates.ALL,\r\n            face: 0,\r\n        };\r\n\r\n        this._canvasRef = React.createRef();\r\n    }\r\n\r\n    override shouldComponentUpdate(nextProps: ITextureLineComponentProps, nextState: { channels: TextureChannelsToDisplay; face: number }): boolean {\r\n        return nextProps.texture !== this.props.texture || nextState.channels !== this.state.channels || nextState.face !== this.state.face;\r\n    }\r\n\r\n    override componentDidMount() {\r\n        this.updatePreview();\r\n    }\r\n\r\n    override componentDidUpdate() {\r\n        this.updatePreview();\r\n    }\r\n\r\n    async updatePreview() {\r\n        const previewCanvas = this._canvasRef.current!;\r\n        const texture = this.props.texture;\r\n        const size = texture.getSize();\r\n        const ratio = size.width / size.height;\r\n        let width = this.props.width;\r\n        let height = (width / ratio) | 1;\r\n        const engine = this.props.texture.getScene()?.getEngine();\r\n\r\n        if (engine && height > engine.getCaps().maxTextureSize) {\r\n            // the texture.width/texture.height ratio is too small, so use the real width/height dimensions of the texture instead of the canvas width/computed height\r\n            width = this.props.texture.getSize().width;\r\n            height = this.props.texture.getSize().height;\r\n        }\r\n\r\n        try {\r\n            const data = await TextureHelper.GetTextureDataAsync(texture, width, height, this.state.face, this.state.channels, this.props.globalState);\r\n\r\n            previewCanvas.width = width;\r\n            previewCanvas.height = height;\r\n            const context = previewCanvas.getContext(\"2d\");\r\n\r\n            if (context) {\r\n                // Copy the pixels to the preview canvas\r\n                const imageData = context.createImageData(width, height);\r\n                const castData = imageData.data;\r\n                castData.set(data);\r\n                context.putImageData(imageData, 0, 0);\r\n            }\r\n            previewCanvas.style.height = height + \"px\";\r\n        } catch (e) {\r\n            previewCanvas.width = width;\r\n            previewCanvas.height = height;\r\n            previewCanvas.style.height = height + \"px\";\r\n        }\r\n    }\r\n\r\n    override render() {\r\n        const texture = this.props.texture;\r\n\r\n        return (\r\n            <>\r\n                <div className=\"textureLine\">\r\n                    {!this.props.hideChannelSelect && texture.isCube && (\r\n                        <div className=\"control3D\">\r\n                            <button className={this.state.face === 0 ? \"px command selected\" : \"px command\"} onClick={() => this.setState({ face: 0 })}>\r\n                                +X\r\n                            </button>\r\n                            <button className={this.state.face === 1 ? \"nx command selected\" : \"nx command\"} onClick={() => this.setState({ face: 1 })}>\r\n                                -X\r\n                            </button>\r\n                            <button className={this.state.face === 2 ? \"py command selected\" : \"py command\"} onClick={() => this.setState({ face: 2 })}>\r\n                                +Y\r\n                            </button>\r\n                            <button className={this.state.face === 3 ? \"ny command selected\" : \"ny command\"} onClick={() => this.setState({ face: 3 })}>\r\n                                -Y\r\n                            </button>\r\n                            <button className={this.state.face === 4 ? \"pz command selected\" : \"pz command\"} onClick={() => this.setState({ face: 4 })}>\r\n                                +Z\r\n                            </button>\r\n                            <button className={this.state.face === 5 ? \"nz command selected\" : \"nz command\"} onClick={() => this.setState({ face: 5 })}>\r\n                                -Z\r\n                            </button>\r\n                        </div>\r\n                    )}\r\n                    {!this.props.hideChannelSelect && !texture.isCube && (\r\n                        <div className=\"control\">\r\n                            <button\r\n                                className={this.state.channels === TextureLineComponent._TextureChannelStates.R ? \"red command selected\" : \"red command\"}\r\n                                onClick={() => this.setState({ channels: TextureLineComponent._TextureChannelStates.R })}\r\n                            >\r\n                                R\r\n                            </button>\r\n                            <button\r\n                                className={this.state.channels === TextureLineComponent._TextureChannelStates.G ? \"green command selected\" : \"green command\"}\r\n                                onClick={() => this.setState({ channels: TextureLineComponent._TextureChannelStates.G })}\r\n                            >\r\n                                G\r\n                            </button>\r\n                            <button\r\n                                className={this.state.channels === TextureLineComponent._TextureChannelStates.B ? \"blue command selected\" : \"blue command\"}\r\n                                onClick={() => this.setState({ channels: TextureLineComponent._TextureChannelStates.B })}\r\n                            >\r\n                                B\r\n                            </button>\r\n                            <button\r\n                                className={this.state.channels === TextureLineComponent._TextureChannelStates.A ? \"alpha command selected\" : \"alpha command\"}\r\n                                onClick={() => this.setState({ channels: TextureLineComponent._TextureChannelStates.A })}\r\n                            >\r\n                                A\r\n                            </button>\r\n                            <button\r\n                                className={this.state.channels === TextureLineComponent._TextureChannelStates.ALL ? \"all command selected\" : \"all command\"}\r\n                                onClick={() => this.setState({ channels: TextureLineComponent._TextureChannelStates.ALL })}\r\n                            >\r\n                                ALL\r\n                            </button>\r\n                        </div>\r\n                    )}\r\n                    <canvas ref={this._canvasRef} className=\"preview\" />\r\n                </div>\r\n                {texture.isRenderTarget && (\r\n                    <ButtonLineComponent\r\n                        label=\"Refresh\"\r\n                        onClick={() => {\r\n                            this.updatePreview();\r\n                        }}\r\n                    />\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n}\r\n"]}
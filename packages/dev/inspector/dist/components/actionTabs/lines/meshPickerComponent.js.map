{"version":3,"file":"meshPickerComponent.js","sourceRoot":"","sources":["../../../../src/components/actionTabs/lines/meshPickerComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport type { GlobalState } from \"../../globalState\";\r\nimport type { Observable } from \"core/Misc/observable\";\r\nimport type { PropertyChangedEvent } from \"../../propertyChangedEvent\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { OptionsLine } from \"shared-ui-components/lines/optionsLineComponent\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\n\r\ninterface IMeshPickerComponentProps {\r\n    globalState: GlobalState;\r\n    target: any;\r\n    property: string;\r\n    scene: Scene;\r\n    label: string;\r\n    onPropertyChangedObservable?: Observable<PropertyChangedEvent>;\r\n}\r\n\r\nexport class MeshPickerComponent extends React.Component<IMeshPickerComponentProps> {\r\n    constructor(props: IMeshPickerComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    override render() {\r\n        const meshEmitters = this.props.scene.meshes.filter((m) => !!m.name);\r\n        meshEmitters.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n        const emitterOptions = [{ label: \"None\", value: -1 }];\r\n\r\n        meshEmitters.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n        emitterOptions.push(\r\n            ...meshEmitters.map((v, i) => {\r\n                return { label: v.name, value: i };\r\n            })\r\n        );\r\n        return (\r\n            <>\r\n                <OptionsLine\r\n                    label={this.props.label}\r\n                    options={emitterOptions}\r\n                    target={this.props.target}\r\n                    propertyName={this.props.property}\r\n                    noDirectUpdate={true}\r\n                    onSelect={(value) => {\r\n                        const currentState = this.props.target[this.props.property];\r\n                        switch (value) {\r\n                            case -1:\r\n                                this.props.target[this.props.property] = null;\r\n                                break;\r\n                            default:\r\n                                this.props.target[this.props.property] = meshEmitters[value as number];\r\n                        }\r\n\r\n                        if (this.props.onPropertyChangedObservable) {\r\n                            this.props.onPropertyChangedObservable.notifyObservers({\r\n                                object: this.props.target,\r\n                                property: this.props.property,\r\n                                value: this.props.target[this.props.property],\r\n                                initialValue: currentState,\r\n                            });\r\n                        }\r\n\r\n                        this.forceUpdate();\r\n                    }}\r\n                    extractValue={() => {\r\n                        if (!this.props.target[this.props.property]) {\r\n                            return -1;\r\n                        }\r\n\r\n                        const meshIndex = meshEmitters.indexOf(this.props.target[this.props.property] as AbstractMesh);\r\n\r\n                        if (meshIndex > -1) {\r\n                            return meshIndex;\r\n                        }\r\n\r\n                        return -1;\r\n                    }}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n"]}
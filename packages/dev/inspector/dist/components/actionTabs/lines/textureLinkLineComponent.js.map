{"version":3,"file":"textureLinkLineComponent.js","sourceRoot":"","sources":["../../../../src/components/actionTabs/lines/textureLinkLineComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\n\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observable, Observer } from \"core/Misc/observable\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\n\r\nimport { TextLineComponent } from \"shared-ui-components/lines/textLineComponent\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faWrench, faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { FileButtonLine } from \"shared-ui-components/lines/fileButtonLineComponent\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { CubeTexture } from \"core/Materials/Textures/cubeTexture\";\r\n\r\nexport interface ITextureLinkLineComponentProps {\r\n    label: string;\r\n    texture: Nullable<BaseTexture>;\r\n    material?: Material;\r\n    texturedObject?: { getScene: () => Scene };\r\n    onSelectionChangedObservable?: Observable<any>;\r\n    onDebugSelectionChangeObservable?: Observable<TextureLinkLineComponent>;\r\n    propertyName?: string;\r\n    onTextureCreated?: (texture: BaseTexture) => void;\r\n    customDebugAction?: (state: boolean) => void;\r\n    onTextureRemoved?: () => void;\r\n    fileFormats?: string;\r\n    cubeOnly?: boolean;\r\n}\r\n\r\nexport class TextureLinkLineComponent extends React.Component<ITextureLinkLineComponentProps, { isDebugSelected: boolean }> {\r\n    private _onDebugSelectionChangeObserver: Nullable<Observer<TextureLinkLineComponent>>;\r\n\r\n    constructor(props: ITextureLinkLineComponentProps) {\r\n        super(props);\r\n\r\n        const material = this.props.material;\r\n        const texture = this.props.texture;\r\n\r\n        this.state = { isDebugSelected: material && material.reservedDataStore && material.reservedDataStore.debugTexture === texture };\r\n    }\r\n\r\n    override componentDidMount() {\r\n        if (!this.props.onDebugSelectionChangeObservable) {\r\n            return;\r\n        }\r\n        this._onDebugSelectionChangeObserver = this.props.onDebugSelectionChangeObservable.add((line) => {\r\n            if (line !== this) {\r\n                this.setState({ isDebugSelected: false });\r\n            }\r\n        });\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        if (this.props.onDebugSelectionChangeObservable && this._onDebugSelectionChangeObserver) {\r\n            this.props.onDebugSelectionChangeObservable.remove(this._onDebugSelectionChangeObserver);\r\n        }\r\n    }\r\n\r\n    debugTexture() {\r\n        if (this.props.customDebugAction) {\r\n            const newState = !this.state.isDebugSelected;\r\n            this.props.customDebugAction(newState);\r\n            this.setState({ isDebugSelected: newState });\r\n\r\n            if (this.props.onDebugSelectionChangeObservable) {\r\n                this.props.onDebugSelectionChangeObservable.notifyObservers(this);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        const texture = this.props.texture;\r\n\r\n        const material = this.props.material;\r\n\r\n        if (!material || !texture) {\r\n            return;\r\n        }\r\n        const scene = material.getScene();\r\n\r\n        if (material.reservedDataStore && material.reservedDataStore.debugTexture === texture) {\r\n            const debugMaterial = material.reservedDataStore.debugMaterial;\r\n            texture.level = material.reservedDataStore.level;\r\n            for (const mesh of scene.meshes) {\r\n                if (mesh.material === debugMaterial) {\r\n                    mesh.material = material;\r\n                }\r\n            }\r\n            debugMaterial.dispose();\r\n            material.reservedDataStore.debugTexture = null;\r\n            material.reservedDataStore.debugMaterial = null;\r\n\r\n            this.setState({ isDebugSelected: false });\r\n            return;\r\n        }\r\n\r\n        let checkMaterial = material;\r\n        let needToDisposeCheckMaterial = false;\r\n        if (material.reservedDataStore && material.reservedDataStore.debugTexture) {\r\n            checkMaterial = material.reservedDataStore.debugMaterial;\r\n            needToDisposeCheckMaterial = true;\r\n        }\r\n\r\n        const debugMaterial = new StandardMaterial(\"debugMaterial\", scene);\r\n        debugMaterial.disableLighting = true;\r\n        debugMaterial.sideOrientation = material.sideOrientation;\r\n        debugMaterial.emissiveTexture = texture;\r\n        debugMaterial.forceDepthWrite = true;\r\n        debugMaterial.reservedDataStore = { hidden: true };\r\n\r\n        for (const mesh of scene.meshes) {\r\n            if (mesh.material === checkMaterial) {\r\n                mesh.material = debugMaterial;\r\n            }\r\n        }\r\n\r\n        if (!material.reservedDataStore) {\r\n            material.reservedDataStore = {};\r\n        }\r\n\r\n        material.reservedDataStore.debugTexture = texture;\r\n        material.reservedDataStore.debugMaterial = debugMaterial;\r\n        material.reservedDataStore.level = texture.level;\r\n        texture.level = 1.0;\r\n\r\n        if (this.props.onDebugSelectionChangeObservable) {\r\n            this.props.onDebugSelectionChangeObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (needToDisposeCheckMaterial) {\r\n            checkMaterial.dispose();\r\n        }\r\n\r\n        this.setState({ isDebugSelected: true });\r\n    }\r\n\r\n    onLink() {\r\n        if (!this.props.onSelectionChangedObservable) {\r\n            return;\r\n        }\r\n\r\n        const texture = this.props.texture;\r\n        this.props.onSelectionChangedObservable.notifyObservers(texture!);\r\n    }\r\n\r\n    updateTexture(file: File) {\r\n        const material = this.props.material ?? this.props.texturedObject;\r\n        if (!material) {\r\n            return;\r\n        }\r\n        Tools.ReadFile(\r\n            file,\r\n            (data) => {\r\n                const blob = new Blob([data], { type: \"octet/stream\" });\r\n                const url = URL.createObjectURL(blob);\r\n\r\n                const extension = file.name.split(\".\").pop()?.toLowerCase();\r\n                const texture = this.props.cubeOnly\r\n                    ? new CubeTexture(url, material.getScene(), [], false, undefined, undefined, undefined, undefined, false, extension ? \".\" + extension : undefined)\r\n                    : new Texture(url, material.getScene(), false, false);\r\n\r\n                if (this.props.propertyName) {\r\n                    (material as any)[this.props.propertyName!] = texture;\r\n                } else if (this.props.onTextureCreated) {\r\n                    this.props.onTextureCreated(texture);\r\n                }\r\n\r\n                this.forceUpdate();\r\n            },\r\n            undefined,\r\n            true\r\n        );\r\n    }\r\n\r\n    removeTexture() {\r\n        const material = this.props.material ?? this.props.texturedObject;\r\n        if (!material) {\r\n            return;\r\n        }\r\n        if (this.props.propertyName) {\r\n            (material as any)[this.props.propertyName!] = null;\r\n        } else if (this.props.onTextureRemoved) {\r\n            this.props.onTextureRemoved();\r\n        }\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    override render() {\r\n        const texture = this.props.texture;\r\n\r\n        if (!texture) {\r\n            if (this.props.propertyName || this.props.onTextureCreated) {\r\n                return (\r\n                    <FileButtonLine\r\n                        label={`Add ${this.props.label} texture`}\r\n                        onClick={(file) => this.updateTexture(file)}\r\n                        accept={this.props.fileFormats ?? \".jpg, .png, .tga, .dds, .env, .exr\"}\r\n                    />\r\n                );\r\n            }\r\n            return null;\r\n        }\r\n        return (\r\n            <div className=\"textureLinkLine\">\r\n                {(!texture.isCube || this.props.cubeOnly) && (this.props.material || this.props.texturedObject) && (\r\n                    <>\r\n                        <div className={this.state.isDebugSelected ? \"debug selected\" : \"debug\"}>\r\n                            {this.props.material && (\r\n                                <span className=\"actionIcon\" onClick={() => this.debugTexture()} title=\"Render as main texture\">\r\n                                    <FontAwesomeIcon icon={faWrench} />\r\n                                </span>\r\n                            )}\r\n                            <span className=\"actionIcon\" onClick={() => this.removeTexture()} title=\"Remove texture\">\r\n                                <FontAwesomeIcon icon={faTrash} />\r\n                            </span>\r\n                        </div>\r\n                    </>\r\n                )}\r\n                <TextLineComponent label={this.props.label} value={texture.name} onLink={() => this.onLink()} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
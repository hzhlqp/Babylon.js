{"version":3,"file":"HexColor.js","sourceRoot":"","sources":["../../../src/components/colorPicker/HexColor.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,KAAK,MAAM,yBAAyB,CAAC;AAS5C,MAAM,OAAO,iBAAkB,SAAQ,KAAK,CAAC,SAA0C;IACnF,YAAY,KAAqB;QAC7B,KAAK,CAAC,KAAK,CAAC,CAAC;QAEb,IAAI,CAAC,KAAK,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC;IAC5D,CAAC;IAEQ,qBAAqB,CAAC,SAAyB,EAAE,SAA0B;QAChF,IAAI,SAAS,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE;YACtC,SAAS,CAAC,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;SACpD;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,IAAI;QACA,IAAI,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;YACvB,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;SACrC;IACL,CAAC;IAED,MAAM;QACF,IAAI,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;YACvB,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,GAAG,KAAK,CAAC;SACtC;IACL,CAAC;IAED,cAAc,CAAC,WAAmB;QAC9B,IAAI,WAAW,IAAI,EAAE,IAAI,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,KAAK,EAAE;YACnE,OAAO;SACV;QAED,IAAI,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,WAAW,EAAE,CAAC,CAAC;QAEpC,IAAI,WAAW,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;YAClD,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,KAAK,CAAC,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC7D,WAAW,GAAG,WAAW,GAAG,IAAI,CAAC;aACpC;iBAAM;gBACH,OAAO;aACV;SACJ;QAED,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,GAAG,WAAW,CAAC,CAAC;IAC3C,CAAC;IAEe,MAAM;QAClB,OAAO,CACH,eAAK,SAAS,EAAE,KAAK,CAAC,cAAc,aAChC,cAAK,SAAS,EAAE,KAAK,CAAC,mBAAmB,oBAAW,EACpD,cAAK,SAAS,EAAE,KAAK,CAAC,mBAAmB,YACrC,gBACI,IAAI,EAAC,QAAQ;wBACb,wBAAwB;wBACxB,SAAS,EAAE,KAAK,CAAC,cAAc,EAC/B,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,EACrB,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,EAC3B,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,EAC1B,QAAQ,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,GAC1D,GACA,IACJ,CACT,CAAC;IACN,CAAC;CACJ","sourcesContent":["import * as React from \"react\";\r\nimport type { LockObject } from \"../../tabs/propertyGrids/lockObject\";\r\nimport style from \"./HexColor.modules.scss\";\r\n\r\nexport interface IHexColorProps {\r\n    value: string;\r\n    expectedLength: number;\r\n    onChange: (value: string) => void;\r\n    lockObject: LockObject;\r\n}\r\n\r\nexport class HexColorComponent extends React.Component<IHexColorProps, { hex: string }> {\r\n    constructor(props: IHexColorProps) {\r\n        super(props);\r\n\r\n        this.state = { hex: this.props.value.replace(\"#\", \"\") };\r\n    }\r\n\r\n    override shouldComponentUpdate(nextProps: IHexColorProps, nextState: { hex: string }) {\r\n        if (nextProps.value !== this.props.value) {\r\n            nextState.hex = nextProps.value.replace(\"#\", \"\");\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    lock() {\r\n        if (this.props.lockObject) {\r\n            this.props.lockObject.lock = true;\r\n        }\r\n    }\r\n\r\n    unlock() {\r\n        if (this.props.lockObject) {\r\n            this.props.lockObject.lock = false;\r\n        }\r\n    }\r\n\r\n    updateHexValue(valueString: string) {\r\n        if (valueString != \"\" && /^[0-9A-Fa-f]+$/g.test(valueString) == false) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ hex: valueString });\r\n\r\n        if (valueString.length !== this.props.expectedLength) {\r\n            if (this.props.expectedLength === 8 && valueString.length === 6) {\r\n                valueString = valueString + \"FF\";\r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.props.onChange(\"#\" + valueString);\r\n    }\r\n\r\n    public override render() {\r\n        return (\r\n            <div className={style.colorPickerHex}>\r\n                <div className={style.colorPickerHexLabel}>Hex</div>\r\n                <div className={style.colorPickerHexValue}>\r\n                    <input\r\n                        type=\"string\"\r\n                        // className=\"hex-input\"\r\n                        className={style.colorPickerHex}\r\n                        value={this.state.hex}\r\n                        onBlur={() => this.unlock()}\r\n                        onFocus={() => this.lock()}\r\n                        onChange={(evt) => this.updateHexValue(evt.target.value)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
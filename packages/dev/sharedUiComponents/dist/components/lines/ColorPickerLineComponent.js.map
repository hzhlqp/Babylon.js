{"version":3,"file":"ColorPickerLineComponent.js","sourceRoot":"","sources":["../../../src/components/lines/ColorPickerLineComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport type { Color4, Color3 } from \"core/Maths/math.color\";\r\nimport { ColorPickerComponent } from \"../colorPicker/ColorPicker\";\r\nimport type { LockObject } from \"../../tabs/propertyGrids/lockObject\";\r\nimport style from \"./ColorPickerLineComponent.modules.scss\";\r\n\r\nexport interface IColorPickerLineComponentProps {\r\n    value: Color4 | Color3;\r\n    linearHint?: boolean;\r\n    onColorChanged: (newOne: string) => void;\r\n    icon?: string;\r\n    iconLabel?: string;\r\n    shouldPopRight?: boolean;\r\n    lockObject?: LockObject;\r\n    backgroundColor?: string;\r\n}\r\n\r\ninterface IColorPickerComponentState {\r\n    pickerEnabled: boolean;\r\n    color: Color3 | Color4;\r\n    hex: string;\r\n}\r\n\r\nexport class ColorPickerLineComponent extends React.Component<IColorPickerLineComponentProps, IColorPickerComponentState> {\r\n    private _floatRef: React.RefObject<HTMLDivElement>;\r\n    private _floatHostRef: React.RefObject<HTMLDivElement>;\r\n    private _coverRef: React.RefObject<HTMLDivElement>;\r\n\r\n    constructor(props: IColorPickerLineComponentProps) {\r\n        super(props);\r\n\r\n        this.state = { pickerEnabled: false, color: this.props.value, hex: this.getHexString(props) };\r\n\r\n        this._floatRef = React.createRef();\r\n        this._floatHostRef = React.createRef();\r\n        this._coverRef = React.createRef();\r\n    }\r\n\r\n    syncPositions() {\r\n        const div = this._floatRef.current as HTMLDivElement;\r\n        const host = this._floatHostRef.current as HTMLDivElement;\r\n\r\n        if (!div || !host) {\r\n            return;\r\n        }\r\n\r\n        let top = host.getBoundingClientRect().top;\r\n        const height = div.getBoundingClientRect().height;\r\n\r\n        if (top + height + 10 > window.innerHeight) {\r\n            top = window.innerHeight - height - 10;\r\n        }\r\n\r\n        div.style.top = top + \"px\";\r\n        if (!this.props.shouldPopRight) {\r\n            div.style.left = host.getBoundingClientRect().left - div.getBoundingClientRect().width + \"px\";\r\n        } else {\r\n            div.style.left = host.getBoundingClientRect().left + \"px\";\r\n        }\r\n    }\r\n\r\n    override shouldComponentUpdate(nextProps: IColorPickerLineComponentProps, nextState: IColorPickerComponentState) {\r\n        const diffProps = this.getHexString(nextProps) !== this.getHexString();\r\n\r\n        if (diffProps) {\r\n            nextState.color = nextProps.value;\r\n            nextState.hex = this.getHexString(nextProps);\r\n        }\r\n\r\n        return diffProps || nextState.hex !== this.state.hex || nextState.pickerEnabled !== this.state.pickerEnabled;\r\n    }\r\n\r\n    getHexString(props = this.props) {\r\n        return props.value.toHexString();\r\n    }\r\n\r\n    override componentDidUpdate() {\r\n        this.syncPositions();\r\n    }\r\n\r\n    override componentDidMount() {\r\n        this.syncPositions();\r\n    }\r\n\r\n    override render() {\r\n        return (\r\n            <div className={style.colorPicker}>\r\n                {this.props.icon && <img src={this.props.icon} title={this.props.iconLabel} alt={this.props.iconLabel} className=\"icon\" />}\r\n                <div className={style.colorRectBackground} ref={this._floatHostRef} onClick={() => this.setState({ pickerEnabled: true })}>\r\n                    <div className={style.colorRect} style={{ background: this.state.hex }}></div>\r\n                </div>\r\n                {this.state.pickerEnabled && (\r\n                    <>\r\n                        <div\r\n                            ref={this._coverRef}\r\n                            className={style.colorPickerCover}\r\n                            onClick={(evt) => {\r\n                                if (evt.target !== this._coverRef.current) {\r\n                                    return;\r\n                                }\r\n                                this.setState({ pickerEnabled: false });\r\n                            }}\r\n                        >\r\n                            <div className={style.colorPickerFloat} ref={this._floatRef}>\r\n                                <ColorPickerComponent\r\n                                    backgroundColor={this.props.backgroundColor}\r\n                                    lockObject={this.props.lockObject || ({} as any)}\r\n                                    color={this.state.color}\r\n                                    linearhint={this.props.linearHint}\r\n                                    onColorChanged={(color: Color3 | Color4) => {\r\n                                        const hex: string = color.toHexString();\r\n                                        this.setState({ hex, color });\r\n                                        this.props.onColorChanged(hex);\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
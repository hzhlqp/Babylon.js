{"version":3,"file":"OptionsLineComponent.js","sourceRoot":"","sources":["../../../src/components/lines/OptionsLineComponent.tsx"],"names":[],"mappings":";AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACjC,OAAO,EAAE,mBAAmB,EAAE,MAAM,wBAAwB,CAAC;AAC7D,OAAO,KAAK,MAAM,qCAAqC,CAAC;AAsBxD;;;GAGG;AACH,IAAK,YAGJ;AAHD,WAAK,YAAY;IACb,qDAAW,CAAA;IACX,mDAAU,CAAA;AACd,CAAC,EAHI,YAAY,KAAZ,YAAY,QAGhB;AAED,MAAM,aAAa,GAAG,iBAAiB,CAAC;AAExC,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,KAAiC,EAAE,EAAE;IACtE,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,yBAAyB;IAE/F,MAAM,cAAc,GAAG,CAAC,GAAmC,EAAE,EAAE;QAC3D,IAAI,GAAG,CAAC,MAAM,CAAC,KAAK,KAAK,aAAa,EAAE;YACpC,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;SACvC;aAAM;YACH,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SAC5C;IACL,CAAC,CAAC;IAEF,MAAM,WAAW,GAAG,CAAC,KAAa,EAAE,EAAE;QAClC,MAAM,aAAa,GAAG,KAAK,CAAC;QAC5B,MAAM,SAAS,GAAG,EAAE,KAAK,EAAE,aAAa,EAAE,KAAK,EAAE,aAAa,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC;QAC5F,KAAK,CAAC,aAAa,EAAE,CAAC,SAAS,CAAC,CAAC;QACjC,KAAK,CAAC,gBAAgB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACxC,cAAc,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;IACzC,CAAC,CAAC;IAEF,MAAM,iBAAiB,GAAG,GAAG,EAAE;QAC3B,cAAc,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;IACzC,CAAC,CAAC;IAEF,OAAO,CACH,eAAK,SAAS,EAAE,KAAK,CAAC,WAAW,aAC5B,WAAW,KAAK,YAAY,CAAC,MAAM,IAAI,CACpC,KAAC,mBAAmB,IAChB,WAAW,EAAE,WAAW,EACxB,WAAW,EAAE,KAAK,CAAC,oBAAoB,EACvC,aAAa,EAAE,KAAK,CAAC,sBAAsB,EAC3C,YAAY,EAAE,iBAAiB,GACjC,CACL,EACA,WAAW,KAAK,YAAY,CAAC,OAAO,IAAI,CACrC,kBAAQ,SAAS,EAAE,KAAK,CAAC,aAAa,EAAE,QAAQ,EAAE,cAAc,EAAE,KAAK,EAAE,KAAK,CAAC,mBAAmB,aAC7F,KAAK,CAAC,aAAa,IAAI,CACpB,iBAA4B,KAAK,EAAE,aAAa,YAC3C,KAAK,CAAC,aAAa,IAAI,QAAQ,IADvB,aAAa,CAEjB,CACZ,EACA,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAC3B,iBAAwB,KAAK,EAAE,MAAM,CAAC,KAAK,YACtC,MAAM,CAAC,KAAK,IADJ,MAAM,CAAC,EAAE,CAEb,CACZ,CAAC,IACG,CACZ,IACC,CACT,CAAC;AACN,CAAC,CAAC","sourcesContent":["import type { ChangeEvent } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { TextInputWithSubmit } from \"../TextInputWithSubmit\";\r\nimport style from \"./OptionsLineComponent.modules.scss\";\r\n\r\n/**\r\n * This components represents an options menu with optional\r\n * customizable properties. Option IDs should be unique.\r\n */\r\nexport interface IOption {\r\n    label: string;\r\n    value: string;\r\n    id: string;\r\n}\r\n\r\nexport interface IOptionsLineComponentProps {\r\n    options: IOption[];\r\n    addOptionPlaceholder?: string; // Placeholder text to display when adding a new option\r\n    onOptionAdded?: (newOption: IOption) => void; // Optional function that can be used to add a new option to the menu\r\n    onOptionSelected: (selectedOptionValue: string) => void;\r\n    selectedOptionValue: string; // The value of the currently selected option\r\n    validateNewOptionValue?: (newOptionValue: string) => boolean; // Optional function that can be used to validate the value of a new option\r\n    addOptionText?: string; // Optional text to display on the add option button\r\n}\r\n\r\n/**\r\n * We have two possible states. The user starts in the Default option, and can choose to\r\n * add a new option.\r\n */\r\nenum OptionStates {\r\n    Default = 0, // Default state,\r\n    Adding = 1, // State when the user is adding a new option to the menu\r\n}\r\n\r\nconst _OptionAddKey = \"addCustomOption\";\r\n\r\nexport const OptionsLineComponent = (props: IOptionsLineComponentProps) => {\r\n    const [optionState, setOptionState] = useState(OptionStates.Default); // State of the component\r\n\r\n    const onOptionChange = (evt: ChangeEvent<HTMLSelectElement>) => {\r\n        if (evt.target.value === _OptionAddKey) {\r\n            setOptionState(OptionStates.Adding);\r\n        } else {\r\n            props.onOptionSelected(evt.target.value);\r\n        }\r\n    };\r\n\r\n    const onOptionAdd = (value: string) => {\r\n        const newOptionText = value;\r\n        const newOption = { label: newOptionText, value: newOptionText, id: Date.now().toString() };\r\n        props.onOptionAdded?.(newOption);\r\n        props.onOptionSelected(newOption.value);\r\n        setOptionState(OptionStates.Default);\r\n    };\r\n\r\n    const onCancelOptionAdd = () => {\r\n        setOptionState(OptionStates.Default);\r\n    };\r\n\r\n    return (\r\n        <div className={style.optionsLine}>\r\n            {optionState === OptionStates.Adding && (\r\n                <TextInputWithSubmit\r\n                    submitValue={onOptionAdd}\r\n                    placeholder={props.addOptionPlaceholder}\r\n                    validateValue={props.validateNewOptionValue}\r\n                    cancelSubmit={onCancelOptionAdd}\r\n                />\r\n            )}\r\n            {optionState === OptionStates.Default && (\r\n                <select className={style.optionsSelect} onChange={onOptionChange} value={props.selectedOptionValue}>\r\n                    {props.onOptionAdded && (\r\n                        <option key={_OptionAddKey} value={_OptionAddKey}>\r\n                            {props.addOptionText ?? \"Custom\"}\r\n                        </option>\r\n                    )}\r\n                    {props.options.map((option) => (\r\n                        <option key={option.id} value={option.value}>\r\n                            {option.label}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n"]}
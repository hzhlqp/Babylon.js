{"version":3,"file":"GraphNode.js","sourceRoot":"","sources":["../../../src/components/reactGraphSystem/GraphNode.tsx"],"names":[],"mappings":";AACA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,qBAAqB,EAAE,MAAM,wBAAwB,CAAC;AAC/D,OAAO,KAAK,MAAM,0BAA0B,CAAC;AAC7C,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AAcpD,MAAM,CAAC,MAAM,eAAe,GAAwB,CAAC,KAAK,EAAE,EAAE;IAC1D,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,KAAK,GAAG,GAAG,EAAE,MAAM,GAAG,EAAE,EAAE,WAAW,EAAE,iBAAiB,EAAE,GAAG,KAAK,CAAC;IACrG,MAAM,EAAE,cAAc,EAAE,GAAG,eAAe,EAAE,CAAC;IAE7C,MAAM,CAAC,EAAE,OAAO,CAAC,GAAG,OAAO,CACvB,GAAG,EAAE,CAAC,CAAC;QACH,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,EAAE,EAAE,EAAE,iBAAiB,EAAE;QAC/B,OAAO,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACnB,MAAM,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE;SACjC,CAAC;KACL,CAAC,EACF,EAAE,CACL,CAAC;IAEF,MAAM,OAAO,GAAG,GAAG,EAAE;QACjB,cAAc,IAAI,cAAc,CAAC,EAAE,CAAC,CAAC;IACzC,CAAC,CAAC;IAEF,OAAO,CACH,cACI,GAAG,EAAE,OAAO,EACZ,SAAS,EAAE,UAAU,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,EAAE,KAAK,CAAC,EACnE,KAAK,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,QAAQ,EAAE,KAAK,GAAG,IAAI,EAAE,SAAS,EAAE,MAAM,GAAG,IAAI,EAAE,EAC5E,OAAO,EAAE,OAAO,YAEhB,eAAK,SAAS,EAAE,KAAK,CAAC,SAAS,aAC3B,uBAAK,IAAI,GAAM,EACf,KAAC,qBAAqB,IAClB,iBAAiB,EAAE,iBAAiB,EACpC,QAAQ,EAAE,EAAE,EACZ,OAAO,EAAE,CAAC,EACV,OAAO,EAAE,CAAC,EACV,OAAO,EAAE,CAAC,MAAM,GAAG,CAAC,EACpB,WAAW,EAAE,KAAK,EAClB,YAAY,EAAE,MAAM,GACtB,EACD,KAAK,CAAC,QAAQ,IACb,GACJ,CACT,CAAC;AACN,CAAC,CAAC","sourcesContent":["import type { FC } from \"react\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { ClassNames } from \"../classNames\";\r\nimport { GraphConnectorHandler } from \"./GraphConnectorHandle\";\r\nimport style from \"./GraphNode.modules.scss\";\r\nimport { useGraphContext } from \"./useGraphContext\";\r\n\r\nexport interface IGraphNodeProps {\r\n    id: string;\r\n    name: string;\r\n    x: number;\r\n    y: number;\r\n    selected?: boolean;\r\n    width?: number;\r\n    height?: number;\r\n    highlighted?: boolean;\r\n    parentContainerId: string;\r\n}\r\n\r\nexport const SingleGraphNode: FC<IGraphNodeProps> = (props) => {\r\n    const { id, name, x, y, selected, width = 100, height = 40, highlighted, parentContainerId } = props;\r\n    const { onNodeSelected } = useGraphContext();\r\n\r\n    const [, dragRef] = useDrag(\r\n        () => ({\r\n            type: \"node\",\r\n            item: { id, parentContainerId },\r\n            collect: (monitor) => ({\r\n                isDrag: !!monitor.isDragging(),\r\n            }),\r\n        }),\r\n        []\r\n    );\r\n\r\n    const onClick = () => {\r\n        onNodeSelected && onNodeSelected(id);\r\n    };\r\n\r\n    return (\r\n        <div\r\n            ref={dragRef}\r\n            className={ClassNames({ node: true, selected, highlighted }, style)}\r\n            style={{ left: x, top: y, minWidth: width + \"px\", minHeight: height + \"px\" }}\r\n            onClick={onClick}\r\n        >\r\n            <div className={style.container}>\r\n                <h2>{name}</h2>\r\n                <GraphConnectorHandler\r\n                    parentContainerId={parentContainerId}\r\n                    parentId={id}\r\n                    parentX={x}\r\n                    parentY={y}\r\n                    offsetY={-height / 2}\r\n                    parentWidth={width}\r\n                    parentHeight={height}\r\n                />\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"]}
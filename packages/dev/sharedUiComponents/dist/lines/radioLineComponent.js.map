{"version":3,"file":"radioLineComponent.js","sourceRoot":"","sources":["../../src/lines/radioLineComponent.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAa/B,MAAM,OAAO,wBAAyB,SAAQ,KAAK,CAAC,SAAkE;IAGlH,YAAY,KAAqC;QAC7C,KAAK,CAAC,KAAK,CAAC,CAAC;QAEb,IAAI,CAAC,KAAK,GAAG,EAAE,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE,CAAC;IACzD,CAAC;IAEQ,iBAAiB;QACtB,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,KAAK,CAAC,4BAA4B,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;YACrF,IAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,KAAK,KAAK,IAAI,EAAE,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACP,CAAC;IAEQ,oBAAoB;QACzB,IAAI,IAAI,CAAC,2BAA2B,EAAE;YAClC,IAAI,CAAC,KAAK,CAAC,4BAA4B,CAAC,MAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;YACjF,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC;SAC3C;IACL,CAAC;IAED,QAAQ;QACJ,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QACtB,IAAI,CAAC,KAAK,CAAC,4BAA4B,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IAClE,CAAC;IAEQ,MAAM;QACX,OAAO,CACH,eAAK,SAAS,EAAC,WAAW,aACrB,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,cAAK,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,SAAS,EAAC,MAAM,GAAG,EAC1H,cAAK,SAAS,EAAC,OAAO,EAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,YACzC,IAAI,CAAC,KAAK,CAAC,KAAK,GACf,EACN,eAAK,SAAS,EAAC,gBAAgB,aAC3B,gBAAO,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,SAAS,EAAC,OAAO,EAAC,IAAI,EAAC,OAAO,EAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAI,EAC/H,gBAAO,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,SAAS,EAAC,eAAe,GAAG,IAC5D,IACJ,CACT,CAAC;IACN,CAAC;CACJ","sourcesContent":["import * as React from \"react\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer, Observable } from \"core/Misc/observable\";\r\n\r\ninterface IRadioButtonLineComponentProps {\r\n    onSelectionChangedObservable: Observable<RadioButtonLineComponent>;\r\n    label: string;\r\n    isSelected: () => boolean;\r\n    onSelect: () => void;\r\n    icon?: string;\r\n    iconLabel?: string;\r\n}\r\n\r\nexport class RadioButtonLineComponent extends React.Component<IRadioButtonLineComponentProps, { isSelected: boolean }> {\r\n    private _onSelectionChangedObserver: Nullable<Observer<RadioButtonLineComponent>>;\r\n\r\n    constructor(props: IRadioButtonLineComponentProps) {\r\n        super(props);\r\n\r\n        this.state = { isSelected: this.props.isSelected() };\r\n    }\r\n\r\n    override componentDidMount() {\r\n        this._onSelectionChangedObserver = this.props.onSelectionChangedObservable.add((value) => {\r\n            this.setState({ isSelected: value === this });\r\n        });\r\n    }\r\n\r\n    override componentWillUnmount() {\r\n        if (this._onSelectionChangedObserver) {\r\n            this.props.onSelectionChangedObservable.remove(this._onSelectionChangedObserver);\r\n            this._onSelectionChangedObserver = null;\r\n        }\r\n    }\r\n\r\n    onChange() {\r\n        this.props.onSelect();\r\n        this.props.onSelectionChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    override render() {\r\n        return (\r\n            <div className=\"radioLine\">\r\n                {this.props.icon && <img src={this.props.icon} title={this.props.iconLabel} alt={this.props.iconLabel} className=\"icon\" />}\r\n                <div className=\"label\" title={this.props.label}>\r\n                    {this.props.label}\r\n                </div>\r\n                <div className=\"radioContainer\">\r\n                    <input id={this.props.label} className=\"radio\" type=\"radio\" checked={this.state.isSelected} onChange={() => this.onChange()} />\r\n                    <label htmlFor={this.props.label} className=\"labelForRadio\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
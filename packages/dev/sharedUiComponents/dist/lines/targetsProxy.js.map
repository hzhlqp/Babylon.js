{"version":3,"file":"targetsProxy.js","sourceRoot":"","sources":["../../src/lines/targetsProxy.tsx"],"names":[],"mappings":"AAGA,MAAM,CAAC,MAAM,4BAA4B,GAAG,GAAG,CAAC;AAEhD;;;;;;GAMG;AACH,MAAM,UAAU,gBAAgB,CAC5B,OAAe,EACf,2BAA8D,EAC9D,cAA2D,CAAC,MAAM,EAAE,QAAQ,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC;IAEjG,OAAO,IAAI,KAAK,CACZ,EAAE,EACF;QACI,GAAG,CAAC,CAAC,EAAE,IAAI;YACP,MAAM,QAAQ,GAAG,IAAkB,CAAC;YACpC,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC;gBAAE,OAAO,4BAA4B,CAAC;YAC9D,MAAM,UAAU,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;YACrD,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;gBAC1B,IAAI,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,KAAK,UAAU,EAAE;oBAC9C,OAAO,4BAA4B,CAAC;iBACvC;aACJ;YACD,OAAO,UAAU,CAAC;QACtB,CAAC;QACD,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK;YACd,IAAI,KAAK,KAAK,GAAG;gBAAE,OAAO,IAAI,CAAC;YAC/B,MAAM,QAAQ,GAAG,IAAkB,CAAC;YACpC,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;gBAC1B,MAAM,YAAY,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;gBACtC,MAAM,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;gBACzB,IAAI,2BAA2B,EAAE;oBAC7B,2BAA2B,CAAC,eAAe,CAAC;wBACxC,MAAM,EAAE,MAAM;wBACd,QAAQ,EAAE,IAAc;wBACxB,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC;wBACvB,YAAY;qBACf,CAAC,CAAC;iBACN;aACJ;YACD,OAAO,IAAI,CAAC;QAChB,CAAC;KACJ,CACG,CAAC;AACb,CAAC","sourcesContent":["import type { PropertyChangedEvent } from \"../propertyChangedEvent\";\r\nimport type { Observable } from \"core/Misc/observable\";\r\n\r\nexport const conflictingValuesPlaceholder = \"—\";\r\n\r\n/**\r\n *\r\n * @param targets a list of selected targets\r\n * @param onPropertyChangedObservable\r\n * @param getProperty\r\n * @returns a proxy object that can be passed as a target into the input\r\n */\r\nexport function makeTargetsProxy<Type>(\r\n    targets: Type[],\r\n    onPropertyChangedObservable?: Observable<PropertyChangedEvent>,\r\n    getProperty: (target: Type, property: keyof Type) => any = (target, property) => target[property]\r\n) {\r\n    return new Proxy(\r\n        {},\r\n        {\r\n            get(_, name) {\r\n                const property = name as keyof Type;\r\n                if (targets.length === 0) return conflictingValuesPlaceholder;\r\n                const firstValue = getProperty(targets[0], property);\r\n                for (const target of targets) {\r\n                    if (getProperty(target, property) !== firstValue) {\r\n                        return conflictingValuesPlaceholder;\r\n                    }\r\n                }\r\n                return firstValue;\r\n            },\r\n            set(_, name, value) {\r\n                if (value === \"—\") return true;\r\n                const property = name as keyof Type;\r\n                for (const target of targets) {\r\n                    const initialValue = target[property];\r\n                    target[property] = value;\r\n                    if (onPropertyChangedObservable) {\r\n                        onPropertyChangedObservable.notifyObservers({\r\n                            object: target,\r\n                            property: name as string,\r\n                            value: target[property],\r\n                            initialValue,\r\n                        });\r\n                    }\r\n                }\r\n                return true;\r\n            },\r\n        }\r\n    ) as any;\r\n}\r\n"]}
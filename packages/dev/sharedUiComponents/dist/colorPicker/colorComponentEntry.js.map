{"version":3,"file":"colorComponentEntry.js","sourceRoot":"","sources":["../../src/colorPicker/colorComponentEntry.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAa/B,MAAM,OAAO,mBAAoB,SAAQ,KAAK,CAAC,SAAoC;IAC/E,YAAY,KAAgC;QACxC,KAAK,CAAC,KAAK,CAAC,CAAC;IACjB,CAAC;IAED,WAAW,CAAC,WAAmB;QAC3B,IAAI,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YAC/B,OAAO;SACV;QAED,IAAI,aAAa,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC;QAE1C,IAAI,KAAK,CAAC,aAAa,CAAC,EAAE;YACtB,OAAO;SACV;QACD,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,SAAS,IAAI,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE;YAC/D,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;SAClC;QACD,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,SAAS,IAAI,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE;YAC/D,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;SAClC;QAED,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;IACvC,CAAC;IAED,IAAI;QACA,IAAI,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;YACvB,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;SACrC;IACL,CAAC;IAED,MAAM;QACF,IAAI,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;YACvB,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,GAAG,KAAK,CAAC;SACtC;IACL,CAAC;IAEe,MAAM;QAClB,OAAO,CACH,eAAK,SAAS,EAAC,wBAAwB,aACnC,cAAK,SAAS,EAAC,8BAA8B,YACzC,gBACI,IAAI,EAAC,QAAQ,EACb,IAAI,EAAE,CAAC,EACP,SAAS,EAAC,eAAe,EACzB,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EACvB,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,EAC3B,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,EAC1B,QAAQ,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EACrD,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,GAC/B,GACA,EACN,cAAK,SAAS,EAAC,8BAA8B,YAAE,IAAI,CAAC,KAAK,CAAC,KAAK,GAAO,IACpE,CACT,CAAC;IACN,CAAC;CACJ","sourcesContent":["import * as React from \"react\";\r\nimport type { LockObject } from \"../tabs/propertyGrids/lockObject\";\r\n\r\nexport interface IColorComponentEntryProps {\r\n    value: number;\r\n    label: string;\r\n    max?: number;\r\n    min?: number;\r\n    onChange: (value: number) => void;\r\n    disabled?: boolean;\r\n    lockObject: LockObject;\r\n}\r\n\r\nexport class ColorComponentEntry extends React.Component<IColorComponentEntryProps> {\r\n    constructor(props: IColorComponentEntryProps) {\r\n        super(props);\r\n    }\r\n\r\n    updateValue(valueString: string) {\r\n        if (/[^0-9.-]/g.test(valueString)) {\r\n            return;\r\n        }\r\n\r\n        let valueAsNumber = parseInt(valueString);\r\n\r\n        if (isNaN(valueAsNumber)) {\r\n            return;\r\n        }\r\n        if (this.props.max != undefined && valueAsNumber > this.props.max) {\r\n            valueAsNumber = this.props.max;\r\n        }\r\n        if (this.props.min != undefined && valueAsNumber < this.props.min) {\r\n            valueAsNumber = this.props.min;\r\n        }\r\n\r\n        this.props.onChange(valueAsNumber);\r\n    }\r\n\r\n    lock() {\r\n        if (this.props.lockObject) {\r\n            this.props.lockObject.lock = true;\r\n        }\r\n    }\r\n\r\n    unlock() {\r\n        if (this.props.lockObject) {\r\n            this.props.lockObject.lock = false;\r\n        }\r\n    }\r\n\r\n    public override render() {\r\n        return (\r\n            <div className=\"color-picker-component\">\r\n                <div className=\"color-picker-component-value\">\r\n                    <input\r\n                        type=\"number\"\r\n                        step={1}\r\n                        className=\"numeric-input\"\r\n                        value={this.props.value}\r\n                        onBlur={() => this.unlock()}\r\n                        onFocus={() => this.lock()}\r\n                        onChange={(evt) => this.updateValue(evt.target.value)}\r\n                        disabled={this.props.disabled}\r\n                    />\r\n                </div>\r\n                <div className=\"color-picker-component-label\">{this.props.label}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]}
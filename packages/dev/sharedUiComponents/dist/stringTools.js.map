{"version":3,"file":"stringTools.js","sourceRoot":"","sources":["../src/stringTools.ts"],"names":[],"mappings":"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","sourcesContent":["export class StringTools {\r\n    /*\r\n     * Based on FileSaver.js\r\n     * A saveAs() FileSaver implementation.\r\n     *\r\n     * By Eli Grey, http://eligrey.com\r\n     *\r\n     * License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\r\n     * source  : http://purl.eligrey.com/github/FileSaver.js\r\n     */\r\n    private static _SaveAs(blob: Blob, name: string, document: HTMLDocument) {\r\n        if (\"download\" in HTMLAnchorElement.prototype) {\r\n            const URL = window.URL || window.webkitURL;\r\n            const a = document.createElement(\"a\");\r\n\r\n            a.download = name;\r\n            a.rel = \"noopener\"; // tabnabbing\r\n\r\n            a.href = URL.createObjectURL(blob);\r\n            setTimeout(() => {\r\n                URL.revokeObjectURL(a.href);\r\n            }, 4e4); // 40s\r\n            setTimeout(() => {\r\n                this._Click(a, document);\r\n            }, 0);\r\n            return;\r\n        }\r\n\r\n        // Open a popup immediately do go around popup blocker\r\n        // Mostly only available on user interaction and the fileReader is async so...\r\n        let popup = open(\"\", \"_blank\");\r\n        if (popup) {\r\n            popup.document.title = popup.document.body.innerText = \"downloading...\";\r\n        }\r\n\r\n        const force = blob.type === \"application/octet-stream\";\r\n        const isSafari = /constructor/i.test((window as any).HTMLElement) || (window as any).safari;\r\n        const isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent);\r\n\r\n        if ((isChromeIOS || (force && isSafari)) && typeof FileReader !== \"undefined\") {\r\n            // Safari doesn't allow downloading of blob URLs\r\n            const reader = new FileReader();\r\n            reader.onloadend = () => {\r\n                let url: any = reader.result;\r\n                url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, \"data:attachment/file;\");\r\n                if (popup) {\r\n                    popup.location.href = url;\r\n                } else {\r\n                    location.href = url;\r\n                }\r\n                popup = null;\r\n            };\r\n            reader.readAsDataURL(blob);\r\n        } else {\r\n            const URL = window.URL || window.webkitURL;\r\n            const url = URL.createObjectURL(blob);\r\n            if (popup) {\r\n                popup.location.href = url;\r\n            } else {\r\n                location.href = url;\r\n            }\r\n            popup = null;\r\n            setTimeout(function () {\r\n                URL.revokeObjectURL(url);\r\n            }, 4e4);\r\n        }\r\n    }\r\n\r\n    private static _Click(node: HTMLElement, document: HTMLDocument) {\r\n        try {\r\n            node.dispatchEvent(new MouseEvent(\"click\"));\r\n        } catch (e) {\r\n            const evt = document.createEvent(\"MouseEvents\");\r\n            evt.initMouseEvent(\"click\", true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);\r\n            node.dispatchEvent(evt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Download a string into a file that will be saved locally by the browser\r\n     * @param document\r\n     * @param content defines the string to download locally as a file\r\n     * @param filename\r\n     */\r\n    public static DownloadAsFile(document: HTMLDocument, content: string, filename: string) {\r\n        const blob = new Blob([content], {\r\n            type: \"application/octet-stream\",\r\n        });\r\n\r\n        this._SaveAs(blob, filename, document);\r\n    }\r\n}\r\n"]}